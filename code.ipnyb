{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "Multilabel ML_Assignment_2.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.3"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": false
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "e3b00c17fed2476e83fed318c901c600": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_832644e49e054413aa40ced166ab0ece",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_070876289fd14390b3050a7318a843b6",
              "IPY_MODEL_e0797627b95b4c1a88b36f2cf3110afa"
            ]
          }
        },
        "832644e49e054413aa40ced166ab0ece": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "070876289fd14390b3050a7318a843b6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_d682d11d3eb2439187d74418427ea0a7",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 254728,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 254728,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_b1797282e82b49bca3ea8bf9104b7d5b"
          }
        },
        "e0797627b95b4c1a88b36f2cf3110afa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_641c675906274c52816f4102340c9eaa",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 255k/255k [00:02&lt;00:00, 103kB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a1959703a5d343768e1a0d766c883023"
          }
        },
        "d682d11d3eb2439187d74418427ea0a7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "b1797282e82b49bca3ea8bf9104b7d5b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "641c675906274c52816f4102340c9eaa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a1959703a5d343768e1a0d766c883023": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f0b3344cf2c6463388150ffcb3a81acc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_85ae54d4d1964a32bac096bda22dfd2d",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_a81df7971ba94c7f908332095f0b45ad",
              "IPY_MODEL_eff4265bf39c40e7958550d5dbda5af4"
            ]
          }
        },
        "85ae54d4d1964a32bac096bda22dfd2d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a81df7971ba94c7f908332095f0b45ad": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_71802be9b04242139576e25d24ed73d9",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 29,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 29,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_955b70d5ccf8434b9b9db7a0629701f3"
          }
        },
        "eff4265bf39c40e7958550d5dbda5af4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_213bff2f7c8b4b96b0351768bed88c63",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 29.0/29.0 [00:01&lt;00:00, 28.5B/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_3e11a3628a704ca79960390013ca356b"
          }
        },
        "71802be9b04242139576e25d24ed73d9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "955b70d5ccf8434b9b9db7a0629701f3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "213bff2f7c8b4b96b0351768bed88c63": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "3e11a3628a704ca79960390013ca356b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "58bd7e71115644e48e469e6b574bbf53": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_b43b973d13184790add90745109f1f95",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_5cbfc63e59c449f08d2ed1b0a63f3715",
              "IPY_MODEL_f3072d9a3d894807aefcbd787483fce3"
            ]
          }
        },
        "b43b973d13184790add90745109f1f95": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "5cbfc63e59c449f08d2ed1b0a63f3715": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_365d5f9ec3b94c08a6115c1fe4b95694",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 485115,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 485115,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5e3749f370054241b3a45606b381ff41"
          }
        },
        "f3072d9a3d894807aefcbd787483fce3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_a35cf7b04af84d0cb1db81513bf2e891",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 485k/485k [00:00&lt;00:00, 1.11MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_cd032b53428f450b8fef02daefb57fcd"
          }
        },
        "365d5f9ec3b94c08a6115c1fe4b95694": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5e3749f370054241b3a45606b381ff41": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a35cf7b04af84d0cb1db81513bf2e891": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "cd032b53428f450b8fef02daefb57fcd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d220f4b3a69b4de69c342fe521ed8598": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_a5044cb903f749deae501dbe93ecfcaf",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_d326afbffae140b6b579fa9e5feaccad",
              "IPY_MODEL_1a67764b35ad4b62990463f291c706bd"
            ]
          }
        },
        "a5044cb903f749deae501dbe93ecfcaf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d326afbffae140b6b579fa9e5feaccad": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_1cd961c871a0438fb4998a56710d6444",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 995526,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 995526,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_8b1a8d7355d04b0ab8b574ff287afd03"
          }
        },
        "1a67764b35ad4b62990463f291c706bd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_18aea5e58f8a47e186aed38fdff405f1",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 996k/996k [00:00&lt;00:00, 3.16MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_405b4ebdfc434a1aa45ac5e5dc3d3ac9"
          }
        },
        "1cd961c871a0438fb4998a56710d6444": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "8b1a8d7355d04b0ab8b574ff287afd03": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "18aea5e58f8a47e186aed38fdff405f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "405b4ebdfc434a1aa45ac5e5dc3d3ac9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4cede60785e0405cb8135c84616d6aae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_696159ebbc524060979af8e2e3212e8c",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_241cf76d60b04ac0bad85d80f666785a",
              "IPY_MODEL_e70f7702c8884ad5a946229d17b0944f"
            ]
          }
        },
        "696159ebbc524060979af8e2e3212e8c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "241cf76d60b04ac0bad85d80f666785a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_c9c83d1ceb9a412eb70528b34309ca8a",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 29,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 29,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_717762cc701840a69020c13cd7cf8e9e"
          }
        },
        "e70f7702c8884ad5a946229d17b0944f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_16ae3b3f70da43858e7a783133f02767",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 29.0/29.0 [00:00&lt;00:00, 69.3B/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_bebe58b26c964ae49ea44f5c0e958e14"
          }
        },
        "c9c83d1ceb9a412eb70528b34309ca8a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "717762cc701840a69020c13cd7cf8e9e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "16ae3b3f70da43858e7a783133f02767": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "bebe58b26c964ae49ea44f5c0e958e14": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "fad1dccd3dc74a13a8dd58753b47d73e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_b95274570e734afd9c035cc150b0d7bf",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_2414fd95a2714b638c782ce9e2dab4f0",
              "IPY_MODEL_b0615044a7634920a79cb6d3af1b7436"
            ]
          }
        },
        "b95274570e734afd9c035cc150b0d7bf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2414fd95a2714b638c782ce9e2dab4f0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_e917df1d647440759870fa84fe74adcf",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 1961828,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1961828,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_330060ee0ac849edbab67ad03232e42e"
          }
        },
        "b0615044a7634920a79cb6d3af1b7436": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_117f2d2b430944c5a3ec0ed95ad6bd87",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 1.96M/1.96M [00:00&lt;00:00, 8.35MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5c86ba8f182540b4a52447b3dacac3b1"
          }
        },
        "e917df1d647440759870fa84fe74adcf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "330060ee0ac849edbab67ad03232e42e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "117f2d2b430944c5a3ec0ed95ad6bd87": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5c86ba8f182540b4a52447b3dacac3b1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "33e35aa120bc457cb64839b71e1f4aa7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_e028799a49e24ef6ad8850504d65a1ed",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_55076e086dca4349adf89169518f32da",
              "IPY_MODEL_73f19f993ee84b3488dc4904137052fb"
            ]
          }
        },
        "e028799a49e24ef6ad8850504d65a1ed": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "55076e086dca4349adf89169518f32da": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_239f44ea571244dc89c8a941ce5bdc11",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 433,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 433,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_05d949439c23443d9627ea183c6e6d92"
          }
        },
        "73f19f993ee84b3488dc4904137052fb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_616e527baa42421bbe7585edb7009c8b",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 433/433 [00:01&lt;00:00, 410B/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_0e5dcadf25ae4a55a4d2b85500c48d67"
          }
        },
        "239f44ea571244dc89c8a941ce5bdc11": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "05d949439c23443d9627ea183c6e6d92": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "616e527baa42421bbe7585edb7009c8b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "0e5dcadf25ae4a55a4d2b85500c48d67": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6bb2546095574d6f97aa8ff403a25ca5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_190c836c7af1444bbda11713544d8542",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_4a02c3d847f343648c3cda36ce9bfda8",
              "IPY_MODEL_ac57f0fa93ca4e99bd09f15fd828aecf"
            ]
          }
        },
        "190c836c7af1444bbda11713544d8542": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4a02c3d847f343648c3cda36ce9bfda8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_6b9652df1c704644930d1d31239b5539",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 438869143,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 438869143,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_1001274e2ac54899ae54f4c427052140"
          }
        },
        "ac57f0fa93ca4e99bd09f15fd828aecf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_606e5d46052848999243417bd75e72f9",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 439M/439M [00:11&lt;00:00, 39.2MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_c42b7ca071b94ab2a0d6fbea37a46194"
          }
        },
        "6b9652df1c704644930d1d31239b5539": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "1001274e2ac54899ae54f4c427052140": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "606e5d46052848999243417bd75e72f9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "c42b7ca071b94ab2a0d6fbea37a46194": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2a3a49aafb1b4556a186c6b9aa496055": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_d87f4c62e69d45c2a7bb182a80bc3898",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_51ca169b995e409789eb92cd9891ace7",
              "IPY_MODEL_b1682ac9144c41c9b6eca5d409b9c6a4"
            ]
          }
        },
        "d87f4c62e69d45c2a7bb182a80bc3898": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "51ca169b995e409789eb92cd9891ace7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_c01c10e0d106453484d56882d4b3716b",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 625,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 625,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_88cb07f35a7c415c90b942c0ebcbf331"
          }
        },
        "b1682ac9144c41c9b6eca5d409b9c6a4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_1c92e9a80b4646b99eb5f52327ad3a5e",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 625/625 [00:00&lt;00:00, 2.69kB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_0b4692d64e814ea087c537b806254b0a"
          }
        },
        "c01c10e0d106453484d56882d4b3716b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "88cb07f35a7c415c90b942c0ebcbf331": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "1c92e9a80b4646b99eb5f52327ad3a5e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "0b4692d64e814ea087c537b806254b0a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "0ab363dd1f76491d970b76adf86b1c48": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_225ac301a97441adad27a3f128ff327e",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_d518ff179e834a768e58f4efbd512377",
              "IPY_MODEL_c4205d1214c944f483aef7c91c4ef9db"
            ]
          }
        },
        "225ac301a97441adad27a3f128ff327e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d518ff179e834a768e58f4efbd512377": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_e285b29077854290b49e3ad7f5f7cb89",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 714314041,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 714314041,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_9c496c9e3f6147b3b8a16dc3e0097b94"
          }
        },
        "c4205d1214c944f483aef7c91c4ef9db": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_6b4ff50004084e2c934beefdcff2f265",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 714M/714M [00:24&lt;00:00, 29.7MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_df5a4ec898b246b08139c46f349ca4b0"
          }
        },
        "e285b29077854290b49e3ad7f5f7cb89": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "9c496c9e3f6147b3b8a16dc3e0097b94": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6b4ff50004084e2c934beefdcff2f265": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "df5a4ec898b246b08139c46f349ca4b0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lukasbirki/BERT_SA_Corona_Warn_App/blob/main/Multilabel_ML_Assignment_2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MOQ7VJuhJYcK"
      },
      "source": [
        "# Assignment ML 2"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2z1aCFrYb0w2"
      },
      "source": [
        "Approach:\n",
        "- Loading Data and preprocessing\n",
        "- Model 1: Multilinual Model\n",
        "- Model 2: Monolongual Model (German)\n",
        "\n",
        "Compare Results\n",
        "\n",
        "Source: \n",
        "- https://mccormickml.com/2019/07/22/BERT-fine-tuning/\n",
        "- https://github.com/JoMingyu/google-play-scraper\n",
        "- https://www.philschmid.de/bert-text-classification-in-a-different-language"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cIJ2R966pDYW"
      },
      "source": [
        "# A. Setting up Environment"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cr0mfZklp3No"
      },
      "source": [
        "### Connect to Google Drive, install necessary packages and connect to GPU"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "mOkM5pBrLHt_",
        "outputId": "5393261c-0159-4003-e52a-79f9e8c2abe7"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "5ko0wzOFJYcR",
        "outputId": "9bf74e86-9567-448a-fefe-91f568bd6348"
      },
      "source": [
        "! pip install transformers\n",
        "import os\n",
        "os.environ['CUDA_LAUNCH_BLOCKING'] = \"1\"\n",
        "import keras\n",
        "print(keras.__version__)\n",
        "\n",
        "import os\n",
        "os.environ['KMP_DUPLICATE_LIB_OK']='True'\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import altair as alt\n",
        "import transformers\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.utils import shuffle\n",
        "import tensorflow as tf\n",
        "from transformers import BertTokenizer"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting transformers\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/81/91/61d69d58a1af1bd81d9ca9d62c90a6de3ab80d77f27c5df65d9a2c1f5626/transformers-4.5.0-py3-none-any.whl (2.1MB)\n",
            "\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2.2MB 15.2MB/s \n",
            "\u001b[?25hRequirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2019.12.20)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.19.5)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.0.12)\n",
            "Collecting sacremoses\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/08/cd/342e584ee544d044fb573ae697404ce22ede086c9e87ce5960772084cad0/sacremoses-0.0.44.tar.gz (862kB)\n",
            "\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 870kB 66.9MB/s \n",
            "\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n",
            "Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from transformers) (3.8.1)\n",
            "Collecting tokenizers<0.11,>=0.10.1\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ae/04/5b870f26a858552025a62f1649c20d29d2672c02ff3c3fb4c688ca46467a/tokenizers-0.10.2-cp37-cp37m-manylinux2010_x86_64.whl (3.3MB)\n",
            "\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3.3MB 54.8MB/s \n",
            "\u001b[?25hRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.41.1)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers) (20.9)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.15.0)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (7.1.2)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.0.1)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2020.12.5)\n",
            "Requirement already satisfied: typing-extensions>=3.6.4; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers) (3.7.4.3)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers) (3.4.1)\n",
            "Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers) (2.4.7)\n",
            "Building wheels for collected packages: sacremoses\n",
            "  Building wheel for sacremoses (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for sacremoses: filename=sacremoses-0.0.44-cp37-none-any.whl size=886084 sha256=d8e60ec5cb149e269e4091f59e2c69f1cf50db164e860ad234e2076ad3658cd2\n",
            "  Stored in directory: /root/.cache/pip/wheels/3e/fb/c0/13ab4d63d537658f448366744654323077c4d90069b6512f3c\n",
            "Successfully built sacremoses\n",
            "Installing collected packages: sacremoses, tokenizers, transformers\n",
            "Successfully installed sacremoses-0.0.44 tokenizers-0.10.2 transformers-4.5.0\n",
            "2.4.3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "0bTd1ZDnodPn",
        "outputId": "3150dd81-8fe2-448a-cddd-9941e17c9d0a"
      },
      "source": [
        "# Get the GPU device name.\n",
        "device_name = tf.test.gpu_device_name()\n",
        "\n",
        "# The device name should look like the following:\n",
        "if device_name == '/device:GPU:0':\n",
        "    print('Found GPU at: {}'.format(device_name))\n",
        "else:\n",
        "    raise SystemError('GPU device not found')\n",
        "\n",
        "import torch\n",
        "\n",
        "# If there's a GPU available...\n",
        "if torch.cuda.is_available():    \n",
        "\n",
        "    # Tell PyTorch to use the GPU.    \n",
        "    device = torch.device(\"cuda\")\n",
        "\n",
        "    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n",
        "\n",
        "    print('We will use the GPU:', torch.cuda.get_device_name(0))\n",
        "\n",
        "# If not...\n",
        "else:\n",
        "    print('No GPU available, using the CPU instead.')\n",
        "    device = torch.device(\"cpu\")"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found GPU at: /device:GPU:0\n",
            "There are 1 GPU(s) available.\n",
            "We will use the GPU: Tesla P100-PCIE-16GB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qoBKl_0Am5KA"
      },
      "source": [
        "### Loading Data, shuffling and splitting them into train and test set"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_z4zKx-jJYcT"
      },
      "source": [
        "## Explorativ Data Analysis"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "Oc--q7hmJYcT",
        "outputId": "567531c5-a25c-4831-ff3d-0fdfeedd1f68"
      },
      "source": [
        "df_Corona = pd.read_csv('/content/drive/MyDrive/Colab_Machine_Learning/50000_App.csv')\n",
        "#Shuffling Data\n",
        "df_Corona = shuffle(df_Corona)\n",
        "\n",
        "#Creating new Variable with positive, neutral and negative\n",
        "conditions_df = [\n",
        "    (df_Corona[\"score\"] == 5),\n",
        "    (df_Corona[\"score\"].gt(1) & df_Corona[\"score\"].lt(5)),\n",
        "    (df_Corona[\"score\"] == 1),]\n",
        "choices = [3, 2, 1]\n",
        "df_Corona[\"adjusted\"] = np.select(conditions_df, choices)\n",
        "\n",
        "#Subsetting \n",
        "reviews = df_Corona.content\n",
        "stars = df_Corona.score\n",
        "stars_adjusted = df_Corona.adjusted\n",
        "stars = stars -1\n",
        "stars_adjusted = stars_adjusted -1\n",
        "\n",
        "print(df_Corona.shape)\n",
        "\n"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(50966, 12)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t_JFxPbQJYcT"
      },
      "source": [
        "Univariate Distribution of Ratings"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "OIxdVdw_JYcT",
        "scrolled": true,
        "outputId": "38cc318c-d2a3-4570-ffd4-5c4027e6cb16"
      },
      "source": [
        "sns.countplot(x = 'score', data = df_Corona).set_title('Histogramm of Ratings on all Reviews')"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Histogramm of Ratings on all Reviews')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HAAyHCcDJYcU"
      },
      "source": [
        "Ratings over Time"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "id": "WSoRn6idJYcV",
        "scrolled": true,
        "outputId": "7311364c-2307-4cd1-fdd4-96854ad55929"
      },
      "source": [
        "df_Corona['at'] = pd.to_datetime(df_Corona['at'])\n",
        "df_Corona['date'] = pd.to_datetime(df_Corona['at']).dt.date\n",
        "df_Coronanew = df_Corona[['score','date']]\n",
        "df_Coronanew = pd.DataFrame(df_Coronanew)\n",
        "df_Coronanew = df_Coronanew.reset_index() \n",
        "x = df_Coronanew.groupby(['date','score']).count()\n",
        "y = x.reset_index()\n",
        "xyz = y.reset_index()\n",
        "xyz['date'] = pd.to_datetime(xyz['date'])\n",
        "\n",
        "alt.Chart(xyz).mark_line().encode(x=alt.X('date:T', title = 'Time', axis = alt.Axis(tickCount= 5)),\n",
        "y= alt.Y('index:Q', title = 'Absolute Number of Reviews'),\n",
        "color= alt.Color('score', title = 'Rating' ,type='nominal')\n",
        ").properties(width=700, height = 400,title = 'Number of Reviews for the \"Corona-Warn-App\"').configure_view(\n",
        "stroke='transparent'\n",
        ")"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "alt.Chart(...)"
            ],
            "text/html": [
              "\n",
              "<div id=\"altair-viz-01eec3b14e8845af9964153ff978bceb\"></div>\n",
              "<script type=\"text/javascript\">\n",
              "  (function(spec, embedOpt){\n",
              "    let outputDiv = document.currentScript.previousElementSibling;\n",
              "    if (outputDiv.id !== \"altair-viz-01eec3b14e8845af9964153ff978bceb\") {\n",
              "      outputDiv = document.getElementById(\"altair-viz-01eec3b14e8845af9964153ff978bceb\");\n",
              "    }\n",
              "    const paths = {\n",
              "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
              "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
              "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n",
              "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
              "    };\n",
              "\n",
              "    function loadScript(lib) {\n",
              "      return new Promise(function(resolve, reject) {\n",
              "        var s = document.createElement('script');\n",
              "        s.src = paths[lib];\n",
              "        s.async = true;\n",
              "        s.onload = () => resolve(paths[lib]);\n",
              "        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
              "        document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
              "      });\n",
              "    }\n",
              "\n",
              "    function showError(err) {\n",
              "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
              "      throw err;\n",
              "    }\n",
              "\n",
              "    function displayChart(vegaEmbed) {\n",
              "      vegaEmbed(outputDiv, spec, embedOpt)\n",
              "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
              "    }\n",
              "\n",
              "    if(typeof define === \"function\" && define.amd) {\n",
              "      requirejs.config({paths});\n",
              "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
              "    } else if (typeof vegaEmbed === \"function\") {\n",
              "      displayChart(vegaEmbed);\n",
              "    } else {\n",
              "      loadScript(\"vega\")\n",
              "        .then(() => loadScript(\"vega-lite\"))\n",
              "        .then(() => loadScript(\"vega-embed\"))\n",
              "        .catch(showError)\n",
              "        .then(() => displayChart(vegaEmbed));\n",
              "    }\n",
              "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300, \"stroke\": \"transparent\"}}, \"data\": {\"name\": \"data-d5369d8f03670832bcca23de9fffef98\"}, \"mark\": \"line\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"score\", \"title\": \"Rating\"}, \"x\": {\"type\": \"temporal\", \"axis\": {\"tickCount\": 5}, \"field\": \"date\", \"title\": \"Time\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"index\", \"title\": \"Absolute Number of Reviews\"}}, \"height\": 400, \"title\": \"Number of Reviews for the \\\"Corona-Warn-App\\\"\", \"width\": 700, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-d5369d8f03670832bcca23de9fffef98\": [{\"level_0\": 0, \"date\": \"2020-06-16T00:00:00\", \"score\": 1, \"index\": 824}, {\"level_0\": 1, \"date\": \"2020-06-16T00:00:00\", \"score\": 2, \"index\": 194}, {\"level_0\": 2, \"date\": \"2020-06-16T00:00:00\", \"score\": 3, \"index\": 266}, {\"level_0\": 3, \"date\": \"2020-06-16T00:00:00\", \"score\": 4, \"index\": 429}, {\"level_0\": 4, \"date\": \"2020-06-16T00:00:00\", \"score\": 5, \"index\": 5060}, {\"level_0\": 5, \"date\": \"2020-06-17T00:00:00\", \"score\": 1, \"index\": 310}, {\"level_0\": 6, \"date\": \"2020-06-17T00:00:00\", \"score\": 2, \"index\": 90}, {\"level_0\": 7, \"date\": \"2020-06-17T00:00:00\", \"score\": 3, \"index\": 128}, {\"level_0\": 8, \"date\": \"2020-06-17T00:00:00\", \"score\": 4, \"index\": 187}, {\"level_0\": 9, \"date\": \"2020-06-17T00:00:00\", \"score\": 5, \"index\": 1545}, {\"level_0\": 10, \"date\": \"2020-06-18T00:00:00\", \"score\": 1, \"index\": 216}, {\"level_0\": 11, \"date\": \"2020-06-18T00:00:00\", \"score\": 2, \"index\": 52}, {\"level_0\": 12, \"date\": \"2020-06-18T00:00:00\", \"score\": 3, \"index\": 96}, {\"level_0\": 13, \"date\": \"2020-06-18T00:00:00\", \"score\": 4, \"index\": 108}, {\"level_0\": 14, \"date\": \"2020-06-18T00:00:00\", \"score\": 5, \"index\": 689}, {\"level_0\": 15, \"date\": \"2020-06-19T00:00:00\", \"score\": 1, \"index\": 197}, {\"level_0\": 16, \"date\": \"2020-06-19T00:00:00\", \"score\": 2, \"index\": 70}, {\"level_0\": 17, \"date\": \"2020-06-19T00:00:00\", \"score\": 3, \"index\": 89}, {\"level_0\": 18, \"date\": \"2020-06-19T00:00:00\", \"score\": 4, \"index\": 63}, {\"level_0\": 19, \"date\": \"2020-06-19T00:00:00\", \"score\": 5, \"index\": 360}, {\"level_0\": 20, \"date\": \"2020-06-20T00:00:00\", \"score\": 1, \"index\": 203}, {\"level_0\": 21, \"date\": \"2020-06-20T00:00:00\", \"score\": 2, \"index\": 75}, {\"level_0\": 22, \"date\": \"2020-06-20T00:00:00\", \"score\": 3, \"index\": 68}, {\"level_0\": 23, \"date\": \"2020-06-20T00:00:00\", \"score\": 4, \"index\": 73}, {\"level_0\": 24, \"date\": \"2020-06-20T00:00:00\", \"score\": 5, \"index\": 289}, {\"level_0\": 25, \"date\": \"2020-06-21T00:00:00\", \"score\": 1, \"index\": 199}, {\"level_0\": 26, \"date\": \"2020-06-21T00:00:00\", \"score\": 2, \"index\": 50}, {\"level_0\": 27, \"date\": \"2020-06-21T00:00:00\", \"score\": 3, \"index\": 68}, {\"level_0\": 28, \"date\": \"2020-06-21T00:00:00\", \"score\": 4, \"index\": 75}, {\"level_0\": 29, \"date\": \"2020-06-21T00:00:00\", \"score\": 5, \"index\": 281}, {\"level_0\": 30, \"date\": \"2020-06-22T00:00:00\", \"score\": 1, \"index\": 116}, {\"level_0\": 31, \"date\": \"2020-06-22T00:00:00\", \"score\": 2, \"index\": 38}, {\"level_0\": 32, \"date\": \"2020-06-22T00:00:00\", \"score\": 3, \"index\": 45}, {\"level_0\": 33, \"date\": \"2020-06-22T00:00:00\", \"score\": 4, \"index\": 42}, {\"level_0\": 34, \"date\": \"2020-06-22T00:00:00\", \"score\": 5, \"index\": 215}, {\"level_0\": 35, \"date\": \"2020-06-23T00:00:00\", \"score\": 1, \"index\": 95}, {\"level_0\": 36, \"date\": \"2020-06-23T00:00:00\", \"score\": 2, \"index\": 27}, {\"level_0\": 37, \"date\": \"2020-06-23T00:00:00\", \"score\": 3, \"index\": 45}, {\"level_0\": 38, \"date\": \"2020-06-23T00:00:00\", \"score\": 4, \"index\": 37}, {\"level_0\": 39, \"date\": \"2020-06-23T00:00:00\", \"score\": 5, \"index\": 241}, {\"level_0\": 40, \"date\": \"2020-06-24T00:00:00\", \"score\": 1, \"index\": 110}, {\"level_0\": 41, \"date\": \"2020-06-24T00:00:00\", \"score\": 2, \"index\": 34}, {\"level_0\": 42, \"date\": \"2020-06-24T00:00:00\", \"score\": 3, \"index\": 45}, {\"level_0\": 43, \"date\": \"2020-06-24T00:00:00\", \"score\": 4, \"index\": 50}, {\"level_0\": 44, \"date\": \"2020-06-24T00:00:00\", \"score\": 5, \"index\": 277}, {\"level_0\": 45, \"date\": \"2020-06-25T00:00:00\", \"score\": 1, \"index\": 123}, {\"level_0\": 46, \"date\": \"2020-06-25T00:00:00\", \"score\": 2, \"index\": 39}, {\"level_0\": 47, \"date\": \"2020-06-25T00:00:00\", \"score\": 3, \"index\": 35}, {\"level_0\": 48, \"date\": \"2020-06-25T00:00:00\", \"score\": 4, \"index\": 52}, {\"level_0\": 49, \"date\": \"2020-06-25T00:00:00\", \"score\": 5, \"index\": 264}, {\"level_0\": 50, \"date\": \"2020-06-26T00:00:00\", \"score\": 1, \"index\": 119}, {\"level_0\": 51, \"date\": \"2020-06-26T00:00:00\", \"score\": 2, \"index\": 24}, {\"level_0\": 52, \"date\": \"2020-06-26T00:00:00\", \"score\": 3, \"index\": 31}, {\"level_0\": 53, \"date\": \"2020-06-26T00:00:00\", \"score\": 4, \"index\": 41}, {\"level_0\": 54, \"date\": \"2020-06-26T00:00:00\", \"score\": 5, \"index\": 202}, {\"level_0\": 55, \"date\": \"2020-06-27T00:00:00\", \"score\": 1, \"index\": 89}, {\"level_0\": 56, \"date\": \"2020-06-27T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 57, \"date\": \"2020-06-27T00:00:00\", \"score\": 3, \"index\": 32}, {\"level_0\": 58, \"date\": \"2020-06-27T00:00:00\", \"score\": 4, \"index\": 25}, {\"level_0\": 59, \"date\": \"2020-06-27T00:00:00\", \"score\": 5, \"index\": 133}, {\"level_0\": 60, \"date\": \"2020-06-28T00:00:00\", \"score\": 1, \"index\": 93}, {\"level_0\": 61, \"date\": \"2020-06-28T00:00:00\", \"score\": 2, \"index\": 29}, {\"level_0\": 62, \"date\": \"2020-06-28T00:00:00\", \"score\": 3, \"index\": 28}, {\"level_0\": 63, \"date\": \"2020-06-28T00:00:00\", \"score\": 4, \"index\": 41}, {\"level_0\": 64, \"date\": \"2020-06-28T00:00:00\", \"score\": 5, \"index\": 141}, {\"level_0\": 65, \"date\": \"2020-06-29T00:00:00\", \"score\": 1, \"index\": 101}, {\"level_0\": 66, \"date\": \"2020-06-29T00:00:00\", \"score\": 2, \"index\": 25}, {\"level_0\": 67, \"date\": \"2020-06-29T00:00:00\", \"score\": 3, \"index\": 28}, {\"level_0\": 68, \"date\": \"2020-06-29T00:00:00\", \"score\": 4, \"index\": 31}, {\"level_0\": 69, \"date\": \"2020-06-29T00:00:00\", \"score\": 5, \"index\": 102}, {\"level_0\": 70, \"date\": \"2020-06-30T00:00:00\", \"score\": 1, \"index\": 86}, {\"level_0\": 71, \"date\": \"2020-06-30T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 72, \"date\": \"2020-06-30T00:00:00\", \"score\": 3, \"index\": 23}, {\"level_0\": 73, \"date\": \"2020-06-30T00:00:00\", \"score\": 4, \"index\": 28}, {\"level_0\": 74, \"date\": \"2020-06-30T00:00:00\", \"score\": 5, \"index\": 105}, {\"level_0\": 75, \"date\": \"2020-07-01T00:00:00\", \"score\": 1, \"index\": 90}, {\"level_0\": 76, \"date\": \"2020-07-01T00:00:00\", \"score\": 2, \"index\": 31}, {\"level_0\": 77, \"date\": \"2020-07-01T00:00:00\", \"score\": 3, \"index\": 23}, {\"level_0\": 78, \"date\": \"2020-07-01T00:00:00\", \"score\": 4, \"index\": 32}, {\"level_0\": 79, \"date\": \"2020-07-01T00:00:00\", \"score\": 5, \"index\": 88}, {\"level_0\": 80, \"date\": \"2020-07-02T00:00:00\", \"score\": 1, \"index\": 130}, {\"level_0\": 81, \"date\": \"2020-07-02T00:00:00\", \"score\": 2, \"index\": 50}, {\"level_0\": 82, \"date\": \"2020-07-02T00:00:00\", \"score\": 3, \"index\": 94}, {\"level_0\": 83, \"date\": \"2020-07-02T00:00:00\", \"score\": 4, \"index\": 84}, {\"level_0\": 84, \"date\": \"2020-07-02T00:00:00\", \"score\": 5, \"index\": 245}, {\"level_0\": 85, \"date\": \"2020-07-03T00:00:00\", \"score\": 1, \"index\": 177}, {\"level_0\": 86, \"date\": \"2020-07-03T00:00:00\", \"score\": 2, \"index\": 82}, {\"level_0\": 87, \"date\": \"2020-07-03T00:00:00\", \"score\": 3, \"index\": 155}, {\"level_0\": 88, \"date\": \"2020-07-03T00:00:00\", \"score\": 4, \"index\": 119}, {\"level_0\": 89, \"date\": \"2020-07-03T00:00:00\", \"score\": 5, \"index\": 249}, {\"level_0\": 90, \"date\": \"2020-07-04T00:00:00\", \"score\": 1, \"index\": 153}, {\"level_0\": 91, \"date\": \"2020-07-04T00:00:00\", \"score\": 2, \"index\": 54}, {\"level_0\": 92, \"date\": \"2020-07-04T00:00:00\", \"score\": 3, \"index\": 86}, {\"level_0\": 93, \"date\": \"2020-07-04T00:00:00\", \"score\": 4, \"index\": 91}, {\"level_0\": 94, \"date\": \"2020-07-04T00:00:00\", \"score\": 5, \"index\": 182}, {\"level_0\": 95, \"date\": \"2020-07-05T00:00:00\", \"score\": 1, \"index\": 134}, {\"level_0\": 96, \"date\": \"2020-07-05T00:00:00\", \"score\": 2, \"index\": 67}, {\"level_0\": 97, \"date\": \"2020-07-05T00:00:00\", \"score\": 3, \"index\": 83}, {\"level_0\": 98, \"date\": \"2020-07-05T00:00:00\", \"score\": 4, \"index\": 52}, {\"level_0\": 99, \"date\": \"2020-07-05T00:00:00\", \"score\": 5, \"index\": 133}, {\"level_0\": 100, \"date\": \"2020-07-06T00:00:00\", \"score\": 1, \"index\": 182}, {\"level_0\": 101, \"date\": \"2020-07-06T00:00:00\", \"score\": 2, \"index\": 66}, {\"level_0\": 102, \"date\": \"2020-07-06T00:00:00\", \"score\": 3, \"index\": 82}, {\"level_0\": 103, \"date\": \"2020-07-06T00:00:00\", \"score\": 4, \"index\": 43}, {\"level_0\": 104, \"date\": \"2020-07-06T00:00:00\", \"score\": 5, \"index\": 155}, {\"level_0\": 105, \"date\": \"2020-07-07T00:00:00\", \"score\": 1, \"index\": 131}, {\"level_0\": 106, \"date\": \"2020-07-07T00:00:00\", \"score\": 2, \"index\": 39}, {\"level_0\": 107, \"date\": \"2020-07-07T00:00:00\", \"score\": 3, \"index\": 54}, {\"level_0\": 108, \"date\": \"2020-07-07T00:00:00\", \"score\": 4, \"index\": 40}, {\"level_0\": 109, \"date\": \"2020-07-07T00:00:00\", \"score\": 5, \"index\": 117}, {\"level_0\": 110, \"date\": \"2020-07-08T00:00:00\", \"score\": 1, \"index\": 122}, {\"level_0\": 111, \"date\": \"2020-07-08T00:00:00\", \"score\": 2, \"index\": 52}, {\"level_0\": 112, \"date\": \"2020-07-08T00:00:00\", \"score\": 3, \"index\": 62}, {\"level_0\": 113, \"date\": \"2020-07-08T00:00:00\", \"score\": 4, \"index\": 34}, {\"level_0\": 114, \"date\": \"2020-07-08T00:00:00\", \"score\": 5, \"index\": 128}, {\"level_0\": 115, \"date\": \"2020-07-09T00:00:00\", \"score\": 1, \"index\": 130}, {\"level_0\": 116, \"date\": \"2020-07-09T00:00:00\", \"score\": 2, \"index\": 33}, {\"level_0\": 117, \"date\": \"2020-07-09T00:00:00\", \"score\": 3, \"index\": 52}, {\"level_0\": 118, \"date\": \"2020-07-09T00:00:00\", \"score\": 4, \"index\": 43}, {\"level_0\": 119, \"date\": \"2020-07-09T00:00:00\", \"score\": 5, \"index\": 107}, {\"level_0\": 120, \"date\": \"2020-07-10T00:00:00\", \"score\": 1, \"index\": 116}, {\"level_0\": 121, \"date\": \"2020-07-10T00:00:00\", \"score\": 2, \"index\": 44}, {\"level_0\": 122, \"date\": \"2020-07-10T00:00:00\", \"score\": 3, \"index\": 46}, {\"level_0\": 123, \"date\": \"2020-07-10T00:00:00\", \"score\": 4, \"index\": 38}, {\"level_0\": 124, \"date\": \"2020-07-10T00:00:00\", \"score\": 5, \"index\": 91}, {\"level_0\": 125, \"date\": \"2020-07-11T00:00:00\", \"score\": 1, \"index\": 100}, {\"level_0\": 126, \"date\": \"2020-07-11T00:00:00\", \"score\": 2, \"index\": 30}, {\"level_0\": 127, \"date\": \"2020-07-11T00:00:00\", \"score\": 3, \"index\": 34}, {\"level_0\": 128, \"date\": \"2020-07-11T00:00:00\", \"score\": 4, \"index\": 20}, {\"level_0\": 129, \"date\": \"2020-07-11T00:00:00\", \"score\": 5, \"index\": 100}, {\"level_0\": 130, \"date\": \"2020-07-12T00:00:00\", \"score\": 1, \"index\": 91}, {\"level_0\": 131, \"date\": \"2020-07-12T00:00:00\", \"score\": 2, \"index\": 46}, {\"level_0\": 132, \"date\": \"2020-07-12T00:00:00\", \"score\": 3, \"index\": 38}, {\"level_0\": 133, \"date\": \"2020-07-12T00:00:00\", \"score\": 4, \"index\": 35}, {\"level_0\": 134, \"date\": \"2020-07-12T00:00:00\", \"score\": 5, \"index\": 96}, {\"level_0\": 135, \"date\": \"2020-07-13T00:00:00\", \"score\": 1, \"index\": 112}, {\"level_0\": 136, \"date\": \"2020-07-13T00:00:00\", \"score\": 2, \"index\": 39}, {\"level_0\": 137, \"date\": \"2020-07-13T00:00:00\", \"score\": 3, \"index\": 50}, {\"level_0\": 138, \"date\": \"2020-07-13T00:00:00\", \"score\": 4, \"index\": 23}, {\"level_0\": 139, \"date\": \"2020-07-13T00:00:00\", \"score\": 5, \"index\": 93}, {\"level_0\": 140, \"date\": \"2020-07-14T00:00:00\", \"score\": 1, \"index\": 115}, {\"level_0\": 141, \"date\": \"2020-07-14T00:00:00\", \"score\": 2, \"index\": 41}, {\"level_0\": 142, \"date\": \"2020-07-14T00:00:00\", \"score\": 3, \"index\": 37}, {\"level_0\": 143, \"date\": \"2020-07-14T00:00:00\", \"score\": 4, \"index\": 21}, {\"level_0\": 144, \"date\": \"2020-07-14T00:00:00\", \"score\": 5, \"index\": 90}, {\"level_0\": 145, \"date\": \"2020-07-15T00:00:00\", \"score\": 1, \"index\": 79}, {\"level_0\": 146, \"date\": \"2020-07-15T00:00:00\", \"score\": 2, \"index\": 33}, {\"level_0\": 147, \"date\": \"2020-07-15T00:00:00\", \"score\": 3, \"index\": 35}, {\"level_0\": 148, \"date\": \"2020-07-15T00:00:00\", \"score\": 4, \"index\": 24}, {\"level_0\": 149, \"date\": \"2020-07-15T00:00:00\", \"score\": 5, \"index\": 63}, {\"level_0\": 150, \"date\": \"2020-07-16T00:00:00\", \"score\": 1, \"index\": 91}, {\"level_0\": 151, \"date\": \"2020-07-16T00:00:00\", \"score\": 2, \"index\": 25}, {\"level_0\": 152, \"date\": \"2020-07-16T00:00:00\", \"score\": 3, \"index\": 33}, {\"level_0\": 153, \"date\": \"2020-07-16T00:00:00\", \"score\": 4, \"index\": 20}, {\"level_0\": 154, \"date\": \"2020-07-16T00:00:00\", \"score\": 5, \"index\": 55}, {\"level_0\": 155, \"date\": \"2020-07-17T00:00:00\", \"score\": 1, \"index\": 78}, {\"level_0\": 156, \"date\": \"2020-07-17T00:00:00\", \"score\": 2, \"index\": 25}, {\"level_0\": 157, \"date\": \"2020-07-17T00:00:00\", \"score\": 3, \"index\": 30}, {\"level_0\": 158, \"date\": \"2020-07-17T00:00:00\", \"score\": 4, \"index\": 17}, {\"level_0\": 159, \"date\": \"2020-07-17T00:00:00\", \"score\": 5, \"index\": 41}, {\"level_0\": 160, \"date\": \"2020-07-18T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 161, \"date\": \"2020-07-18T00:00:00\", \"score\": 2, \"index\": 38}, {\"level_0\": 162, \"date\": \"2020-07-18T00:00:00\", \"score\": 3, \"index\": 33}, {\"level_0\": 163, \"date\": \"2020-07-18T00:00:00\", \"score\": 4, \"index\": 20}, {\"level_0\": 164, \"date\": \"2020-07-18T00:00:00\", \"score\": 5, \"index\": 46}, {\"level_0\": 165, \"date\": \"2020-07-19T00:00:00\", \"score\": 1, \"index\": 68}, {\"level_0\": 166, \"date\": \"2020-07-19T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 167, \"date\": \"2020-07-19T00:00:00\", \"score\": 3, \"index\": 24}, {\"level_0\": 168, \"date\": \"2020-07-19T00:00:00\", \"score\": 4, \"index\": 20}, {\"level_0\": 169, \"date\": \"2020-07-19T00:00:00\", \"score\": 5, \"index\": 35}, {\"level_0\": 170, \"date\": \"2020-07-20T00:00:00\", \"score\": 1, \"index\": 73}, {\"level_0\": 171, \"date\": \"2020-07-20T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 172, \"date\": \"2020-07-20T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 173, \"date\": \"2020-07-20T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 174, \"date\": \"2020-07-20T00:00:00\", \"score\": 5, \"index\": 57}, {\"level_0\": 175, \"date\": \"2020-07-21T00:00:00\", \"score\": 1, \"index\": 78}, {\"level_0\": 176, \"date\": \"2020-07-21T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 177, \"date\": \"2020-07-21T00:00:00\", \"score\": 3, \"index\": 22}, {\"level_0\": 178, \"date\": \"2020-07-21T00:00:00\", \"score\": 4, \"index\": 15}, {\"level_0\": 179, \"date\": \"2020-07-21T00:00:00\", \"score\": 5, \"index\": 67}, {\"level_0\": 180, \"date\": \"2020-07-22T00:00:00\", \"score\": 1, \"index\": 68}, {\"level_0\": 181, \"date\": \"2020-07-22T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 182, \"date\": \"2020-07-22T00:00:00\", \"score\": 3, \"index\": 18}, {\"level_0\": 183, \"date\": \"2020-07-22T00:00:00\", \"score\": 4, \"index\": 26}, {\"level_0\": 184, \"date\": \"2020-07-22T00:00:00\", \"score\": 5, \"index\": 69}, {\"level_0\": 185, \"date\": \"2020-07-23T00:00:00\", \"score\": 1, \"index\": 91}, {\"level_0\": 186, \"date\": \"2020-07-23T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 187, \"date\": \"2020-07-23T00:00:00\", \"score\": 3, \"index\": 28}, {\"level_0\": 188, \"date\": \"2020-07-23T00:00:00\", \"score\": 4, \"index\": 31}, {\"level_0\": 189, \"date\": \"2020-07-23T00:00:00\", \"score\": 5, \"index\": 65}, {\"level_0\": 190, \"date\": \"2020-07-24T00:00:00\", \"score\": 1, \"index\": 169}, {\"level_0\": 191, \"date\": \"2020-07-24T00:00:00\", \"score\": 2, \"index\": 38}, {\"level_0\": 192, \"date\": \"2020-07-24T00:00:00\", \"score\": 3, \"index\": 33}, {\"level_0\": 193, \"date\": \"2020-07-24T00:00:00\", \"score\": 4, \"index\": 46}, {\"level_0\": 194, \"date\": \"2020-07-24T00:00:00\", \"score\": 5, \"index\": 115}, {\"level_0\": 195, \"date\": \"2020-07-25T00:00:00\", \"score\": 1, \"index\": 145}, {\"level_0\": 196, \"date\": \"2020-07-25T00:00:00\", \"score\": 2, \"index\": 35}, {\"level_0\": 197, \"date\": \"2020-07-25T00:00:00\", \"score\": 3, \"index\": 35}, {\"level_0\": 198, \"date\": \"2020-07-25T00:00:00\", \"score\": 4, \"index\": 34}, {\"level_0\": 199, \"date\": \"2020-07-25T00:00:00\", \"score\": 5, \"index\": 118}, {\"level_0\": 200, \"date\": \"2020-07-26T00:00:00\", \"score\": 1, \"index\": 96}, {\"level_0\": 201, \"date\": \"2020-07-26T00:00:00\", \"score\": 2, \"index\": 26}, {\"level_0\": 202, \"date\": \"2020-07-26T00:00:00\", \"score\": 3, \"index\": 30}, {\"level_0\": 203, \"date\": \"2020-07-26T00:00:00\", \"score\": 4, \"index\": 33}, {\"level_0\": 204, \"date\": \"2020-07-26T00:00:00\", \"score\": 5, \"index\": 97}, {\"level_0\": 205, \"date\": \"2020-07-27T00:00:00\", \"score\": 1, \"index\": 70}, {\"level_0\": 206, \"date\": \"2020-07-27T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 207, \"date\": \"2020-07-27T00:00:00\", \"score\": 3, \"index\": 19}, {\"level_0\": 208, \"date\": \"2020-07-27T00:00:00\", \"score\": 4, \"index\": 18}, {\"level_0\": 209, \"date\": \"2020-07-27T00:00:00\", \"score\": 5, \"index\": 74}, {\"level_0\": 210, \"date\": \"2020-07-28T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 211, \"date\": \"2020-07-28T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 212, \"date\": \"2020-07-28T00:00:00\", \"score\": 3, \"index\": 24}, {\"level_0\": 213, \"date\": \"2020-07-28T00:00:00\", \"score\": 4, \"index\": 16}, {\"level_0\": 214, \"date\": \"2020-07-28T00:00:00\", \"score\": 5, \"index\": 64}, {\"level_0\": 215, \"date\": \"2020-07-29T00:00:00\", \"score\": 1, \"index\": 53}, {\"level_0\": 216, \"date\": \"2020-07-29T00:00:00\", \"score\": 2, \"index\": 19}, {\"level_0\": 217, \"date\": \"2020-07-29T00:00:00\", \"score\": 3, \"index\": 21}, {\"level_0\": 218, \"date\": \"2020-07-29T00:00:00\", \"score\": 4, \"index\": 21}, {\"level_0\": 219, \"date\": \"2020-07-29T00:00:00\", \"score\": 5, \"index\": 41}, {\"level_0\": 220, \"date\": \"2020-07-30T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 221, \"date\": \"2020-07-30T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 222, \"date\": \"2020-07-30T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 223, \"date\": \"2020-07-30T00:00:00\", \"score\": 4, \"index\": 18}, {\"level_0\": 224, \"date\": \"2020-07-30T00:00:00\", \"score\": 5, \"index\": 28}, {\"level_0\": 225, \"date\": \"2020-07-31T00:00:00\", \"score\": 1, \"index\": 37}, {\"level_0\": 226, \"date\": \"2020-07-31T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 227, \"date\": \"2020-07-31T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 228, \"date\": \"2020-07-31T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 229, \"date\": \"2020-07-31T00:00:00\", \"score\": 5, \"index\": 33}, {\"level_0\": 230, \"date\": \"2020-08-01T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 231, \"date\": \"2020-08-01T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 232, \"date\": \"2020-08-01T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 233, \"date\": \"2020-08-01T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 234, \"date\": \"2020-08-01T00:00:00\", \"score\": 5, \"index\": 29}, {\"level_0\": 235, \"date\": \"2020-08-02T00:00:00\", \"score\": 1, \"index\": 30}, {\"level_0\": 236, \"date\": \"2020-08-02T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 237, \"date\": \"2020-08-02T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 238, \"date\": \"2020-08-02T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 239, \"date\": \"2020-08-02T00:00:00\", \"score\": 5, \"index\": 35}, {\"level_0\": 240, \"date\": \"2020-08-03T00:00:00\", \"score\": 1, \"index\": 33}, {\"level_0\": 241, \"date\": \"2020-08-03T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 242, \"date\": \"2020-08-03T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 243, \"date\": \"2020-08-03T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 244, \"date\": \"2020-08-03T00:00:00\", \"score\": 5, \"index\": 27}, {\"level_0\": 245, \"date\": \"2020-08-04T00:00:00\", \"score\": 1, \"index\": 42}, {\"level_0\": 246, \"date\": \"2020-08-04T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 247, \"date\": \"2020-08-04T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 248, \"date\": \"2020-08-04T00:00:00\", \"score\": 4, \"index\": 15}, {\"level_0\": 249, \"date\": \"2020-08-04T00:00:00\", \"score\": 5, \"index\": 44}, {\"level_0\": 250, \"date\": \"2020-08-05T00:00:00\", \"score\": 1, \"index\": 40}, {\"level_0\": 251, \"date\": \"2020-08-05T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 252, \"date\": \"2020-08-05T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 253, \"date\": \"2020-08-05T00:00:00\", \"score\": 4, \"index\": 14}, {\"level_0\": 254, \"date\": \"2020-08-05T00:00:00\", \"score\": 5, \"index\": 34}, {\"level_0\": 255, \"date\": \"2020-08-06T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 256, \"date\": \"2020-08-06T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 257, \"date\": \"2020-08-06T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 258, \"date\": \"2020-08-06T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 259, \"date\": \"2020-08-06T00:00:00\", \"score\": 5, \"index\": 35}, {\"level_0\": 260, \"date\": \"2020-08-07T00:00:00\", \"score\": 1, \"index\": 40}, {\"level_0\": 261, \"date\": \"2020-08-07T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 262, \"date\": \"2020-08-07T00:00:00\", \"score\": 3, \"index\": 17}, {\"level_0\": 263, \"date\": \"2020-08-07T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 264, \"date\": \"2020-08-07T00:00:00\", \"score\": 5, \"index\": 28}, {\"level_0\": 265, \"date\": \"2020-08-08T00:00:00\", \"score\": 1, \"index\": 28}, {\"level_0\": 266, \"date\": \"2020-08-08T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 267, \"date\": \"2020-08-08T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 268, \"date\": \"2020-08-08T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 269, \"date\": \"2020-08-08T00:00:00\", \"score\": 5, \"index\": 29}, {\"level_0\": 270, \"date\": \"2020-08-09T00:00:00\", \"score\": 1, \"index\": 29}, {\"level_0\": 271, \"date\": \"2020-08-09T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 272, \"date\": \"2020-08-09T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 273, \"date\": \"2020-08-09T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 274, \"date\": \"2020-08-09T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 275, \"date\": \"2020-08-10T00:00:00\", \"score\": 1, \"index\": 26}, {\"level_0\": 276, \"date\": \"2020-08-10T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 277, \"date\": \"2020-08-10T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 278, \"date\": \"2020-08-10T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 279, \"date\": \"2020-08-10T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 280, \"date\": \"2020-08-11T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 281, \"date\": \"2020-08-11T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 282, \"date\": \"2020-08-11T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 283, \"date\": \"2020-08-11T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 284, \"date\": \"2020-08-11T00:00:00\", \"score\": 5, \"index\": 30}, {\"level_0\": 285, \"date\": \"2020-08-12T00:00:00\", \"score\": 1, \"index\": 49}, {\"level_0\": 286, \"date\": \"2020-08-12T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 287, \"date\": \"2020-08-12T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 288, \"date\": \"2020-08-12T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 289, \"date\": \"2020-08-12T00:00:00\", \"score\": 5, \"index\": 36}, {\"level_0\": 290, \"date\": \"2020-08-13T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 291, \"date\": \"2020-08-13T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 292, \"date\": \"2020-08-13T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 293, \"date\": \"2020-08-13T00:00:00\", \"score\": 4, \"index\": 16}, {\"level_0\": 294, \"date\": \"2020-08-13T00:00:00\", \"score\": 5, \"index\": 37}, {\"level_0\": 295, \"date\": \"2020-08-14T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 296, \"date\": \"2020-08-14T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 297, \"date\": \"2020-08-14T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 298, \"date\": \"2020-08-14T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 299, \"date\": \"2020-08-14T00:00:00\", \"score\": 5, \"index\": 37}, {\"level_0\": 300, \"date\": \"2020-08-15T00:00:00\", \"score\": 1, \"index\": 54}, {\"level_0\": 301, \"date\": \"2020-08-15T00:00:00\", \"score\": 2, \"index\": 22}, {\"level_0\": 302, \"date\": \"2020-08-15T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 303, \"date\": \"2020-08-15T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 304, \"date\": \"2020-08-15T00:00:00\", \"score\": 5, \"index\": 33}, {\"level_0\": 305, \"date\": \"2020-08-16T00:00:00\", \"score\": 1, \"index\": 48}, {\"level_0\": 306, \"date\": \"2020-08-16T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 307, \"date\": \"2020-08-16T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 308, \"date\": \"2020-08-16T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 309, \"date\": \"2020-08-16T00:00:00\", \"score\": 5, \"index\": 34}, {\"level_0\": 310, \"date\": \"2020-08-17T00:00:00\", \"score\": 1, \"index\": 48}, {\"level_0\": 311, \"date\": \"2020-08-17T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 312, \"date\": \"2020-08-17T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 313, \"date\": \"2020-08-17T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 314, \"date\": \"2020-08-17T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 315, \"date\": \"2020-08-18T00:00:00\", \"score\": 1, \"index\": 53}, {\"level_0\": 316, \"date\": \"2020-08-18T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 317, \"date\": \"2020-08-18T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 318, \"date\": \"2020-08-18T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 319, \"date\": \"2020-08-18T00:00:00\", \"score\": 5, \"index\": 25}, {\"level_0\": 320, \"date\": \"2020-08-19T00:00:00\", \"score\": 1, \"index\": 48}, {\"level_0\": 321, \"date\": \"2020-08-19T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 322, \"date\": \"2020-08-19T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 323, \"date\": \"2020-08-19T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 324, \"date\": \"2020-08-19T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 325, \"date\": \"2020-08-20T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 326, \"date\": \"2020-08-20T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 327, \"date\": \"2020-08-20T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 328, \"date\": \"2020-08-20T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 329, \"date\": \"2020-08-20T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 330, \"date\": \"2020-08-21T00:00:00\", \"score\": 1, \"index\": 55}, {\"level_0\": 331, \"date\": \"2020-08-21T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 332, \"date\": \"2020-08-21T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 333, \"date\": \"2020-08-21T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 334, \"date\": \"2020-08-21T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 335, \"date\": \"2020-08-22T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 336, \"date\": \"2020-08-22T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 337, \"date\": \"2020-08-22T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 338, \"date\": \"2020-08-22T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 339, \"date\": \"2020-08-22T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 340, \"date\": \"2020-08-23T00:00:00\", \"score\": 1, \"index\": 50}, {\"level_0\": 341, \"date\": \"2020-08-23T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 342, \"date\": \"2020-08-23T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 343, \"date\": \"2020-08-23T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 344, \"date\": \"2020-08-23T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 345, \"date\": \"2020-08-24T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 346, \"date\": \"2020-08-24T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 347, \"date\": \"2020-08-24T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 348, \"date\": \"2020-08-24T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 349, \"date\": \"2020-08-24T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 350, \"date\": \"2020-08-25T00:00:00\", \"score\": 1, \"index\": 64}, {\"level_0\": 351, \"date\": \"2020-08-25T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 352, \"date\": \"2020-08-25T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 353, \"date\": \"2020-08-25T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 354, \"date\": \"2020-08-25T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 355, \"date\": \"2020-08-26T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 356, \"date\": \"2020-08-26T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 357, \"date\": \"2020-08-26T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 358, \"date\": \"2020-08-26T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 359, \"date\": \"2020-08-26T00:00:00\", \"score\": 5, \"index\": 12}, {\"level_0\": 360, \"date\": \"2020-08-27T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 361, \"date\": \"2020-08-27T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 362, \"date\": \"2020-08-27T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 363, \"date\": \"2020-08-27T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 364, \"date\": \"2020-08-27T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 365, \"date\": \"2020-08-28T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 366, \"date\": \"2020-08-28T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 367, \"date\": \"2020-08-28T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 368, \"date\": \"2020-08-28T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 369, \"date\": \"2020-08-28T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 370, \"date\": \"2020-08-29T00:00:00\", \"score\": 1, \"index\": 31}, {\"level_0\": 371, \"date\": \"2020-08-29T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 372, \"date\": \"2020-08-29T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 373, \"date\": \"2020-08-29T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 374, \"date\": \"2020-08-29T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 375, \"date\": \"2020-08-30T00:00:00\", \"score\": 1, \"index\": 47}, {\"level_0\": 376, \"date\": \"2020-08-30T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 377, \"date\": \"2020-08-30T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 378, \"date\": \"2020-08-30T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 379, \"date\": \"2020-08-30T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 380, \"date\": \"2020-08-31T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 381, \"date\": \"2020-08-31T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 382, \"date\": \"2020-08-31T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 383, \"date\": \"2020-08-31T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 384, \"date\": \"2020-08-31T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 385, \"date\": \"2020-09-01T00:00:00\", \"score\": 1, \"index\": 37}, {\"level_0\": 386, \"date\": \"2020-09-01T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 387, \"date\": \"2020-09-01T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 388, \"date\": \"2020-09-01T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 389, \"date\": \"2020-09-01T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 390, \"date\": \"2020-09-02T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 391, \"date\": \"2020-09-02T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 392, \"date\": \"2020-09-02T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 393, \"date\": \"2020-09-02T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 394, \"date\": \"2020-09-02T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 395, \"date\": \"2020-09-03T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 396, \"date\": \"2020-09-03T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 397, \"date\": \"2020-09-03T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 398, \"date\": \"2020-09-03T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 399, \"date\": \"2020-09-03T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 400, \"date\": \"2020-09-04T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 401, \"date\": \"2020-09-04T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 402, \"date\": \"2020-09-04T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 403, \"date\": \"2020-09-04T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 404, \"date\": \"2020-09-04T00:00:00\", \"score\": 5, \"index\": 41}, {\"level_0\": 405, \"date\": \"2020-09-05T00:00:00\", \"score\": 1, \"index\": 60}, {\"level_0\": 406, \"date\": \"2020-09-05T00:00:00\", \"score\": 2, \"index\": 22}, {\"level_0\": 407, \"date\": \"2020-09-05T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 408, \"date\": \"2020-09-05T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 409, \"date\": \"2020-09-05T00:00:00\", \"score\": 5, \"index\": 27}, {\"level_0\": 410, \"date\": \"2020-09-06T00:00:00\", \"score\": 1, \"index\": 43}, {\"level_0\": 411, \"date\": \"2020-09-06T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 412, \"date\": \"2020-09-06T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 413, \"date\": \"2020-09-06T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 414, \"date\": \"2020-09-06T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 415, \"date\": \"2020-09-07T00:00:00\", \"score\": 1, \"index\": 47}, {\"level_0\": 416, \"date\": \"2020-09-07T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 417, \"date\": \"2020-09-07T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 418, \"date\": \"2020-09-07T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 419, \"date\": \"2020-09-07T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 420, \"date\": \"2020-09-08T00:00:00\", \"score\": 1, \"index\": 35}, {\"level_0\": 421, \"date\": \"2020-09-08T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 422, \"date\": \"2020-09-08T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 423, \"date\": \"2020-09-08T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 424, \"date\": \"2020-09-08T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 425, \"date\": \"2020-09-09T00:00:00\", \"score\": 1, \"index\": 48}, {\"level_0\": 426, \"date\": \"2020-09-09T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 427, \"date\": \"2020-09-09T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 428, \"date\": \"2020-09-09T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 429, \"date\": \"2020-09-09T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 430, \"date\": \"2020-09-10T00:00:00\", \"score\": 1, \"index\": 30}, {\"level_0\": 431, \"date\": \"2020-09-10T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 432, \"date\": \"2020-09-10T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 433, \"date\": \"2020-09-10T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 434, \"date\": \"2020-09-10T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 435, \"date\": \"2020-09-11T00:00:00\", \"score\": 1, \"index\": 34}, {\"level_0\": 436, \"date\": \"2020-09-11T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 437, \"date\": \"2020-09-11T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 438, \"date\": \"2020-09-11T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 439, \"date\": \"2020-09-11T00:00:00\", \"score\": 5, \"index\": 7}, {\"level_0\": 440, \"date\": \"2020-09-12T00:00:00\", \"score\": 1, \"index\": 31}, {\"level_0\": 441, \"date\": \"2020-09-12T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 442, \"date\": \"2020-09-12T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 443, \"date\": \"2020-09-12T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 444, \"date\": \"2020-09-12T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 445, \"date\": \"2020-09-13T00:00:00\", \"score\": 1, \"index\": 23}, {\"level_0\": 446, \"date\": \"2020-09-13T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 447, \"date\": \"2020-09-13T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 448, \"date\": \"2020-09-13T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 449, \"date\": \"2020-09-13T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 450, \"date\": \"2020-09-14T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 451, \"date\": \"2020-09-14T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 452, \"date\": \"2020-09-14T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 453, \"date\": \"2020-09-14T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 454, \"date\": \"2020-09-14T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 455, \"date\": \"2020-09-15T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 456, \"date\": \"2020-09-15T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 457, \"date\": \"2020-09-15T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 458, \"date\": \"2020-09-15T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 459, \"date\": \"2020-09-15T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 460, \"date\": \"2020-09-16T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 461, \"date\": \"2020-09-16T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 462, \"date\": \"2020-09-16T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 463, \"date\": \"2020-09-16T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 464, \"date\": \"2020-09-16T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 465, \"date\": \"2020-09-17T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 466, \"date\": \"2020-09-17T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 467, \"date\": \"2020-09-17T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 468, \"date\": \"2020-09-17T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 469, \"date\": \"2020-09-17T00:00:00\", \"score\": 5, \"index\": 12}, {\"level_0\": 470, \"date\": \"2020-09-18T00:00:00\", \"score\": 1, \"index\": 35}, {\"level_0\": 471, \"date\": \"2020-09-18T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 472, \"date\": \"2020-09-18T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 473, \"date\": \"2020-09-18T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 474, \"date\": \"2020-09-18T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 475, \"date\": \"2020-09-19T00:00:00\", \"score\": 1, \"index\": 29}, {\"level_0\": 476, \"date\": \"2020-09-19T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 477, \"date\": \"2020-09-19T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 478, \"date\": \"2020-09-19T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 479, \"date\": \"2020-09-19T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 480, \"date\": \"2020-09-20T00:00:00\", \"score\": 1, \"index\": 43}, {\"level_0\": 481, \"date\": \"2020-09-20T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 482, \"date\": \"2020-09-20T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 483, \"date\": \"2020-09-20T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 484, \"date\": \"2020-09-20T00:00:00\", \"score\": 5, \"index\": 12}, {\"level_0\": 485, \"date\": \"2020-09-21T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 486, \"date\": \"2020-09-21T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 487, \"date\": \"2020-09-21T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 488, \"date\": \"2020-09-21T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 489, \"date\": \"2020-09-21T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 490, \"date\": \"2020-09-22T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 491, \"date\": \"2020-09-22T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 492, \"date\": \"2020-09-22T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 493, \"date\": \"2020-09-22T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 494, \"date\": \"2020-09-22T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 495, \"date\": \"2020-09-23T00:00:00\", \"score\": 1, \"index\": 110}, {\"level_0\": 496, \"date\": \"2020-09-23T00:00:00\", \"score\": 2, \"index\": 25}, {\"level_0\": 497, \"date\": \"2020-09-23T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 498, \"date\": \"2020-09-23T00:00:00\", \"score\": 4, \"index\": 17}, {\"level_0\": 499, \"date\": \"2020-09-23T00:00:00\", \"score\": 5, \"index\": 49}, {\"level_0\": 500, \"date\": \"2020-09-24T00:00:00\", \"score\": 1, \"index\": 77}, {\"level_0\": 501, \"date\": \"2020-09-24T00:00:00\", \"score\": 2, \"index\": 17}, {\"level_0\": 502, \"date\": \"2020-09-24T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 503, \"date\": \"2020-09-24T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 504, \"date\": \"2020-09-24T00:00:00\", \"score\": 5, \"index\": 31}, {\"level_0\": 505, \"date\": \"2020-09-25T00:00:00\", \"score\": 1, \"index\": 53}, {\"level_0\": 506, \"date\": \"2020-09-25T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 507, \"date\": \"2020-09-25T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 508, \"date\": \"2020-09-25T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 509, \"date\": \"2020-09-25T00:00:00\", \"score\": 5, \"index\": 29}, {\"level_0\": 510, \"date\": \"2020-09-26T00:00:00\", \"score\": 1, \"index\": 48}, {\"level_0\": 511, \"date\": \"2020-09-26T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 512, \"date\": \"2020-09-26T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 513, \"date\": \"2020-09-26T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 514, \"date\": \"2020-09-26T00:00:00\", \"score\": 5, \"index\": 27}, {\"level_0\": 515, \"date\": \"2020-09-27T00:00:00\", \"score\": 1, \"index\": 35}, {\"level_0\": 516, \"date\": \"2020-09-27T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 517, \"date\": \"2020-09-27T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 518, \"date\": \"2020-09-27T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 519, \"date\": \"2020-09-27T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 520, \"date\": \"2020-09-28T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 521, \"date\": \"2020-09-28T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 522, \"date\": \"2020-09-28T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 523, \"date\": \"2020-09-28T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 524, \"date\": \"2020-09-28T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 525, \"date\": \"2020-09-29T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 526, \"date\": \"2020-09-29T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 527, \"date\": \"2020-09-29T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 528, \"date\": \"2020-09-29T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 529, \"date\": \"2020-09-29T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 530, \"date\": \"2020-09-30T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 531, \"date\": \"2020-09-30T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 532, \"date\": \"2020-09-30T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 533, \"date\": \"2020-09-30T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 534, \"date\": \"2020-09-30T00:00:00\", \"score\": 5, \"index\": 28}, {\"level_0\": 535, \"date\": \"2020-10-01T00:00:00\", \"score\": 1, \"index\": 43}, {\"level_0\": 536, \"date\": \"2020-10-01T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 537, \"date\": \"2020-10-01T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 538, \"date\": \"2020-10-01T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 539, \"date\": \"2020-10-01T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 540, \"date\": \"2020-10-02T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 541, \"date\": \"2020-10-02T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 542, \"date\": \"2020-10-02T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 543, \"date\": \"2020-10-02T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 544, \"date\": \"2020-10-02T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 545, \"date\": \"2020-10-03T00:00:00\", \"score\": 1, \"index\": 27}, {\"level_0\": 546, \"date\": \"2020-10-03T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 547, \"date\": \"2020-10-03T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 548, \"date\": \"2020-10-03T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 549, \"date\": \"2020-10-03T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 550, \"date\": \"2020-10-04T00:00:00\", \"score\": 1, \"index\": 41}, {\"level_0\": 551, \"date\": \"2020-10-04T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 552, \"date\": \"2020-10-04T00:00:00\", \"score\": 3, \"index\": 3}, {\"level_0\": 553, \"date\": \"2020-10-04T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 554, \"date\": \"2020-10-04T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 555, \"date\": \"2020-10-05T00:00:00\", \"score\": 1, \"index\": 53}, {\"level_0\": 556, \"date\": \"2020-10-05T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 557, \"date\": \"2020-10-05T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 558, \"date\": \"2020-10-05T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 559, \"date\": \"2020-10-05T00:00:00\", \"score\": 5, \"index\": 5}, {\"level_0\": 560, \"date\": \"2020-10-06T00:00:00\", \"score\": 1, \"index\": 26}, {\"level_0\": 561, \"date\": \"2020-10-06T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 562, \"date\": \"2020-10-06T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 563, \"date\": \"2020-10-06T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 564, \"date\": \"2020-10-06T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 565, \"date\": \"2020-10-07T00:00:00\", \"score\": 1, \"index\": 62}, {\"level_0\": 566, \"date\": \"2020-10-07T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 567, \"date\": \"2020-10-07T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 568, \"date\": \"2020-10-07T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 569, \"date\": \"2020-10-07T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 570, \"date\": \"2020-10-08T00:00:00\", \"score\": 1, \"index\": 67}, {\"level_0\": 571, \"date\": \"2020-10-08T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 572, \"date\": \"2020-10-08T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 573, \"date\": \"2020-10-08T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 574, \"date\": \"2020-10-08T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 575, \"date\": \"2020-10-09T00:00:00\", \"score\": 1, \"index\": 65}, {\"level_0\": 576, \"date\": \"2020-10-09T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 577, \"date\": \"2020-10-09T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 578, \"date\": \"2020-10-09T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 579, \"date\": \"2020-10-09T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 580, \"date\": \"2020-10-10T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 581, \"date\": \"2020-10-10T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 582, \"date\": \"2020-10-10T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 583, \"date\": \"2020-10-10T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 584, \"date\": \"2020-10-10T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 585, \"date\": \"2020-10-11T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 586, \"date\": \"2020-10-11T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 587, \"date\": \"2020-10-11T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 588, \"date\": \"2020-10-11T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 589, \"date\": \"2020-10-11T00:00:00\", \"score\": 5, \"index\": 26}, {\"level_0\": 590, \"date\": \"2020-10-12T00:00:00\", \"score\": 1, \"index\": 60}, {\"level_0\": 591, \"date\": \"2020-10-12T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 592, \"date\": \"2020-10-12T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 593, \"date\": \"2020-10-12T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 594, \"date\": \"2020-10-12T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 595, \"date\": \"2020-10-13T00:00:00\", \"score\": 1, \"index\": 67}, {\"level_0\": 596, \"date\": \"2020-10-13T00:00:00\", \"score\": 2, \"index\": 20}, {\"level_0\": 597, \"date\": \"2020-10-13T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 598, \"date\": \"2020-10-13T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 599, \"date\": \"2020-10-13T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 600, \"date\": \"2020-10-14T00:00:00\", \"score\": 1, \"index\": 83}, {\"level_0\": 601, \"date\": \"2020-10-14T00:00:00\", \"score\": 2, \"index\": 25}, {\"level_0\": 602, \"date\": \"2020-10-14T00:00:00\", \"score\": 3, \"index\": 17}, {\"level_0\": 603, \"date\": \"2020-10-14T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 604, \"date\": \"2020-10-14T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 605, \"date\": \"2020-10-15T00:00:00\", \"score\": 1, \"index\": 85}, {\"level_0\": 606, \"date\": \"2020-10-15T00:00:00\", \"score\": 2, \"index\": 26}, {\"level_0\": 607, \"date\": \"2020-10-15T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 608, \"date\": \"2020-10-15T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 609, \"date\": \"2020-10-15T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 610, \"date\": \"2020-10-16T00:00:00\", \"score\": 1, \"index\": 81}, {\"level_0\": 611, \"date\": \"2020-10-16T00:00:00\", \"score\": 2, \"index\": 27}, {\"level_0\": 612, \"date\": \"2020-10-16T00:00:00\", \"score\": 3, \"index\": 19}, {\"level_0\": 613, \"date\": \"2020-10-16T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 614, \"date\": \"2020-10-16T00:00:00\", \"score\": 5, \"index\": 41}, {\"level_0\": 615, \"date\": \"2020-10-17T00:00:00\", \"score\": 1, \"index\": 125}, {\"level_0\": 616, \"date\": \"2020-10-17T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 617, \"date\": \"2020-10-17T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 618, \"date\": \"2020-10-17T00:00:00\", \"score\": 4, \"index\": 16}, {\"level_0\": 619, \"date\": \"2020-10-17T00:00:00\", \"score\": 5, \"index\": 34}, {\"level_0\": 620, \"date\": \"2020-10-18T00:00:00\", \"score\": 1, \"index\": 118}, {\"level_0\": 621, \"date\": \"2020-10-18T00:00:00\", \"score\": 2, \"index\": 22}, {\"level_0\": 622, \"date\": \"2020-10-18T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 623, \"date\": \"2020-10-18T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 624, \"date\": \"2020-10-18T00:00:00\", \"score\": 5, \"index\": 43}, {\"level_0\": 625, \"date\": \"2020-10-19T00:00:00\", \"score\": 1, \"index\": 190}, {\"level_0\": 626, \"date\": \"2020-10-19T00:00:00\", \"score\": 2, \"index\": 54}, {\"level_0\": 627, \"date\": \"2020-10-19T00:00:00\", \"score\": 3, \"index\": 45}, {\"level_0\": 628, \"date\": \"2020-10-19T00:00:00\", \"score\": 4, \"index\": 45}, {\"level_0\": 629, \"date\": \"2020-10-19T00:00:00\", \"score\": 5, \"index\": 152}, {\"level_0\": 630, \"date\": \"2020-10-20T00:00:00\", \"score\": 1, \"index\": 182}, {\"level_0\": 631, \"date\": \"2020-10-20T00:00:00\", \"score\": 2, \"index\": 44}, {\"level_0\": 632, \"date\": \"2020-10-20T00:00:00\", \"score\": 3, \"index\": 56}, {\"level_0\": 633, \"date\": \"2020-10-20T00:00:00\", \"score\": 4, \"index\": 36}, {\"level_0\": 634, \"date\": \"2020-10-20T00:00:00\", \"score\": 5, \"index\": 91}, {\"level_0\": 635, \"date\": \"2020-10-21T00:00:00\", \"score\": 1, \"index\": 105}, {\"level_0\": 636, \"date\": \"2020-10-21T00:00:00\", \"score\": 2, \"index\": 23}, {\"level_0\": 637, \"date\": \"2020-10-21T00:00:00\", \"score\": 3, \"index\": 30}, {\"level_0\": 638, \"date\": \"2020-10-21T00:00:00\", \"score\": 4, \"index\": 21}, {\"level_0\": 639, \"date\": \"2020-10-21T00:00:00\", \"score\": 5, \"index\": 52}, {\"level_0\": 640, \"date\": \"2020-10-22T00:00:00\", \"score\": 1, \"index\": 117}, {\"level_0\": 641, \"date\": \"2020-10-22T00:00:00\", \"score\": 2, \"index\": 27}, {\"level_0\": 642, \"date\": \"2020-10-22T00:00:00\", \"score\": 3, \"index\": 41}, {\"level_0\": 643, \"date\": \"2020-10-22T00:00:00\", \"score\": 4, \"index\": 28}, {\"level_0\": 644, \"date\": \"2020-10-22T00:00:00\", \"score\": 5, \"index\": 43}, {\"level_0\": 645, \"date\": \"2020-10-23T00:00:00\", \"score\": 1, \"index\": 98}, {\"level_0\": 646, \"date\": \"2020-10-23T00:00:00\", \"score\": 2, \"index\": 24}, {\"level_0\": 647, \"date\": \"2020-10-23T00:00:00\", \"score\": 3, \"index\": 24}, {\"level_0\": 648, \"date\": \"2020-10-23T00:00:00\", \"score\": 4, \"index\": 20}, {\"level_0\": 649, \"date\": \"2020-10-23T00:00:00\", \"score\": 5, \"index\": 37}, {\"level_0\": 650, \"date\": \"2020-10-24T00:00:00\", \"score\": 1, \"index\": 73}, {\"level_0\": 651, \"date\": \"2020-10-24T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 652, \"date\": \"2020-10-24T00:00:00\", \"score\": 3, \"index\": 19}, {\"level_0\": 653, \"date\": \"2020-10-24T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 654, \"date\": \"2020-10-24T00:00:00\", \"score\": 5, \"index\": 36}, {\"level_0\": 655, \"date\": \"2020-10-25T00:00:00\", \"score\": 1, \"index\": 80}, {\"level_0\": 656, \"date\": \"2020-10-25T00:00:00\", \"score\": 2, \"index\": 20}, {\"level_0\": 657, \"date\": \"2020-10-25T00:00:00\", \"score\": 3, \"index\": 22}, {\"level_0\": 658, \"date\": \"2020-10-25T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 659, \"date\": \"2020-10-25T00:00:00\", \"score\": 5, \"index\": 37}, {\"level_0\": 660, \"date\": \"2020-10-26T00:00:00\", \"score\": 1, \"index\": 90}, {\"level_0\": 661, \"date\": \"2020-10-26T00:00:00\", \"score\": 2, \"index\": 20}, {\"level_0\": 662, \"date\": \"2020-10-26T00:00:00\", \"score\": 3, \"index\": 18}, {\"level_0\": 663, \"date\": \"2020-10-26T00:00:00\", \"score\": 4, \"index\": 14}, {\"level_0\": 664, \"date\": \"2020-10-26T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 665, \"date\": \"2020-10-27T00:00:00\", \"score\": 1, \"index\": 81}, {\"level_0\": 666, \"date\": \"2020-10-27T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 667, \"date\": \"2020-10-27T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 668, \"date\": \"2020-10-27T00:00:00\", \"score\": 4, \"index\": 21}, {\"level_0\": 669, \"date\": \"2020-10-27T00:00:00\", \"score\": 5, \"index\": 36}, {\"level_0\": 670, \"date\": \"2020-10-28T00:00:00\", \"score\": 1, \"index\": 81}, {\"level_0\": 671, \"date\": \"2020-10-28T00:00:00\", \"score\": 2, \"index\": 22}, {\"level_0\": 672, \"date\": \"2020-10-28T00:00:00\", \"score\": 3, \"index\": 31}, {\"level_0\": 673, \"date\": \"2020-10-28T00:00:00\", \"score\": 4, \"index\": 18}, {\"level_0\": 674, \"date\": \"2020-10-28T00:00:00\", \"score\": 5, \"index\": 36}, {\"level_0\": 675, \"date\": \"2020-10-29T00:00:00\", \"score\": 1, \"index\": 93}, {\"level_0\": 676, \"date\": \"2020-10-29T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 677, \"date\": \"2020-10-29T00:00:00\", \"score\": 3, \"index\": 23}, {\"level_0\": 678, \"date\": \"2020-10-29T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 679, \"date\": \"2020-10-29T00:00:00\", \"score\": 5, \"index\": 42}, {\"level_0\": 680, \"date\": \"2020-10-30T00:00:00\", \"score\": 1, \"index\": 103}, {\"level_0\": 681, \"date\": \"2020-10-30T00:00:00\", \"score\": 2, \"index\": 28}, {\"level_0\": 682, \"date\": \"2020-10-30T00:00:00\", \"score\": 3, \"index\": 27}, {\"level_0\": 683, \"date\": \"2020-10-30T00:00:00\", \"score\": 4, \"index\": 15}, {\"level_0\": 684, \"date\": \"2020-10-30T00:00:00\", \"score\": 5, \"index\": 37}, {\"level_0\": 685, \"date\": \"2020-10-31T00:00:00\", \"score\": 1, \"index\": 72}, {\"level_0\": 686, \"date\": \"2020-10-31T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 687, \"date\": \"2020-10-31T00:00:00\", \"score\": 3, \"index\": 19}, {\"level_0\": 688, \"date\": \"2020-10-31T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 689, \"date\": \"2020-10-31T00:00:00\", \"score\": 5, \"index\": 24}, {\"level_0\": 690, \"date\": \"2020-11-01T00:00:00\", \"score\": 1, \"index\": 70}, {\"level_0\": 691, \"date\": \"2020-11-01T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 692, \"date\": \"2020-11-01T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 693, \"date\": \"2020-11-01T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 694, \"date\": \"2020-11-01T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 695, \"date\": \"2020-11-02T00:00:00\", \"score\": 1, \"index\": 79}, {\"level_0\": 696, \"date\": \"2020-11-02T00:00:00\", \"score\": 2, \"index\": 25}, {\"level_0\": 697, \"date\": \"2020-11-02T00:00:00\", \"score\": 3, \"index\": 23}, {\"level_0\": 698, \"date\": \"2020-11-02T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 699, \"date\": \"2020-11-02T00:00:00\", \"score\": 5, \"index\": 28}, {\"level_0\": 700, \"date\": \"2020-11-03T00:00:00\", \"score\": 1, \"index\": 61}, {\"level_0\": 701, \"date\": \"2020-11-03T00:00:00\", \"score\": 2, \"index\": 24}, {\"level_0\": 702, \"date\": \"2020-11-03T00:00:00\", \"score\": 3, \"index\": 29}, {\"level_0\": 703, \"date\": \"2020-11-03T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 704, \"date\": \"2020-11-03T00:00:00\", \"score\": 5, \"index\": 28}, {\"level_0\": 705, \"date\": \"2020-11-04T00:00:00\", \"score\": 1, \"index\": 64}, {\"level_0\": 706, \"date\": \"2020-11-04T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 707, \"date\": \"2020-11-04T00:00:00\", \"score\": 3, \"index\": 28}, {\"level_0\": 708, \"date\": \"2020-11-04T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 709, \"date\": \"2020-11-04T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 710, \"date\": \"2020-11-05T00:00:00\", \"score\": 1, \"index\": 53}, {\"level_0\": 711, \"date\": \"2020-11-05T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 712, \"date\": \"2020-11-05T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 713, \"date\": \"2020-11-05T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 714, \"date\": \"2020-11-05T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 715, \"date\": \"2020-11-06T00:00:00\", \"score\": 1, \"index\": 68}, {\"level_0\": 716, \"date\": \"2020-11-06T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 717, \"date\": \"2020-11-06T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 718, \"date\": \"2020-11-06T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 719, \"date\": \"2020-11-06T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 720, \"date\": \"2020-11-07T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 721, \"date\": \"2020-11-07T00:00:00\", \"score\": 2, \"index\": 17}, {\"level_0\": 722, \"date\": \"2020-11-07T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 723, \"date\": \"2020-11-07T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 724, \"date\": \"2020-11-07T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 725, \"date\": \"2020-11-08T00:00:00\", \"score\": 1, \"index\": 57}, {\"level_0\": 726, \"date\": \"2020-11-08T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 727, \"date\": \"2020-11-08T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 728, \"date\": \"2020-11-08T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 729, \"date\": \"2020-11-08T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 730, \"date\": \"2020-11-09T00:00:00\", \"score\": 1, \"index\": 61}, {\"level_0\": 731, \"date\": \"2020-11-09T00:00:00\", \"score\": 2, \"index\": 17}, {\"level_0\": 732, \"date\": \"2020-11-09T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 733, \"date\": \"2020-11-09T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 734, \"date\": \"2020-11-09T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 735, \"date\": \"2020-11-10T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 736, \"date\": \"2020-11-10T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 737, \"date\": \"2020-11-10T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 738, \"date\": \"2020-11-10T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 739, \"date\": \"2020-11-10T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 740, \"date\": \"2020-11-11T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 741, \"date\": \"2020-11-11T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 742, \"date\": \"2020-11-11T00:00:00\", \"score\": 3, \"index\": 22}, {\"level_0\": 743, \"date\": \"2020-11-11T00:00:00\", \"score\": 4, \"index\": 16}, {\"level_0\": 744, \"date\": \"2020-11-11T00:00:00\", \"score\": 5, \"index\": 29}, {\"level_0\": 745, \"date\": \"2020-11-12T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 746, \"date\": \"2020-11-12T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 747, \"date\": \"2020-11-12T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 748, \"date\": \"2020-11-12T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 749, \"date\": \"2020-11-12T00:00:00\", \"score\": 5, \"index\": 32}, {\"level_0\": 750, \"date\": \"2020-11-13T00:00:00\", \"score\": 1, \"index\": 65}, {\"level_0\": 751, \"date\": \"2020-11-13T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 752, \"date\": \"2020-11-13T00:00:00\", \"score\": 3, \"index\": 20}, {\"level_0\": 753, \"date\": \"2020-11-13T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 754, \"date\": \"2020-11-13T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 755, \"date\": \"2020-11-14T00:00:00\", \"score\": 1, \"index\": 62}, {\"level_0\": 756, \"date\": \"2020-11-14T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 757, \"date\": \"2020-11-14T00:00:00\", \"score\": 3, \"index\": 19}, {\"level_0\": 758, \"date\": \"2020-11-14T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 759, \"date\": \"2020-11-14T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 760, \"date\": \"2020-11-15T00:00:00\", \"score\": 1, \"index\": 85}, {\"level_0\": 761, \"date\": \"2020-11-15T00:00:00\", \"score\": 2, \"index\": 39}, {\"level_0\": 762, \"date\": \"2020-11-15T00:00:00\", \"score\": 3, \"index\": 28}, {\"level_0\": 763, \"date\": \"2020-11-15T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 764, \"date\": \"2020-11-15T00:00:00\", \"score\": 5, \"index\": 25}, {\"level_0\": 765, \"date\": \"2020-11-16T00:00:00\", \"score\": 1, \"index\": 105}, {\"level_0\": 766, \"date\": \"2020-11-16T00:00:00\", \"score\": 2, \"index\": 31}, {\"level_0\": 767, \"date\": \"2020-11-16T00:00:00\", \"score\": 3, \"index\": 38}, {\"level_0\": 768, \"date\": \"2020-11-16T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 769, \"date\": \"2020-11-16T00:00:00\", \"score\": 5, \"index\": 30}, {\"level_0\": 770, \"date\": \"2020-11-17T00:00:00\", \"score\": 1, \"index\": 72}, {\"level_0\": 771, \"date\": \"2020-11-17T00:00:00\", \"score\": 2, \"index\": 23}, {\"level_0\": 772, \"date\": \"2020-11-17T00:00:00\", \"score\": 3, \"index\": 29}, {\"level_0\": 773, \"date\": \"2020-11-17T00:00:00\", \"score\": 4, \"index\": 21}, {\"level_0\": 774, \"date\": \"2020-11-17T00:00:00\", \"score\": 5, \"index\": 44}, {\"level_0\": 775, \"date\": \"2020-11-18T00:00:00\", \"score\": 1, \"index\": 64}, {\"level_0\": 776, \"date\": \"2020-11-18T00:00:00\", \"score\": 2, \"index\": 20}, {\"level_0\": 777, \"date\": \"2020-11-18T00:00:00\", \"score\": 3, \"index\": 22}, {\"level_0\": 778, \"date\": \"2020-11-18T00:00:00\", \"score\": 4, \"index\": 16}, {\"level_0\": 779, \"date\": \"2020-11-18T00:00:00\", \"score\": 5, \"index\": 33}, {\"level_0\": 780, \"date\": \"2020-11-19T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 781, \"date\": \"2020-11-19T00:00:00\", \"score\": 2, \"index\": 26}, {\"level_0\": 782, \"date\": \"2020-11-19T00:00:00\", \"score\": 3, \"index\": 25}, {\"level_0\": 783, \"date\": \"2020-11-19T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 784, \"date\": \"2020-11-19T00:00:00\", \"score\": 5, \"index\": 33}, {\"level_0\": 785, \"date\": \"2020-11-20T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 786, \"date\": \"2020-11-20T00:00:00\", \"score\": 2, \"index\": 19}, {\"level_0\": 787, \"date\": \"2020-11-20T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 788, \"date\": \"2020-11-20T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 789, \"date\": \"2020-11-20T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 790, \"date\": \"2020-11-21T00:00:00\", \"score\": 1, \"index\": 64}, {\"level_0\": 791, \"date\": \"2020-11-21T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 792, \"date\": \"2020-11-21T00:00:00\", \"score\": 3, \"index\": 19}, {\"level_0\": 793, \"date\": \"2020-11-21T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 794, \"date\": \"2020-11-21T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 795, \"date\": \"2020-11-22T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 796, \"date\": \"2020-11-22T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 797, \"date\": \"2020-11-22T00:00:00\", \"score\": 3, \"index\": 18}, {\"level_0\": 798, \"date\": \"2020-11-22T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 799, \"date\": \"2020-11-22T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 800, \"date\": \"2020-11-23T00:00:00\", \"score\": 1, \"index\": 77}, {\"level_0\": 801, \"date\": \"2020-11-23T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 802, \"date\": \"2020-11-23T00:00:00\", \"score\": 3, \"index\": 17}, {\"level_0\": 803, \"date\": \"2020-11-23T00:00:00\", \"score\": 4, \"index\": 17}, {\"level_0\": 804, \"date\": \"2020-11-23T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 805, \"date\": \"2020-11-24T00:00:00\", \"score\": 1, \"index\": 70}, {\"level_0\": 806, \"date\": \"2020-11-24T00:00:00\", \"score\": 2, \"index\": 24}, {\"level_0\": 807, \"date\": \"2020-11-24T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 808, \"date\": \"2020-11-24T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 809, \"date\": \"2020-11-24T00:00:00\", \"score\": 5, \"index\": 25}, {\"level_0\": 810, \"date\": \"2020-11-25T00:00:00\", \"score\": 1, \"index\": 84}, {\"level_0\": 811, \"date\": \"2020-11-25T00:00:00\", \"score\": 2, \"index\": 29}, {\"level_0\": 812, \"date\": \"2020-11-25T00:00:00\", \"score\": 3, \"index\": 40}, {\"level_0\": 813, \"date\": \"2020-11-25T00:00:00\", \"score\": 4, \"index\": 25}, {\"level_0\": 814, \"date\": \"2020-11-25T00:00:00\", \"score\": 5, \"index\": 86}, {\"level_0\": 815, \"date\": \"2020-11-26T00:00:00\", \"score\": 1, \"index\": 158}, {\"level_0\": 816, \"date\": \"2020-11-26T00:00:00\", \"score\": 2, \"index\": 77}, {\"level_0\": 817, \"date\": \"2020-11-26T00:00:00\", \"score\": 3, \"index\": 101}, {\"level_0\": 818, \"date\": \"2020-11-26T00:00:00\", \"score\": 4, \"index\": 82}, {\"level_0\": 819, \"date\": \"2020-11-26T00:00:00\", \"score\": 5, \"index\": 124}, {\"level_0\": 820, \"date\": \"2020-11-27T00:00:00\", \"score\": 1, \"index\": 143}, {\"level_0\": 821, \"date\": \"2020-11-27T00:00:00\", \"score\": 2, \"index\": 36}, {\"level_0\": 822, \"date\": \"2020-11-27T00:00:00\", \"score\": 3, \"index\": 58}, {\"level_0\": 823, \"date\": \"2020-11-27T00:00:00\", \"score\": 4, \"index\": 53}, {\"level_0\": 824, \"date\": \"2020-11-27T00:00:00\", \"score\": 5, \"index\": 91}, {\"level_0\": 825, \"date\": \"2020-11-28T00:00:00\", \"score\": 1, \"index\": 70}, {\"level_0\": 826, \"date\": \"2020-11-28T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 827, \"date\": \"2020-11-28T00:00:00\", \"score\": 3, \"index\": 24}, {\"level_0\": 828, \"date\": \"2020-11-28T00:00:00\", \"score\": 4, \"index\": 24}, {\"level_0\": 829, \"date\": \"2020-11-28T00:00:00\", \"score\": 5, \"index\": 65}, {\"level_0\": 830, \"date\": \"2020-11-29T00:00:00\", \"score\": 1, \"index\": 67}, {\"level_0\": 831, \"date\": \"2020-11-29T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 832, \"date\": \"2020-11-29T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 833, \"date\": \"2020-11-29T00:00:00\", \"score\": 4, \"index\": 14}, {\"level_0\": 834, \"date\": \"2020-11-29T00:00:00\", \"score\": 5, \"index\": 47}, {\"level_0\": 835, \"date\": \"2020-11-30T00:00:00\", \"score\": 1, \"index\": 70}, {\"level_0\": 836, \"date\": \"2020-11-30T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 837, \"date\": \"2020-11-30T00:00:00\", \"score\": 3, \"index\": 26}, {\"level_0\": 838, \"date\": \"2020-11-30T00:00:00\", \"score\": 4, \"index\": 15}, {\"level_0\": 839, \"date\": \"2020-11-30T00:00:00\", \"score\": 5, \"index\": 24}, {\"level_0\": 840, \"date\": \"2020-12-01T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 841, \"date\": \"2020-12-01T00:00:00\", \"score\": 2, \"index\": 19}, {\"level_0\": 842, \"date\": \"2020-12-01T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 843, \"date\": \"2020-12-01T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 844, \"date\": \"2020-12-01T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 845, \"date\": \"2020-12-02T00:00:00\", \"score\": 1, \"index\": 69}, {\"level_0\": 846, \"date\": \"2020-12-02T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 847, \"date\": \"2020-12-02T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 848, \"date\": \"2020-12-02T00:00:00\", \"score\": 4, \"index\": 21}, {\"level_0\": 849, \"date\": \"2020-12-02T00:00:00\", \"score\": 5, \"index\": 28}, {\"level_0\": 850, \"date\": \"2020-12-03T00:00:00\", \"score\": 1, \"index\": 64}, {\"level_0\": 851, \"date\": \"2020-12-03T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 852, \"date\": \"2020-12-03T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 853, \"date\": \"2020-12-03T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 854, \"date\": \"2020-12-03T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 855, \"date\": \"2020-12-04T00:00:00\", \"score\": 1, \"index\": 78}, {\"level_0\": 856, \"date\": \"2020-12-04T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 857, \"date\": \"2020-12-04T00:00:00\", \"score\": 3, \"index\": 19}, {\"level_0\": 858, \"date\": \"2020-12-04T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 859, \"date\": \"2020-12-04T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 860, \"date\": \"2020-12-05T00:00:00\", \"score\": 1, \"index\": 63}, {\"level_0\": 861, \"date\": \"2020-12-05T00:00:00\", \"score\": 2, \"index\": 19}, {\"level_0\": 862, \"date\": \"2020-12-05T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 863, \"date\": \"2020-12-05T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 864, \"date\": \"2020-12-05T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 865, \"date\": \"2020-12-06T00:00:00\", \"score\": 1, \"index\": 74}, {\"level_0\": 866, \"date\": \"2020-12-06T00:00:00\", \"score\": 2, \"index\": 17}, {\"level_0\": 867, \"date\": \"2020-12-06T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 868, \"date\": \"2020-12-06T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 869, \"date\": \"2020-12-06T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 870, \"date\": \"2020-12-07T00:00:00\", \"score\": 1, \"index\": 79}, {\"level_0\": 871, \"date\": \"2020-12-07T00:00:00\", \"score\": 2, \"index\": 17}, {\"level_0\": 872, \"date\": \"2020-12-07T00:00:00\", \"score\": 3, \"index\": 25}, {\"level_0\": 873, \"date\": \"2020-12-07T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 874, \"date\": \"2020-12-07T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 875, \"date\": \"2020-12-08T00:00:00\", \"score\": 1, \"index\": 83}, {\"level_0\": 876, \"date\": \"2020-12-08T00:00:00\", \"score\": 2, \"index\": 23}, {\"level_0\": 877, \"date\": \"2020-12-08T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 878, \"date\": \"2020-12-08T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 879, \"date\": \"2020-12-08T00:00:00\", \"score\": 5, \"index\": 24}, {\"level_0\": 880, \"date\": \"2020-12-09T00:00:00\", \"score\": 1, \"index\": 63}, {\"level_0\": 881, \"date\": \"2020-12-09T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 882, \"date\": \"2020-12-09T00:00:00\", \"score\": 3, \"index\": 27}, {\"level_0\": 883, \"date\": \"2020-12-09T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 884, \"date\": \"2020-12-09T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 885, \"date\": \"2020-12-10T00:00:00\", \"score\": 1, \"index\": 51}, {\"level_0\": 886, \"date\": \"2020-12-10T00:00:00\", \"score\": 2, \"index\": 29}, {\"level_0\": 887, \"date\": \"2020-12-10T00:00:00\", \"score\": 3, \"index\": 18}, {\"level_0\": 888, \"date\": \"2020-12-10T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 889, \"date\": \"2020-12-10T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 890, \"date\": \"2020-12-11T00:00:00\", \"score\": 1, \"index\": 67}, {\"level_0\": 891, \"date\": \"2020-12-11T00:00:00\", \"score\": 2, \"index\": 20}, {\"level_0\": 892, \"date\": \"2020-12-11T00:00:00\", \"score\": 3, \"index\": 20}, {\"level_0\": 893, \"date\": \"2020-12-11T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 894, \"date\": \"2020-12-11T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 895, \"date\": \"2020-12-12T00:00:00\", \"score\": 1, \"index\": 75}, {\"level_0\": 896, \"date\": \"2020-12-12T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 897, \"date\": \"2020-12-12T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 898, \"date\": \"2020-12-12T00:00:00\", \"score\": 4, \"index\": 17}, {\"level_0\": 899, \"date\": \"2020-12-12T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 900, \"date\": \"2020-12-13T00:00:00\", \"score\": 1, \"index\": 71}, {\"level_0\": 901, \"date\": \"2020-12-13T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 902, \"date\": \"2020-12-13T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 903, \"date\": \"2020-12-13T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 904, \"date\": \"2020-12-13T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 905, \"date\": \"2020-12-14T00:00:00\", \"score\": 1, \"index\": 96}, {\"level_0\": 906, \"date\": \"2020-12-14T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 907, \"date\": \"2020-12-14T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 908, \"date\": \"2020-12-14T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 909, \"date\": \"2020-12-14T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 910, \"date\": \"2020-12-15T00:00:00\", \"score\": 1, \"index\": 93}, {\"level_0\": 911, \"date\": \"2020-12-15T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 912, \"date\": \"2020-12-15T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 913, \"date\": \"2020-12-15T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 914, \"date\": \"2020-12-15T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 915, \"date\": \"2020-12-16T00:00:00\", \"score\": 1, \"index\": 104}, {\"level_0\": 916, \"date\": \"2020-12-16T00:00:00\", \"score\": 2, \"index\": 19}, {\"level_0\": 917, \"date\": \"2020-12-16T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 918, \"date\": \"2020-12-16T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 919, \"date\": \"2020-12-16T00:00:00\", \"score\": 5, \"index\": 25}, {\"level_0\": 920, \"date\": \"2020-12-17T00:00:00\", \"score\": 1, \"index\": 120}, {\"level_0\": 921, \"date\": \"2020-12-17T00:00:00\", \"score\": 2, \"index\": 31}, {\"level_0\": 922, \"date\": \"2020-12-17T00:00:00\", \"score\": 3, \"index\": 28}, {\"level_0\": 923, \"date\": \"2020-12-17T00:00:00\", \"score\": 4, \"index\": 20}, {\"level_0\": 924, \"date\": \"2020-12-17T00:00:00\", \"score\": 5, \"index\": 72}, {\"level_0\": 925, \"date\": \"2020-12-18T00:00:00\", \"score\": 1, \"index\": 110}, {\"level_0\": 926, \"date\": \"2020-12-18T00:00:00\", \"score\": 2, \"index\": 27}, {\"level_0\": 927, \"date\": \"2020-12-18T00:00:00\", \"score\": 3, \"index\": 37}, {\"level_0\": 928, \"date\": \"2020-12-18T00:00:00\", \"score\": 4, \"index\": 26}, {\"level_0\": 929, \"date\": \"2020-12-18T00:00:00\", \"score\": 5, \"index\": 69}, {\"level_0\": 930, \"date\": \"2020-12-19T00:00:00\", \"score\": 1, \"index\": 94}, {\"level_0\": 931, \"date\": \"2020-12-19T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 932, \"date\": \"2020-12-19T00:00:00\", \"score\": 3, \"index\": 39}, {\"level_0\": 933, \"date\": \"2020-12-19T00:00:00\", \"score\": 4, \"index\": 23}, {\"level_0\": 934, \"date\": \"2020-12-19T00:00:00\", \"score\": 5, \"index\": 45}, {\"level_0\": 935, \"date\": \"2020-12-20T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 936, \"date\": \"2020-12-20T00:00:00\", \"score\": 2, \"index\": 22}, {\"level_0\": 937, \"date\": \"2020-12-20T00:00:00\", \"score\": 3, \"index\": 28}, {\"level_0\": 938, \"date\": \"2020-12-20T00:00:00\", \"score\": 4, \"index\": 17}, {\"level_0\": 939, \"date\": \"2020-12-20T00:00:00\", \"score\": 5, \"index\": 38}, {\"level_0\": 940, \"date\": \"2020-12-21T00:00:00\", \"score\": 1, \"index\": 71}, {\"level_0\": 941, \"date\": \"2020-12-21T00:00:00\", \"score\": 2, \"index\": 28}, {\"level_0\": 942, \"date\": \"2020-12-21T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 943, \"date\": \"2020-12-21T00:00:00\", \"score\": 4, \"index\": 16}, {\"level_0\": 944, \"date\": \"2020-12-21T00:00:00\", \"score\": 5, \"index\": 34}, {\"level_0\": 945, \"date\": \"2020-12-22T00:00:00\", \"score\": 1, \"index\": 65}, {\"level_0\": 946, \"date\": \"2020-12-22T00:00:00\", \"score\": 2, \"index\": 20}, {\"level_0\": 947, \"date\": \"2020-12-22T00:00:00\", \"score\": 3, \"index\": 17}, {\"level_0\": 948, \"date\": \"2020-12-22T00:00:00\", \"score\": 4, \"index\": 15}, {\"level_0\": 949, \"date\": \"2020-12-22T00:00:00\", \"score\": 5, \"index\": 28}, {\"level_0\": 950, \"date\": \"2020-12-23T00:00:00\", \"score\": 1, \"index\": 55}, {\"level_0\": 951, \"date\": \"2020-12-23T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 952, \"date\": \"2020-12-23T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 953, \"date\": \"2020-12-23T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 954, \"date\": \"2020-12-23T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 955, \"date\": \"2020-12-24T00:00:00\", \"score\": 1, \"index\": 53}, {\"level_0\": 956, \"date\": \"2020-12-24T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 957, \"date\": \"2020-12-24T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 958, \"date\": \"2020-12-24T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 959, \"date\": \"2020-12-24T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 960, \"date\": \"2020-12-25T00:00:00\", \"score\": 1, \"index\": 55}, {\"level_0\": 961, \"date\": \"2020-12-25T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 962, \"date\": \"2020-12-25T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 963, \"date\": \"2020-12-25T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 964, \"date\": \"2020-12-25T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 965, \"date\": \"2020-12-26T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 966, \"date\": \"2020-12-26T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 967, \"date\": \"2020-12-26T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 968, \"date\": \"2020-12-26T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 969, \"date\": \"2020-12-26T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 970, \"date\": \"2020-12-27T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 971, \"date\": \"2020-12-27T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 972, \"date\": \"2020-12-27T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 973, \"date\": \"2020-12-27T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 974, \"date\": \"2020-12-27T00:00:00\", \"score\": 5, \"index\": 12}, {\"level_0\": 975, \"date\": \"2020-12-28T00:00:00\", \"score\": 1, \"index\": 74}, {\"level_0\": 976, \"date\": \"2020-12-28T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 977, \"date\": \"2020-12-28T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 978, \"date\": \"2020-12-28T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 979, \"date\": \"2020-12-28T00:00:00\", \"score\": 5, \"index\": 31}, {\"level_0\": 980, \"date\": \"2020-12-29T00:00:00\", \"score\": 1, \"index\": 75}, {\"level_0\": 981, \"date\": \"2020-12-29T00:00:00\", \"score\": 2, \"index\": 25}, {\"level_0\": 982, \"date\": \"2020-12-29T00:00:00\", \"score\": 3, \"index\": 24}, {\"level_0\": 983, \"date\": \"2020-12-29T00:00:00\", \"score\": 4, \"index\": 22}, {\"level_0\": 984, \"date\": \"2020-12-29T00:00:00\", \"score\": 5, \"index\": 58}, {\"level_0\": 985, \"date\": \"2020-12-30T00:00:00\", \"score\": 1, \"index\": 99}, {\"level_0\": 986, \"date\": \"2020-12-30T00:00:00\", \"score\": 2, \"index\": 35}, {\"level_0\": 987, \"date\": \"2020-12-30T00:00:00\", \"score\": 3, \"index\": 36}, {\"level_0\": 988, \"date\": \"2020-12-30T00:00:00\", \"score\": 4, \"index\": 33}, {\"level_0\": 989, \"date\": \"2020-12-30T00:00:00\", \"score\": 5, \"index\": 65}, {\"level_0\": 990, \"date\": \"2020-12-31T00:00:00\", \"score\": 1, \"index\": 37}, {\"level_0\": 991, \"date\": \"2020-12-31T00:00:00\", \"score\": 2, \"index\": 17}, {\"level_0\": 992, \"date\": \"2020-12-31T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 993, \"date\": \"2020-12-31T00:00:00\", \"score\": 4, \"index\": 24}, {\"level_0\": 994, \"date\": \"2020-12-31T00:00:00\", \"score\": 5, \"index\": 32}, {\"level_0\": 995, \"date\": \"2021-01-01T00:00:00\", \"score\": 1, \"index\": 40}, {\"level_0\": 996, \"date\": \"2021-01-01T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 997, \"date\": \"2021-01-01T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 998, \"date\": \"2021-01-01T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 999, \"date\": \"2021-01-01T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1000, \"date\": \"2021-01-02T00:00:00\", \"score\": 1, \"index\": 51}, {\"level_0\": 1001, \"date\": \"2021-01-02T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 1002, \"date\": \"2021-01-02T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1003, \"date\": \"2021-01-02T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 1004, \"date\": \"2021-01-02T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 1005, \"date\": \"2021-01-03T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 1006, \"date\": \"2021-01-03T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 1007, \"date\": \"2021-01-03T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1008, \"date\": \"2021-01-03T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 1009, \"date\": \"2021-01-03T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 1010, \"date\": \"2021-01-04T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 1011, \"date\": \"2021-01-04T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1012, \"date\": \"2021-01-04T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1013, \"date\": \"2021-01-04T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1014, \"date\": \"2021-01-04T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 1015, \"date\": \"2021-01-05T00:00:00\", \"score\": 1, \"index\": 49}, {\"level_0\": 1016, \"date\": \"2021-01-05T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 1017, \"date\": \"2021-01-05T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1018, \"date\": \"2021-01-05T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 1019, \"date\": \"2021-01-05T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 1020, \"date\": \"2021-01-06T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 1021, \"date\": \"2021-01-06T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 1022, \"date\": \"2021-01-06T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1023, \"date\": \"2021-01-06T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 1024, \"date\": \"2021-01-06T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 1025, \"date\": \"2021-01-07T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 1026, \"date\": \"2021-01-07T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 1027, \"date\": \"2021-01-07T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1028, \"date\": \"2021-01-07T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1029, \"date\": \"2021-01-07T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 1030, \"date\": \"2021-01-08T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 1031, \"date\": \"2021-01-08T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1032, \"date\": \"2021-01-08T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 1033, \"date\": \"2021-01-08T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1034, \"date\": \"2021-01-08T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1035, \"date\": \"2021-01-09T00:00:00\", \"score\": 1, \"index\": 43}, {\"level_0\": 1036, \"date\": \"2021-01-09T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 1037, \"date\": \"2021-01-09T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 1038, \"date\": \"2021-01-09T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1039, \"date\": \"2021-01-09T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1040, \"date\": \"2021-01-10T00:00:00\", \"score\": 1, \"index\": 32}, {\"level_0\": 1041, \"date\": \"2021-01-10T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 1042, \"date\": \"2021-01-10T00:00:00\", \"score\": 3, \"index\": 3}, {\"level_0\": 1043, \"date\": \"2021-01-10T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1044, \"date\": \"2021-01-10T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1045, \"date\": \"2021-01-11T00:00:00\", \"score\": 1, \"index\": 34}, {\"level_0\": 1046, \"date\": \"2021-01-11T00:00:00\", \"score\": 2, \"index\": 5}, {\"level_0\": 1047, \"date\": \"2021-01-11T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 1048, \"date\": \"2021-01-11T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1049, \"date\": \"2021-01-11T00:00:00\", \"score\": 5, \"index\": 2}, {\"level_0\": 1050, \"date\": \"2021-01-12T00:00:00\", \"score\": 1, \"index\": 39}, {\"level_0\": 1051, \"date\": \"2021-01-12T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 1052, \"date\": \"2021-01-12T00:00:00\", \"score\": 3, \"index\": 1}, {\"level_0\": 1053, \"date\": \"2021-01-12T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 1054, \"date\": \"2021-01-12T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1055, \"date\": \"2021-01-13T00:00:00\", \"score\": 1, \"index\": 146}, {\"level_0\": 1056, \"date\": \"2021-01-13T00:00:00\", \"score\": 2, \"index\": 46}, {\"level_0\": 1057, \"date\": \"2021-01-13T00:00:00\", \"score\": 3, \"index\": 50}, {\"level_0\": 1058, \"date\": \"2021-01-13T00:00:00\", \"score\": 4, \"index\": 36}, {\"level_0\": 1059, \"date\": \"2021-01-13T00:00:00\", \"score\": 5, \"index\": 32}, {\"level_0\": 1060, \"date\": \"2021-01-14T00:00:00\", \"score\": 1, \"index\": 92}, {\"level_0\": 1061, \"date\": \"2021-01-14T00:00:00\", \"score\": 2, \"index\": 19}, {\"level_0\": 1062, \"date\": \"2021-01-14T00:00:00\", \"score\": 3, \"index\": 20}, {\"level_0\": 1063, \"date\": \"2021-01-14T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 1064, \"date\": \"2021-01-14T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 1065, \"date\": \"2021-01-15T00:00:00\", \"score\": 1, \"index\": 49}, {\"level_0\": 1066, \"date\": \"2021-01-15T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 1067, \"date\": \"2021-01-15T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 1068, \"date\": \"2021-01-15T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1069, \"date\": \"2021-01-15T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 1070, \"date\": \"2021-01-16T00:00:00\", \"score\": 1, \"index\": 59}, {\"level_0\": 1071, \"date\": \"2021-01-16T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 1072, \"date\": \"2021-01-16T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1073, \"date\": \"2021-01-16T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1074, \"date\": \"2021-01-16T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 1075, \"date\": \"2021-01-17T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 1076, \"date\": \"2021-01-17T00:00:00\", \"score\": 2, \"index\": 1}, {\"level_0\": 1077, \"date\": \"2021-01-17T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 1078, \"date\": \"2021-01-17T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1079, \"date\": \"2021-01-17T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 1080, \"date\": \"2021-01-18T00:00:00\", \"score\": 1, \"index\": 33}, {\"level_0\": 1081, \"date\": \"2021-01-18T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 1082, \"date\": \"2021-01-18T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1083, \"date\": \"2021-01-18T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1084, \"date\": \"2021-01-18T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 1085, \"date\": \"2021-01-19T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 1086, \"date\": \"2021-01-19T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 1087, \"date\": \"2021-01-19T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1088, \"date\": \"2021-01-19T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1089, \"date\": \"2021-01-19T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 1090, \"date\": \"2021-01-20T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 1091, \"date\": \"2021-01-20T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 1092, \"date\": \"2021-01-20T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1093, \"date\": \"2021-01-20T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1094, \"date\": \"2021-01-20T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 1095, \"date\": \"2021-01-21T00:00:00\", \"score\": 1, \"index\": 34}, {\"level_0\": 1096, \"date\": \"2021-01-21T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 1097, \"date\": \"2021-01-21T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 1098, \"date\": \"2021-01-21T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 1099, \"date\": \"2021-01-21T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1100, \"date\": \"2021-01-22T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 1101, \"date\": \"2021-01-22T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 1102, \"date\": \"2021-01-22T00:00:00\", \"score\": 3, \"index\": 1}, {\"level_0\": 1103, \"date\": \"2021-01-22T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1104, \"date\": \"2021-01-22T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 1105, \"date\": \"2021-01-23T00:00:00\", \"score\": 1, \"index\": 25}, {\"level_0\": 1106, \"date\": \"2021-01-23T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 1107, \"date\": \"2021-01-23T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 1108, \"date\": \"2021-01-23T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1109, \"date\": \"2021-01-23T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 1110, \"date\": \"2021-01-24T00:00:00\", \"score\": 1, \"index\": 32}, {\"level_0\": 1111, \"date\": \"2021-01-24T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1112, \"date\": \"2021-01-24T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 1113, \"date\": \"2021-01-24T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1114, \"date\": \"2021-01-24T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1115, \"date\": \"2021-01-25T00:00:00\", \"score\": 1, \"index\": 23}, {\"level_0\": 1116, \"date\": \"2021-01-25T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 1117, \"date\": \"2021-01-25T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1118, \"date\": \"2021-01-25T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 1119, \"date\": \"2021-01-25T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1120, \"date\": \"2021-01-26T00:00:00\", \"score\": 1, \"index\": 32}, {\"level_0\": 1121, \"date\": \"2021-01-26T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 1122, \"date\": \"2021-01-26T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1123, \"date\": \"2021-01-26T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1124, \"date\": \"2021-01-26T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 1125, \"date\": \"2021-01-27T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 1126, \"date\": \"2021-01-27T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1127, \"date\": \"2021-01-27T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 1128, \"date\": \"2021-01-27T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1129, \"date\": \"2021-01-27T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1130, \"date\": \"2021-01-28T00:00:00\", \"score\": 1, \"index\": 32}, {\"level_0\": 1131, \"date\": \"2021-01-28T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1132, \"date\": \"2021-01-28T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 1133, \"date\": \"2021-01-28T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 1134, \"date\": \"2021-01-28T00:00:00\", \"score\": 5, \"index\": 8}, {\"level_0\": 1135, \"date\": \"2021-01-29T00:00:00\", \"score\": 1, \"index\": 48}, {\"level_0\": 1136, \"date\": \"2021-01-29T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 1137, \"date\": \"2021-01-29T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1138, \"date\": \"2021-01-29T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 1139, \"date\": \"2021-01-29T00:00:00\", \"score\": 5, \"index\": 34}, {\"level_0\": 1140, \"date\": \"2021-01-30T00:00:00\", \"score\": 1, \"index\": 54}, {\"level_0\": 1141, \"date\": \"2021-01-30T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 1142, \"date\": \"2021-01-30T00:00:00\", \"score\": 3, \"index\": 18}, {\"level_0\": 1143, \"date\": \"2021-01-30T00:00:00\", \"score\": 4, \"index\": 20}, {\"level_0\": 1144, \"date\": \"2021-01-30T00:00:00\", \"score\": 5, \"index\": 72}, {\"level_0\": 1145, \"date\": \"2021-01-31T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 1146, \"date\": \"2021-01-31T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1147, \"date\": \"2021-01-31T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 1148, \"date\": \"2021-01-31T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 1149, \"date\": \"2021-01-31T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 1150, \"date\": \"2021-02-01T00:00:00\", \"score\": 1, \"index\": 27}, {\"level_0\": 1151, \"date\": \"2021-02-01T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 1152, \"date\": \"2021-02-01T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 1153, \"date\": \"2021-02-01T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 1154, \"date\": \"2021-02-01T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 1155, \"date\": \"2021-02-02T00:00:00\", \"score\": 1, \"index\": 34}, {\"level_0\": 1156, \"date\": \"2021-02-02T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 1157, \"date\": \"2021-02-02T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 1158, \"date\": \"2021-02-02T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 1159, \"date\": \"2021-02-02T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 1160, \"date\": \"2021-02-03T00:00:00\", \"score\": 1, \"index\": 29}, {\"level_0\": 1161, \"date\": \"2021-02-03T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1162, \"date\": \"2021-02-03T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 1163, \"date\": \"2021-02-03T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1164, \"date\": \"2021-02-03T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1165, \"date\": \"2021-02-04T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 1166, \"date\": \"2021-02-04T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 1167, \"date\": \"2021-02-04T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1168, \"date\": \"2021-02-04T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 1169, \"date\": \"2021-02-04T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 1170, \"date\": \"2021-02-05T00:00:00\", \"score\": 1, \"index\": 33}, {\"level_0\": 1171, \"date\": \"2021-02-05T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 1172, \"date\": \"2021-02-05T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 1173, \"date\": \"2021-02-05T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1174, \"date\": \"2021-02-05T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 1175, \"date\": \"2021-02-06T00:00:00\", \"score\": 1, \"index\": 20}, {\"level_0\": 1176, \"date\": \"2021-02-06T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 1177, \"date\": \"2021-02-06T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1178, \"date\": \"2021-02-06T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1179, \"date\": \"2021-02-06T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 1180, \"date\": \"2021-02-07T00:00:00\", \"score\": 1, \"index\": 23}, {\"level_0\": 1181, \"date\": \"2021-02-07T00:00:00\", \"score\": 2, \"index\": 2}, {\"level_0\": 1182, \"date\": \"2021-02-07T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 1183, \"date\": \"2021-02-07T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 1184, \"date\": \"2021-02-07T00:00:00\", \"score\": 5, \"index\": 8}, {\"level_0\": 1185, \"date\": \"2021-02-08T00:00:00\", \"score\": 1, \"index\": 21}, {\"level_0\": 1186, \"date\": \"2021-02-08T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1187, \"date\": \"2021-02-08T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1188, \"date\": \"2021-02-08T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 1189, \"date\": \"2021-02-08T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1190, \"date\": \"2021-02-09T00:00:00\", \"score\": 1, \"index\": 26}, {\"level_0\": 1191, \"date\": \"2021-02-09T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 1192, \"date\": \"2021-02-09T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 1193, \"date\": \"2021-02-09T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1194, \"date\": \"2021-02-10T00:00:00\", \"score\": 1, \"index\": 41}, {\"level_0\": 1195, \"date\": \"2021-02-10T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 1196, \"date\": \"2021-02-10T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1197, \"date\": \"2021-02-10T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1198, \"date\": \"2021-02-10T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 1199, \"date\": \"2021-02-11T00:00:00\", \"score\": 1, \"index\": 32}, {\"level_0\": 1200, \"date\": \"2021-02-11T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1201, \"date\": \"2021-02-11T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 1202, \"date\": \"2021-02-11T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1203, \"date\": \"2021-02-11T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 1204, \"date\": \"2021-02-12T00:00:00\", \"score\": 1, \"index\": 42}, {\"level_0\": 1205, \"date\": \"2021-02-12T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 1206, \"date\": \"2021-02-12T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 1207, \"date\": \"2021-02-12T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1208, \"date\": \"2021-02-12T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 1209, \"date\": \"2021-02-13T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 1210, \"date\": \"2021-02-13T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 1211, \"date\": \"2021-02-13T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1212, \"date\": \"2021-02-13T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1213, \"date\": \"2021-02-13T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 1214, \"date\": \"2021-02-14T00:00:00\", \"score\": 1, \"index\": 37}, {\"level_0\": 1215, \"date\": \"2021-02-14T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 1216, \"date\": \"2021-02-14T00:00:00\", \"score\": 3, \"index\": 3}, {\"level_0\": 1217, \"date\": \"2021-02-14T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1218, \"date\": \"2021-02-14T00:00:00\", \"score\": 5, \"index\": 8}, {\"level_0\": 1219, \"date\": \"2021-02-15T00:00:00\", \"score\": 1, \"index\": 34}, {\"level_0\": 1220, \"date\": \"2021-02-15T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1221, \"date\": \"2021-02-15T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1222, \"date\": \"2021-02-15T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1223, \"date\": \"2021-02-15T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1224, \"date\": \"2021-02-16T00:00:00\", \"score\": 1, \"index\": 22}, {\"level_0\": 1225, \"date\": \"2021-02-16T00:00:00\", \"score\": 2, \"index\": 3}, {\"level_0\": 1226, \"date\": \"2021-02-16T00:00:00\", \"score\": 3, \"index\": 2}, {\"level_0\": 1227, \"date\": \"2021-02-16T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1228, \"date\": \"2021-02-16T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1229, \"date\": \"2021-02-17T00:00:00\", \"score\": 1, \"index\": 32}, {\"level_0\": 1230, \"date\": \"2021-02-17T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 1231, \"date\": \"2021-02-17T00:00:00\", \"score\": 3, \"index\": 2}, {\"level_0\": 1232, \"date\": \"2021-02-17T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 1233, \"date\": \"2021-02-17T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1234, \"date\": \"2021-02-18T00:00:00\", \"score\": 1, \"index\": 25}, {\"level_0\": 1235, \"date\": \"2021-02-18T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 1236, \"date\": \"2021-02-18T00:00:00\", \"score\": 3, \"index\": 1}, {\"level_0\": 1237, \"date\": \"2021-02-18T00:00:00\", \"score\": 4, \"index\": 1}, {\"level_0\": 1238, \"date\": \"2021-02-18T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 1239, \"date\": \"2021-02-19T00:00:00\", \"score\": 1, \"index\": 26}, {\"level_0\": 1240, \"date\": \"2021-02-19T00:00:00\", \"score\": 2, \"index\": 2}, {\"level_0\": 1241, \"date\": \"2021-02-19T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1242, \"date\": \"2021-02-19T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 1243, \"date\": \"2021-02-19T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 1244, \"date\": \"2021-02-20T00:00:00\", \"score\": 1, \"index\": 21}, {\"level_0\": 1245, \"date\": \"2021-02-20T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1246, \"date\": \"2021-02-20T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 1247, \"date\": \"2021-02-20T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 1248, \"date\": \"2021-02-20T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1249, \"date\": \"2021-02-21T00:00:00\", \"score\": 1, \"index\": 13}, {\"level_0\": 1250, \"date\": \"2021-02-21T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 1251, \"date\": \"2021-02-21T00:00:00\", \"score\": 3, \"index\": 2}, {\"level_0\": 1252, \"date\": \"2021-02-21T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 1253, \"date\": \"2021-02-22T00:00:00\", \"score\": 1, \"index\": 33}, {\"level_0\": 1254, \"date\": \"2021-02-22T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 1255, \"date\": \"2021-02-22T00:00:00\", \"score\": 3, \"index\": 2}, {\"level_0\": 1256, \"date\": \"2021-02-22T00:00:00\", \"score\": 4, \"index\": 1}, {\"level_0\": 1257, \"date\": \"2021-02-22T00:00:00\", \"score\": 5, \"index\": 7}, {\"level_0\": 1258, \"date\": \"2021-02-23T00:00:00\", \"score\": 1, \"index\": 29}, {\"level_0\": 1259, \"date\": \"2021-02-23T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 1260, \"date\": \"2021-02-23T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 1261, \"date\": \"2021-02-23T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 1262, \"date\": \"2021-02-23T00:00:00\", \"score\": 5, \"index\": 7}, {\"level_0\": 1263, \"date\": \"2021-02-24T00:00:00\", \"score\": 1, \"index\": 28}, {\"level_0\": 1264, \"date\": \"2021-02-24T00:00:00\", \"score\": 2, \"index\": 5}, {\"level_0\": 1265, \"date\": \"2021-02-24T00:00:00\", \"score\": 3, \"index\": 3}, {\"level_0\": 1266, \"date\": \"2021-02-24T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1267, \"date\": \"2021-02-24T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1268, \"date\": \"2021-02-25T00:00:00\", \"score\": 1, \"index\": 22}, {\"level_0\": 1269, \"date\": \"2021-02-25T00:00:00\", \"score\": 2, \"index\": 5}, {\"level_0\": 1270, \"date\": \"2021-02-25T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 1271, \"date\": \"2021-02-25T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 1272, \"date\": \"2021-02-25T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1273, \"date\": \"2021-02-26T00:00:00\", \"score\": 1, \"index\": 14}, {\"level_0\": 1274, \"date\": \"2021-02-26T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 1275, \"date\": \"2021-02-26T00:00:00\", \"score\": 3, \"index\": 3}, {\"level_0\": 1276, \"date\": \"2021-02-26T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1277, \"date\": \"2021-02-26T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1278, \"date\": \"2021-02-27T00:00:00\", \"score\": 1, \"index\": 21}, {\"level_0\": 1279, \"date\": \"2021-02-27T00:00:00\", \"score\": 2, \"index\": 3}, {\"level_0\": 1280, \"date\": \"2021-02-27T00:00:00\", \"score\": 3, \"index\": 3}, {\"level_0\": 1281, \"date\": \"2021-02-27T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 1282, \"date\": \"2021-02-27T00:00:00\", \"score\": 5, \"index\": 12}, {\"level_0\": 1283, \"date\": \"2021-02-28T00:00:00\", \"score\": 1, \"index\": 37}, {\"level_0\": 1284, \"date\": \"2021-02-28T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1285, \"date\": \"2021-02-28T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 1286, \"date\": \"2021-02-28T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1287, \"date\": \"2021-02-28T00:00:00\", \"score\": 5, \"index\": 8}, {\"level_0\": 1288, \"date\": \"2021-03-01T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 1289, \"date\": \"2021-03-01T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1290, \"date\": \"2021-03-01T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1291, \"date\": \"2021-03-01T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1292, \"date\": \"2021-03-01T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1293, \"date\": \"2021-03-02T00:00:00\", \"score\": 1, \"index\": 36}, {\"level_0\": 1294, \"date\": \"2021-03-02T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1295, \"date\": \"2021-03-02T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 1296, \"date\": \"2021-03-02T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1297, \"date\": \"2021-03-02T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 1298, \"date\": \"2021-03-03T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 1299, \"date\": \"2021-03-03T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 1300, \"date\": \"2021-03-03T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 1301, \"date\": \"2021-03-03T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1302, \"date\": \"2021-03-03T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1303, \"date\": \"2021-03-04T00:00:00\", \"score\": 1, \"index\": 43}, {\"level_0\": 1304, \"date\": \"2021-03-04T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 1305, \"date\": \"2021-03-04T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1306, \"date\": \"2021-03-04T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 1307, \"date\": \"2021-03-04T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 1308, \"date\": \"2021-03-05T00:00:00\", \"score\": 1, \"index\": 29}, {\"level_0\": 1309, \"date\": \"2021-03-05T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 1310, \"date\": \"2021-03-05T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 1311, \"date\": \"2021-03-05T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 1312, \"date\": \"2021-03-05T00:00:00\", \"score\": 5, \"index\": 5}]}}, {\"mode\": \"vega-lite\"});\n",
              "</script>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "10YlLrfbJYcV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "outputId": "3e4f0675-1e6f-4a81-ebb7-cffd5991c1ca"
      },
      "source": [
        "#https://d3-wiki.readthedocs.io/zh_CN/master/Ordinal-Scales/ for the Colors\n",
        "\n",
        "alt.Chart(xyz[xyz['date'] >= '2020-08-01']).mark_line().encode(x=alt.X('date:T', title = 'Time', axis = alt.Axis(tickCount= 5)),\n",
        "y= alt.Y('index:Q', title = 'Absolute Number of Reviews'),\n",
        "color= alt.Color('score', title = 'Rating' ,type='nominal', scale=alt.Scale(\n",
        "            domain=['1', '2','3','4','5'],\n",
        "            range=['red', '#fd8d3c','yellow','#8ca252','green']))\n",
        ").properties(width=700, height = 400,title = 'Number of Reviews for the \"Corona-Warn-App\"').configure_view(\n",
        "stroke='transparent'\n",
        ")"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "alt.Chart(...)"
            ],
            "text/html": [
              "\n",
              "<div id=\"altair-viz-884b7e53dbc0483289cabcf14e8c5d7e\"></div>\n",
              "<script type=\"text/javascript\">\n",
              "  (function(spec, embedOpt){\n",
              "    let outputDiv = document.currentScript.previousElementSibling;\n",
              "    if (outputDiv.id !== \"altair-viz-884b7e53dbc0483289cabcf14e8c5d7e\") {\n",
              "      outputDiv = document.getElementById(\"altair-viz-884b7e53dbc0483289cabcf14e8c5d7e\");\n",
              "    }\n",
              "    const paths = {\n",
              "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
              "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
              "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n",
              "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
              "    };\n",
              "\n",
              "    function loadScript(lib) {\n",
              "      return new Promise(function(resolve, reject) {\n",
              "        var s = document.createElement('script');\n",
              "        s.src = paths[lib];\n",
              "        s.async = true;\n",
              "        s.onload = () => resolve(paths[lib]);\n",
              "        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
              "        document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
              "      });\n",
              "    }\n",
              "\n",
              "    function showError(err) {\n",
              "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
              "      throw err;\n",
              "    }\n",
              "\n",
              "    function displayChart(vegaEmbed) {\n",
              "      vegaEmbed(outputDiv, spec, embedOpt)\n",
              "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
              "    }\n",
              "\n",
              "    if(typeof define === \"function\" && define.amd) {\n",
              "      requirejs.config({paths});\n",
              "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
              "    } else if (typeof vegaEmbed === \"function\") {\n",
              "      displayChart(vegaEmbed);\n",
              "    } else {\n",
              "      loadScript(\"vega\")\n",
              "        .then(() => loadScript(\"vega-lite\"))\n",
              "        .then(() => loadScript(\"vega-embed\"))\n",
              "        .catch(showError)\n",
              "        .then(() => displayChart(vegaEmbed));\n",
              "    }\n",
              "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300, \"stroke\": \"transparent\"}}, \"data\": {\"name\": \"data-66a0742bcac39572b8e087582376dd17\"}, \"mark\": \"line\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"score\", \"scale\": {\"domain\": [\"1\", \"2\", \"3\", \"4\", \"5\"], \"range\": [\"red\", \"#fd8d3c\", \"yellow\", \"#8ca252\", \"green\"]}, \"title\": \"Rating\"}, \"x\": {\"type\": \"temporal\", \"axis\": {\"tickCount\": 5}, \"field\": \"date\", \"title\": \"Time\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"index\", \"title\": \"Absolute Number of Reviews\"}}, \"height\": 400, \"title\": \"Number of Reviews for the \\\"Corona-Warn-App\\\"\", \"width\": 700, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-66a0742bcac39572b8e087582376dd17\": [{\"level_0\": 230, \"date\": \"2020-08-01T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 231, \"date\": \"2020-08-01T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 232, \"date\": \"2020-08-01T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 233, \"date\": \"2020-08-01T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 234, \"date\": \"2020-08-01T00:00:00\", \"score\": 5, \"index\": 29}, {\"level_0\": 235, \"date\": \"2020-08-02T00:00:00\", \"score\": 1, \"index\": 30}, {\"level_0\": 236, \"date\": \"2020-08-02T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 237, \"date\": \"2020-08-02T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 238, \"date\": \"2020-08-02T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 239, \"date\": \"2020-08-02T00:00:00\", \"score\": 5, \"index\": 35}, {\"level_0\": 240, \"date\": \"2020-08-03T00:00:00\", \"score\": 1, \"index\": 33}, {\"level_0\": 241, \"date\": \"2020-08-03T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 242, \"date\": \"2020-08-03T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 243, \"date\": \"2020-08-03T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 244, \"date\": \"2020-08-03T00:00:00\", \"score\": 5, \"index\": 27}, {\"level_0\": 245, \"date\": \"2020-08-04T00:00:00\", \"score\": 1, \"index\": 42}, {\"level_0\": 246, \"date\": \"2020-08-04T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 247, \"date\": \"2020-08-04T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 248, \"date\": \"2020-08-04T00:00:00\", \"score\": 4, \"index\": 15}, {\"level_0\": 249, \"date\": \"2020-08-04T00:00:00\", \"score\": 5, \"index\": 44}, {\"level_0\": 250, \"date\": \"2020-08-05T00:00:00\", \"score\": 1, \"index\": 40}, {\"level_0\": 251, \"date\": \"2020-08-05T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 252, \"date\": \"2020-08-05T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 253, \"date\": \"2020-08-05T00:00:00\", \"score\": 4, \"index\": 14}, {\"level_0\": 254, \"date\": \"2020-08-05T00:00:00\", \"score\": 5, \"index\": 34}, {\"level_0\": 255, \"date\": \"2020-08-06T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 256, \"date\": \"2020-08-06T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 257, \"date\": \"2020-08-06T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 258, \"date\": \"2020-08-06T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 259, \"date\": \"2020-08-06T00:00:00\", \"score\": 5, \"index\": 35}, {\"level_0\": 260, \"date\": \"2020-08-07T00:00:00\", \"score\": 1, \"index\": 40}, {\"level_0\": 261, \"date\": \"2020-08-07T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 262, \"date\": \"2020-08-07T00:00:00\", \"score\": 3, \"index\": 17}, {\"level_0\": 263, \"date\": \"2020-08-07T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 264, \"date\": \"2020-08-07T00:00:00\", \"score\": 5, \"index\": 28}, {\"level_0\": 265, \"date\": \"2020-08-08T00:00:00\", \"score\": 1, \"index\": 28}, {\"level_0\": 266, \"date\": \"2020-08-08T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 267, \"date\": \"2020-08-08T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 268, \"date\": \"2020-08-08T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 269, \"date\": \"2020-08-08T00:00:00\", \"score\": 5, \"index\": 29}, {\"level_0\": 270, \"date\": \"2020-08-09T00:00:00\", \"score\": 1, \"index\": 29}, {\"level_0\": 271, \"date\": \"2020-08-09T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 272, \"date\": \"2020-08-09T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 273, \"date\": \"2020-08-09T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 274, \"date\": \"2020-08-09T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 275, \"date\": \"2020-08-10T00:00:00\", \"score\": 1, \"index\": 26}, {\"level_0\": 276, \"date\": \"2020-08-10T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 277, \"date\": \"2020-08-10T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 278, \"date\": \"2020-08-10T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 279, \"date\": \"2020-08-10T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 280, \"date\": \"2020-08-11T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 281, \"date\": \"2020-08-11T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 282, \"date\": \"2020-08-11T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 283, \"date\": \"2020-08-11T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 284, \"date\": \"2020-08-11T00:00:00\", \"score\": 5, \"index\": 30}, {\"level_0\": 285, \"date\": \"2020-08-12T00:00:00\", \"score\": 1, \"index\": 49}, {\"level_0\": 286, \"date\": \"2020-08-12T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 287, \"date\": \"2020-08-12T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 288, \"date\": \"2020-08-12T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 289, \"date\": \"2020-08-12T00:00:00\", \"score\": 5, \"index\": 36}, {\"level_0\": 290, \"date\": \"2020-08-13T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 291, \"date\": \"2020-08-13T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 292, \"date\": \"2020-08-13T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 293, \"date\": \"2020-08-13T00:00:00\", \"score\": 4, \"index\": 16}, {\"level_0\": 294, \"date\": \"2020-08-13T00:00:00\", \"score\": 5, \"index\": 37}, {\"level_0\": 295, \"date\": \"2020-08-14T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 296, \"date\": \"2020-08-14T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 297, \"date\": \"2020-08-14T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 298, \"date\": \"2020-08-14T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 299, \"date\": \"2020-08-14T00:00:00\", \"score\": 5, \"index\": 37}, {\"level_0\": 300, \"date\": \"2020-08-15T00:00:00\", \"score\": 1, \"index\": 54}, {\"level_0\": 301, \"date\": \"2020-08-15T00:00:00\", \"score\": 2, \"index\": 22}, {\"level_0\": 302, \"date\": \"2020-08-15T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 303, \"date\": \"2020-08-15T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 304, \"date\": \"2020-08-15T00:00:00\", \"score\": 5, \"index\": 33}, {\"level_0\": 305, \"date\": \"2020-08-16T00:00:00\", \"score\": 1, \"index\": 48}, {\"level_0\": 306, \"date\": \"2020-08-16T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 307, \"date\": \"2020-08-16T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 308, \"date\": \"2020-08-16T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 309, \"date\": \"2020-08-16T00:00:00\", \"score\": 5, \"index\": 34}, {\"level_0\": 310, \"date\": \"2020-08-17T00:00:00\", \"score\": 1, \"index\": 48}, {\"level_0\": 311, \"date\": \"2020-08-17T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 312, \"date\": \"2020-08-17T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 313, \"date\": \"2020-08-17T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 314, \"date\": \"2020-08-17T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 315, \"date\": \"2020-08-18T00:00:00\", \"score\": 1, \"index\": 53}, {\"level_0\": 316, \"date\": \"2020-08-18T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 317, \"date\": \"2020-08-18T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 318, \"date\": \"2020-08-18T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 319, \"date\": \"2020-08-18T00:00:00\", \"score\": 5, \"index\": 25}, {\"level_0\": 320, \"date\": \"2020-08-19T00:00:00\", \"score\": 1, \"index\": 48}, {\"level_0\": 321, \"date\": \"2020-08-19T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 322, \"date\": \"2020-08-19T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 323, \"date\": \"2020-08-19T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 324, \"date\": \"2020-08-19T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 325, \"date\": \"2020-08-20T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 326, \"date\": \"2020-08-20T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 327, \"date\": \"2020-08-20T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 328, \"date\": \"2020-08-20T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 329, \"date\": \"2020-08-20T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 330, \"date\": \"2020-08-21T00:00:00\", \"score\": 1, \"index\": 55}, {\"level_0\": 331, \"date\": \"2020-08-21T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 332, \"date\": \"2020-08-21T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 333, \"date\": \"2020-08-21T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 334, \"date\": \"2020-08-21T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 335, \"date\": \"2020-08-22T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 336, \"date\": \"2020-08-22T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 337, \"date\": \"2020-08-22T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 338, \"date\": \"2020-08-22T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 339, \"date\": \"2020-08-22T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 340, \"date\": \"2020-08-23T00:00:00\", \"score\": 1, \"index\": 50}, {\"level_0\": 341, \"date\": \"2020-08-23T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 342, \"date\": \"2020-08-23T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 343, \"date\": \"2020-08-23T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 344, \"date\": \"2020-08-23T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 345, \"date\": \"2020-08-24T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 346, \"date\": \"2020-08-24T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 347, \"date\": \"2020-08-24T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 348, \"date\": \"2020-08-24T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 349, \"date\": \"2020-08-24T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 350, \"date\": \"2020-08-25T00:00:00\", \"score\": 1, \"index\": 64}, {\"level_0\": 351, \"date\": \"2020-08-25T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 352, \"date\": \"2020-08-25T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 353, \"date\": \"2020-08-25T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 354, \"date\": \"2020-08-25T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 355, \"date\": \"2020-08-26T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 356, \"date\": \"2020-08-26T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 357, \"date\": \"2020-08-26T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 358, \"date\": \"2020-08-26T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 359, \"date\": \"2020-08-26T00:00:00\", \"score\": 5, \"index\": 12}, {\"level_0\": 360, \"date\": \"2020-08-27T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 361, \"date\": \"2020-08-27T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 362, \"date\": \"2020-08-27T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 363, \"date\": \"2020-08-27T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 364, \"date\": \"2020-08-27T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 365, \"date\": \"2020-08-28T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 366, \"date\": \"2020-08-28T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 367, \"date\": \"2020-08-28T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 368, \"date\": \"2020-08-28T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 369, \"date\": \"2020-08-28T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 370, \"date\": \"2020-08-29T00:00:00\", \"score\": 1, \"index\": 31}, {\"level_0\": 371, \"date\": \"2020-08-29T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 372, \"date\": \"2020-08-29T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 373, \"date\": \"2020-08-29T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 374, \"date\": \"2020-08-29T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 375, \"date\": \"2020-08-30T00:00:00\", \"score\": 1, \"index\": 47}, {\"level_0\": 376, \"date\": \"2020-08-30T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 377, \"date\": \"2020-08-30T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 378, \"date\": \"2020-08-30T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 379, \"date\": \"2020-08-30T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 380, \"date\": \"2020-08-31T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 381, \"date\": \"2020-08-31T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 382, \"date\": \"2020-08-31T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 383, \"date\": \"2020-08-31T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 384, \"date\": \"2020-08-31T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 385, \"date\": \"2020-09-01T00:00:00\", \"score\": 1, \"index\": 37}, {\"level_0\": 386, \"date\": \"2020-09-01T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 387, \"date\": \"2020-09-01T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 388, \"date\": \"2020-09-01T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 389, \"date\": \"2020-09-01T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 390, \"date\": \"2020-09-02T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 391, \"date\": \"2020-09-02T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 392, \"date\": \"2020-09-02T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 393, \"date\": \"2020-09-02T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 394, \"date\": \"2020-09-02T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 395, \"date\": \"2020-09-03T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 396, \"date\": \"2020-09-03T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 397, \"date\": \"2020-09-03T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 398, \"date\": \"2020-09-03T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 399, \"date\": \"2020-09-03T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 400, \"date\": \"2020-09-04T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 401, \"date\": \"2020-09-04T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 402, \"date\": \"2020-09-04T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 403, \"date\": \"2020-09-04T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 404, \"date\": \"2020-09-04T00:00:00\", \"score\": 5, \"index\": 41}, {\"level_0\": 405, \"date\": \"2020-09-05T00:00:00\", \"score\": 1, \"index\": 60}, {\"level_0\": 406, \"date\": \"2020-09-05T00:00:00\", \"score\": 2, \"index\": 22}, {\"level_0\": 407, \"date\": \"2020-09-05T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 408, \"date\": \"2020-09-05T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 409, \"date\": \"2020-09-05T00:00:00\", \"score\": 5, \"index\": 27}, {\"level_0\": 410, \"date\": \"2020-09-06T00:00:00\", \"score\": 1, \"index\": 43}, {\"level_0\": 411, \"date\": \"2020-09-06T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 412, \"date\": \"2020-09-06T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 413, \"date\": \"2020-09-06T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 414, \"date\": \"2020-09-06T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 415, \"date\": \"2020-09-07T00:00:00\", \"score\": 1, \"index\": 47}, {\"level_0\": 416, \"date\": \"2020-09-07T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 417, \"date\": \"2020-09-07T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 418, \"date\": \"2020-09-07T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 419, \"date\": \"2020-09-07T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 420, \"date\": \"2020-09-08T00:00:00\", \"score\": 1, \"index\": 35}, {\"level_0\": 421, \"date\": \"2020-09-08T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 422, \"date\": \"2020-09-08T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 423, \"date\": \"2020-09-08T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 424, \"date\": \"2020-09-08T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 425, \"date\": \"2020-09-09T00:00:00\", \"score\": 1, \"index\": 48}, {\"level_0\": 426, \"date\": \"2020-09-09T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 427, \"date\": \"2020-09-09T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 428, \"date\": \"2020-09-09T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 429, \"date\": \"2020-09-09T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 430, \"date\": \"2020-09-10T00:00:00\", \"score\": 1, \"index\": 30}, {\"level_0\": 431, \"date\": \"2020-09-10T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 432, \"date\": \"2020-09-10T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 433, \"date\": \"2020-09-10T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 434, \"date\": \"2020-09-10T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 435, \"date\": \"2020-09-11T00:00:00\", \"score\": 1, \"index\": 34}, {\"level_0\": 436, \"date\": \"2020-09-11T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 437, \"date\": \"2020-09-11T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 438, \"date\": \"2020-09-11T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 439, \"date\": \"2020-09-11T00:00:00\", \"score\": 5, \"index\": 7}, {\"level_0\": 440, \"date\": \"2020-09-12T00:00:00\", \"score\": 1, \"index\": 31}, {\"level_0\": 441, \"date\": \"2020-09-12T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 442, \"date\": \"2020-09-12T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 443, \"date\": \"2020-09-12T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 444, \"date\": \"2020-09-12T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 445, \"date\": \"2020-09-13T00:00:00\", \"score\": 1, \"index\": 23}, {\"level_0\": 446, \"date\": \"2020-09-13T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 447, \"date\": \"2020-09-13T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 448, \"date\": \"2020-09-13T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 449, \"date\": \"2020-09-13T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 450, \"date\": \"2020-09-14T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 451, \"date\": \"2020-09-14T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 452, \"date\": \"2020-09-14T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 453, \"date\": \"2020-09-14T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 454, \"date\": \"2020-09-14T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 455, \"date\": \"2020-09-15T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 456, \"date\": \"2020-09-15T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 457, \"date\": \"2020-09-15T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 458, \"date\": \"2020-09-15T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 459, \"date\": \"2020-09-15T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 460, \"date\": \"2020-09-16T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 461, \"date\": \"2020-09-16T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 462, \"date\": \"2020-09-16T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 463, \"date\": \"2020-09-16T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 464, \"date\": \"2020-09-16T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 465, \"date\": \"2020-09-17T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 466, \"date\": \"2020-09-17T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 467, \"date\": \"2020-09-17T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 468, \"date\": \"2020-09-17T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 469, \"date\": \"2020-09-17T00:00:00\", \"score\": 5, \"index\": 12}, {\"level_0\": 470, \"date\": \"2020-09-18T00:00:00\", \"score\": 1, \"index\": 35}, {\"level_0\": 471, \"date\": \"2020-09-18T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 472, \"date\": \"2020-09-18T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 473, \"date\": \"2020-09-18T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 474, \"date\": \"2020-09-18T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 475, \"date\": \"2020-09-19T00:00:00\", \"score\": 1, \"index\": 29}, {\"level_0\": 476, \"date\": \"2020-09-19T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 477, \"date\": \"2020-09-19T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 478, \"date\": \"2020-09-19T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 479, \"date\": \"2020-09-19T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 480, \"date\": \"2020-09-20T00:00:00\", \"score\": 1, \"index\": 43}, {\"level_0\": 481, \"date\": \"2020-09-20T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 482, \"date\": \"2020-09-20T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 483, \"date\": \"2020-09-20T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 484, \"date\": \"2020-09-20T00:00:00\", \"score\": 5, \"index\": 12}, {\"level_0\": 485, \"date\": \"2020-09-21T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 486, \"date\": \"2020-09-21T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 487, \"date\": \"2020-09-21T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 488, \"date\": \"2020-09-21T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 489, \"date\": \"2020-09-21T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 490, \"date\": \"2020-09-22T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 491, \"date\": \"2020-09-22T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 492, \"date\": \"2020-09-22T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 493, \"date\": \"2020-09-22T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 494, \"date\": \"2020-09-22T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 495, \"date\": \"2020-09-23T00:00:00\", \"score\": 1, \"index\": 110}, {\"level_0\": 496, \"date\": \"2020-09-23T00:00:00\", \"score\": 2, \"index\": 25}, {\"level_0\": 497, \"date\": \"2020-09-23T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 498, \"date\": \"2020-09-23T00:00:00\", \"score\": 4, \"index\": 17}, {\"level_0\": 499, \"date\": \"2020-09-23T00:00:00\", \"score\": 5, \"index\": 49}, {\"level_0\": 500, \"date\": \"2020-09-24T00:00:00\", \"score\": 1, \"index\": 77}, {\"level_0\": 501, \"date\": \"2020-09-24T00:00:00\", \"score\": 2, \"index\": 17}, {\"level_0\": 502, \"date\": \"2020-09-24T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 503, \"date\": \"2020-09-24T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 504, \"date\": \"2020-09-24T00:00:00\", \"score\": 5, \"index\": 31}, {\"level_0\": 505, \"date\": \"2020-09-25T00:00:00\", \"score\": 1, \"index\": 53}, {\"level_0\": 506, \"date\": \"2020-09-25T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 507, \"date\": \"2020-09-25T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 508, \"date\": \"2020-09-25T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 509, \"date\": \"2020-09-25T00:00:00\", \"score\": 5, \"index\": 29}, {\"level_0\": 510, \"date\": \"2020-09-26T00:00:00\", \"score\": 1, \"index\": 48}, {\"level_0\": 511, \"date\": \"2020-09-26T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 512, \"date\": \"2020-09-26T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 513, \"date\": \"2020-09-26T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 514, \"date\": \"2020-09-26T00:00:00\", \"score\": 5, \"index\": 27}, {\"level_0\": 515, \"date\": \"2020-09-27T00:00:00\", \"score\": 1, \"index\": 35}, {\"level_0\": 516, \"date\": \"2020-09-27T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 517, \"date\": \"2020-09-27T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 518, \"date\": \"2020-09-27T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 519, \"date\": \"2020-09-27T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 520, \"date\": \"2020-09-28T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 521, \"date\": \"2020-09-28T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 522, \"date\": \"2020-09-28T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 523, \"date\": \"2020-09-28T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 524, \"date\": \"2020-09-28T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 525, \"date\": \"2020-09-29T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 526, \"date\": \"2020-09-29T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 527, \"date\": \"2020-09-29T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 528, \"date\": \"2020-09-29T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 529, \"date\": \"2020-09-29T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 530, \"date\": \"2020-09-30T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 531, \"date\": \"2020-09-30T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 532, \"date\": \"2020-09-30T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 533, \"date\": \"2020-09-30T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 534, \"date\": \"2020-09-30T00:00:00\", \"score\": 5, \"index\": 28}, {\"level_0\": 535, \"date\": \"2020-10-01T00:00:00\", \"score\": 1, \"index\": 43}, {\"level_0\": 536, \"date\": \"2020-10-01T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 537, \"date\": \"2020-10-01T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 538, \"date\": \"2020-10-01T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 539, \"date\": \"2020-10-01T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 540, \"date\": \"2020-10-02T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 541, \"date\": \"2020-10-02T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 542, \"date\": \"2020-10-02T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 543, \"date\": \"2020-10-02T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 544, \"date\": \"2020-10-02T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 545, \"date\": \"2020-10-03T00:00:00\", \"score\": 1, \"index\": 27}, {\"level_0\": 546, \"date\": \"2020-10-03T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 547, \"date\": \"2020-10-03T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 548, \"date\": \"2020-10-03T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 549, \"date\": \"2020-10-03T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 550, \"date\": \"2020-10-04T00:00:00\", \"score\": 1, \"index\": 41}, {\"level_0\": 551, \"date\": \"2020-10-04T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 552, \"date\": \"2020-10-04T00:00:00\", \"score\": 3, \"index\": 3}, {\"level_0\": 553, \"date\": \"2020-10-04T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 554, \"date\": \"2020-10-04T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 555, \"date\": \"2020-10-05T00:00:00\", \"score\": 1, \"index\": 53}, {\"level_0\": 556, \"date\": \"2020-10-05T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 557, \"date\": \"2020-10-05T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 558, \"date\": \"2020-10-05T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 559, \"date\": \"2020-10-05T00:00:00\", \"score\": 5, \"index\": 5}, {\"level_0\": 560, \"date\": \"2020-10-06T00:00:00\", \"score\": 1, \"index\": 26}, {\"level_0\": 561, \"date\": \"2020-10-06T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 562, \"date\": \"2020-10-06T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 563, \"date\": \"2020-10-06T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 564, \"date\": \"2020-10-06T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 565, \"date\": \"2020-10-07T00:00:00\", \"score\": 1, \"index\": 62}, {\"level_0\": 566, \"date\": \"2020-10-07T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 567, \"date\": \"2020-10-07T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 568, \"date\": \"2020-10-07T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 569, \"date\": \"2020-10-07T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 570, \"date\": \"2020-10-08T00:00:00\", \"score\": 1, \"index\": 67}, {\"level_0\": 571, \"date\": \"2020-10-08T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 572, \"date\": \"2020-10-08T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 573, \"date\": \"2020-10-08T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 574, \"date\": \"2020-10-08T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 575, \"date\": \"2020-10-09T00:00:00\", \"score\": 1, \"index\": 65}, {\"level_0\": 576, \"date\": \"2020-10-09T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 577, \"date\": \"2020-10-09T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 578, \"date\": \"2020-10-09T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 579, \"date\": \"2020-10-09T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 580, \"date\": \"2020-10-10T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 581, \"date\": \"2020-10-10T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 582, \"date\": \"2020-10-10T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 583, \"date\": \"2020-10-10T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 584, \"date\": \"2020-10-10T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 585, \"date\": \"2020-10-11T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 586, \"date\": \"2020-10-11T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 587, \"date\": \"2020-10-11T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 588, \"date\": \"2020-10-11T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 589, \"date\": \"2020-10-11T00:00:00\", \"score\": 5, \"index\": 26}, {\"level_0\": 590, \"date\": \"2020-10-12T00:00:00\", \"score\": 1, \"index\": 60}, {\"level_0\": 591, \"date\": \"2020-10-12T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 592, \"date\": \"2020-10-12T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 593, \"date\": \"2020-10-12T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 594, \"date\": \"2020-10-12T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 595, \"date\": \"2020-10-13T00:00:00\", \"score\": 1, \"index\": 67}, {\"level_0\": 596, \"date\": \"2020-10-13T00:00:00\", \"score\": 2, \"index\": 20}, {\"level_0\": 597, \"date\": \"2020-10-13T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 598, \"date\": \"2020-10-13T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 599, \"date\": \"2020-10-13T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 600, \"date\": \"2020-10-14T00:00:00\", \"score\": 1, \"index\": 83}, {\"level_0\": 601, \"date\": \"2020-10-14T00:00:00\", \"score\": 2, \"index\": 25}, {\"level_0\": 602, \"date\": \"2020-10-14T00:00:00\", \"score\": 3, \"index\": 17}, {\"level_0\": 603, \"date\": \"2020-10-14T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 604, \"date\": \"2020-10-14T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 605, \"date\": \"2020-10-15T00:00:00\", \"score\": 1, \"index\": 85}, {\"level_0\": 606, \"date\": \"2020-10-15T00:00:00\", \"score\": 2, \"index\": 26}, {\"level_0\": 607, \"date\": \"2020-10-15T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 608, \"date\": \"2020-10-15T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 609, \"date\": \"2020-10-15T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 610, \"date\": \"2020-10-16T00:00:00\", \"score\": 1, \"index\": 81}, {\"level_0\": 611, \"date\": \"2020-10-16T00:00:00\", \"score\": 2, \"index\": 27}, {\"level_0\": 612, \"date\": \"2020-10-16T00:00:00\", \"score\": 3, \"index\": 19}, {\"level_0\": 613, \"date\": \"2020-10-16T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 614, \"date\": \"2020-10-16T00:00:00\", \"score\": 5, \"index\": 41}, {\"level_0\": 615, \"date\": \"2020-10-17T00:00:00\", \"score\": 1, \"index\": 125}, {\"level_0\": 616, \"date\": \"2020-10-17T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 617, \"date\": \"2020-10-17T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 618, \"date\": \"2020-10-17T00:00:00\", \"score\": 4, \"index\": 16}, {\"level_0\": 619, \"date\": \"2020-10-17T00:00:00\", \"score\": 5, \"index\": 34}, {\"level_0\": 620, \"date\": \"2020-10-18T00:00:00\", \"score\": 1, \"index\": 118}, {\"level_0\": 621, \"date\": \"2020-10-18T00:00:00\", \"score\": 2, \"index\": 22}, {\"level_0\": 622, \"date\": \"2020-10-18T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 623, \"date\": \"2020-10-18T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 624, \"date\": \"2020-10-18T00:00:00\", \"score\": 5, \"index\": 43}, {\"level_0\": 625, \"date\": \"2020-10-19T00:00:00\", \"score\": 1, \"index\": 190}, {\"level_0\": 626, \"date\": \"2020-10-19T00:00:00\", \"score\": 2, \"index\": 54}, {\"level_0\": 627, \"date\": \"2020-10-19T00:00:00\", \"score\": 3, \"index\": 45}, {\"level_0\": 628, \"date\": \"2020-10-19T00:00:00\", \"score\": 4, \"index\": 45}, {\"level_0\": 629, \"date\": \"2020-10-19T00:00:00\", \"score\": 5, \"index\": 152}, {\"level_0\": 630, \"date\": \"2020-10-20T00:00:00\", \"score\": 1, \"index\": 182}, {\"level_0\": 631, \"date\": \"2020-10-20T00:00:00\", \"score\": 2, \"index\": 44}, {\"level_0\": 632, \"date\": \"2020-10-20T00:00:00\", \"score\": 3, \"index\": 56}, {\"level_0\": 633, \"date\": \"2020-10-20T00:00:00\", \"score\": 4, \"index\": 36}, {\"level_0\": 634, \"date\": \"2020-10-20T00:00:00\", \"score\": 5, \"index\": 91}, {\"level_0\": 635, \"date\": \"2020-10-21T00:00:00\", \"score\": 1, \"index\": 105}, {\"level_0\": 636, \"date\": \"2020-10-21T00:00:00\", \"score\": 2, \"index\": 23}, {\"level_0\": 637, \"date\": \"2020-10-21T00:00:00\", \"score\": 3, \"index\": 30}, {\"level_0\": 638, \"date\": \"2020-10-21T00:00:00\", \"score\": 4, \"index\": 21}, {\"level_0\": 639, \"date\": \"2020-10-21T00:00:00\", \"score\": 5, \"index\": 52}, {\"level_0\": 640, \"date\": \"2020-10-22T00:00:00\", \"score\": 1, \"index\": 117}, {\"level_0\": 641, \"date\": \"2020-10-22T00:00:00\", \"score\": 2, \"index\": 27}, {\"level_0\": 642, \"date\": \"2020-10-22T00:00:00\", \"score\": 3, \"index\": 41}, {\"level_0\": 643, \"date\": \"2020-10-22T00:00:00\", \"score\": 4, \"index\": 28}, {\"level_0\": 644, \"date\": \"2020-10-22T00:00:00\", \"score\": 5, \"index\": 43}, {\"level_0\": 645, \"date\": \"2020-10-23T00:00:00\", \"score\": 1, \"index\": 98}, {\"level_0\": 646, \"date\": \"2020-10-23T00:00:00\", \"score\": 2, \"index\": 24}, {\"level_0\": 647, \"date\": \"2020-10-23T00:00:00\", \"score\": 3, \"index\": 24}, {\"level_0\": 648, \"date\": \"2020-10-23T00:00:00\", \"score\": 4, \"index\": 20}, {\"level_0\": 649, \"date\": \"2020-10-23T00:00:00\", \"score\": 5, \"index\": 37}, {\"level_0\": 650, \"date\": \"2020-10-24T00:00:00\", \"score\": 1, \"index\": 73}, {\"level_0\": 651, \"date\": \"2020-10-24T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 652, \"date\": \"2020-10-24T00:00:00\", \"score\": 3, \"index\": 19}, {\"level_0\": 653, \"date\": \"2020-10-24T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 654, \"date\": \"2020-10-24T00:00:00\", \"score\": 5, \"index\": 36}, {\"level_0\": 655, \"date\": \"2020-10-25T00:00:00\", \"score\": 1, \"index\": 80}, {\"level_0\": 656, \"date\": \"2020-10-25T00:00:00\", \"score\": 2, \"index\": 20}, {\"level_0\": 657, \"date\": \"2020-10-25T00:00:00\", \"score\": 3, \"index\": 22}, {\"level_0\": 658, \"date\": \"2020-10-25T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 659, \"date\": \"2020-10-25T00:00:00\", \"score\": 5, \"index\": 37}, {\"level_0\": 660, \"date\": \"2020-10-26T00:00:00\", \"score\": 1, \"index\": 90}, {\"level_0\": 661, \"date\": \"2020-10-26T00:00:00\", \"score\": 2, \"index\": 20}, {\"level_0\": 662, \"date\": \"2020-10-26T00:00:00\", \"score\": 3, \"index\": 18}, {\"level_0\": 663, \"date\": \"2020-10-26T00:00:00\", \"score\": 4, \"index\": 14}, {\"level_0\": 664, \"date\": \"2020-10-26T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 665, \"date\": \"2020-10-27T00:00:00\", \"score\": 1, \"index\": 81}, {\"level_0\": 666, \"date\": \"2020-10-27T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 667, \"date\": \"2020-10-27T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 668, \"date\": \"2020-10-27T00:00:00\", \"score\": 4, \"index\": 21}, {\"level_0\": 669, \"date\": \"2020-10-27T00:00:00\", \"score\": 5, \"index\": 36}, {\"level_0\": 670, \"date\": \"2020-10-28T00:00:00\", \"score\": 1, \"index\": 81}, {\"level_0\": 671, \"date\": \"2020-10-28T00:00:00\", \"score\": 2, \"index\": 22}, {\"level_0\": 672, \"date\": \"2020-10-28T00:00:00\", \"score\": 3, \"index\": 31}, {\"level_0\": 673, \"date\": \"2020-10-28T00:00:00\", \"score\": 4, \"index\": 18}, {\"level_0\": 674, \"date\": \"2020-10-28T00:00:00\", \"score\": 5, \"index\": 36}, {\"level_0\": 675, \"date\": \"2020-10-29T00:00:00\", \"score\": 1, \"index\": 93}, {\"level_0\": 676, \"date\": \"2020-10-29T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 677, \"date\": \"2020-10-29T00:00:00\", \"score\": 3, \"index\": 23}, {\"level_0\": 678, \"date\": \"2020-10-29T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 679, \"date\": \"2020-10-29T00:00:00\", \"score\": 5, \"index\": 42}, {\"level_0\": 680, \"date\": \"2020-10-30T00:00:00\", \"score\": 1, \"index\": 103}, {\"level_0\": 681, \"date\": \"2020-10-30T00:00:00\", \"score\": 2, \"index\": 28}, {\"level_0\": 682, \"date\": \"2020-10-30T00:00:00\", \"score\": 3, \"index\": 27}, {\"level_0\": 683, \"date\": \"2020-10-30T00:00:00\", \"score\": 4, \"index\": 15}, {\"level_0\": 684, \"date\": \"2020-10-30T00:00:00\", \"score\": 5, \"index\": 37}, {\"level_0\": 685, \"date\": \"2020-10-31T00:00:00\", \"score\": 1, \"index\": 72}, {\"level_0\": 686, \"date\": \"2020-10-31T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 687, \"date\": \"2020-10-31T00:00:00\", \"score\": 3, \"index\": 19}, {\"level_0\": 688, \"date\": \"2020-10-31T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 689, \"date\": \"2020-10-31T00:00:00\", \"score\": 5, \"index\": 24}, {\"level_0\": 690, \"date\": \"2020-11-01T00:00:00\", \"score\": 1, \"index\": 70}, {\"level_0\": 691, \"date\": \"2020-11-01T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 692, \"date\": \"2020-11-01T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 693, \"date\": \"2020-11-01T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 694, \"date\": \"2020-11-01T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 695, \"date\": \"2020-11-02T00:00:00\", \"score\": 1, \"index\": 79}, {\"level_0\": 696, \"date\": \"2020-11-02T00:00:00\", \"score\": 2, \"index\": 25}, {\"level_0\": 697, \"date\": \"2020-11-02T00:00:00\", \"score\": 3, \"index\": 23}, {\"level_0\": 698, \"date\": \"2020-11-02T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 699, \"date\": \"2020-11-02T00:00:00\", \"score\": 5, \"index\": 28}, {\"level_0\": 700, \"date\": \"2020-11-03T00:00:00\", \"score\": 1, \"index\": 61}, {\"level_0\": 701, \"date\": \"2020-11-03T00:00:00\", \"score\": 2, \"index\": 24}, {\"level_0\": 702, \"date\": \"2020-11-03T00:00:00\", \"score\": 3, \"index\": 29}, {\"level_0\": 703, \"date\": \"2020-11-03T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 704, \"date\": \"2020-11-03T00:00:00\", \"score\": 5, \"index\": 28}, {\"level_0\": 705, \"date\": \"2020-11-04T00:00:00\", \"score\": 1, \"index\": 64}, {\"level_0\": 706, \"date\": \"2020-11-04T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 707, \"date\": \"2020-11-04T00:00:00\", \"score\": 3, \"index\": 28}, {\"level_0\": 708, \"date\": \"2020-11-04T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 709, \"date\": \"2020-11-04T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 710, \"date\": \"2020-11-05T00:00:00\", \"score\": 1, \"index\": 53}, {\"level_0\": 711, \"date\": \"2020-11-05T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 712, \"date\": \"2020-11-05T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 713, \"date\": \"2020-11-05T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 714, \"date\": \"2020-11-05T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 715, \"date\": \"2020-11-06T00:00:00\", \"score\": 1, \"index\": 68}, {\"level_0\": 716, \"date\": \"2020-11-06T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 717, \"date\": \"2020-11-06T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 718, \"date\": \"2020-11-06T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 719, \"date\": \"2020-11-06T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 720, \"date\": \"2020-11-07T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 721, \"date\": \"2020-11-07T00:00:00\", \"score\": 2, \"index\": 17}, {\"level_0\": 722, \"date\": \"2020-11-07T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 723, \"date\": \"2020-11-07T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 724, \"date\": \"2020-11-07T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 725, \"date\": \"2020-11-08T00:00:00\", \"score\": 1, \"index\": 57}, {\"level_0\": 726, \"date\": \"2020-11-08T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 727, \"date\": \"2020-11-08T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 728, \"date\": \"2020-11-08T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 729, \"date\": \"2020-11-08T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 730, \"date\": \"2020-11-09T00:00:00\", \"score\": 1, \"index\": 61}, {\"level_0\": 731, \"date\": \"2020-11-09T00:00:00\", \"score\": 2, \"index\": 17}, {\"level_0\": 732, \"date\": \"2020-11-09T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 733, \"date\": \"2020-11-09T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 734, \"date\": \"2020-11-09T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 735, \"date\": \"2020-11-10T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 736, \"date\": \"2020-11-10T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 737, \"date\": \"2020-11-10T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 738, \"date\": \"2020-11-10T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 739, \"date\": \"2020-11-10T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 740, \"date\": \"2020-11-11T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 741, \"date\": \"2020-11-11T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 742, \"date\": \"2020-11-11T00:00:00\", \"score\": 3, \"index\": 22}, {\"level_0\": 743, \"date\": \"2020-11-11T00:00:00\", \"score\": 4, \"index\": 16}, {\"level_0\": 744, \"date\": \"2020-11-11T00:00:00\", \"score\": 5, \"index\": 29}, {\"level_0\": 745, \"date\": \"2020-11-12T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 746, \"date\": \"2020-11-12T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 747, \"date\": \"2020-11-12T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 748, \"date\": \"2020-11-12T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 749, \"date\": \"2020-11-12T00:00:00\", \"score\": 5, \"index\": 32}, {\"level_0\": 750, \"date\": \"2020-11-13T00:00:00\", \"score\": 1, \"index\": 65}, {\"level_0\": 751, \"date\": \"2020-11-13T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 752, \"date\": \"2020-11-13T00:00:00\", \"score\": 3, \"index\": 20}, {\"level_0\": 753, \"date\": \"2020-11-13T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 754, \"date\": \"2020-11-13T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 755, \"date\": \"2020-11-14T00:00:00\", \"score\": 1, \"index\": 62}, {\"level_0\": 756, \"date\": \"2020-11-14T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 757, \"date\": \"2020-11-14T00:00:00\", \"score\": 3, \"index\": 19}, {\"level_0\": 758, \"date\": \"2020-11-14T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 759, \"date\": \"2020-11-14T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 760, \"date\": \"2020-11-15T00:00:00\", \"score\": 1, \"index\": 85}, {\"level_0\": 761, \"date\": \"2020-11-15T00:00:00\", \"score\": 2, \"index\": 39}, {\"level_0\": 762, \"date\": \"2020-11-15T00:00:00\", \"score\": 3, \"index\": 28}, {\"level_0\": 763, \"date\": \"2020-11-15T00:00:00\", \"score\": 4, \"index\": 13}, {\"level_0\": 764, \"date\": \"2020-11-15T00:00:00\", \"score\": 5, \"index\": 25}, {\"level_0\": 765, \"date\": \"2020-11-16T00:00:00\", \"score\": 1, \"index\": 105}, {\"level_0\": 766, \"date\": \"2020-11-16T00:00:00\", \"score\": 2, \"index\": 31}, {\"level_0\": 767, \"date\": \"2020-11-16T00:00:00\", \"score\": 3, \"index\": 38}, {\"level_0\": 768, \"date\": \"2020-11-16T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 769, \"date\": \"2020-11-16T00:00:00\", \"score\": 5, \"index\": 30}, {\"level_0\": 770, \"date\": \"2020-11-17T00:00:00\", \"score\": 1, \"index\": 72}, {\"level_0\": 771, \"date\": \"2020-11-17T00:00:00\", \"score\": 2, \"index\": 23}, {\"level_0\": 772, \"date\": \"2020-11-17T00:00:00\", \"score\": 3, \"index\": 29}, {\"level_0\": 773, \"date\": \"2020-11-17T00:00:00\", \"score\": 4, \"index\": 21}, {\"level_0\": 774, \"date\": \"2020-11-17T00:00:00\", \"score\": 5, \"index\": 44}, {\"level_0\": 775, \"date\": \"2020-11-18T00:00:00\", \"score\": 1, \"index\": 64}, {\"level_0\": 776, \"date\": \"2020-11-18T00:00:00\", \"score\": 2, \"index\": 20}, {\"level_0\": 777, \"date\": \"2020-11-18T00:00:00\", \"score\": 3, \"index\": 22}, {\"level_0\": 778, \"date\": \"2020-11-18T00:00:00\", \"score\": 4, \"index\": 16}, {\"level_0\": 779, \"date\": \"2020-11-18T00:00:00\", \"score\": 5, \"index\": 33}, {\"level_0\": 780, \"date\": \"2020-11-19T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 781, \"date\": \"2020-11-19T00:00:00\", \"score\": 2, \"index\": 26}, {\"level_0\": 782, \"date\": \"2020-11-19T00:00:00\", \"score\": 3, \"index\": 25}, {\"level_0\": 783, \"date\": \"2020-11-19T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 784, \"date\": \"2020-11-19T00:00:00\", \"score\": 5, \"index\": 33}, {\"level_0\": 785, \"date\": \"2020-11-20T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 786, \"date\": \"2020-11-20T00:00:00\", \"score\": 2, \"index\": 19}, {\"level_0\": 787, \"date\": \"2020-11-20T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 788, \"date\": \"2020-11-20T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 789, \"date\": \"2020-11-20T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 790, \"date\": \"2020-11-21T00:00:00\", \"score\": 1, \"index\": 64}, {\"level_0\": 791, \"date\": \"2020-11-21T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 792, \"date\": \"2020-11-21T00:00:00\", \"score\": 3, \"index\": 19}, {\"level_0\": 793, \"date\": \"2020-11-21T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 794, \"date\": \"2020-11-21T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 795, \"date\": \"2020-11-22T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 796, \"date\": \"2020-11-22T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 797, \"date\": \"2020-11-22T00:00:00\", \"score\": 3, \"index\": 18}, {\"level_0\": 798, \"date\": \"2020-11-22T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 799, \"date\": \"2020-11-22T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 800, \"date\": \"2020-11-23T00:00:00\", \"score\": 1, \"index\": 77}, {\"level_0\": 801, \"date\": \"2020-11-23T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 802, \"date\": \"2020-11-23T00:00:00\", \"score\": 3, \"index\": 17}, {\"level_0\": 803, \"date\": \"2020-11-23T00:00:00\", \"score\": 4, \"index\": 17}, {\"level_0\": 804, \"date\": \"2020-11-23T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 805, \"date\": \"2020-11-24T00:00:00\", \"score\": 1, \"index\": 70}, {\"level_0\": 806, \"date\": \"2020-11-24T00:00:00\", \"score\": 2, \"index\": 24}, {\"level_0\": 807, \"date\": \"2020-11-24T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 808, \"date\": \"2020-11-24T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 809, \"date\": \"2020-11-24T00:00:00\", \"score\": 5, \"index\": 25}, {\"level_0\": 810, \"date\": \"2020-11-25T00:00:00\", \"score\": 1, \"index\": 84}, {\"level_0\": 811, \"date\": \"2020-11-25T00:00:00\", \"score\": 2, \"index\": 29}, {\"level_0\": 812, \"date\": \"2020-11-25T00:00:00\", \"score\": 3, \"index\": 40}, {\"level_0\": 813, \"date\": \"2020-11-25T00:00:00\", \"score\": 4, \"index\": 25}, {\"level_0\": 814, \"date\": \"2020-11-25T00:00:00\", \"score\": 5, \"index\": 86}, {\"level_0\": 815, \"date\": \"2020-11-26T00:00:00\", \"score\": 1, \"index\": 158}, {\"level_0\": 816, \"date\": \"2020-11-26T00:00:00\", \"score\": 2, \"index\": 77}, {\"level_0\": 817, \"date\": \"2020-11-26T00:00:00\", \"score\": 3, \"index\": 101}, {\"level_0\": 818, \"date\": \"2020-11-26T00:00:00\", \"score\": 4, \"index\": 82}, {\"level_0\": 819, \"date\": \"2020-11-26T00:00:00\", \"score\": 5, \"index\": 124}, {\"level_0\": 820, \"date\": \"2020-11-27T00:00:00\", \"score\": 1, \"index\": 143}, {\"level_0\": 821, \"date\": \"2020-11-27T00:00:00\", \"score\": 2, \"index\": 36}, {\"level_0\": 822, \"date\": \"2020-11-27T00:00:00\", \"score\": 3, \"index\": 58}, {\"level_0\": 823, \"date\": \"2020-11-27T00:00:00\", \"score\": 4, \"index\": 53}, {\"level_0\": 824, \"date\": \"2020-11-27T00:00:00\", \"score\": 5, \"index\": 91}, {\"level_0\": 825, \"date\": \"2020-11-28T00:00:00\", \"score\": 1, \"index\": 70}, {\"level_0\": 826, \"date\": \"2020-11-28T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 827, \"date\": \"2020-11-28T00:00:00\", \"score\": 3, \"index\": 24}, {\"level_0\": 828, \"date\": \"2020-11-28T00:00:00\", \"score\": 4, \"index\": 24}, {\"level_0\": 829, \"date\": \"2020-11-28T00:00:00\", \"score\": 5, \"index\": 65}, {\"level_0\": 830, \"date\": \"2020-11-29T00:00:00\", \"score\": 1, \"index\": 67}, {\"level_0\": 831, \"date\": \"2020-11-29T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 832, \"date\": \"2020-11-29T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 833, \"date\": \"2020-11-29T00:00:00\", \"score\": 4, \"index\": 14}, {\"level_0\": 834, \"date\": \"2020-11-29T00:00:00\", \"score\": 5, \"index\": 47}, {\"level_0\": 835, \"date\": \"2020-11-30T00:00:00\", \"score\": 1, \"index\": 70}, {\"level_0\": 836, \"date\": \"2020-11-30T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 837, \"date\": \"2020-11-30T00:00:00\", \"score\": 3, \"index\": 26}, {\"level_0\": 838, \"date\": \"2020-11-30T00:00:00\", \"score\": 4, \"index\": 15}, {\"level_0\": 839, \"date\": \"2020-11-30T00:00:00\", \"score\": 5, \"index\": 24}, {\"level_0\": 840, \"date\": \"2020-12-01T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 841, \"date\": \"2020-12-01T00:00:00\", \"score\": 2, \"index\": 19}, {\"level_0\": 842, \"date\": \"2020-12-01T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 843, \"date\": \"2020-12-01T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 844, \"date\": \"2020-12-01T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 845, \"date\": \"2020-12-02T00:00:00\", \"score\": 1, \"index\": 69}, {\"level_0\": 846, \"date\": \"2020-12-02T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 847, \"date\": \"2020-12-02T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 848, \"date\": \"2020-12-02T00:00:00\", \"score\": 4, \"index\": 21}, {\"level_0\": 849, \"date\": \"2020-12-02T00:00:00\", \"score\": 5, \"index\": 28}, {\"level_0\": 850, \"date\": \"2020-12-03T00:00:00\", \"score\": 1, \"index\": 64}, {\"level_0\": 851, \"date\": \"2020-12-03T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 852, \"date\": \"2020-12-03T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 853, \"date\": \"2020-12-03T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 854, \"date\": \"2020-12-03T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 855, \"date\": \"2020-12-04T00:00:00\", \"score\": 1, \"index\": 78}, {\"level_0\": 856, \"date\": \"2020-12-04T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 857, \"date\": \"2020-12-04T00:00:00\", \"score\": 3, \"index\": 19}, {\"level_0\": 858, \"date\": \"2020-12-04T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 859, \"date\": \"2020-12-04T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 860, \"date\": \"2020-12-05T00:00:00\", \"score\": 1, \"index\": 63}, {\"level_0\": 861, \"date\": \"2020-12-05T00:00:00\", \"score\": 2, \"index\": 19}, {\"level_0\": 862, \"date\": \"2020-12-05T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 863, \"date\": \"2020-12-05T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 864, \"date\": \"2020-12-05T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 865, \"date\": \"2020-12-06T00:00:00\", \"score\": 1, \"index\": 74}, {\"level_0\": 866, \"date\": \"2020-12-06T00:00:00\", \"score\": 2, \"index\": 17}, {\"level_0\": 867, \"date\": \"2020-12-06T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 868, \"date\": \"2020-12-06T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 869, \"date\": \"2020-12-06T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 870, \"date\": \"2020-12-07T00:00:00\", \"score\": 1, \"index\": 79}, {\"level_0\": 871, \"date\": \"2020-12-07T00:00:00\", \"score\": 2, \"index\": 17}, {\"level_0\": 872, \"date\": \"2020-12-07T00:00:00\", \"score\": 3, \"index\": 25}, {\"level_0\": 873, \"date\": \"2020-12-07T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 874, \"date\": \"2020-12-07T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 875, \"date\": \"2020-12-08T00:00:00\", \"score\": 1, \"index\": 83}, {\"level_0\": 876, \"date\": \"2020-12-08T00:00:00\", \"score\": 2, \"index\": 23}, {\"level_0\": 877, \"date\": \"2020-12-08T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 878, \"date\": \"2020-12-08T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 879, \"date\": \"2020-12-08T00:00:00\", \"score\": 5, \"index\": 24}, {\"level_0\": 880, \"date\": \"2020-12-09T00:00:00\", \"score\": 1, \"index\": 63}, {\"level_0\": 881, \"date\": \"2020-12-09T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 882, \"date\": \"2020-12-09T00:00:00\", \"score\": 3, \"index\": 27}, {\"level_0\": 883, \"date\": \"2020-12-09T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 884, \"date\": \"2020-12-09T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 885, \"date\": \"2020-12-10T00:00:00\", \"score\": 1, \"index\": 51}, {\"level_0\": 886, \"date\": \"2020-12-10T00:00:00\", \"score\": 2, \"index\": 29}, {\"level_0\": 887, \"date\": \"2020-12-10T00:00:00\", \"score\": 3, \"index\": 18}, {\"level_0\": 888, \"date\": \"2020-12-10T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 889, \"date\": \"2020-12-10T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 890, \"date\": \"2020-12-11T00:00:00\", \"score\": 1, \"index\": 67}, {\"level_0\": 891, \"date\": \"2020-12-11T00:00:00\", \"score\": 2, \"index\": 20}, {\"level_0\": 892, \"date\": \"2020-12-11T00:00:00\", \"score\": 3, \"index\": 20}, {\"level_0\": 893, \"date\": \"2020-12-11T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 894, \"date\": \"2020-12-11T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 895, \"date\": \"2020-12-12T00:00:00\", \"score\": 1, \"index\": 75}, {\"level_0\": 896, \"date\": \"2020-12-12T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 897, \"date\": \"2020-12-12T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 898, \"date\": \"2020-12-12T00:00:00\", \"score\": 4, \"index\": 17}, {\"level_0\": 899, \"date\": \"2020-12-12T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 900, \"date\": \"2020-12-13T00:00:00\", \"score\": 1, \"index\": 71}, {\"level_0\": 901, \"date\": \"2020-12-13T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 902, \"date\": \"2020-12-13T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 903, \"date\": \"2020-12-13T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 904, \"date\": \"2020-12-13T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 905, \"date\": \"2020-12-14T00:00:00\", \"score\": 1, \"index\": 96}, {\"level_0\": 906, \"date\": \"2020-12-14T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 907, \"date\": \"2020-12-14T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 908, \"date\": \"2020-12-14T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 909, \"date\": \"2020-12-14T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 910, \"date\": \"2020-12-15T00:00:00\", \"score\": 1, \"index\": 93}, {\"level_0\": 911, \"date\": \"2020-12-15T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 912, \"date\": \"2020-12-15T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 913, \"date\": \"2020-12-15T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 914, \"date\": \"2020-12-15T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 915, \"date\": \"2020-12-16T00:00:00\", \"score\": 1, \"index\": 104}, {\"level_0\": 916, \"date\": \"2020-12-16T00:00:00\", \"score\": 2, \"index\": 19}, {\"level_0\": 917, \"date\": \"2020-12-16T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 918, \"date\": \"2020-12-16T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 919, \"date\": \"2020-12-16T00:00:00\", \"score\": 5, \"index\": 25}, {\"level_0\": 920, \"date\": \"2020-12-17T00:00:00\", \"score\": 1, \"index\": 120}, {\"level_0\": 921, \"date\": \"2020-12-17T00:00:00\", \"score\": 2, \"index\": 31}, {\"level_0\": 922, \"date\": \"2020-12-17T00:00:00\", \"score\": 3, \"index\": 28}, {\"level_0\": 923, \"date\": \"2020-12-17T00:00:00\", \"score\": 4, \"index\": 20}, {\"level_0\": 924, \"date\": \"2020-12-17T00:00:00\", \"score\": 5, \"index\": 72}, {\"level_0\": 925, \"date\": \"2020-12-18T00:00:00\", \"score\": 1, \"index\": 110}, {\"level_0\": 926, \"date\": \"2020-12-18T00:00:00\", \"score\": 2, \"index\": 27}, {\"level_0\": 927, \"date\": \"2020-12-18T00:00:00\", \"score\": 3, \"index\": 37}, {\"level_0\": 928, \"date\": \"2020-12-18T00:00:00\", \"score\": 4, \"index\": 26}, {\"level_0\": 929, \"date\": \"2020-12-18T00:00:00\", \"score\": 5, \"index\": 69}, {\"level_0\": 930, \"date\": \"2020-12-19T00:00:00\", \"score\": 1, \"index\": 94}, {\"level_0\": 931, \"date\": \"2020-12-19T00:00:00\", \"score\": 2, \"index\": 18}, {\"level_0\": 932, \"date\": \"2020-12-19T00:00:00\", \"score\": 3, \"index\": 39}, {\"level_0\": 933, \"date\": \"2020-12-19T00:00:00\", \"score\": 4, \"index\": 23}, {\"level_0\": 934, \"date\": \"2020-12-19T00:00:00\", \"score\": 5, \"index\": 45}, {\"level_0\": 935, \"date\": \"2020-12-20T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 936, \"date\": \"2020-12-20T00:00:00\", \"score\": 2, \"index\": 22}, {\"level_0\": 937, \"date\": \"2020-12-20T00:00:00\", \"score\": 3, \"index\": 28}, {\"level_0\": 938, \"date\": \"2020-12-20T00:00:00\", \"score\": 4, \"index\": 17}, {\"level_0\": 939, \"date\": \"2020-12-20T00:00:00\", \"score\": 5, \"index\": 38}, {\"level_0\": 940, \"date\": \"2020-12-21T00:00:00\", \"score\": 1, \"index\": 71}, {\"level_0\": 941, \"date\": \"2020-12-21T00:00:00\", \"score\": 2, \"index\": 28}, {\"level_0\": 942, \"date\": \"2020-12-21T00:00:00\", \"score\": 3, \"index\": 16}, {\"level_0\": 943, \"date\": \"2020-12-21T00:00:00\", \"score\": 4, \"index\": 16}, {\"level_0\": 944, \"date\": \"2020-12-21T00:00:00\", \"score\": 5, \"index\": 34}, {\"level_0\": 945, \"date\": \"2020-12-22T00:00:00\", \"score\": 1, \"index\": 65}, {\"level_0\": 946, \"date\": \"2020-12-22T00:00:00\", \"score\": 2, \"index\": 20}, {\"level_0\": 947, \"date\": \"2020-12-22T00:00:00\", \"score\": 3, \"index\": 17}, {\"level_0\": 948, \"date\": \"2020-12-22T00:00:00\", \"score\": 4, \"index\": 15}, {\"level_0\": 949, \"date\": \"2020-12-22T00:00:00\", \"score\": 5, \"index\": 28}, {\"level_0\": 950, \"date\": \"2020-12-23T00:00:00\", \"score\": 1, \"index\": 55}, {\"level_0\": 951, \"date\": \"2020-12-23T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 952, \"date\": \"2020-12-23T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 953, \"date\": \"2020-12-23T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 954, \"date\": \"2020-12-23T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 955, \"date\": \"2020-12-24T00:00:00\", \"score\": 1, \"index\": 53}, {\"level_0\": 956, \"date\": \"2020-12-24T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 957, \"date\": \"2020-12-24T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 958, \"date\": \"2020-12-24T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 959, \"date\": \"2020-12-24T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 960, \"date\": \"2020-12-25T00:00:00\", \"score\": 1, \"index\": 55}, {\"level_0\": 961, \"date\": \"2020-12-25T00:00:00\", \"score\": 2, \"index\": 21}, {\"level_0\": 962, \"date\": \"2020-12-25T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 963, \"date\": \"2020-12-25T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 964, \"date\": \"2020-12-25T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 965, \"date\": \"2020-12-26T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 966, \"date\": \"2020-12-26T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 967, \"date\": \"2020-12-26T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 968, \"date\": \"2020-12-26T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 969, \"date\": \"2020-12-26T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 970, \"date\": \"2020-12-27T00:00:00\", \"score\": 1, \"index\": 58}, {\"level_0\": 971, \"date\": \"2020-12-27T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 972, \"date\": \"2020-12-27T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 973, \"date\": \"2020-12-27T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 974, \"date\": \"2020-12-27T00:00:00\", \"score\": 5, \"index\": 12}, {\"level_0\": 975, \"date\": \"2020-12-28T00:00:00\", \"score\": 1, \"index\": 74}, {\"level_0\": 976, \"date\": \"2020-12-28T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 977, \"date\": \"2020-12-28T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 978, \"date\": \"2020-12-28T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 979, \"date\": \"2020-12-28T00:00:00\", \"score\": 5, \"index\": 31}, {\"level_0\": 980, \"date\": \"2020-12-29T00:00:00\", \"score\": 1, \"index\": 75}, {\"level_0\": 981, \"date\": \"2020-12-29T00:00:00\", \"score\": 2, \"index\": 25}, {\"level_0\": 982, \"date\": \"2020-12-29T00:00:00\", \"score\": 3, \"index\": 24}, {\"level_0\": 983, \"date\": \"2020-12-29T00:00:00\", \"score\": 4, \"index\": 22}, {\"level_0\": 984, \"date\": \"2020-12-29T00:00:00\", \"score\": 5, \"index\": 58}, {\"level_0\": 985, \"date\": \"2020-12-30T00:00:00\", \"score\": 1, \"index\": 99}, {\"level_0\": 986, \"date\": \"2020-12-30T00:00:00\", \"score\": 2, \"index\": 35}, {\"level_0\": 987, \"date\": \"2020-12-30T00:00:00\", \"score\": 3, \"index\": 36}, {\"level_0\": 988, \"date\": \"2020-12-30T00:00:00\", \"score\": 4, \"index\": 33}, {\"level_0\": 989, \"date\": \"2020-12-30T00:00:00\", \"score\": 5, \"index\": 65}, {\"level_0\": 990, \"date\": \"2020-12-31T00:00:00\", \"score\": 1, \"index\": 37}, {\"level_0\": 991, \"date\": \"2020-12-31T00:00:00\", \"score\": 2, \"index\": 17}, {\"level_0\": 992, \"date\": \"2020-12-31T00:00:00\", \"score\": 3, \"index\": 14}, {\"level_0\": 993, \"date\": \"2020-12-31T00:00:00\", \"score\": 4, \"index\": 24}, {\"level_0\": 994, \"date\": \"2020-12-31T00:00:00\", \"score\": 5, \"index\": 32}, {\"level_0\": 995, \"date\": \"2021-01-01T00:00:00\", \"score\": 1, \"index\": 40}, {\"level_0\": 996, \"date\": \"2021-01-01T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 997, \"date\": \"2021-01-01T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 998, \"date\": \"2021-01-01T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 999, \"date\": \"2021-01-01T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1000, \"date\": \"2021-01-02T00:00:00\", \"score\": 1, \"index\": 51}, {\"level_0\": 1001, \"date\": \"2021-01-02T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 1002, \"date\": \"2021-01-02T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1003, \"date\": \"2021-01-02T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 1004, \"date\": \"2021-01-02T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 1005, \"date\": \"2021-01-03T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 1006, \"date\": \"2021-01-03T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 1007, \"date\": \"2021-01-03T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1008, \"date\": \"2021-01-03T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 1009, \"date\": \"2021-01-03T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 1010, \"date\": \"2021-01-04T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 1011, \"date\": \"2021-01-04T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1012, \"date\": \"2021-01-04T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1013, \"date\": \"2021-01-04T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1014, \"date\": \"2021-01-04T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 1015, \"date\": \"2021-01-05T00:00:00\", \"score\": 1, \"index\": 49}, {\"level_0\": 1016, \"date\": \"2021-01-05T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 1017, \"date\": \"2021-01-05T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1018, \"date\": \"2021-01-05T00:00:00\", \"score\": 4, \"index\": 9}, {\"level_0\": 1019, \"date\": \"2021-01-05T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 1020, \"date\": \"2021-01-06T00:00:00\", \"score\": 1, \"index\": 52}, {\"level_0\": 1021, \"date\": \"2021-01-06T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 1022, \"date\": \"2021-01-06T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1023, \"date\": \"2021-01-06T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 1024, \"date\": \"2021-01-06T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 1025, \"date\": \"2021-01-07T00:00:00\", \"score\": 1, \"index\": 56}, {\"level_0\": 1026, \"date\": \"2021-01-07T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 1027, \"date\": \"2021-01-07T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1028, \"date\": \"2021-01-07T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1029, \"date\": \"2021-01-07T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 1030, \"date\": \"2021-01-08T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 1031, \"date\": \"2021-01-08T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1032, \"date\": \"2021-01-08T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 1033, \"date\": \"2021-01-08T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1034, \"date\": \"2021-01-08T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1035, \"date\": \"2021-01-09T00:00:00\", \"score\": 1, \"index\": 43}, {\"level_0\": 1036, \"date\": \"2021-01-09T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 1037, \"date\": \"2021-01-09T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 1038, \"date\": \"2021-01-09T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1039, \"date\": \"2021-01-09T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1040, \"date\": \"2021-01-10T00:00:00\", \"score\": 1, \"index\": 32}, {\"level_0\": 1041, \"date\": \"2021-01-10T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 1042, \"date\": \"2021-01-10T00:00:00\", \"score\": 3, \"index\": 3}, {\"level_0\": 1043, \"date\": \"2021-01-10T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1044, \"date\": \"2021-01-10T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1045, \"date\": \"2021-01-11T00:00:00\", \"score\": 1, \"index\": 34}, {\"level_0\": 1046, \"date\": \"2021-01-11T00:00:00\", \"score\": 2, \"index\": 5}, {\"level_0\": 1047, \"date\": \"2021-01-11T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 1048, \"date\": \"2021-01-11T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1049, \"date\": \"2021-01-11T00:00:00\", \"score\": 5, \"index\": 2}, {\"level_0\": 1050, \"date\": \"2021-01-12T00:00:00\", \"score\": 1, \"index\": 39}, {\"level_0\": 1051, \"date\": \"2021-01-12T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 1052, \"date\": \"2021-01-12T00:00:00\", \"score\": 3, \"index\": 1}, {\"level_0\": 1053, \"date\": \"2021-01-12T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 1054, \"date\": \"2021-01-12T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1055, \"date\": \"2021-01-13T00:00:00\", \"score\": 1, \"index\": 146}, {\"level_0\": 1056, \"date\": \"2021-01-13T00:00:00\", \"score\": 2, \"index\": 46}, {\"level_0\": 1057, \"date\": \"2021-01-13T00:00:00\", \"score\": 3, \"index\": 50}, {\"level_0\": 1058, \"date\": \"2021-01-13T00:00:00\", \"score\": 4, \"index\": 36}, {\"level_0\": 1059, \"date\": \"2021-01-13T00:00:00\", \"score\": 5, \"index\": 32}, {\"level_0\": 1060, \"date\": \"2021-01-14T00:00:00\", \"score\": 1, \"index\": 92}, {\"level_0\": 1061, \"date\": \"2021-01-14T00:00:00\", \"score\": 2, \"index\": 19}, {\"level_0\": 1062, \"date\": \"2021-01-14T00:00:00\", \"score\": 3, \"index\": 20}, {\"level_0\": 1063, \"date\": \"2021-01-14T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 1064, \"date\": \"2021-01-14T00:00:00\", \"score\": 5, \"index\": 23}, {\"level_0\": 1065, \"date\": \"2021-01-15T00:00:00\", \"score\": 1, \"index\": 49}, {\"level_0\": 1066, \"date\": \"2021-01-15T00:00:00\", \"score\": 2, \"index\": 15}, {\"level_0\": 1067, \"date\": \"2021-01-15T00:00:00\", \"score\": 3, \"index\": 11}, {\"level_0\": 1068, \"date\": \"2021-01-15T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1069, \"date\": \"2021-01-15T00:00:00\", \"score\": 5, \"index\": 18}, {\"level_0\": 1070, \"date\": \"2021-01-16T00:00:00\", \"score\": 1, \"index\": 59}, {\"level_0\": 1071, \"date\": \"2021-01-16T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 1072, \"date\": \"2021-01-16T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1073, \"date\": \"2021-01-16T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1074, \"date\": \"2021-01-16T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 1075, \"date\": \"2021-01-17T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 1076, \"date\": \"2021-01-17T00:00:00\", \"score\": 2, \"index\": 1}, {\"level_0\": 1077, \"date\": \"2021-01-17T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 1078, \"date\": \"2021-01-17T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1079, \"date\": \"2021-01-17T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 1080, \"date\": \"2021-01-18T00:00:00\", \"score\": 1, \"index\": 33}, {\"level_0\": 1081, \"date\": \"2021-01-18T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 1082, \"date\": \"2021-01-18T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1083, \"date\": \"2021-01-18T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1084, \"date\": \"2021-01-18T00:00:00\", \"score\": 5, \"index\": 16}, {\"level_0\": 1085, \"date\": \"2021-01-19T00:00:00\", \"score\": 1, \"index\": 46}, {\"level_0\": 1086, \"date\": \"2021-01-19T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 1087, \"date\": \"2021-01-19T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1088, \"date\": \"2021-01-19T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1089, \"date\": \"2021-01-19T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 1090, \"date\": \"2021-01-20T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 1091, \"date\": \"2021-01-20T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 1092, \"date\": \"2021-01-20T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1093, \"date\": \"2021-01-20T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1094, \"date\": \"2021-01-20T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 1095, \"date\": \"2021-01-21T00:00:00\", \"score\": 1, \"index\": 34}, {\"level_0\": 1096, \"date\": \"2021-01-21T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 1097, \"date\": \"2021-01-21T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 1098, \"date\": \"2021-01-21T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 1099, \"date\": \"2021-01-21T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1100, \"date\": \"2021-01-22T00:00:00\", \"score\": 1, \"index\": 38}, {\"level_0\": 1101, \"date\": \"2021-01-22T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 1102, \"date\": \"2021-01-22T00:00:00\", \"score\": 3, \"index\": 1}, {\"level_0\": 1103, \"date\": \"2021-01-22T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1104, \"date\": \"2021-01-22T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 1105, \"date\": \"2021-01-23T00:00:00\", \"score\": 1, \"index\": 25}, {\"level_0\": 1106, \"date\": \"2021-01-23T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 1107, \"date\": \"2021-01-23T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 1108, \"date\": \"2021-01-23T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1109, \"date\": \"2021-01-23T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 1110, \"date\": \"2021-01-24T00:00:00\", \"score\": 1, \"index\": 32}, {\"level_0\": 1111, \"date\": \"2021-01-24T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1112, \"date\": \"2021-01-24T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 1113, \"date\": \"2021-01-24T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1114, \"date\": \"2021-01-24T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1115, \"date\": \"2021-01-25T00:00:00\", \"score\": 1, \"index\": 23}, {\"level_0\": 1116, \"date\": \"2021-01-25T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 1117, \"date\": \"2021-01-25T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1118, \"date\": \"2021-01-25T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 1119, \"date\": \"2021-01-25T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1120, \"date\": \"2021-01-26T00:00:00\", \"score\": 1, \"index\": 32}, {\"level_0\": 1121, \"date\": \"2021-01-26T00:00:00\", \"score\": 2, \"index\": 14}, {\"level_0\": 1122, \"date\": \"2021-01-26T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1123, \"date\": \"2021-01-26T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1124, \"date\": \"2021-01-26T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 1125, \"date\": \"2021-01-27T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 1126, \"date\": \"2021-01-27T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1127, \"date\": \"2021-01-27T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 1128, \"date\": \"2021-01-27T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1129, \"date\": \"2021-01-27T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1130, \"date\": \"2021-01-28T00:00:00\", \"score\": 1, \"index\": 32}, {\"level_0\": 1131, \"date\": \"2021-01-28T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1132, \"date\": \"2021-01-28T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 1133, \"date\": \"2021-01-28T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 1134, \"date\": \"2021-01-28T00:00:00\", \"score\": 5, \"index\": 8}, {\"level_0\": 1135, \"date\": \"2021-01-29T00:00:00\", \"score\": 1, \"index\": 48}, {\"level_0\": 1136, \"date\": \"2021-01-29T00:00:00\", \"score\": 2, \"index\": 16}, {\"level_0\": 1137, \"date\": \"2021-01-29T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1138, \"date\": \"2021-01-29T00:00:00\", \"score\": 4, \"index\": 11}, {\"level_0\": 1139, \"date\": \"2021-01-29T00:00:00\", \"score\": 5, \"index\": 34}, {\"level_0\": 1140, \"date\": \"2021-01-30T00:00:00\", \"score\": 1, \"index\": 54}, {\"level_0\": 1141, \"date\": \"2021-01-30T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 1142, \"date\": \"2021-01-30T00:00:00\", \"score\": 3, \"index\": 18}, {\"level_0\": 1143, \"date\": \"2021-01-30T00:00:00\", \"score\": 4, \"index\": 20}, {\"level_0\": 1144, \"date\": \"2021-01-30T00:00:00\", \"score\": 5, \"index\": 72}, {\"level_0\": 1145, \"date\": \"2021-01-31T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 1146, \"date\": \"2021-01-31T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1147, \"date\": \"2021-01-31T00:00:00\", \"score\": 3, \"index\": 13}, {\"level_0\": 1148, \"date\": \"2021-01-31T00:00:00\", \"score\": 4, \"index\": 12}, {\"level_0\": 1149, \"date\": \"2021-01-31T00:00:00\", \"score\": 5, \"index\": 22}, {\"level_0\": 1150, \"date\": \"2021-02-01T00:00:00\", \"score\": 1, \"index\": 27}, {\"level_0\": 1151, \"date\": \"2021-02-01T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 1152, \"date\": \"2021-02-01T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 1153, \"date\": \"2021-02-01T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 1154, \"date\": \"2021-02-01T00:00:00\", \"score\": 5, \"index\": 17}, {\"level_0\": 1155, \"date\": \"2021-02-02T00:00:00\", \"score\": 1, \"index\": 34}, {\"level_0\": 1156, \"date\": \"2021-02-02T00:00:00\", \"score\": 2, \"index\": 12}, {\"level_0\": 1157, \"date\": \"2021-02-02T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 1158, \"date\": \"2021-02-02T00:00:00\", \"score\": 4, \"index\": 10}, {\"level_0\": 1159, \"date\": \"2021-02-02T00:00:00\", \"score\": 5, \"index\": 13}, {\"level_0\": 1160, \"date\": \"2021-02-03T00:00:00\", \"score\": 1, \"index\": 29}, {\"level_0\": 1161, \"date\": \"2021-02-03T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1162, \"date\": \"2021-02-03T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 1163, \"date\": \"2021-02-03T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1164, \"date\": \"2021-02-03T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1165, \"date\": \"2021-02-04T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 1166, \"date\": \"2021-02-04T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 1167, \"date\": \"2021-02-04T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1168, \"date\": \"2021-02-04T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 1169, \"date\": \"2021-02-04T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 1170, \"date\": \"2021-02-05T00:00:00\", \"score\": 1, \"index\": 33}, {\"level_0\": 1171, \"date\": \"2021-02-05T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 1172, \"date\": \"2021-02-05T00:00:00\", \"score\": 3, \"index\": 15}, {\"level_0\": 1173, \"date\": \"2021-02-05T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1174, \"date\": \"2021-02-05T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 1175, \"date\": \"2021-02-06T00:00:00\", \"score\": 1, \"index\": 20}, {\"level_0\": 1176, \"date\": \"2021-02-06T00:00:00\", \"score\": 2, \"index\": 6}, {\"level_0\": 1177, \"date\": \"2021-02-06T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1178, \"date\": \"2021-02-06T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1179, \"date\": \"2021-02-06T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 1180, \"date\": \"2021-02-07T00:00:00\", \"score\": 1, \"index\": 23}, {\"level_0\": 1181, \"date\": \"2021-02-07T00:00:00\", \"score\": 2, \"index\": 2}, {\"level_0\": 1182, \"date\": \"2021-02-07T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 1183, \"date\": \"2021-02-07T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 1184, \"date\": \"2021-02-07T00:00:00\", \"score\": 5, \"index\": 8}, {\"level_0\": 1185, \"date\": \"2021-02-08T00:00:00\", \"score\": 1, \"index\": 21}, {\"level_0\": 1186, \"date\": \"2021-02-08T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1187, \"date\": \"2021-02-08T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1188, \"date\": \"2021-02-08T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 1189, \"date\": \"2021-02-08T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1190, \"date\": \"2021-02-09T00:00:00\", \"score\": 1, \"index\": 26}, {\"level_0\": 1191, \"date\": \"2021-02-09T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 1192, \"date\": \"2021-02-09T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 1193, \"date\": \"2021-02-09T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1194, \"date\": \"2021-02-10T00:00:00\", \"score\": 1, \"index\": 41}, {\"level_0\": 1195, \"date\": \"2021-02-10T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 1196, \"date\": \"2021-02-10T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1197, \"date\": \"2021-02-10T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1198, \"date\": \"2021-02-10T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 1199, \"date\": \"2021-02-11T00:00:00\", \"score\": 1, \"index\": 32}, {\"level_0\": 1200, \"date\": \"2021-02-11T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1201, \"date\": \"2021-02-11T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 1202, \"date\": \"2021-02-11T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1203, \"date\": \"2021-02-11T00:00:00\", \"score\": 5, \"index\": 20}, {\"level_0\": 1204, \"date\": \"2021-02-12T00:00:00\", \"score\": 1, \"index\": 42}, {\"level_0\": 1205, \"date\": \"2021-02-12T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 1206, \"date\": \"2021-02-12T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 1207, \"date\": \"2021-02-12T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1208, \"date\": \"2021-02-12T00:00:00\", \"score\": 5, \"index\": 21}, {\"level_0\": 1209, \"date\": \"2021-02-13T00:00:00\", \"score\": 1, \"index\": 44}, {\"level_0\": 1210, \"date\": \"2021-02-13T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 1211, \"date\": \"2021-02-13T00:00:00\", \"score\": 3, \"index\": 10}, {\"level_0\": 1212, \"date\": \"2021-02-13T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1213, \"date\": \"2021-02-13T00:00:00\", \"score\": 5, \"index\": 19}, {\"level_0\": 1214, \"date\": \"2021-02-14T00:00:00\", \"score\": 1, \"index\": 37}, {\"level_0\": 1215, \"date\": \"2021-02-14T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 1216, \"date\": \"2021-02-14T00:00:00\", \"score\": 3, \"index\": 3}, {\"level_0\": 1217, \"date\": \"2021-02-14T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1218, \"date\": \"2021-02-14T00:00:00\", \"score\": 5, \"index\": 8}, {\"level_0\": 1219, \"date\": \"2021-02-15T00:00:00\", \"score\": 1, \"index\": 34}, {\"level_0\": 1220, \"date\": \"2021-02-15T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1221, \"date\": \"2021-02-15T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1222, \"date\": \"2021-02-15T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1223, \"date\": \"2021-02-15T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1224, \"date\": \"2021-02-16T00:00:00\", \"score\": 1, \"index\": 22}, {\"level_0\": 1225, \"date\": \"2021-02-16T00:00:00\", \"score\": 2, \"index\": 3}, {\"level_0\": 1226, \"date\": \"2021-02-16T00:00:00\", \"score\": 3, \"index\": 2}, {\"level_0\": 1227, \"date\": \"2021-02-16T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1228, \"date\": \"2021-02-16T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1229, \"date\": \"2021-02-17T00:00:00\", \"score\": 1, \"index\": 32}, {\"level_0\": 1230, \"date\": \"2021-02-17T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 1231, \"date\": \"2021-02-17T00:00:00\", \"score\": 3, \"index\": 2}, {\"level_0\": 1232, \"date\": \"2021-02-17T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 1233, \"date\": \"2021-02-17T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1234, \"date\": \"2021-02-18T00:00:00\", \"score\": 1, \"index\": 25}, {\"level_0\": 1235, \"date\": \"2021-02-18T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 1236, \"date\": \"2021-02-18T00:00:00\", \"score\": 3, \"index\": 1}, {\"level_0\": 1237, \"date\": \"2021-02-18T00:00:00\", \"score\": 4, \"index\": 1}, {\"level_0\": 1238, \"date\": \"2021-02-18T00:00:00\", \"score\": 5, \"index\": 11}, {\"level_0\": 1239, \"date\": \"2021-02-19T00:00:00\", \"score\": 1, \"index\": 26}, {\"level_0\": 1240, \"date\": \"2021-02-19T00:00:00\", \"score\": 2, \"index\": 2}, {\"level_0\": 1241, \"date\": \"2021-02-19T00:00:00\", \"score\": 3, \"index\": 6}, {\"level_0\": 1242, \"date\": \"2021-02-19T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 1243, \"date\": \"2021-02-19T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 1244, \"date\": \"2021-02-20T00:00:00\", \"score\": 1, \"index\": 21}, {\"level_0\": 1245, \"date\": \"2021-02-20T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1246, \"date\": \"2021-02-20T00:00:00\", \"score\": 3, \"index\": 5}, {\"level_0\": 1247, \"date\": \"2021-02-20T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 1248, \"date\": \"2021-02-20T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1249, \"date\": \"2021-02-21T00:00:00\", \"score\": 1, \"index\": 13}, {\"level_0\": 1250, \"date\": \"2021-02-21T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 1251, \"date\": \"2021-02-21T00:00:00\", \"score\": 3, \"index\": 2}, {\"level_0\": 1252, \"date\": \"2021-02-21T00:00:00\", \"score\": 5, \"index\": 9}, {\"level_0\": 1253, \"date\": \"2021-02-22T00:00:00\", \"score\": 1, \"index\": 33}, {\"level_0\": 1254, \"date\": \"2021-02-22T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 1255, \"date\": \"2021-02-22T00:00:00\", \"score\": 3, \"index\": 2}, {\"level_0\": 1256, \"date\": \"2021-02-22T00:00:00\", \"score\": 4, \"index\": 1}, {\"level_0\": 1257, \"date\": \"2021-02-22T00:00:00\", \"score\": 5, \"index\": 7}, {\"level_0\": 1258, \"date\": \"2021-02-23T00:00:00\", \"score\": 1, \"index\": 29}, {\"level_0\": 1259, \"date\": \"2021-02-23T00:00:00\", \"score\": 2, \"index\": 4}, {\"level_0\": 1260, \"date\": \"2021-02-23T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 1261, \"date\": \"2021-02-23T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 1262, \"date\": \"2021-02-23T00:00:00\", \"score\": 5, \"index\": 7}, {\"level_0\": 1263, \"date\": \"2021-02-24T00:00:00\", \"score\": 1, \"index\": 28}, {\"level_0\": 1264, \"date\": \"2021-02-24T00:00:00\", \"score\": 2, \"index\": 5}, {\"level_0\": 1265, \"date\": \"2021-02-24T00:00:00\", \"score\": 3, \"index\": 3}, {\"level_0\": 1266, \"date\": \"2021-02-24T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1267, \"date\": \"2021-02-24T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1268, \"date\": \"2021-02-25T00:00:00\", \"score\": 1, \"index\": 22}, {\"level_0\": 1269, \"date\": \"2021-02-25T00:00:00\", \"score\": 2, \"index\": 5}, {\"level_0\": 1270, \"date\": \"2021-02-25T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 1271, \"date\": \"2021-02-25T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 1272, \"date\": \"2021-02-25T00:00:00\", \"score\": 5, \"index\": 6}, {\"level_0\": 1273, \"date\": \"2021-02-26T00:00:00\", \"score\": 1, \"index\": 14}, {\"level_0\": 1274, \"date\": \"2021-02-26T00:00:00\", \"score\": 2, \"index\": 11}, {\"level_0\": 1275, \"date\": \"2021-02-26T00:00:00\", \"score\": 3, \"index\": 3}, {\"level_0\": 1276, \"date\": \"2021-02-26T00:00:00\", \"score\": 4, \"index\": 7}, {\"level_0\": 1277, \"date\": \"2021-02-26T00:00:00\", \"score\": 5, \"index\": 10}, {\"level_0\": 1278, \"date\": \"2021-02-27T00:00:00\", \"score\": 1, \"index\": 21}, {\"level_0\": 1279, \"date\": \"2021-02-27T00:00:00\", \"score\": 2, \"index\": 3}, {\"level_0\": 1280, \"date\": \"2021-02-27T00:00:00\", \"score\": 3, \"index\": 3}, {\"level_0\": 1281, \"date\": \"2021-02-27T00:00:00\", \"score\": 4, \"index\": 3}, {\"level_0\": 1282, \"date\": \"2021-02-27T00:00:00\", \"score\": 5, \"index\": 12}, {\"level_0\": 1283, \"date\": \"2021-02-28T00:00:00\", \"score\": 1, \"index\": 37}, {\"level_0\": 1284, \"date\": \"2021-02-28T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1285, \"date\": \"2021-02-28T00:00:00\", \"score\": 3, \"index\": 7}, {\"level_0\": 1286, \"date\": \"2021-02-28T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1287, \"date\": \"2021-02-28T00:00:00\", \"score\": 5, \"index\": 8}, {\"level_0\": 1288, \"date\": \"2021-03-01T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 1289, \"date\": \"2021-03-01T00:00:00\", \"score\": 2, \"index\": 9}, {\"level_0\": 1290, \"date\": \"2021-03-01T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1291, \"date\": \"2021-03-01T00:00:00\", \"score\": 4, \"index\": 6}, {\"level_0\": 1292, \"date\": \"2021-03-01T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1293, \"date\": \"2021-03-02T00:00:00\", \"score\": 1, \"index\": 36}, {\"level_0\": 1294, \"date\": \"2021-03-02T00:00:00\", \"score\": 2, \"index\": 7}, {\"level_0\": 1295, \"date\": \"2021-03-02T00:00:00\", \"score\": 3, \"index\": 12}, {\"level_0\": 1296, \"date\": \"2021-03-02T00:00:00\", \"score\": 4, \"index\": 5}, {\"level_0\": 1297, \"date\": \"2021-03-02T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 1298, \"date\": \"2021-03-03T00:00:00\", \"score\": 1, \"index\": 45}, {\"level_0\": 1299, \"date\": \"2021-03-03T00:00:00\", \"score\": 2, \"index\": 13}, {\"level_0\": 1300, \"date\": \"2021-03-03T00:00:00\", \"score\": 3, \"index\": 9}, {\"level_0\": 1301, \"date\": \"2021-03-03T00:00:00\", \"score\": 4, \"index\": 4}, {\"level_0\": 1302, \"date\": \"2021-03-03T00:00:00\", \"score\": 5, \"index\": 15}, {\"level_0\": 1303, \"date\": \"2021-03-04T00:00:00\", \"score\": 1, \"index\": 43}, {\"level_0\": 1304, \"date\": \"2021-03-04T00:00:00\", \"score\": 2, \"index\": 10}, {\"level_0\": 1305, \"date\": \"2021-03-04T00:00:00\", \"score\": 3, \"index\": 8}, {\"level_0\": 1306, \"date\": \"2021-03-04T00:00:00\", \"score\": 4, \"index\": 8}, {\"level_0\": 1307, \"date\": \"2021-03-04T00:00:00\", \"score\": 5, \"index\": 14}, {\"level_0\": 1308, \"date\": \"2021-03-05T00:00:00\", \"score\": 1, \"index\": 29}, {\"level_0\": 1309, \"date\": \"2021-03-05T00:00:00\", \"score\": 2, \"index\": 8}, {\"level_0\": 1310, \"date\": \"2021-03-05T00:00:00\", \"score\": 3, \"index\": 4}, {\"level_0\": 1311, \"date\": \"2021-03-05T00:00:00\", \"score\": 4, \"index\": 2}, {\"level_0\": 1312, \"date\": \"2021-03-05T00:00:00\", \"score\": 5, \"index\": 5}]}}, {\"mode\": \"vega-lite\"});\n",
              "</script>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yBfV1XhCJYcW"
      },
      "source": [
        ""
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bGKYLTnSJYcW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "outputId": "0c389f45-7db9-4afb-9127-08f75db61bf8"
      },
      "source": [
        "xyz"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>level_0</th>\n",
              "      <th>date</th>\n",
              "      <th>score</th>\n",
              "      <th>index</th>\n",
              "      <th>Scores_new</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>2020-06-16</td>\n",
              "      <td>1</td>\n",
              "      <td>824</td>\n",
              "      <td>1 Star</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2020-06-16</td>\n",
              "      <td>2</td>\n",
              "      <td>194</td>\n",
              "      <td>2 Stars</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>2020-06-16</td>\n",
              "      <td>3</td>\n",
              "      <td>266</td>\n",
              "      <td>3 Stars</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>2020-06-16</td>\n",
              "      <td>4</td>\n",
              "      <td>429</td>\n",
              "      <td>4 Stars</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>2020-06-16</td>\n",
              "      <td>5</td>\n",
              "      <td>5060</td>\n",
              "      <td>5 Stars</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1308</th>\n",
              "      <td>1308</td>\n",
              "      <td>2021-03-05</td>\n",
              "      <td>1</td>\n",
              "      <td>29</td>\n",
              "      <td>1 Star</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1309</th>\n",
              "      <td>1309</td>\n",
              "      <td>2021-03-05</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>2 Stars</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1310</th>\n",
              "      <td>1310</td>\n",
              "      <td>2021-03-05</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3 Stars</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1311</th>\n",
              "      <td>1311</td>\n",
              "      <td>2021-03-05</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>4 Stars</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1312</th>\n",
              "      <td>1312</td>\n",
              "      <td>2021-03-05</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5 Stars</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1313 rows Ã— 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      level_0       date  score  index Scores_new\n",
              "0           0 2020-06-16      1    824     1 Star\n",
              "1           1 2020-06-16      2    194    2 Stars\n",
              "2           2 2020-06-16      3    266    3 Stars\n",
              "3           3 2020-06-16      4    429    4 Stars\n",
              "4           4 2020-06-16      5   5060    5 Stars\n",
              "...       ...        ...    ...    ...        ...\n",
              "1308     1308 2021-03-05      1     29     1 Star\n",
              "1309     1309 2021-03-05      2      8    2 Stars\n",
              "1310     1310 2021-03-05      3      4    3 Stars\n",
              "1311     1311 2021-03-05      4      2    4 Stars\n",
              "1312     1312 2021-03-05      5      5    5 Stars\n",
              "\n",
              "[1313 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KyOpA0poJYcX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 498
        },
        "outputId": "acafb385-83ec-464c-ee66-e6df9346f0da"
      },
      "source": [
        "xyz['Scores_new'] = xyz['score'].replace({1: '1 Star', 2: '2 Stars', 3: '3 Stars', 4: '4 Stars', 5:'5 Stars'})\n",
        "alt.Chart(xyz).mark_bar().encode(\n",
        "    x=alt.X('date',axis = alt.Axis(format='%Y-%B')),\n",
        "    y=alt.Y('sum(index)', title='Total Number of Reviews per Day'),\n",
        "    color= alt.Color('Scores_new', title = 'Rating' ,type='nominal',scale=alt.Scale(\n",
        "            domain=['1 Star', '2 Stars','3 Stars','4 Stars','5 Stars'],\n",
        "            range=['red', '#fd8d3c','yellow','#8ca252','green']))\n",
        ").properties(width=700, height = 400,title = ['Daily Number of Reviews for the German \"Corona-Warn-App\" (Google Play Store)','Time Period: 2020-06-16 to 2021-03-05']).configure_view(\n",
        "stroke='transparent'\n",
        ")"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "alt.Chart(...)"
            ],
            "text/html": [
              "\n",
              "<div id=\"altair-viz-51d7ccbf1ae6409ba08e64f90659db51\"></div>\n",
              "<script type=\"text/javascript\">\n",
              "  (function(spec, embedOpt){\n",
              "    let outputDiv = document.currentScript.previousElementSibling;\n",
              "    if (outputDiv.id !== \"altair-viz-51d7ccbf1ae6409ba08e64f90659db51\") {\n",
              "      outputDiv = document.getElementById(\"altair-viz-51d7ccbf1ae6409ba08e64f90659db51\");\n",
              "    }\n",
              "    const paths = {\n",
              "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
              "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
              "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n",
              "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
              "    };\n",
              "\n",
              "    function loadScript(lib) {\n",
              "      return new Promise(function(resolve, reject) {\n",
              "        var s = document.createElement('script');\n",
              "        s.src = paths[lib];\n",
              "        s.async = true;\n",
              "        s.onload = () => resolve(paths[lib]);\n",
              "        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
              "        document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
              "      });\n",
              "    }\n",
              "\n",
              "    function showError(err) {\n",
              "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
              "      throw err;\n",
              "    }\n",
              "\n",
              "    function displayChart(vegaEmbed) {\n",
              "      vegaEmbed(outputDiv, spec, embedOpt)\n",
              "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
              "    }\n",
              "\n",
              "    if(typeof define === \"function\" && define.amd) {\n",
              "      requirejs.config({paths});\n",
              "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
              "    } else if (typeof vegaEmbed === \"function\") {\n",
              "      displayChart(vegaEmbed);\n",
              "    } else {\n",
              "      loadScript(\"vega\")\n",
              "        .then(() => loadScript(\"vega-lite\"))\n",
              "        .then(() => loadScript(\"vega-embed\"))\n",
              "        .catch(showError)\n",
              "        .then(() => displayChart(vegaEmbed));\n",
              "    }\n",
              "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300, \"stroke\": \"transparent\"}}, \"data\": {\"name\": \"data-2549eb829c69fbd8f277fee8b7467457\"}, \"mark\": \"bar\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"Scores_new\", \"scale\": {\"domain\": [\"1 Star\", \"2 Stars\", \"3 Stars\", \"4 Stars\", \"5 Stars\"], \"range\": [\"red\", \"#fd8d3c\", \"yellow\", \"#8ca252\", \"green\"]}, \"title\": \"Rating\"}, \"x\": {\"type\": \"temporal\", \"axis\": {\"format\": \"%Y-%B\"}, \"field\": \"date\"}, \"y\": {\"type\": \"quantitative\", \"aggregate\": \"sum\", \"field\": \"index\", \"title\": \"Total Number of Reviews per Day\"}}, \"height\": 400, \"title\": [\"Daily Number of Reviews for the German \\\"Corona-Warn-App\\\" (Google Play Store)\", \"Time Period: 2020-06-16 to 2021-03-05\"], \"width\": 700, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-2549eb829c69fbd8f277fee8b7467457\": [{\"level_0\": 0, \"date\": \"2020-06-16T00:00:00\", \"score\": 1, \"index\": 824, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1, \"date\": \"2020-06-16T00:00:00\", \"score\": 2, \"index\": 194, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 2, \"date\": \"2020-06-16T00:00:00\", \"score\": 3, \"index\": 266, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 3, \"date\": \"2020-06-16T00:00:00\", \"score\": 4, \"index\": 429, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 4, \"date\": \"2020-06-16T00:00:00\", \"score\": 5, \"index\": 5060, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 5, \"date\": \"2020-06-17T00:00:00\", \"score\": 1, \"index\": 310, \"Scores_new\": \"1 Star\"}, {\"level_0\": 6, \"date\": \"2020-06-17T00:00:00\", \"score\": 2, \"index\": 90, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 7, \"date\": \"2020-06-17T00:00:00\", \"score\": 3, \"index\": 128, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 8, \"date\": \"2020-06-17T00:00:00\", \"score\": 4, \"index\": 187, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 9, \"date\": \"2020-06-17T00:00:00\", \"score\": 5, \"index\": 1545, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 10, \"date\": \"2020-06-18T00:00:00\", \"score\": 1, \"index\": 216, \"Scores_new\": \"1 Star\"}, {\"level_0\": 11, \"date\": \"2020-06-18T00:00:00\", \"score\": 2, \"index\": 52, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 12, \"date\": \"2020-06-18T00:00:00\", \"score\": 3, \"index\": 96, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 13, \"date\": \"2020-06-18T00:00:00\", \"score\": 4, \"index\": 108, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 14, \"date\": \"2020-06-18T00:00:00\", \"score\": 5, \"index\": 689, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 15, \"date\": \"2020-06-19T00:00:00\", \"score\": 1, \"index\": 197, \"Scores_new\": \"1 Star\"}, {\"level_0\": 16, \"date\": \"2020-06-19T00:00:00\", \"score\": 2, \"index\": 70, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 17, \"date\": \"2020-06-19T00:00:00\", \"score\": 3, \"index\": 89, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 18, \"date\": \"2020-06-19T00:00:00\", \"score\": 4, \"index\": 63, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 19, \"date\": \"2020-06-19T00:00:00\", \"score\": 5, \"index\": 360, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 20, \"date\": \"2020-06-20T00:00:00\", \"score\": 1, \"index\": 203, \"Scores_new\": \"1 Star\"}, {\"level_0\": 21, \"date\": \"2020-06-20T00:00:00\", \"score\": 2, \"index\": 75, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 22, \"date\": \"2020-06-20T00:00:00\", \"score\": 3, \"index\": 68, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 23, \"date\": \"2020-06-20T00:00:00\", \"score\": 4, \"index\": 73, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 24, \"date\": \"2020-06-20T00:00:00\", \"score\": 5, \"index\": 289, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 25, \"date\": \"2020-06-21T00:00:00\", \"score\": 1, \"index\": 199, \"Scores_new\": \"1 Star\"}, {\"level_0\": 26, \"date\": \"2020-06-21T00:00:00\", \"score\": 2, \"index\": 50, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 27, \"date\": \"2020-06-21T00:00:00\", \"score\": 3, \"index\": 68, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 28, \"date\": \"2020-06-21T00:00:00\", \"score\": 4, \"index\": 75, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 29, \"date\": \"2020-06-21T00:00:00\", \"score\": 5, \"index\": 281, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 30, \"date\": \"2020-06-22T00:00:00\", \"score\": 1, \"index\": 116, \"Scores_new\": \"1 Star\"}, {\"level_0\": 31, \"date\": \"2020-06-22T00:00:00\", \"score\": 2, \"index\": 38, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 32, \"date\": \"2020-06-22T00:00:00\", \"score\": 3, \"index\": 45, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 33, \"date\": \"2020-06-22T00:00:00\", \"score\": 4, \"index\": 42, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 34, \"date\": \"2020-06-22T00:00:00\", \"score\": 5, \"index\": 215, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 35, \"date\": \"2020-06-23T00:00:00\", \"score\": 1, \"index\": 95, \"Scores_new\": \"1 Star\"}, {\"level_0\": 36, \"date\": \"2020-06-23T00:00:00\", \"score\": 2, \"index\": 27, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 37, \"date\": \"2020-06-23T00:00:00\", \"score\": 3, \"index\": 45, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 38, \"date\": \"2020-06-23T00:00:00\", \"score\": 4, \"index\": 37, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 39, \"date\": \"2020-06-23T00:00:00\", \"score\": 5, \"index\": 241, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 40, \"date\": \"2020-06-24T00:00:00\", \"score\": 1, \"index\": 110, \"Scores_new\": \"1 Star\"}, {\"level_0\": 41, \"date\": \"2020-06-24T00:00:00\", \"score\": 2, \"index\": 34, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 42, \"date\": \"2020-06-24T00:00:00\", \"score\": 3, \"index\": 45, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 43, \"date\": \"2020-06-24T00:00:00\", \"score\": 4, \"index\": 50, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 44, \"date\": \"2020-06-24T00:00:00\", \"score\": 5, \"index\": 277, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 45, \"date\": \"2020-06-25T00:00:00\", \"score\": 1, \"index\": 123, \"Scores_new\": \"1 Star\"}, {\"level_0\": 46, \"date\": \"2020-06-25T00:00:00\", \"score\": 2, \"index\": 39, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 47, \"date\": \"2020-06-25T00:00:00\", \"score\": 3, \"index\": 35, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 48, \"date\": \"2020-06-25T00:00:00\", \"score\": 4, \"index\": 52, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 49, \"date\": \"2020-06-25T00:00:00\", \"score\": 5, \"index\": 264, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 50, \"date\": \"2020-06-26T00:00:00\", \"score\": 1, \"index\": 119, \"Scores_new\": \"1 Star\"}, {\"level_0\": 51, \"date\": \"2020-06-26T00:00:00\", \"score\": 2, \"index\": 24, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 52, \"date\": \"2020-06-26T00:00:00\", \"score\": 3, \"index\": 31, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 53, \"date\": \"2020-06-26T00:00:00\", \"score\": 4, \"index\": 41, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 54, \"date\": \"2020-06-26T00:00:00\", \"score\": 5, \"index\": 202, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 55, \"date\": \"2020-06-27T00:00:00\", \"score\": 1, \"index\": 89, \"Scores_new\": \"1 Star\"}, {\"level_0\": 56, \"date\": \"2020-06-27T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 57, \"date\": \"2020-06-27T00:00:00\", \"score\": 3, \"index\": 32, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 58, \"date\": \"2020-06-27T00:00:00\", \"score\": 4, \"index\": 25, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 59, \"date\": \"2020-06-27T00:00:00\", \"score\": 5, \"index\": 133, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 60, \"date\": \"2020-06-28T00:00:00\", \"score\": 1, \"index\": 93, \"Scores_new\": \"1 Star\"}, {\"level_0\": 61, \"date\": \"2020-06-28T00:00:00\", \"score\": 2, \"index\": 29, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 62, \"date\": \"2020-06-28T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 63, \"date\": \"2020-06-28T00:00:00\", \"score\": 4, \"index\": 41, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 64, \"date\": \"2020-06-28T00:00:00\", \"score\": 5, \"index\": 141, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 65, \"date\": \"2020-06-29T00:00:00\", \"score\": 1, \"index\": 101, \"Scores_new\": \"1 Star\"}, {\"level_0\": 66, \"date\": \"2020-06-29T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 67, \"date\": \"2020-06-29T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 68, \"date\": \"2020-06-29T00:00:00\", \"score\": 4, \"index\": 31, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 69, \"date\": \"2020-06-29T00:00:00\", \"score\": 5, \"index\": 102, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 70, \"date\": \"2020-06-30T00:00:00\", \"score\": 1, \"index\": 86, \"Scores_new\": \"1 Star\"}, {\"level_0\": 71, \"date\": \"2020-06-30T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 72, \"date\": \"2020-06-30T00:00:00\", \"score\": 3, \"index\": 23, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 73, \"date\": \"2020-06-30T00:00:00\", \"score\": 4, \"index\": 28, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 74, \"date\": \"2020-06-30T00:00:00\", \"score\": 5, \"index\": 105, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 75, \"date\": \"2020-07-01T00:00:00\", \"score\": 1, \"index\": 90, \"Scores_new\": \"1 Star\"}, {\"level_0\": 76, \"date\": \"2020-07-01T00:00:00\", \"score\": 2, \"index\": 31, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 77, \"date\": \"2020-07-01T00:00:00\", \"score\": 3, \"index\": 23, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 78, \"date\": \"2020-07-01T00:00:00\", \"score\": 4, \"index\": 32, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 79, \"date\": \"2020-07-01T00:00:00\", \"score\": 5, \"index\": 88, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 80, \"date\": \"2020-07-02T00:00:00\", \"score\": 1, \"index\": 130, \"Scores_new\": \"1 Star\"}, {\"level_0\": 81, \"date\": \"2020-07-02T00:00:00\", \"score\": 2, \"index\": 50, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 82, \"date\": \"2020-07-02T00:00:00\", \"score\": 3, \"index\": 94, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 83, \"date\": \"2020-07-02T00:00:00\", \"score\": 4, \"index\": 84, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 84, \"date\": \"2020-07-02T00:00:00\", \"score\": 5, \"index\": 245, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 85, \"date\": \"2020-07-03T00:00:00\", \"score\": 1, \"index\": 177, \"Scores_new\": \"1 Star\"}, {\"level_0\": 86, \"date\": \"2020-07-03T00:00:00\", \"score\": 2, \"index\": 82, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 87, \"date\": \"2020-07-03T00:00:00\", \"score\": 3, \"index\": 155, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 88, \"date\": \"2020-07-03T00:00:00\", \"score\": 4, \"index\": 119, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 89, \"date\": \"2020-07-03T00:00:00\", \"score\": 5, \"index\": 249, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 90, \"date\": \"2020-07-04T00:00:00\", \"score\": 1, \"index\": 153, \"Scores_new\": \"1 Star\"}, {\"level_0\": 91, \"date\": \"2020-07-04T00:00:00\", \"score\": 2, \"index\": 54, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 92, \"date\": \"2020-07-04T00:00:00\", \"score\": 3, \"index\": 86, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 93, \"date\": \"2020-07-04T00:00:00\", \"score\": 4, \"index\": 91, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 94, \"date\": \"2020-07-04T00:00:00\", \"score\": 5, \"index\": 182, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 95, \"date\": \"2020-07-05T00:00:00\", \"score\": 1, \"index\": 134, \"Scores_new\": \"1 Star\"}, {\"level_0\": 96, \"date\": \"2020-07-05T00:00:00\", \"score\": 2, \"index\": 67, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 97, \"date\": \"2020-07-05T00:00:00\", \"score\": 3, \"index\": 83, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 98, \"date\": \"2020-07-05T00:00:00\", \"score\": 4, \"index\": 52, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 99, \"date\": \"2020-07-05T00:00:00\", \"score\": 5, \"index\": 133, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 100, \"date\": \"2020-07-06T00:00:00\", \"score\": 1, \"index\": 182, \"Scores_new\": \"1 Star\"}, {\"level_0\": 101, \"date\": \"2020-07-06T00:00:00\", \"score\": 2, \"index\": 66, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 102, \"date\": \"2020-07-06T00:00:00\", \"score\": 3, \"index\": 82, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 103, \"date\": \"2020-07-06T00:00:00\", \"score\": 4, \"index\": 43, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 104, \"date\": \"2020-07-06T00:00:00\", \"score\": 5, \"index\": 155, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 105, \"date\": \"2020-07-07T00:00:00\", \"score\": 1, \"index\": 131, \"Scores_new\": \"1 Star\"}, {\"level_0\": 106, \"date\": \"2020-07-07T00:00:00\", \"score\": 2, \"index\": 39, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 107, \"date\": \"2020-07-07T00:00:00\", \"score\": 3, \"index\": 54, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 108, \"date\": \"2020-07-07T00:00:00\", \"score\": 4, \"index\": 40, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 109, \"date\": \"2020-07-07T00:00:00\", \"score\": 5, \"index\": 117, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 110, \"date\": \"2020-07-08T00:00:00\", \"score\": 1, \"index\": 122, \"Scores_new\": \"1 Star\"}, {\"level_0\": 111, \"date\": \"2020-07-08T00:00:00\", \"score\": 2, \"index\": 52, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 112, \"date\": \"2020-07-08T00:00:00\", \"score\": 3, \"index\": 62, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 113, \"date\": \"2020-07-08T00:00:00\", \"score\": 4, \"index\": 34, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 114, \"date\": \"2020-07-08T00:00:00\", \"score\": 5, \"index\": 128, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 115, \"date\": \"2020-07-09T00:00:00\", \"score\": 1, \"index\": 130, \"Scores_new\": \"1 Star\"}, {\"level_0\": 116, \"date\": \"2020-07-09T00:00:00\", \"score\": 2, \"index\": 33, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 117, \"date\": \"2020-07-09T00:00:00\", \"score\": 3, \"index\": 52, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 118, \"date\": \"2020-07-09T00:00:00\", \"score\": 4, \"index\": 43, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 119, \"date\": \"2020-07-09T00:00:00\", \"score\": 5, \"index\": 107, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 120, \"date\": \"2020-07-10T00:00:00\", \"score\": 1, \"index\": 116, \"Scores_new\": \"1 Star\"}, {\"level_0\": 121, \"date\": \"2020-07-10T00:00:00\", \"score\": 2, \"index\": 44, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 122, \"date\": \"2020-07-10T00:00:00\", \"score\": 3, \"index\": 46, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 123, \"date\": \"2020-07-10T00:00:00\", \"score\": 4, \"index\": 38, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 124, \"date\": \"2020-07-10T00:00:00\", \"score\": 5, \"index\": 91, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 125, \"date\": \"2020-07-11T00:00:00\", \"score\": 1, \"index\": 100, \"Scores_new\": \"1 Star\"}, {\"level_0\": 126, \"date\": \"2020-07-11T00:00:00\", \"score\": 2, \"index\": 30, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 127, \"date\": \"2020-07-11T00:00:00\", \"score\": 3, \"index\": 34, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 128, \"date\": \"2020-07-11T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 129, \"date\": \"2020-07-11T00:00:00\", \"score\": 5, \"index\": 100, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 130, \"date\": \"2020-07-12T00:00:00\", \"score\": 1, \"index\": 91, \"Scores_new\": \"1 Star\"}, {\"level_0\": 131, \"date\": \"2020-07-12T00:00:00\", \"score\": 2, \"index\": 46, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 132, \"date\": \"2020-07-12T00:00:00\", \"score\": 3, \"index\": 38, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 133, \"date\": \"2020-07-12T00:00:00\", \"score\": 4, \"index\": 35, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 134, \"date\": \"2020-07-12T00:00:00\", \"score\": 5, \"index\": 96, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 135, \"date\": \"2020-07-13T00:00:00\", \"score\": 1, \"index\": 112, \"Scores_new\": \"1 Star\"}, {\"level_0\": 136, \"date\": \"2020-07-13T00:00:00\", \"score\": 2, \"index\": 39, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 137, \"date\": \"2020-07-13T00:00:00\", \"score\": 3, \"index\": 50, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 138, \"date\": \"2020-07-13T00:00:00\", \"score\": 4, \"index\": 23, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 139, \"date\": \"2020-07-13T00:00:00\", \"score\": 5, \"index\": 93, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 140, \"date\": \"2020-07-14T00:00:00\", \"score\": 1, \"index\": 115, \"Scores_new\": \"1 Star\"}, {\"level_0\": 141, \"date\": \"2020-07-14T00:00:00\", \"score\": 2, \"index\": 41, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 142, \"date\": \"2020-07-14T00:00:00\", \"score\": 3, \"index\": 37, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 143, \"date\": \"2020-07-14T00:00:00\", \"score\": 4, \"index\": 21, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 144, \"date\": \"2020-07-14T00:00:00\", \"score\": 5, \"index\": 90, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 145, \"date\": \"2020-07-15T00:00:00\", \"score\": 1, \"index\": 79, \"Scores_new\": \"1 Star\"}, {\"level_0\": 146, \"date\": \"2020-07-15T00:00:00\", \"score\": 2, \"index\": 33, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 147, \"date\": \"2020-07-15T00:00:00\", \"score\": 3, \"index\": 35, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 148, \"date\": \"2020-07-15T00:00:00\", \"score\": 4, \"index\": 24, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 149, \"date\": \"2020-07-15T00:00:00\", \"score\": 5, \"index\": 63, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 150, \"date\": \"2020-07-16T00:00:00\", \"score\": 1, \"index\": 91, \"Scores_new\": \"1 Star\"}, {\"level_0\": 151, \"date\": \"2020-07-16T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 152, \"date\": \"2020-07-16T00:00:00\", \"score\": 3, \"index\": 33, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 153, \"date\": \"2020-07-16T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 154, \"date\": \"2020-07-16T00:00:00\", \"score\": 5, \"index\": 55, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 155, \"date\": \"2020-07-17T00:00:00\", \"score\": 1, \"index\": 78, \"Scores_new\": \"1 Star\"}, {\"level_0\": 156, \"date\": \"2020-07-17T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 157, \"date\": \"2020-07-17T00:00:00\", \"score\": 3, \"index\": 30, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 158, \"date\": \"2020-07-17T00:00:00\", \"score\": 4, \"index\": 17, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 159, \"date\": \"2020-07-17T00:00:00\", \"score\": 5, \"index\": 41, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 160, \"date\": \"2020-07-18T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 161, \"date\": \"2020-07-18T00:00:00\", \"score\": 2, \"index\": 38, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 162, \"date\": \"2020-07-18T00:00:00\", \"score\": 3, \"index\": 33, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 163, \"date\": \"2020-07-18T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 164, \"date\": \"2020-07-18T00:00:00\", \"score\": 5, \"index\": 46, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 165, \"date\": \"2020-07-19T00:00:00\", \"score\": 1, \"index\": 68, \"Scores_new\": \"1 Star\"}, {\"level_0\": 166, \"date\": \"2020-07-19T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 167, \"date\": \"2020-07-19T00:00:00\", \"score\": 3, \"index\": 24, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 168, \"date\": \"2020-07-19T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 169, \"date\": \"2020-07-19T00:00:00\", \"score\": 5, \"index\": 35, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 170, \"date\": \"2020-07-20T00:00:00\", \"score\": 1, \"index\": 73, \"Scores_new\": \"1 Star\"}, {\"level_0\": 171, \"date\": \"2020-07-20T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 172, \"date\": \"2020-07-20T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 173, \"date\": \"2020-07-20T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 174, \"date\": \"2020-07-20T00:00:00\", \"score\": 5, \"index\": 57, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 175, \"date\": \"2020-07-21T00:00:00\", \"score\": 1, \"index\": 78, \"Scores_new\": \"1 Star\"}, {\"level_0\": 176, \"date\": \"2020-07-21T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 177, \"date\": \"2020-07-21T00:00:00\", \"score\": 3, \"index\": 22, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 178, \"date\": \"2020-07-21T00:00:00\", \"score\": 4, \"index\": 15, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 179, \"date\": \"2020-07-21T00:00:00\", \"score\": 5, \"index\": 67, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 180, \"date\": \"2020-07-22T00:00:00\", \"score\": 1, \"index\": 68, \"Scores_new\": \"1 Star\"}, {\"level_0\": 181, \"date\": \"2020-07-22T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 182, \"date\": \"2020-07-22T00:00:00\", \"score\": 3, \"index\": 18, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 183, \"date\": \"2020-07-22T00:00:00\", \"score\": 4, \"index\": 26, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 184, \"date\": \"2020-07-22T00:00:00\", \"score\": 5, \"index\": 69, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 185, \"date\": \"2020-07-23T00:00:00\", \"score\": 1, \"index\": 91, \"Scores_new\": \"1 Star\"}, {\"level_0\": 186, \"date\": \"2020-07-23T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 187, \"date\": \"2020-07-23T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 188, \"date\": \"2020-07-23T00:00:00\", \"score\": 4, \"index\": 31, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 189, \"date\": \"2020-07-23T00:00:00\", \"score\": 5, \"index\": 65, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 190, \"date\": \"2020-07-24T00:00:00\", \"score\": 1, \"index\": 169, \"Scores_new\": \"1 Star\"}, {\"level_0\": 191, \"date\": \"2020-07-24T00:00:00\", \"score\": 2, \"index\": 38, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 192, \"date\": \"2020-07-24T00:00:00\", \"score\": 3, \"index\": 33, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 193, \"date\": \"2020-07-24T00:00:00\", \"score\": 4, \"index\": 46, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 194, \"date\": \"2020-07-24T00:00:00\", \"score\": 5, \"index\": 115, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 195, \"date\": \"2020-07-25T00:00:00\", \"score\": 1, \"index\": 145, \"Scores_new\": \"1 Star\"}, {\"level_0\": 196, \"date\": \"2020-07-25T00:00:00\", \"score\": 2, \"index\": 35, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 197, \"date\": \"2020-07-25T00:00:00\", \"score\": 3, \"index\": 35, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 198, \"date\": \"2020-07-25T00:00:00\", \"score\": 4, \"index\": 34, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 199, \"date\": \"2020-07-25T00:00:00\", \"score\": 5, \"index\": 118, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 200, \"date\": \"2020-07-26T00:00:00\", \"score\": 1, \"index\": 96, \"Scores_new\": \"1 Star\"}, {\"level_0\": 201, \"date\": \"2020-07-26T00:00:00\", \"score\": 2, \"index\": 26, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 202, \"date\": \"2020-07-26T00:00:00\", \"score\": 3, \"index\": 30, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 203, \"date\": \"2020-07-26T00:00:00\", \"score\": 4, \"index\": 33, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 204, \"date\": \"2020-07-26T00:00:00\", \"score\": 5, \"index\": 97, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 205, \"date\": \"2020-07-27T00:00:00\", \"score\": 1, \"index\": 70, \"Scores_new\": \"1 Star\"}, {\"level_0\": 206, \"date\": \"2020-07-27T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 207, \"date\": \"2020-07-27T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 208, \"date\": \"2020-07-27T00:00:00\", \"score\": 4, \"index\": 18, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 209, \"date\": \"2020-07-27T00:00:00\", \"score\": 5, \"index\": 74, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 210, \"date\": \"2020-07-28T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 211, \"date\": \"2020-07-28T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 212, \"date\": \"2020-07-28T00:00:00\", \"score\": 3, \"index\": 24, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 213, \"date\": \"2020-07-28T00:00:00\", \"score\": 4, \"index\": 16, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 214, \"date\": \"2020-07-28T00:00:00\", \"score\": 5, \"index\": 64, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 215, \"date\": \"2020-07-29T00:00:00\", \"score\": 1, \"index\": 53, \"Scores_new\": \"1 Star\"}, {\"level_0\": 216, \"date\": \"2020-07-29T00:00:00\", \"score\": 2, \"index\": 19, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 217, \"date\": \"2020-07-29T00:00:00\", \"score\": 3, \"index\": 21, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 218, \"date\": \"2020-07-29T00:00:00\", \"score\": 4, \"index\": 21, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 219, \"date\": \"2020-07-29T00:00:00\", \"score\": 5, \"index\": 41, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 220, \"date\": \"2020-07-30T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 221, \"date\": \"2020-07-30T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 222, \"date\": \"2020-07-30T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 223, \"date\": \"2020-07-30T00:00:00\", \"score\": 4, \"index\": 18, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 224, \"date\": \"2020-07-30T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 225, \"date\": \"2020-07-31T00:00:00\", \"score\": 1, \"index\": 37, \"Scores_new\": \"1 Star\"}, {\"level_0\": 226, \"date\": \"2020-07-31T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 227, \"date\": \"2020-07-31T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 228, \"date\": \"2020-07-31T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 229, \"date\": \"2020-07-31T00:00:00\", \"score\": 5, \"index\": 33, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 230, \"date\": \"2020-08-01T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 231, \"date\": \"2020-08-01T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 232, \"date\": \"2020-08-01T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 233, \"date\": \"2020-08-01T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 234, \"date\": \"2020-08-01T00:00:00\", \"score\": 5, \"index\": 29, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 235, \"date\": \"2020-08-02T00:00:00\", \"score\": 1, \"index\": 30, \"Scores_new\": \"1 Star\"}, {\"level_0\": 236, \"date\": \"2020-08-02T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 237, \"date\": \"2020-08-02T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 238, \"date\": \"2020-08-02T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 239, \"date\": \"2020-08-02T00:00:00\", \"score\": 5, \"index\": 35, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 240, \"date\": \"2020-08-03T00:00:00\", \"score\": 1, \"index\": 33, \"Scores_new\": \"1 Star\"}, {\"level_0\": 241, \"date\": \"2020-08-03T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 242, \"date\": \"2020-08-03T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 243, \"date\": \"2020-08-03T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 244, \"date\": \"2020-08-03T00:00:00\", \"score\": 5, \"index\": 27, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 245, \"date\": \"2020-08-04T00:00:00\", \"score\": 1, \"index\": 42, \"Scores_new\": \"1 Star\"}, {\"level_0\": 246, \"date\": \"2020-08-04T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 247, \"date\": \"2020-08-04T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 248, \"date\": \"2020-08-04T00:00:00\", \"score\": 4, \"index\": 15, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 249, \"date\": \"2020-08-04T00:00:00\", \"score\": 5, \"index\": 44, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 250, \"date\": \"2020-08-05T00:00:00\", \"score\": 1, \"index\": 40, \"Scores_new\": \"1 Star\"}, {\"level_0\": 251, \"date\": \"2020-08-05T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 252, \"date\": \"2020-08-05T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 253, \"date\": \"2020-08-05T00:00:00\", \"score\": 4, \"index\": 14, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 254, \"date\": \"2020-08-05T00:00:00\", \"score\": 5, \"index\": 34, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 255, \"date\": \"2020-08-06T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 256, \"date\": \"2020-08-06T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 257, \"date\": \"2020-08-06T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 258, \"date\": \"2020-08-06T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 259, \"date\": \"2020-08-06T00:00:00\", \"score\": 5, \"index\": 35, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 260, \"date\": \"2020-08-07T00:00:00\", \"score\": 1, \"index\": 40, \"Scores_new\": \"1 Star\"}, {\"level_0\": 261, \"date\": \"2020-08-07T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 262, \"date\": \"2020-08-07T00:00:00\", \"score\": 3, \"index\": 17, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 263, \"date\": \"2020-08-07T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 264, \"date\": \"2020-08-07T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 265, \"date\": \"2020-08-08T00:00:00\", \"score\": 1, \"index\": 28, \"Scores_new\": \"1 Star\"}, {\"level_0\": 266, \"date\": \"2020-08-08T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 267, \"date\": \"2020-08-08T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 268, \"date\": \"2020-08-08T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 269, \"date\": \"2020-08-08T00:00:00\", \"score\": 5, \"index\": 29, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 270, \"date\": \"2020-08-09T00:00:00\", \"score\": 1, \"index\": 29, \"Scores_new\": \"1 Star\"}, {\"level_0\": 271, \"date\": \"2020-08-09T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 272, \"date\": \"2020-08-09T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 273, \"date\": \"2020-08-09T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 274, \"date\": \"2020-08-09T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 275, \"date\": \"2020-08-10T00:00:00\", \"score\": 1, \"index\": 26, \"Scores_new\": \"1 Star\"}, {\"level_0\": 276, \"date\": \"2020-08-10T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 277, \"date\": \"2020-08-10T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 278, \"date\": \"2020-08-10T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 279, \"date\": \"2020-08-10T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 280, \"date\": \"2020-08-11T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 281, \"date\": \"2020-08-11T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 282, \"date\": \"2020-08-11T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 283, \"date\": \"2020-08-11T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 284, \"date\": \"2020-08-11T00:00:00\", \"score\": 5, \"index\": 30, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 285, \"date\": \"2020-08-12T00:00:00\", \"score\": 1, \"index\": 49, \"Scores_new\": \"1 Star\"}, {\"level_0\": 286, \"date\": \"2020-08-12T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 287, \"date\": \"2020-08-12T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 288, \"date\": \"2020-08-12T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 289, \"date\": \"2020-08-12T00:00:00\", \"score\": 5, \"index\": 36, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 290, \"date\": \"2020-08-13T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 291, \"date\": \"2020-08-13T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 292, \"date\": \"2020-08-13T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 293, \"date\": \"2020-08-13T00:00:00\", \"score\": 4, \"index\": 16, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 294, \"date\": \"2020-08-13T00:00:00\", \"score\": 5, \"index\": 37, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 295, \"date\": \"2020-08-14T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 296, \"date\": \"2020-08-14T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 297, \"date\": \"2020-08-14T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 298, \"date\": \"2020-08-14T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 299, \"date\": \"2020-08-14T00:00:00\", \"score\": 5, \"index\": 37, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 300, \"date\": \"2020-08-15T00:00:00\", \"score\": 1, \"index\": 54, \"Scores_new\": \"1 Star\"}, {\"level_0\": 301, \"date\": \"2020-08-15T00:00:00\", \"score\": 2, \"index\": 22, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 302, \"date\": \"2020-08-15T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 303, \"date\": \"2020-08-15T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 304, \"date\": \"2020-08-15T00:00:00\", \"score\": 5, \"index\": 33, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 305, \"date\": \"2020-08-16T00:00:00\", \"score\": 1, \"index\": 48, \"Scores_new\": \"1 Star\"}, {\"level_0\": 306, \"date\": \"2020-08-16T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 307, \"date\": \"2020-08-16T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 308, \"date\": \"2020-08-16T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 309, \"date\": \"2020-08-16T00:00:00\", \"score\": 5, \"index\": 34, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 310, \"date\": \"2020-08-17T00:00:00\", \"score\": 1, \"index\": 48, \"Scores_new\": \"1 Star\"}, {\"level_0\": 311, \"date\": \"2020-08-17T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 312, \"date\": \"2020-08-17T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 313, \"date\": \"2020-08-17T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 314, \"date\": \"2020-08-17T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 315, \"date\": \"2020-08-18T00:00:00\", \"score\": 1, \"index\": 53, \"Scores_new\": \"1 Star\"}, {\"level_0\": 316, \"date\": \"2020-08-18T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 317, \"date\": \"2020-08-18T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 318, \"date\": \"2020-08-18T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 319, \"date\": \"2020-08-18T00:00:00\", \"score\": 5, \"index\": 25, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 320, \"date\": \"2020-08-19T00:00:00\", \"score\": 1, \"index\": 48, \"Scores_new\": \"1 Star\"}, {\"level_0\": 321, \"date\": \"2020-08-19T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 322, \"date\": \"2020-08-19T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 323, \"date\": \"2020-08-19T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 324, \"date\": \"2020-08-19T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 325, \"date\": \"2020-08-20T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 326, \"date\": \"2020-08-20T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 327, \"date\": \"2020-08-20T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 328, \"date\": \"2020-08-20T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 329, \"date\": \"2020-08-20T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 330, \"date\": \"2020-08-21T00:00:00\", \"score\": 1, \"index\": 55, \"Scores_new\": \"1 Star\"}, {\"level_0\": 331, \"date\": \"2020-08-21T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 332, \"date\": \"2020-08-21T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 333, \"date\": \"2020-08-21T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 334, \"date\": \"2020-08-21T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 335, \"date\": \"2020-08-22T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 336, \"date\": \"2020-08-22T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 337, \"date\": \"2020-08-22T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 338, \"date\": \"2020-08-22T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 339, \"date\": \"2020-08-22T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 340, \"date\": \"2020-08-23T00:00:00\", \"score\": 1, \"index\": 50, \"Scores_new\": \"1 Star\"}, {\"level_0\": 341, \"date\": \"2020-08-23T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 342, \"date\": \"2020-08-23T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 343, \"date\": \"2020-08-23T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 344, \"date\": \"2020-08-23T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 345, \"date\": \"2020-08-24T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 346, \"date\": \"2020-08-24T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 347, \"date\": \"2020-08-24T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 348, \"date\": \"2020-08-24T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 349, \"date\": \"2020-08-24T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 350, \"date\": \"2020-08-25T00:00:00\", \"score\": 1, \"index\": 64, \"Scores_new\": \"1 Star\"}, {\"level_0\": 351, \"date\": \"2020-08-25T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 352, \"date\": \"2020-08-25T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 353, \"date\": \"2020-08-25T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 354, \"date\": \"2020-08-25T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 355, \"date\": \"2020-08-26T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 356, \"date\": \"2020-08-26T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 357, \"date\": \"2020-08-26T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 358, \"date\": \"2020-08-26T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 359, \"date\": \"2020-08-26T00:00:00\", \"score\": 5, \"index\": 12, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 360, \"date\": \"2020-08-27T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 361, \"date\": \"2020-08-27T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 362, \"date\": \"2020-08-27T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 363, \"date\": \"2020-08-27T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 364, \"date\": \"2020-08-27T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 365, \"date\": \"2020-08-28T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 366, \"date\": \"2020-08-28T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 367, \"date\": \"2020-08-28T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 368, \"date\": \"2020-08-28T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 369, \"date\": \"2020-08-28T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 370, \"date\": \"2020-08-29T00:00:00\", \"score\": 1, \"index\": 31, \"Scores_new\": \"1 Star\"}, {\"level_0\": 371, \"date\": \"2020-08-29T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 372, \"date\": \"2020-08-29T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 373, \"date\": \"2020-08-29T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 374, \"date\": \"2020-08-29T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 375, \"date\": \"2020-08-30T00:00:00\", \"score\": 1, \"index\": 47, \"Scores_new\": \"1 Star\"}, {\"level_0\": 376, \"date\": \"2020-08-30T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 377, \"date\": \"2020-08-30T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 378, \"date\": \"2020-08-30T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 379, \"date\": \"2020-08-30T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 380, \"date\": \"2020-08-31T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 381, \"date\": \"2020-08-31T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 382, \"date\": \"2020-08-31T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 383, \"date\": \"2020-08-31T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 384, \"date\": \"2020-08-31T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 385, \"date\": \"2020-09-01T00:00:00\", \"score\": 1, \"index\": 37, \"Scores_new\": \"1 Star\"}, {\"level_0\": 386, \"date\": \"2020-09-01T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 387, \"date\": \"2020-09-01T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 388, \"date\": \"2020-09-01T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 389, \"date\": \"2020-09-01T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 390, \"date\": \"2020-09-02T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 391, \"date\": \"2020-09-02T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 392, \"date\": \"2020-09-02T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 393, \"date\": \"2020-09-02T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 394, \"date\": \"2020-09-02T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 395, \"date\": \"2020-09-03T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 396, \"date\": \"2020-09-03T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 397, \"date\": \"2020-09-03T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 398, \"date\": \"2020-09-03T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 399, \"date\": \"2020-09-03T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 400, \"date\": \"2020-09-04T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 401, \"date\": \"2020-09-04T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 402, \"date\": \"2020-09-04T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 403, \"date\": \"2020-09-04T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 404, \"date\": \"2020-09-04T00:00:00\", \"score\": 5, \"index\": 41, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 405, \"date\": \"2020-09-05T00:00:00\", \"score\": 1, \"index\": 60, \"Scores_new\": \"1 Star\"}, {\"level_0\": 406, \"date\": \"2020-09-05T00:00:00\", \"score\": 2, \"index\": 22, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 407, \"date\": \"2020-09-05T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 408, \"date\": \"2020-09-05T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 409, \"date\": \"2020-09-05T00:00:00\", \"score\": 5, \"index\": 27, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 410, \"date\": \"2020-09-06T00:00:00\", \"score\": 1, \"index\": 43, \"Scores_new\": \"1 Star\"}, {\"level_0\": 411, \"date\": \"2020-09-06T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 412, \"date\": \"2020-09-06T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 413, \"date\": \"2020-09-06T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 414, \"date\": \"2020-09-06T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 415, \"date\": \"2020-09-07T00:00:00\", \"score\": 1, \"index\": 47, \"Scores_new\": \"1 Star\"}, {\"level_0\": 416, \"date\": \"2020-09-07T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 417, \"date\": \"2020-09-07T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 418, \"date\": \"2020-09-07T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 419, \"date\": \"2020-09-07T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 420, \"date\": \"2020-09-08T00:00:00\", \"score\": 1, \"index\": 35, \"Scores_new\": \"1 Star\"}, {\"level_0\": 421, \"date\": \"2020-09-08T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 422, \"date\": \"2020-09-08T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 423, \"date\": \"2020-09-08T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 424, \"date\": \"2020-09-08T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 425, \"date\": \"2020-09-09T00:00:00\", \"score\": 1, \"index\": 48, \"Scores_new\": \"1 Star\"}, {\"level_0\": 426, \"date\": \"2020-09-09T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 427, \"date\": \"2020-09-09T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 428, \"date\": \"2020-09-09T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 429, \"date\": \"2020-09-09T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 430, \"date\": \"2020-09-10T00:00:00\", \"score\": 1, \"index\": 30, \"Scores_new\": \"1 Star\"}, {\"level_0\": 431, \"date\": \"2020-09-10T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 432, \"date\": \"2020-09-10T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 433, \"date\": \"2020-09-10T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 434, \"date\": \"2020-09-10T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 435, \"date\": \"2020-09-11T00:00:00\", \"score\": 1, \"index\": 34, \"Scores_new\": \"1 Star\"}, {\"level_0\": 436, \"date\": \"2020-09-11T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 437, \"date\": \"2020-09-11T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 438, \"date\": \"2020-09-11T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 439, \"date\": \"2020-09-11T00:00:00\", \"score\": 5, \"index\": 7, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 440, \"date\": \"2020-09-12T00:00:00\", \"score\": 1, \"index\": 31, \"Scores_new\": \"1 Star\"}, {\"level_0\": 441, \"date\": \"2020-09-12T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 442, \"date\": \"2020-09-12T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 443, \"date\": \"2020-09-12T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 444, \"date\": \"2020-09-12T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 445, \"date\": \"2020-09-13T00:00:00\", \"score\": 1, \"index\": 23, \"Scores_new\": \"1 Star\"}, {\"level_0\": 446, \"date\": \"2020-09-13T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 447, \"date\": \"2020-09-13T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 448, \"date\": \"2020-09-13T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 449, \"date\": \"2020-09-13T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 450, \"date\": \"2020-09-14T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 451, \"date\": \"2020-09-14T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 452, \"date\": \"2020-09-14T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 453, \"date\": \"2020-09-14T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 454, \"date\": \"2020-09-14T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 455, \"date\": \"2020-09-15T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 456, \"date\": \"2020-09-15T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 457, \"date\": \"2020-09-15T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 458, \"date\": \"2020-09-15T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 459, \"date\": \"2020-09-15T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 460, \"date\": \"2020-09-16T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 461, \"date\": \"2020-09-16T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 462, \"date\": \"2020-09-16T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 463, \"date\": \"2020-09-16T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 464, \"date\": \"2020-09-16T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 465, \"date\": \"2020-09-17T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 466, \"date\": \"2020-09-17T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 467, \"date\": \"2020-09-17T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 468, \"date\": \"2020-09-17T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 469, \"date\": \"2020-09-17T00:00:00\", \"score\": 5, \"index\": 12, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 470, \"date\": \"2020-09-18T00:00:00\", \"score\": 1, \"index\": 35, \"Scores_new\": \"1 Star\"}, {\"level_0\": 471, \"date\": \"2020-09-18T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 472, \"date\": \"2020-09-18T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 473, \"date\": \"2020-09-18T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 474, \"date\": \"2020-09-18T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 475, \"date\": \"2020-09-19T00:00:00\", \"score\": 1, \"index\": 29, \"Scores_new\": \"1 Star\"}, {\"level_0\": 476, \"date\": \"2020-09-19T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 477, \"date\": \"2020-09-19T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 478, \"date\": \"2020-09-19T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 479, \"date\": \"2020-09-19T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 480, \"date\": \"2020-09-20T00:00:00\", \"score\": 1, \"index\": 43, \"Scores_new\": \"1 Star\"}, {\"level_0\": 481, \"date\": \"2020-09-20T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 482, \"date\": \"2020-09-20T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 483, \"date\": \"2020-09-20T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 484, \"date\": \"2020-09-20T00:00:00\", \"score\": 5, \"index\": 12, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 485, \"date\": \"2020-09-21T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 486, \"date\": \"2020-09-21T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 487, \"date\": \"2020-09-21T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 488, \"date\": \"2020-09-21T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 489, \"date\": \"2020-09-21T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 490, \"date\": \"2020-09-22T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 491, \"date\": \"2020-09-22T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 492, \"date\": \"2020-09-22T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 493, \"date\": \"2020-09-22T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 494, \"date\": \"2020-09-22T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 495, \"date\": \"2020-09-23T00:00:00\", \"score\": 1, \"index\": 110, \"Scores_new\": \"1 Star\"}, {\"level_0\": 496, \"date\": \"2020-09-23T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 497, \"date\": \"2020-09-23T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 498, \"date\": \"2020-09-23T00:00:00\", \"score\": 4, \"index\": 17, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 499, \"date\": \"2020-09-23T00:00:00\", \"score\": 5, \"index\": 49, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 500, \"date\": \"2020-09-24T00:00:00\", \"score\": 1, \"index\": 77, \"Scores_new\": \"1 Star\"}, {\"level_0\": 501, \"date\": \"2020-09-24T00:00:00\", \"score\": 2, \"index\": 17, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 502, \"date\": \"2020-09-24T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 503, \"date\": \"2020-09-24T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 504, \"date\": \"2020-09-24T00:00:00\", \"score\": 5, \"index\": 31, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 505, \"date\": \"2020-09-25T00:00:00\", \"score\": 1, \"index\": 53, \"Scores_new\": \"1 Star\"}, {\"level_0\": 506, \"date\": \"2020-09-25T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 507, \"date\": \"2020-09-25T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 508, \"date\": \"2020-09-25T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 509, \"date\": \"2020-09-25T00:00:00\", \"score\": 5, \"index\": 29, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 510, \"date\": \"2020-09-26T00:00:00\", \"score\": 1, \"index\": 48, \"Scores_new\": \"1 Star\"}, {\"level_0\": 511, \"date\": \"2020-09-26T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 512, \"date\": \"2020-09-26T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 513, \"date\": \"2020-09-26T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 514, \"date\": \"2020-09-26T00:00:00\", \"score\": 5, \"index\": 27, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 515, \"date\": \"2020-09-27T00:00:00\", \"score\": 1, \"index\": 35, \"Scores_new\": \"1 Star\"}, {\"level_0\": 516, \"date\": \"2020-09-27T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 517, \"date\": \"2020-09-27T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 518, \"date\": \"2020-09-27T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 519, \"date\": \"2020-09-27T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 520, \"date\": \"2020-09-28T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 521, \"date\": \"2020-09-28T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 522, \"date\": \"2020-09-28T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 523, \"date\": \"2020-09-28T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 524, \"date\": \"2020-09-28T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 525, \"date\": \"2020-09-29T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 526, \"date\": \"2020-09-29T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 527, \"date\": \"2020-09-29T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 528, \"date\": \"2020-09-29T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 529, \"date\": \"2020-09-29T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 530, \"date\": \"2020-09-30T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 531, \"date\": \"2020-09-30T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 532, \"date\": \"2020-09-30T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 533, \"date\": \"2020-09-30T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 534, \"date\": \"2020-09-30T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 535, \"date\": \"2020-10-01T00:00:00\", \"score\": 1, \"index\": 43, \"Scores_new\": \"1 Star\"}, {\"level_0\": 536, \"date\": \"2020-10-01T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 537, \"date\": \"2020-10-01T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 538, \"date\": \"2020-10-01T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 539, \"date\": \"2020-10-01T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 540, \"date\": \"2020-10-02T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 541, \"date\": \"2020-10-02T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 542, \"date\": \"2020-10-02T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 543, \"date\": \"2020-10-02T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 544, \"date\": \"2020-10-02T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 545, \"date\": \"2020-10-03T00:00:00\", \"score\": 1, \"index\": 27, \"Scores_new\": \"1 Star\"}, {\"level_0\": 546, \"date\": \"2020-10-03T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 547, \"date\": \"2020-10-03T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 548, \"date\": \"2020-10-03T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 549, \"date\": \"2020-10-03T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 550, \"date\": \"2020-10-04T00:00:00\", \"score\": 1, \"index\": 41, \"Scores_new\": \"1 Star\"}, {\"level_0\": 551, \"date\": \"2020-10-04T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 552, \"date\": \"2020-10-04T00:00:00\", \"score\": 3, \"index\": 3, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 553, \"date\": \"2020-10-04T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 554, \"date\": \"2020-10-04T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 555, \"date\": \"2020-10-05T00:00:00\", \"score\": 1, \"index\": 53, \"Scores_new\": \"1 Star\"}, {\"level_0\": 556, \"date\": \"2020-10-05T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 557, \"date\": \"2020-10-05T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 558, \"date\": \"2020-10-05T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 559, \"date\": \"2020-10-05T00:00:00\", \"score\": 5, \"index\": 5, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 560, \"date\": \"2020-10-06T00:00:00\", \"score\": 1, \"index\": 26, \"Scores_new\": \"1 Star\"}, {\"level_0\": 561, \"date\": \"2020-10-06T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 562, \"date\": \"2020-10-06T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 563, \"date\": \"2020-10-06T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 564, \"date\": \"2020-10-06T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 565, \"date\": \"2020-10-07T00:00:00\", \"score\": 1, \"index\": 62, \"Scores_new\": \"1 Star\"}, {\"level_0\": 566, \"date\": \"2020-10-07T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 567, \"date\": \"2020-10-07T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 568, \"date\": \"2020-10-07T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 569, \"date\": \"2020-10-07T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 570, \"date\": \"2020-10-08T00:00:00\", \"score\": 1, \"index\": 67, \"Scores_new\": \"1 Star\"}, {\"level_0\": 571, \"date\": \"2020-10-08T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 572, \"date\": \"2020-10-08T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 573, \"date\": \"2020-10-08T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 574, \"date\": \"2020-10-08T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 575, \"date\": \"2020-10-09T00:00:00\", \"score\": 1, \"index\": 65, \"Scores_new\": \"1 Star\"}, {\"level_0\": 576, \"date\": \"2020-10-09T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 577, \"date\": \"2020-10-09T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 578, \"date\": \"2020-10-09T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 579, \"date\": \"2020-10-09T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 580, \"date\": \"2020-10-10T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 581, \"date\": \"2020-10-10T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 582, \"date\": \"2020-10-10T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 583, \"date\": \"2020-10-10T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 584, \"date\": \"2020-10-10T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 585, \"date\": \"2020-10-11T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 586, \"date\": \"2020-10-11T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 587, \"date\": \"2020-10-11T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 588, \"date\": \"2020-10-11T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 589, \"date\": \"2020-10-11T00:00:00\", \"score\": 5, \"index\": 26, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 590, \"date\": \"2020-10-12T00:00:00\", \"score\": 1, \"index\": 60, \"Scores_new\": \"1 Star\"}, {\"level_0\": 591, \"date\": \"2020-10-12T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 592, \"date\": \"2020-10-12T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 593, \"date\": \"2020-10-12T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 594, \"date\": \"2020-10-12T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 595, \"date\": \"2020-10-13T00:00:00\", \"score\": 1, \"index\": 67, \"Scores_new\": \"1 Star\"}, {\"level_0\": 596, \"date\": \"2020-10-13T00:00:00\", \"score\": 2, \"index\": 20, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 597, \"date\": \"2020-10-13T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 598, \"date\": \"2020-10-13T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 599, \"date\": \"2020-10-13T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 600, \"date\": \"2020-10-14T00:00:00\", \"score\": 1, \"index\": 83, \"Scores_new\": \"1 Star\"}, {\"level_0\": 601, \"date\": \"2020-10-14T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 602, \"date\": \"2020-10-14T00:00:00\", \"score\": 3, \"index\": 17, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 603, \"date\": \"2020-10-14T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 604, \"date\": \"2020-10-14T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 605, \"date\": \"2020-10-15T00:00:00\", \"score\": 1, \"index\": 85, \"Scores_new\": \"1 Star\"}, {\"level_0\": 606, \"date\": \"2020-10-15T00:00:00\", \"score\": 2, \"index\": 26, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 607, \"date\": \"2020-10-15T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 608, \"date\": \"2020-10-15T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 609, \"date\": \"2020-10-15T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 610, \"date\": \"2020-10-16T00:00:00\", \"score\": 1, \"index\": 81, \"Scores_new\": \"1 Star\"}, {\"level_0\": 611, \"date\": \"2020-10-16T00:00:00\", \"score\": 2, \"index\": 27, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 612, \"date\": \"2020-10-16T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 613, \"date\": \"2020-10-16T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 614, \"date\": \"2020-10-16T00:00:00\", \"score\": 5, \"index\": 41, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 615, \"date\": \"2020-10-17T00:00:00\", \"score\": 1, \"index\": 125, \"Scores_new\": \"1 Star\"}, {\"level_0\": 616, \"date\": \"2020-10-17T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 617, \"date\": \"2020-10-17T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 618, \"date\": \"2020-10-17T00:00:00\", \"score\": 4, \"index\": 16, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 619, \"date\": \"2020-10-17T00:00:00\", \"score\": 5, \"index\": 34, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 620, \"date\": \"2020-10-18T00:00:00\", \"score\": 1, \"index\": 118, \"Scores_new\": \"1 Star\"}, {\"level_0\": 621, \"date\": \"2020-10-18T00:00:00\", \"score\": 2, \"index\": 22, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 622, \"date\": \"2020-10-18T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 623, \"date\": \"2020-10-18T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 624, \"date\": \"2020-10-18T00:00:00\", \"score\": 5, \"index\": 43, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 625, \"date\": \"2020-10-19T00:00:00\", \"score\": 1, \"index\": 190, \"Scores_new\": \"1 Star\"}, {\"level_0\": 626, \"date\": \"2020-10-19T00:00:00\", \"score\": 2, \"index\": 54, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 627, \"date\": \"2020-10-19T00:00:00\", \"score\": 3, \"index\": 45, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 628, \"date\": \"2020-10-19T00:00:00\", \"score\": 4, \"index\": 45, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 629, \"date\": \"2020-10-19T00:00:00\", \"score\": 5, \"index\": 152, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 630, \"date\": \"2020-10-20T00:00:00\", \"score\": 1, \"index\": 182, \"Scores_new\": \"1 Star\"}, {\"level_0\": 631, \"date\": \"2020-10-20T00:00:00\", \"score\": 2, \"index\": 44, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 632, \"date\": \"2020-10-20T00:00:00\", \"score\": 3, \"index\": 56, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 633, \"date\": \"2020-10-20T00:00:00\", \"score\": 4, \"index\": 36, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 634, \"date\": \"2020-10-20T00:00:00\", \"score\": 5, \"index\": 91, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 635, \"date\": \"2020-10-21T00:00:00\", \"score\": 1, \"index\": 105, \"Scores_new\": \"1 Star\"}, {\"level_0\": 636, \"date\": \"2020-10-21T00:00:00\", \"score\": 2, \"index\": 23, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 637, \"date\": \"2020-10-21T00:00:00\", \"score\": 3, \"index\": 30, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 638, \"date\": \"2020-10-21T00:00:00\", \"score\": 4, \"index\": 21, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 639, \"date\": \"2020-10-21T00:00:00\", \"score\": 5, \"index\": 52, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 640, \"date\": \"2020-10-22T00:00:00\", \"score\": 1, \"index\": 117, \"Scores_new\": \"1 Star\"}, {\"level_0\": 641, \"date\": \"2020-10-22T00:00:00\", \"score\": 2, \"index\": 27, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 642, \"date\": \"2020-10-22T00:00:00\", \"score\": 3, \"index\": 41, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 643, \"date\": \"2020-10-22T00:00:00\", \"score\": 4, \"index\": 28, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 644, \"date\": \"2020-10-22T00:00:00\", \"score\": 5, \"index\": 43, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 645, \"date\": \"2020-10-23T00:00:00\", \"score\": 1, \"index\": 98, \"Scores_new\": \"1 Star\"}, {\"level_0\": 646, \"date\": \"2020-10-23T00:00:00\", \"score\": 2, \"index\": 24, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 647, \"date\": \"2020-10-23T00:00:00\", \"score\": 3, \"index\": 24, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 648, \"date\": \"2020-10-23T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 649, \"date\": \"2020-10-23T00:00:00\", \"score\": 5, \"index\": 37, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 650, \"date\": \"2020-10-24T00:00:00\", \"score\": 1, \"index\": 73, \"Scores_new\": \"1 Star\"}, {\"level_0\": 651, \"date\": \"2020-10-24T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 652, \"date\": \"2020-10-24T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 653, \"date\": \"2020-10-24T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 654, \"date\": \"2020-10-24T00:00:00\", \"score\": 5, \"index\": 36, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 655, \"date\": \"2020-10-25T00:00:00\", \"score\": 1, \"index\": 80, \"Scores_new\": \"1 Star\"}, {\"level_0\": 656, \"date\": \"2020-10-25T00:00:00\", \"score\": 2, \"index\": 20, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 657, \"date\": \"2020-10-25T00:00:00\", \"score\": 3, \"index\": 22, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 658, \"date\": \"2020-10-25T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 659, \"date\": \"2020-10-25T00:00:00\", \"score\": 5, \"index\": 37, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 660, \"date\": \"2020-10-26T00:00:00\", \"score\": 1, \"index\": 90, \"Scores_new\": \"1 Star\"}, {\"level_0\": 661, \"date\": \"2020-10-26T00:00:00\", \"score\": 2, \"index\": 20, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 662, \"date\": \"2020-10-26T00:00:00\", \"score\": 3, \"index\": 18, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 663, \"date\": \"2020-10-26T00:00:00\", \"score\": 4, \"index\": 14, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 664, \"date\": \"2020-10-26T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 665, \"date\": \"2020-10-27T00:00:00\", \"score\": 1, \"index\": 81, \"Scores_new\": \"1 Star\"}, {\"level_0\": 666, \"date\": \"2020-10-27T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 667, \"date\": \"2020-10-27T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 668, \"date\": \"2020-10-27T00:00:00\", \"score\": 4, \"index\": 21, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 669, \"date\": \"2020-10-27T00:00:00\", \"score\": 5, \"index\": 36, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 670, \"date\": \"2020-10-28T00:00:00\", \"score\": 1, \"index\": 81, \"Scores_new\": \"1 Star\"}, {\"level_0\": 671, \"date\": \"2020-10-28T00:00:00\", \"score\": 2, \"index\": 22, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 672, \"date\": \"2020-10-28T00:00:00\", \"score\": 3, \"index\": 31, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 673, \"date\": \"2020-10-28T00:00:00\", \"score\": 4, \"index\": 18, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 674, \"date\": \"2020-10-28T00:00:00\", \"score\": 5, \"index\": 36, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 675, \"date\": \"2020-10-29T00:00:00\", \"score\": 1, \"index\": 93, \"Scores_new\": \"1 Star\"}, {\"level_0\": 676, \"date\": \"2020-10-29T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 677, \"date\": \"2020-10-29T00:00:00\", \"score\": 3, \"index\": 23, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 678, \"date\": \"2020-10-29T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 679, \"date\": \"2020-10-29T00:00:00\", \"score\": 5, \"index\": 42, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 680, \"date\": \"2020-10-30T00:00:00\", \"score\": 1, \"index\": 103, \"Scores_new\": \"1 Star\"}, {\"level_0\": 681, \"date\": \"2020-10-30T00:00:00\", \"score\": 2, \"index\": 28, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 682, \"date\": \"2020-10-30T00:00:00\", \"score\": 3, \"index\": 27, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 683, \"date\": \"2020-10-30T00:00:00\", \"score\": 4, \"index\": 15, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 684, \"date\": \"2020-10-30T00:00:00\", \"score\": 5, \"index\": 37, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 685, \"date\": \"2020-10-31T00:00:00\", \"score\": 1, \"index\": 72, \"Scores_new\": \"1 Star\"}, {\"level_0\": 686, \"date\": \"2020-10-31T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 687, \"date\": \"2020-10-31T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 688, \"date\": \"2020-10-31T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 689, \"date\": \"2020-10-31T00:00:00\", \"score\": 5, \"index\": 24, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 690, \"date\": \"2020-11-01T00:00:00\", \"score\": 1, \"index\": 70, \"Scores_new\": \"1 Star\"}, {\"level_0\": 691, \"date\": \"2020-11-01T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 692, \"date\": \"2020-11-01T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 693, \"date\": \"2020-11-01T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 694, \"date\": \"2020-11-01T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 695, \"date\": \"2020-11-02T00:00:00\", \"score\": 1, \"index\": 79, \"Scores_new\": \"1 Star\"}, {\"level_0\": 696, \"date\": \"2020-11-02T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 697, \"date\": \"2020-11-02T00:00:00\", \"score\": 3, \"index\": 23, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 698, \"date\": \"2020-11-02T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 699, \"date\": \"2020-11-02T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 700, \"date\": \"2020-11-03T00:00:00\", \"score\": 1, \"index\": 61, \"Scores_new\": \"1 Star\"}, {\"level_0\": 701, \"date\": \"2020-11-03T00:00:00\", \"score\": 2, \"index\": 24, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 702, \"date\": \"2020-11-03T00:00:00\", \"score\": 3, \"index\": 29, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 703, \"date\": \"2020-11-03T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 704, \"date\": \"2020-11-03T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 705, \"date\": \"2020-11-04T00:00:00\", \"score\": 1, \"index\": 64, \"Scores_new\": \"1 Star\"}, {\"level_0\": 706, \"date\": \"2020-11-04T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 707, \"date\": \"2020-11-04T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 708, \"date\": \"2020-11-04T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 709, \"date\": \"2020-11-04T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 710, \"date\": \"2020-11-05T00:00:00\", \"score\": 1, \"index\": 53, \"Scores_new\": \"1 Star\"}, {\"level_0\": 711, \"date\": \"2020-11-05T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 712, \"date\": \"2020-11-05T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 713, \"date\": \"2020-11-05T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 714, \"date\": \"2020-11-05T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 715, \"date\": \"2020-11-06T00:00:00\", \"score\": 1, \"index\": 68, \"Scores_new\": \"1 Star\"}, {\"level_0\": 716, \"date\": \"2020-11-06T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 717, \"date\": \"2020-11-06T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 718, \"date\": \"2020-11-06T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 719, \"date\": \"2020-11-06T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 720, \"date\": \"2020-11-07T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 721, \"date\": \"2020-11-07T00:00:00\", \"score\": 2, \"index\": 17, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 722, \"date\": \"2020-11-07T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 723, \"date\": \"2020-11-07T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 724, \"date\": \"2020-11-07T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 725, \"date\": \"2020-11-08T00:00:00\", \"score\": 1, \"index\": 57, \"Scores_new\": \"1 Star\"}, {\"level_0\": 726, \"date\": \"2020-11-08T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 727, \"date\": \"2020-11-08T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 728, \"date\": \"2020-11-08T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 729, \"date\": \"2020-11-08T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 730, \"date\": \"2020-11-09T00:00:00\", \"score\": 1, \"index\": 61, \"Scores_new\": \"1 Star\"}, {\"level_0\": 731, \"date\": \"2020-11-09T00:00:00\", \"score\": 2, \"index\": 17, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 732, \"date\": \"2020-11-09T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 733, \"date\": \"2020-11-09T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 734, \"date\": \"2020-11-09T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 735, \"date\": \"2020-11-10T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 736, \"date\": \"2020-11-10T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 737, \"date\": \"2020-11-10T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 738, \"date\": \"2020-11-10T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 739, \"date\": \"2020-11-10T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 740, \"date\": \"2020-11-11T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 741, \"date\": \"2020-11-11T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 742, \"date\": \"2020-11-11T00:00:00\", \"score\": 3, \"index\": 22, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 743, \"date\": \"2020-11-11T00:00:00\", \"score\": 4, \"index\": 16, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 744, \"date\": \"2020-11-11T00:00:00\", \"score\": 5, \"index\": 29, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 745, \"date\": \"2020-11-12T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 746, \"date\": \"2020-11-12T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 747, \"date\": \"2020-11-12T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 748, \"date\": \"2020-11-12T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 749, \"date\": \"2020-11-12T00:00:00\", \"score\": 5, \"index\": 32, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 750, \"date\": \"2020-11-13T00:00:00\", \"score\": 1, \"index\": 65, \"Scores_new\": \"1 Star\"}, {\"level_0\": 751, \"date\": \"2020-11-13T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 752, \"date\": \"2020-11-13T00:00:00\", \"score\": 3, \"index\": 20, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 753, \"date\": \"2020-11-13T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 754, \"date\": \"2020-11-13T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 755, \"date\": \"2020-11-14T00:00:00\", \"score\": 1, \"index\": 62, \"Scores_new\": \"1 Star\"}, {\"level_0\": 756, \"date\": \"2020-11-14T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 757, \"date\": \"2020-11-14T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 758, \"date\": \"2020-11-14T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 759, \"date\": \"2020-11-14T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 760, \"date\": \"2020-11-15T00:00:00\", \"score\": 1, \"index\": 85, \"Scores_new\": \"1 Star\"}, {\"level_0\": 761, \"date\": \"2020-11-15T00:00:00\", \"score\": 2, \"index\": 39, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 762, \"date\": \"2020-11-15T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 763, \"date\": \"2020-11-15T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 764, \"date\": \"2020-11-15T00:00:00\", \"score\": 5, \"index\": 25, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 765, \"date\": \"2020-11-16T00:00:00\", \"score\": 1, \"index\": 105, \"Scores_new\": \"1 Star\"}, {\"level_0\": 766, \"date\": \"2020-11-16T00:00:00\", \"score\": 2, \"index\": 31, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 767, \"date\": \"2020-11-16T00:00:00\", \"score\": 3, \"index\": 38, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 768, \"date\": \"2020-11-16T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 769, \"date\": \"2020-11-16T00:00:00\", \"score\": 5, \"index\": 30, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 770, \"date\": \"2020-11-17T00:00:00\", \"score\": 1, \"index\": 72, \"Scores_new\": \"1 Star\"}, {\"level_0\": 771, \"date\": \"2020-11-17T00:00:00\", \"score\": 2, \"index\": 23, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 772, \"date\": \"2020-11-17T00:00:00\", \"score\": 3, \"index\": 29, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 773, \"date\": \"2020-11-17T00:00:00\", \"score\": 4, \"index\": 21, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 774, \"date\": \"2020-11-17T00:00:00\", \"score\": 5, \"index\": 44, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 775, \"date\": \"2020-11-18T00:00:00\", \"score\": 1, \"index\": 64, \"Scores_new\": \"1 Star\"}, {\"level_0\": 776, \"date\": \"2020-11-18T00:00:00\", \"score\": 2, \"index\": 20, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 777, \"date\": \"2020-11-18T00:00:00\", \"score\": 3, \"index\": 22, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 778, \"date\": \"2020-11-18T00:00:00\", \"score\": 4, \"index\": 16, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 779, \"date\": \"2020-11-18T00:00:00\", \"score\": 5, \"index\": 33, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 780, \"date\": \"2020-11-19T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 781, \"date\": \"2020-11-19T00:00:00\", \"score\": 2, \"index\": 26, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 782, \"date\": \"2020-11-19T00:00:00\", \"score\": 3, \"index\": 25, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 783, \"date\": \"2020-11-19T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 784, \"date\": \"2020-11-19T00:00:00\", \"score\": 5, \"index\": 33, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 785, \"date\": \"2020-11-20T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 786, \"date\": \"2020-11-20T00:00:00\", \"score\": 2, \"index\": 19, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 787, \"date\": \"2020-11-20T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 788, \"date\": \"2020-11-20T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 789, \"date\": \"2020-11-20T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 790, \"date\": \"2020-11-21T00:00:00\", \"score\": 1, \"index\": 64, \"Scores_new\": \"1 Star\"}, {\"level_0\": 791, \"date\": \"2020-11-21T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 792, \"date\": \"2020-11-21T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 793, \"date\": \"2020-11-21T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 794, \"date\": \"2020-11-21T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 795, \"date\": \"2020-11-22T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 796, \"date\": \"2020-11-22T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 797, \"date\": \"2020-11-22T00:00:00\", \"score\": 3, \"index\": 18, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 798, \"date\": \"2020-11-22T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 799, \"date\": \"2020-11-22T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 800, \"date\": \"2020-11-23T00:00:00\", \"score\": 1, \"index\": 77, \"Scores_new\": \"1 Star\"}, {\"level_0\": 801, \"date\": \"2020-11-23T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 802, \"date\": \"2020-11-23T00:00:00\", \"score\": 3, \"index\": 17, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 803, \"date\": \"2020-11-23T00:00:00\", \"score\": 4, \"index\": 17, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 804, \"date\": \"2020-11-23T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 805, \"date\": \"2020-11-24T00:00:00\", \"score\": 1, \"index\": 70, \"Scores_new\": \"1 Star\"}, {\"level_0\": 806, \"date\": \"2020-11-24T00:00:00\", \"score\": 2, \"index\": 24, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 807, \"date\": \"2020-11-24T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 808, \"date\": \"2020-11-24T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 809, \"date\": \"2020-11-24T00:00:00\", \"score\": 5, \"index\": 25, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 810, \"date\": \"2020-11-25T00:00:00\", \"score\": 1, \"index\": 84, \"Scores_new\": \"1 Star\"}, {\"level_0\": 811, \"date\": \"2020-11-25T00:00:00\", \"score\": 2, \"index\": 29, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 812, \"date\": \"2020-11-25T00:00:00\", \"score\": 3, \"index\": 40, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 813, \"date\": \"2020-11-25T00:00:00\", \"score\": 4, \"index\": 25, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 814, \"date\": \"2020-11-25T00:00:00\", \"score\": 5, \"index\": 86, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 815, \"date\": \"2020-11-26T00:00:00\", \"score\": 1, \"index\": 158, \"Scores_new\": \"1 Star\"}, {\"level_0\": 816, \"date\": \"2020-11-26T00:00:00\", \"score\": 2, \"index\": 77, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 817, \"date\": \"2020-11-26T00:00:00\", \"score\": 3, \"index\": 101, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 818, \"date\": \"2020-11-26T00:00:00\", \"score\": 4, \"index\": 82, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 819, \"date\": \"2020-11-26T00:00:00\", \"score\": 5, \"index\": 124, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 820, \"date\": \"2020-11-27T00:00:00\", \"score\": 1, \"index\": 143, \"Scores_new\": \"1 Star\"}, {\"level_0\": 821, \"date\": \"2020-11-27T00:00:00\", \"score\": 2, \"index\": 36, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 822, \"date\": \"2020-11-27T00:00:00\", \"score\": 3, \"index\": 58, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 823, \"date\": \"2020-11-27T00:00:00\", \"score\": 4, \"index\": 53, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 824, \"date\": \"2020-11-27T00:00:00\", \"score\": 5, \"index\": 91, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 825, \"date\": \"2020-11-28T00:00:00\", \"score\": 1, \"index\": 70, \"Scores_new\": \"1 Star\"}, {\"level_0\": 826, \"date\": \"2020-11-28T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 827, \"date\": \"2020-11-28T00:00:00\", \"score\": 3, \"index\": 24, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 828, \"date\": \"2020-11-28T00:00:00\", \"score\": 4, \"index\": 24, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 829, \"date\": \"2020-11-28T00:00:00\", \"score\": 5, \"index\": 65, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 830, \"date\": \"2020-11-29T00:00:00\", \"score\": 1, \"index\": 67, \"Scores_new\": \"1 Star\"}, {\"level_0\": 831, \"date\": \"2020-11-29T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 832, \"date\": \"2020-11-29T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 833, \"date\": \"2020-11-29T00:00:00\", \"score\": 4, \"index\": 14, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 834, \"date\": \"2020-11-29T00:00:00\", \"score\": 5, \"index\": 47, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 835, \"date\": \"2020-11-30T00:00:00\", \"score\": 1, \"index\": 70, \"Scores_new\": \"1 Star\"}, {\"level_0\": 836, \"date\": \"2020-11-30T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 837, \"date\": \"2020-11-30T00:00:00\", \"score\": 3, \"index\": 26, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 838, \"date\": \"2020-11-30T00:00:00\", \"score\": 4, \"index\": 15, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 839, \"date\": \"2020-11-30T00:00:00\", \"score\": 5, \"index\": 24, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 840, \"date\": \"2020-12-01T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 841, \"date\": \"2020-12-01T00:00:00\", \"score\": 2, \"index\": 19, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 842, \"date\": \"2020-12-01T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 843, \"date\": \"2020-12-01T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 844, \"date\": \"2020-12-01T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 845, \"date\": \"2020-12-02T00:00:00\", \"score\": 1, \"index\": 69, \"Scores_new\": \"1 Star\"}, {\"level_0\": 846, \"date\": \"2020-12-02T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 847, \"date\": \"2020-12-02T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 848, \"date\": \"2020-12-02T00:00:00\", \"score\": 4, \"index\": 21, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 849, \"date\": \"2020-12-02T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 850, \"date\": \"2020-12-03T00:00:00\", \"score\": 1, \"index\": 64, \"Scores_new\": \"1 Star\"}, {\"level_0\": 851, \"date\": \"2020-12-03T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 852, \"date\": \"2020-12-03T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 853, \"date\": \"2020-12-03T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 854, \"date\": \"2020-12-03T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 855, \"date\": \"2020-12-04T00:00:00\", \"score\": 1, \"index\": 78, \"Scores_new\": \"1 Star\"}, {\"level_0\": 856, \"date\": \"2020-12-04T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 857, \"date\": \"2020-12-04T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 858, \"date\": \"2020-12-04T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 859, \"date\": \"2020-12-04T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 860, \"date\": \"2020-12-05T00:00:00\", \"score\": 1, \"index\": 63, \"Scores_new\": \"1 Star\"}, {\"level_0\": 861, \"date\": \"2020-12-05T00:00:00\", \"score\": 2, \"index\": 19, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 862, \"date\": \"2020-12-05T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 863, \"date\": \"2020-12-05T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 864, \"date\": \"2020-12-05T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 865, \"date\": \"2020-12-06T00:00:00\", \"score\": 1, \"index\": 74, \"Scores_new\": \"1 Star\"}, {\"level_0\": 866, \"date\": \"2020-12-06T00:00:00\", \"score\": 2, \"index\": 17, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 867, \"date\": \"2020-12-06T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 868, \"date\": \"2020-12-06T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 869, \"date\": \"2020-12-06T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 870, \"date\": \"2020-12-07T00:00:00\", \"score\": 1, \"index\": 79, \"Scores_new\": \"1 Star\"}, {\"level_0\": 871, \"date\": \"2020-12-07T00:00:00\", \"score\": 2, \"index\": 17, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 872, \"date\": \"2020-12-07T00:00:00\", \"score\": 3, \"index\": 25, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 873, \"date\": \"2020-12-07T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 874, \"date\": \"2020-12-07T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 875, \"date\": \"2020-12-08T00:00:00\", \"score\": 1, \"index\": 83, \"Scores_new\": \"1 Star\"}, {\"level_0\": 876, \"date\": \"2020-12-08T00:00:00\", \"score\": 2, \"index\": 23, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 877, \"date\": \"2020-12-08T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 878, \"date\": \"2020-12-08T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 879, \"date\": \"2020-12-08T00:00:00\", \"score\": 5, \"index\": 24, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 880, \"date\": \"2020-12-09T00:00:00\", \"score\": 1, \"index\": 63, \"Scores_new\": \"1 Star\"}, {\"level_0\": 881, \"date\": \"2020-12-09T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 882, \"date\": \"2020-12-09T00:00:00\", \"score\": 3, \"index\": 27, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 883, \"date\": \"2020-12-09T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 884, \"date\": \"2020-12-09T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 885, \"date\": \"2020-12-10T00:00:00\", \"score\": 1, \"index\": 51, \"Scores_new\": \"1 Star\"}, {\"level_0\": 886, \"date\": \"2020-12-10T00:00:00\", \"score\": 2, \"index\": 29, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 887, \"date\": \"2020-12-10T00:00:00\", \"score\": 3, \"index\": 18, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 888, \"date\": \"2020-12-10T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 889, \"date\": \"2020-12-10T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 890, \"date\": \"2020-12-11T00:00:00\", \"score\": 1, \"index\": 67, \"Scores_new\": \"1 Star\"}, {\"level_0\": 891, \"date\": \"2020-12-11T00:00:00\", \"score\": 2, \"index\": 20, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 892, \"date\": \"2020-12-11T00:00:00\", \"score\": 3, \"index\": 20, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 893, \"date\": \"2020-12-11T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 894, \"date\": \"2020-12-11T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 895, \"date\": \"2020-12-12T00:00:00\", \"score\": 1, \"index\": 75, \"Scores_new\": \"1 Star\"}, {\"level_0\": 896, \"date\": \"2020-12-12T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 897, \"date\": \"2020-12-12T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 898, \"date\": \"2020-12-12T00:00:00\", \"score\": 4, \"index\": 17, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 899, \"date\": \"2020-12-12T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 900, \"date\": \"2020-12-13T00:00:00\", \"score\": 1, \"index\": 71, \"Scores_new\": \"1 Star\"}, {\"level_0\": 901, \"date\": \"2020-12-13T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 902, \"date\": \"2020-12-13T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 903, \"date\": \"2020-12-13T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 904, \"date\": \"2020-12-13T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 905, \"date\": \"2020-12-14T00:00:00\", \"score\": 1, \"index\": 96, \"Scores_new\": \"1 Star\"}, {\"level_0\": 906, \"date\": \"2020-12-14T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 907, \"date\": \"2020-12-14T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 908, \"date\": \"2020-12-14T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 909, \"date\": \"2020-12-14T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 910, \"date\": \"2020-12-15T00:00:00\", \"score\": 1, \"index\": 93, \"Scores_new\": \"1 Star\"}, {\"level_0\": 911, \"date\": \"2020-12-15T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 912, \"date\": \"2020-12-15T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 913, \"date\": \"2020-12-15T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 914, \"date\": \"2020-12-15T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 915, \"date\": \"2020-12-16T00:00:00\", \"score\": 1, \"index\": 104, \"Scores_new\": \"1 Star\"}, {\"level_0\": 916, \"date\": \"2020-12-16T00:00:00\", \"score\": 2, \"index\": 19, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 917, \"date\": \"2020-12-16T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 918, \"date\": \"2020-12-16T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 919, \"date\": \"2020-12-16T00:00:00\", \"score\": 5, \"index\": 25, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 920, \"date\": \"2020-12-17T00:00:00\", \"score\": 1, \"index\": 120, \"Scores_new\": \"1 Star\"}, {\"level_0\": 921, \"date\": \"2020-12-17T00:00:00\", \"score\": 2, \"index\": 31, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 922, \"date\": \"2020-12-17T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 923, \"date\": \"2020-12-17T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 924, \"date\": \"2020-12-17T00:00:00\", \"score\": 5, \"index\": 72, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 925, \"date\": \"2020-12-18T00:00:00\", \"score\": 1, \"index\": 110, \"Scores_new\": \"1 Star\"}, {\"level_0\": 926, \"date\": \"2020-12-18T00:00:00\", \"score\": 2, \"index\": 27, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 927, \"date\": \"2020-12-18T00:00:00\", \"score\": 3, \"index\": 37, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 928, \"date\": \"2020-12-18T00:00:00\", \"score\": 4, \"index\": 26, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 929, \"date\": \"2020-12-18T00:00:00\", \"score\": 5, \"index\": 69, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 930, \"date\": \"2020-12-19T00:00:00\", \"score\": 1, \"index\": 94, \"Scores_new\": \"1 Star\"}, {\"level_0\": 931, \"date\": \"2020-12-19T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 932, \"date\": \"2020-12-19T00:00:00\", \"score\": 3, \"index\": 39, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 933, \"date\": \"2020-12-19T00:00:00\", \"score\": 4, \"index\": 23, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 934, \"date\": \"2020-12-19T00:00:00\", \"score\": 5, \"index\": 45, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 935, \"date\": \"2020-12-20T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 936, \"date\": \"2020-12-20T00:00:00\", \"score\": 2, \"index\": 22, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 937, \"date\": \"2020-12-20T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 938, \"date\": \"2020-12-20T00:00:00\", \"score\": 4, \"index\": 17, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 939, \"date\": \"2020-12-20T00:00:00\", \"score\": 5, \"index\": 38, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 940, \"date\": \"2020-12-21T00:00:00\", \"score\": 1, \"index\": 71, \"Scores_new\": \"1 Star\"}, {\"level_0\": 941, \"date\": \"2020-12-21T00:00:00\", \"score\": 2, \"index\": 28, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 942, \"date\": \"2020-12-21T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 943, \"date\": \"2020-12-21T00:00:00\", \"score\": 4, \"index\": 16, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 944, \"date\": \"2020-12-21T00:00:00\", \"score\": 5, \"index\": 34, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 945, \"date\": \"2020-12-22T00:00:00\", \"score\": 1, \"index\": 65, \"Scores_new\": \"1 Star\"}, {\"level_0\": 946, \"date\": \"2020-12-22T00:00:00\", \"score\": 2, \"index\": 20, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 947, \"date\": \"2020-12-22T00:00:00\", \"score\": 3, \"index\": 17, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 948, \"date\": \"2020-12-22T00:00:00\", \"score\": 4, \"index\": 15, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 949, \"date\": \"2020-12-22T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 950, \"date\": \"2020-12-23T00:00:00\", \"score\": 1, \"index\": 55, \"Scores_new\": \"1 Star\"}, {\"level_0\": 951, \"date\": \"2020-12-23T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 952, \"date\": \"2020-12-23T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 953, \"date\": \"2020-12-23T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 954, \"date\": \"2020-12-23T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 955, \"date\": \"2020-12-24T00:00:00\", \"score\": 1, \"index\": 53, \"Scores_new\": \"1 Star\"}, {\"level_0\": 956, \"date\": \"2020-12-24T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 957, \"date\": \"2020-12-24T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 958, \"date\": \"2020-12-24T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 959, \"date\": \"2020-12-24T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 960, \"date\": \"2020-12-25T00:00:00\", \"score\": 1, \"index\": 55, \"Scores_new\": \"1 Star\"}, {\"level_0\": 961, \"date\": \"2020-12-25T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 962, \"date\": \"2020-12-25T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 963, \"date\": \"2020-12-25T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 964, \"date\": \"2020-12-25T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 965, \"date\": \"2020-12-26T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 966, \"date\": \"2020-12-26T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 967, \"date\": \"2020-12-26T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 968, \"date\": \"2020-12-26T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 969, \"date\": \"2020-12-26T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 970, \"date\": \"2020-12-27T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 971, \"date\": \"2020-12-27T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 972, \"date\": \"2020-12-27T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 973, \"date\": \"2020-12-27T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 974, \"date\": \"2020-12-27T00:00:00\", \"score\": 5, \"index\": 12, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 975, \"date\": \"2020-12-28T00:00:00\", \"score\": 1, \"index\": 74, \"Scores_new\": \"1 Star\"}, {\"level_0\": 976, \"date\": \"2020-12-28T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 977, \"date\": \"2020-12-28T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 978, \"date\": \"2020-12-28T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 979, \"date\": \"2020-12-28T00:00:00\", \"score\": 5, \"index\": 31, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 980, \"date\": \"2020-12-29T00:00:00\", \"score\": 1, \"index\": 75, \"Scores_new\": \"1 Star\"}, {\"level_0\": 981, \"date\": \"2020-12-29T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 982, \"date\": \"2020-12-29T00:00:00\", \"score\": 3, \"index\": 24, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 983, \"date\": \"2020-12-29T00:00:00\", \"score\": 4, \"index\": 22, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 984, \"date\": \"2020-12-29T00:00:00\", \"score\": 5, \"index\": 58, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 985, \"date\": \"2020-12-30T00:00:00\", \"score\": 1, \"index\": 99, \"Scores_new\": \"1 Star\"}, {\"level_0\": 986, \"date\": \"2020-12-30T00:00:00\", \"score\": 2, \"index\": 35, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 987, \"date\": \"2020-12-30T00:00:00\", \"score\": 3, \"index\": 36, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 988, \"date\": \"2020-12-30T00:00:00\", \"score\": 4, \"index\": 33, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 989, \"date\": \"2020-12-30T00:00:00\", \"score\": 5, \"index\": 65, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 990, \"date\": \"2020-12-31T00:00:00\", \"score\": 1, \"index\": 37, \"Scores_new\": \"1 Star\"}, {\"level_0\": 991, \"date\": \"2020-12-31T00:00:00\", \"score\": 2, \"index\": 17, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 992, \"date\": \"2020-12-31T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 993, \"date\": \"2020-12-31T00:00:00\", \"score\": 4, \"index\": 24, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 994, \"date\": \"2020-12-31T00:00:00\", \"score\": 5, \"index\": 32, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 995, \"date\": \"2021-01-01T00:00:00\", \"score\": 1, \"index\": 40, \"Scores_new\": \"1 Star\"}, {\"level_0\": 996, \"date\": \"2021-01-01T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 997, \"date\": \"2021-01-01T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 998, \"date\": \"2021-01-01T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 999, \"date\": \"2021-01-01T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1000, \"date\": \"2021-01-02T00:00:00\", \"score\": 1, \"index\": 51, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1001, \"date\": \"2021-01-02T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1002, \"date\": \"2021-01-02T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1003, \"date\": \"2021-01-02T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1004, \"date\": \"2021-01-02T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1005, \"date\": \"2021-01-03T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1006, \"date\": \"2021-01-03T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1007, \"date\": \"2021-01-03T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1008, \"date\": \"2021-01-03T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1009, \"date\": \"2021-01-03T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1010, \"date\": \"2021-01-04T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1011, \"date\": \"2021-01-04T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1012, \"date\": \"2021-01-04T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1013, \"date\": \"2021-01-04T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1014, \"date\": \"2021-01-04T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1015, \"date\": \"2021-01-05T00:00:00\", \"score\": 1, \"index\": 49, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1016, \"date\": \"2021-01-05T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1017, \"date\": \"2021-01-05T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1018, \"date\": \"2021-01-05T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1019, \"date\": \"2021-01-05T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1020, \"date\": \"2021-01-06T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1021, \"date\": \"2021-01-06T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1022, \"date\": \"2021-01-06T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1023, \"date\": \"2021-01-06T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1024, \"date\": \"2021-01-06T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1025, \"date\": \"2021-01-07T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1026, \"date\": \"2021-01-07T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1027, \"date\": \"2021-01-07T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1028, \"date\": \"2021-01-07T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1029, \"date\": \"2021-01-07T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1030, \"date\": \"2021-01-08T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1031, \"date\": \"2021-01-08T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1032, \"date\": \"2021-01-08T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1033, \"date\": \"2021-01-08T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1034, \"date\": \"2021-01-08T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1035, \"date\": \"2021-01-09T00:00:00\", \"score\": 1, \"index\": 43, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1036, \"date\": \"2021-01-09T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1037, \"date\": \"2021-01-09T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1038, \"date\": \"2021-01-09T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1039, \"date\": \"2021-01-09T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1040, \"date\": \"2021-01-10T00:00:00\", \"score\": 1, \"index\": 32, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1041, \"date\": \"2021-01-10T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1042, \"date\": \"2021-01-10T00:00:00\", \"score\": 3, \"index\": 3, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1043, \"date\": \"2021-01-10T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1044, \"date\": \"2021-01-10T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1045, \"date\": \"2021-01-11T00:00:00\", \"score\": 1, \"index\": 34, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1046, \"date\": \"2021-01-11T00:00:00\", \"score\": 2, \"index\": 5, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1047, \"date\": \"2021-01-11T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1048, \"date\": \"2021-01-11T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1049, \"date\": \"2021-01-11T00:00:00\", \"score\": 5, \"index\": 2, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1050, \"date\": \"2021-01-12T00:00:00\", \"score\": 1, \"index\": 39, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1051, \"date\": \"2021-01-12T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1052, \"date\": \"2021-01-12T00:00:00\", \"score\": 3, \"index\": 1, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1053, \"date\": \"2021-01-12T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1054, \"date\": \"2021-01-12T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1055, \"date\": \"2021-01-13T00:00:00\", \"score\": 1, \"index\": 146, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1056, \"date\": \"2021-01-13T00:00:00\", \"score\": 2, \"index\": 46, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1057, \"date\": \"2021-01-13T00:00:00\", \"score\": 3, \"index\": 50, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1058, \"date\": \"2021-01-13T00:00:00\", \"score\": 4, \"index\": 36, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1059, \"date\": \"2021-01-13T00:00:00\", \"score\": 5, \"index\": 32, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1060, \"date\": \"2021-01-14T00:00:00\", \"score\": 1, \"index\": 92, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1061, \"date\": \"2021-01-14T00:00:00\", \"score\": 2, \"index\": 19, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1062, \"date\": \"2021-01-14T00:00:00\", \"score\": 3, \"index\": 20, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1063, \"date\": \"2021-01-14T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1064, \"date\": \"2021-01-14T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1065, \"date\": \"2021-01-15T00:00:00\", \"score\": 1, \"index\": 49, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1066, \"date\": \"2021-01-15T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1067, \"date\": \"2021-01-15T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1068, \"date\": \"2021-01-15T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1069, \"date\": \"2021-01-15T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1070, \"date\": \"2021-01-16T00:00:00\", \"score\": 1, \"index\": 59, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1071, \"date\": \"2021-01-16T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1072, \"date\": \"2021-01-16T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1073, \"date\": \"2021-01-16T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1074, \"date\": \"2021-01-16T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1075, \"date\": \"2021-01-17T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1076, \"date\": \"2021-01-17T00:00:00\", \"score\": 2, \"index\": 1, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1077, \"date\": \"2021-01-17T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1078, \"date\": \"2021-01-17T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1079, \"date\": \"2021-01-17T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1080, \"date\": \"2021-01-18T00:00:00\", \"score\": 1, \"index\": 33, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1081, \"date\": \"2021-01-18T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1082, \"date\": \"2021-01-18T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1083, \"date\": \"2021-01-18T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1084, \"date\": \"2021-01-18T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1085, \"date\": \"2021-01-19T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1086, \"date\": \"2021-01-19T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1087, \"date\": \"2021-01-19T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1088, \"date\": \"2021-01-19T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1089, \"date\": \"2021-01-19T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1090, \"date\": \"2021-01-20T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1091, \"date\": \"2021-01-20T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1092, \"date\": \"2021-01-20T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1093, \"date\": \"2021-01-20T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1094, \"date\": \"2021-01-20T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1095, \"date\": \"2021-01-21T00:00:00\", \"score\": 1, \"index\": 34, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1096, \"date\": \"2021-01-21T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1097, \"date\": \"2021-01-21T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1098, \"date\": \"2021-01-21T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1099, \"date\": \"2021-01-21T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1100, \"date\": \"2021-01-22T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1101, \"date\": \"2021-01-22T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1102, \"date\": \"2021-01-22T00:00:00\", \"score\": 3, \"index\": 1, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1103, \"date\": \"2021-01-22T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1104, \"date\": \"2021-01-22T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1105, \"date\": \"2021-01-23T00:00:00\", \"score\": 1, \"index\": 25, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1106, \"date\": \"2021-01-23T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1107, \"date\": \"2021-01-23T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1108, \"date\": \"2021-01-23T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1109, \"date\": \"2021-01-23T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1110, \"date\": \"2021-01-24T00:00:00\", \"score\": 1, \"index\": 32, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1111, \"date\": \"2021-01-24T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1112, \"date\": \"2021-01-24T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1113, \"date\": \"2021-01-24T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1114, \"date\": \"2021-01-24T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1115, \"date\": \"2021-01-25T00:00:00\", \"score\": 1, \"index\": 23, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1116, \"date\": \"2021-01-25T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1117, \"date\": \"2021-01-25T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1118, \"date\": \"2021-01-25T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1119, \"date\": \"2021-01-25T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1120, \"date\": \"2021-01-26T00:00:00\", \"score\": 1, \"index\": 32, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1121, \"date\": \"2021-01-26T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1122, \"date\": \"2021-01-26T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1123, \"date\": \"2021-01-26T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1124, \"date\": \"2021-01-26T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1125, \"date\": \"2021-01-27T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1126, \"date\": \"2021-01-27T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1127, \"date\": \"2021-01-27T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1128, \"date\": \"2021-01-27T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1129, \"date\": \"2021-01-27T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1130, \"date\": \"2021-01-28T00:00:00\", \"score\": 1, \"index\": 32, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1131, \"date\": \"2021-01-28T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1132, \"date\": \"2021-01-28T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1133, \"date\": \"2021-01-28T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1134, \"date\": \"2021-01-28T00:00:00\", \"score\": 5, \"index\": 8, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1135, \"date\": \"2021-01-29T00:00:00\", \"score\": 1, \"index\": 48, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1136, \"date\": \"2021-01-29T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1137, \"date\": \"2021-01-29T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1138, \"date\": \"2021-01-29T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1139, \"date\": \"2021-01-29T00:00:00\", \"score\": 5, \"index\": 34, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1140, \"date\": \"2021-01-30T00:00:00\", \"score\": 1, \"index\": 54, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1141, \"date\": \"2021-01-30T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1142, \"date\": \"2021-01-30T00:00:00\", \"score\": 3, \"index\": 18, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1143, \"date\": \"2021-01-30T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1144, \"date\": \"2021-01-30T00:00:00\", \"score\": 5, \"index\": 72, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1145, \"date\": \"2021-01-31T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1146, \"date\": \"2021-01-31T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1147, \"date\": \"2021-01-31T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1148, \"date\": \"2021-01-31T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1149, \"date\": \"2021-01-31T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1150, \"date\": \"2021-02-01T00:00:00\", \"score\": 1, \"index\": 27, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1151, \"date\": \"2021-02-01T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1152, \"date\": \"2021-02-01T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1153, \"date\": \"2021-02-01T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1154, \"date\": \"2021-02-01T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1155, \"date\": \"2021-02-02T00:00:00\", \"score\": 1, \"index\": 34, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1156, \"date\": \"2021-02-02T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1157, \"date\": \"2021-02-02T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1158, \"date\": \"2021-02-02T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1159, \"date\": \"2021-02-02T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1160, \"date\": \"2021-02-03T00:00:00\", \"score\": 1, \"index\": 29, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1161, \"date\": \"2021-02-03T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1162, \"date\": \"2021-02-03T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1163, \"date\": \"2021-02-03T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1164, \"date\": \"2021-02-03T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1165, \"date\": \"2021-02-04T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1166, \"date\": \"2021-02-04T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1167, \"date\": \"2021-02-04T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1168, \"date\": \"2021-02-04T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1169, \"date\": \"2021-02-04T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1170, \"date\": \"2021-02-05T00:00:00\", \"score\": 1, \"index\": 33, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1171, \"date\": \"2021-02-05T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1172, \"date\": \"2021-02-05T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1173, \"date\": \"2021-02-05T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1174, \"date\": \"2021-02-05T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1175, \"date\": \"2021-02-06T00:00:00\", \"score\": 1, \"index\": 20, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1176, \"date\": \"2021-02-06T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1177, \"date\": \"2021-02-06T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1178, \"date\": \"2021-02-06T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1179, \"date\": \"2021-02-06T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1180, \"date\": \"2021-02-07T00:00:00\", \"score\": 1, \"index\": 23, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1181, \"date\": \"2021-02-07T00:00:00\", \"score\": 2, \"index\": 2, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1182, \"date\": \"2021-02-07T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1183, \"date\": \"2021-02-07T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1184, \"date\": \"2021-02-07T00:00:00\", \"score\": 5, \"index\": 8, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1185, \"date\": \"2021-02-08T00:00:00\", \"score\": 1, \"index\": 21, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1186, \"date\": \"2021-02-08T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1187, \"date\": \"2021-02-08T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1188, \"date\": \"2021-02-08T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1189, \"date\": \"2021-02-08T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1190, \"date\": \"2021-02-09T00:00:00\", \"score\": 1, \"index\": 26, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1191, \"date\": \"2021-02-09T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1192, \"date\": \"2021-02-09T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1193, \"date\": \"2021-02-09T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1194, \"date\": \"2021-02-10T00:00:00\", \"score\": 1, \"index\": 41, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1195, \"date\": \"2021-02-10T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1196, \"date\": \"2021-02-10T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1197, \"date\": \"2021-02-10T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1198, \"date\": \"2021-02-10T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1199, \"date\": \"2021-02-11T00:00:00\", \"score\": 1, \"index\": 32, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1200, \"date\": \"2021-02-11T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1201, \"date\": \"2021-02-11T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1202, \"date\": \"2021-02-11T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1203, \"date\": \"2021-02-11T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1204, \"date\": \"2021-02-12T00:00:00\", \"score\": 1, \"index\": 42, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1205, \"date\": \"2021-02-12T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1206, \"date\": \"2021-02-12T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1207, \"date\": \"2021-02-12T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1208, \"date\": \"2021-02-12T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1209, \"date\": \"2021-02-13T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1210, \"date\": \"2021-02-13T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1211, \"date\": \"2021-02-13T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1212, \"date\": \"2021-02-13T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1213, \"date\": \"2021-02-13T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1214, \"date\": \"2021-02-14T00:00:00\", \"score\": 1, \"index\": 37, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1215, \"date\": \"2021-02-14T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1216, \"date\": \"2021-02-14T00:00:00\", \"score\": 3, \"index\": 3, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1217, \"date\": \"2021-02-14T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1218, \"date\": \"2021-02-14T00:00:00\", \"score\": 5, \"index\": 8, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1219, \"date\": \"2021-02-15T00:00:00\", \"score\": 1, \"index\": 34, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1220, \"date\": \"2021-02-15T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1221, \"date\": \"2021-02-15T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1222, \"date\": \"2021-02-15T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1223, \"date\": \"2021-02-15T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1224, \"date\": \"2021-02-16T00:00:00\", \"score\": 1, \"index\": 22, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1225, \"date\": \"2021-02-16T00:00:00\", \"score\": 2, \"index\": 3, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1226, \"date\": \"2021-02-16T00:00:00\", \"score\": 3, \"index\": 2, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1227, \"date\": \"2021-02-16T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1228, \"date\": \"2021-02-16T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1229, \"date\": \"2021-02-17T00:00:00\", \"score\": 1, \"index\": 32, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1230, \"date\": \"2021-02-17T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1231, \"date\": \"2021-02-17T00:00:00\", \"score\": 3, \"index\": 2, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1232, \"date\": \"2021-02-17T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1233, \"date\": \"2021-02-17T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1234, \"date\": \"2021-02-18T00:00:00\", \"score\": 1, \"index\": 25, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1235, \"date\": \"2021-02-18T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1236, \"date\": \"2021-02-18T00:00:00\", \"score\": 3, \"index\": 1, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1237, \"date\": \"2021-02-18T00:00:00\", \"score\": 4, \"index\": 1, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1238, \"date\": \"2021-02-18T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1239, \"date\": \"2021-02-19T00:00:00\", \"score\": 1, \"index\": 26, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1240, \"date\": \"2021-02-19T00:00:00\", \"score\": 2, \"index\": 2, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1241, \"date\": \"2021-02-19T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1242, \"date\": \"2021-02-19T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1243, \"date\": \"2021-02-19T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1244, \"date\": \"2021-02-20T00:00:00\", \"score\": 1, \"index\": 21, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1245, \"date\": \"2021-02-20T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1246, \"date\": \"2021-02-20T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1247, \"date\": \"2021-02-20T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1248, \"date\": \"2021-02-20T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1249, \"date\": \"2021-02-21T00:00:00\", \"score\": 1, \"index\": 13, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1250, \"date\": \"2021-02-21T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1251, \"date\": \"2021-02-21T00:00:00\", \"score\": 3, \"index\": 2, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1252, \"date\": \"2021-02-21T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1253, \"date\": \"2021-02-22T00:00:00\", \"score\": 1, \"index\": 33, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1254, \"date\": \"2021-02-22T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1255, \"date\": \"2021-02-22T00:00:00\", \"score\": 3, \"index\": 2, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1256, \"date\": \"2021-02-22T00:00:00\", \"score\": 4, \"index\": 1, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1257, \"date\": \"2021-02-22T00:00:00\", \"score\": 5, \"index\": 7, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1258, \"date\": \"2021-02-23T00:00:00\", \"score\": 1, \"index\": 29, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1259, \"date\": \"2021-02-23T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1260, \"date\": \"2021-02-23T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1261, \"date\": \"2021-02-23T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1262, \"date\": \"2021-02-23T00:00:00\", \"score\": 5, \"index\": 7, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1263, \"date\": \"2021-02-24T00:00:00\", \"score\": 1, \"index\": 28, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1264, \"date\": \"2021-02-24T00:00:00\", \"score\": 2, \"index\": 5, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1265, \"date\": \"2021-02-24T00:00:00\", \"score\": 3, \"index\": 3, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1266, \"date\": \"2021-02-24T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1267, \"date\": \"2021-02-24T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1268, \"date\": \"2021-02-25T00:00:00\", \"score\": 1, \"index\": 22, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1269, \"date\": \"2021-02-25T00:00:00\", \"score\": 2, \"index\": 5, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1270, \"date\": \"2021-02-25T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1271, \"date\": \"2021-02-25T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1272, \"date\": \"2021-02-25T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1273, \"date\": \"2021-02-26T00:00:00\", \"score\": 1, \"index\": 14, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1274, \"date\": \"2021-02-26T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1275, \"date\": \"2021-02-26T00:00:00\", \"score\": 3, \"index\": 3, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1276, \"date\": \"2021-02-26T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1277, \"date\": \"2021-02-26T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1278, \"date\": \"2021-02-27T00:00:00\", \"score\": 1, \"index\": 21, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1279, \"date\": \"2021-02-27T00:00:00\", \"score\": 2, \"index\": 3, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1280, \"date\": \"2021-02-27T00:00:00\", \"score\": 3, \"index\": 3, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1281, \"date\": \"2021-02-27T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1282, \"date\": \"2021-02-27T00:00:00\", \"score\": 5, \"index\": 12, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1283, \"date\": \"2021-02-28T00:00:00\", \"score\": 1, \"index\": 37, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1284, \"date\": \"2021-02-28T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1285, \"date\": \"2021-02-28T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1286, \"date\": \"2021-02-28T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1287, \"date\": \"2021-02-28T00:00:00\", \"score\": 5, \"index\": 8, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1288, \"date\": \"2021-03-01T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1289, \"date\": \"2021-03-01T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1290, \"date\": \"2021-03-01T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1291, \"date\": \"2021-03-01T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1292, \"date\": \"2021-03-01T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1293, \"date\": \"2021-03-02T00:00:00\", \"score\": 1, \"index\": 36, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1294, \"date\": \"2021-03-02T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1295, \"date\": \"2021-03-02T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1296, \"date\": \"2021-03-02T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1297, \"date\": \"2021-03-02T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1298, \"date\": \"2021-03-03T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1299, \"date\": \"2021-03-03T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1300, \"date\": \"2021-03-03T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1301, \"date\": \"2021-03-03T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1302, \"date\": \"2021-03-03T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1303, \"date\": \"2021-03-04T00:00:00\", \"score\": 1, \"index\": 43, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1304, \"date\": \"2021-03-04T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1305, \"date\": \"2021-03-04T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1306, \"date\": \"2021-03-04T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1307, \"date\": \"2021-03-04T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1308, \"date\": \"2021-03-05T00:00:00\", \"score\": 1, \"index\": 29, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1309, \"date\": \"2021-03-05T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1310, \"date\": \"2021-03-05T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1311, \"date\": \"2021-03-05T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1312, \"date\": \"2021-03-05T00:00:00\", \"score\": 5, \"index\": 5, \"Scores_new\": \"5 Stars\"}]}}, {\"mode\": \"vega-lite\"});\n",
              "</script>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kGysjpAbJYcX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 498
        },
        "outputId": "30c59811-404e-448e-87c1-4e5ff551a9a9"
      },
      "source": [
        "alt.Chart(xyz[xyz['date'] >= '2020-06-20']).mark_bar().encode(\n",
        "    x=alt.X('date',axis = alt.Axis(format='%Y-%B')),    \n",
        "    y=alt.Y('sum(index)', title='Total Number of Reviews per Day'),\n",
        "    color= alt.Color('Scores_new', title = 'Rating' ,type='nominal',scale=alt.Scale(\n",
        "            domain=['1 Star', '2 Stars','3 Stars','4 Stars','5 Stars'],\n",
        "            range=['red', '#fd8d3c','yellow','#8ca252','green']))\n",
        ").properties(width=700, height = 400,title = ['Daily Number of Reviews for the German \"Corona-Warn-App\" (Google Play Store)','Time Period: 2020-06-20 to 2021-03-05 (restricted time period)']).configure_view(\n",
        "stroke='transparent'\n",
        ")"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "alt.Chart(...)"
            ],
            "text/html": [
              "\n",
              "<div id=\"altair-viz-0cf88eefb70447b4b0d5309e20aecb51\"></div>\n",
              "<script type=\"text/javascript\">\n",
              "  (function(spec, embedOpt){\n",
              "    let outputDiv = document.currentScript.previousElementSibling;\n",
              "    if (outputDiv.id !== \"altair-viz-0cf88eefb70447b4b0d5309e20aecb51\") {\n",
              "      outputDiv = document.getElementById(\"altair-viz-0cf88eefb70447b4b0d5309e20aecb51\");\n",
              "    }\n",
              "    const paths = {\n",
              "      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n",
              "      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n",
              "      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n",
              "      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n",
              "    };\n",
              "\n",
              "    function loadScript(lib) {\n",
              "      return new Promise(function(resolve, reject) {\n",
              "        var s = document.createElement('script');\n",
              "        s.src = paths[lib];\n",
              "        s.async = true;\n",
              "        s.onload = () => resolve(paths[lib]);\n",
              "        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n",
              "        document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
              "      });\n",
              "    }\n",
              "\n",
              "    function showError(err) {\n",
              "      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n",
              "      throw err;\n",
              "    }\n",
              "\n",
              "    function displayChart(vegaEmbed) {\n",
              "      vegaEmbed(outputDiv, spec, embedOpt)\n",
              "        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n",
              "    }\n",
              "\n",
              "    if(typeof define === \"function\" && define.amd) {\n",
              "      requirejs.config({paths});\n",
              "      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n",
              "    } else if (typeof vegaEmbed === \"function\") {\n",
              "      displayChart(vegaEmbed);\n",
              "    } else {\n",
              "      loadScript(\"vega\")\n",
              "        .then(() => loadScript(\"vega-lite\"))\n",
              "        .then(() => loadScript(\"vega-embed\"))\n",
              "        .catch(showError)\n",
              "        .then(() => displayChart(vegaEmbed));\n",
              "    }\n",
              "  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300, \"stroke\": \"transparent\"}}, \"data\": {\"name\": \"data-ded9511e6882013a465805f6de6862db\"}, \"mark\": \"bar\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"Scores_new\", \"scale\": {\"domain\": [\"1 Star\", \"2 Stars\", \"3 Stars\", \"4 Stars\", \"5 Stars\"], \"range\": [\"red\", \"#fd8d3c\", \"yellow\", \"#8ca252\", \"green\"]}, \"title\": \"Rating\"}, \"x\": {\"type\": \"temporal\", \"axis\": {\"format\": \"%Y-%B\"}, \"field\": \"date\"}, \"y\": {\"type\": \"quantitative\", \"aggregate\": \"sum\", \"field\": \"index\", \"title\": \"Total Number of Reviews per Day\"}}, \"height\": 400, \"title\": [\"Daily Number of Reviews for the German \\\"Corona-Warn-App\\\" (Google Play Store)\", \"Time Period: 2020-06-20 to 2021-03-05 (restricted time period)\"], \"width\": 700, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-ded9511e6882013a465805f6de6862db\": [{\"level_0\": 20, \"date\": \"2020-06-20T00:00:00\", \"score\": 1, \"index\": 203, \"Scores_new\": \"1 Star\"}, {\"level_0\": 21, \"date\": \"2020-06-20T00:00:00\", \"score\": 2, \"index\": 75, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 22, \"date\": \"2020-06-20T00:00:00\", \"score\": 3, \"index\": 68, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 23, \"date\": \"2020-06-20T00:00:00\", \"score\": 4, \"index\": 73, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 24, \"date\": \"2020-06-20T00:00:00\", \"score\": 5, \"index\": 289, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 25, \"date\": \"2020-06-21T00:00:00\", \"score\": 1, \"index\": 199, \"Scores_new\": \"1 Star\"}, {\"level_0\": 26, \"date\": \"2020-06-21T00:00:00\", \"score\": 2, \"index\": 50, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 27, \"date\": \"2020-06-21T00:00:00\", \"score\": 3, \"index\": 68, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 28, \"date\": \"2020-06-21T00:00:00\", \"score\": 4, \"index\": 75, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 29, \"date\": \"2020-06-21T00:00:00\", \"score\": 5, \"index\": 281, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 30, \"date\": \"2020-06-22T00:00:00\", \"score\": 1, \"index\": 116, \"Scores_new\": \"1 Star\"}, {\"level_0\": 31, \"date\": \"2020-06-22T00:00:00\", \"score\": 2, \"index\": 38, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 32, \"date\": \"2020-06-22T00:00:00\", \"score\": 3, \"index\": 45, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 33, \"date\": \"2020-06-22T00:00:00\", \"score\": 4, \"index\": 42, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 34, \"date\": \"2020-06-22T00:00:00\", \"score\": 5, \"index\": 215, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 35, \"date\": \"2020-06-23T00:00:00\", \"score\": 1, \"index\": 95, \"Scores_new\": \"1 Star\"}, {\"level_0\": 36, \"date\": \"2020-06-23T00:00:00\", \"score\": 2, \"index\": 27, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 37, \"date\": \"2020-06-23T00:00:00\", \"score\": 3, \"index\": 45, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 38, \"date\": \"2020-06-23T00:00:00\", \"score\": 4, \"index\": 37, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 39, \"date\": \"2020-06-23T00:00:00\", \"score\": 5, \"index\": 241, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 40, \"date\": \"2020-06-24T00:00:00\", \"score\": 1, \"index\": 110, \"Scores_new\": \"1 Star\"}, {\"level_0\": 41, \"date\": \"2020-06-24T00:00:00\", \"score\": 2, \"index\": 34, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 42, \"date\": \"2020-06-24T00:00:00\", \"score\": 3, \"index\": 45, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 43, \"date\": \"2020-06-24T00:00:00\", \"score\": 4, \"index\": 50, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 44, \"date\": \"2020-06-24T00:00:00\", \"score\": 5, \"index\": 277, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 45, \"date\": \"2020-06-25T00:00:00\", \"score\": 1, \"index\": 123, \"Scores_new\": \"1 Star\"}, {\"level_0\": 46, \"date\": \"2020-06-25T00:00:00\", \"score\": 2, \"index\": 39, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 47, \"date\": \"2020-06-25T00:00:00\", \"score\": 3, \"index\": 35, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 48, \"date\": \"2020-06-25T00:00:00\", \"score\": 4, \"index\": 52, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 49, \"date\": \"2020-06-25T00:00:00\", \"score\": 5, \"index\": 264, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 50, \"date\": \"2020-06-26T00:00:00\", \"score\": 1, \"index\": 119, \"Scores_new\": \"1 Star\"}, {\"level_0\": 51, \"date\": \"2020-06-26T00:00:00\", \"score\": 2, \"index\": 24, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 52, \"date\": \"2020-06-26T00:00:00\", \"score\": 3, \"index\": 31, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 53, \"date\": \"2020-06-26T00:00:00\", \"score\": 4, \"index\": 41, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 54, \"date\": \"2020-06-26T00:00:00\", \"score\": 5, \"index\": 202, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 55, \"date\": \"2020-06-27T00:00:00\", \"score\": 1, \"index\": 89, \"Scores_new\": \"1 Star\"}, {\"level_0\": 56, \"date\": \"2020-06-27T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 57, \"date\": \"2020-06-27T00:00:00\", \"score\": 3, \"index\": 32, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 58, \"date\": \"2020-06-27T00:00:00\", \"score\": 4, \"index\": 25, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 59, \"date\": \"2020-06-27T00:00:00\", \"score\": 5, \"index\": 133, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 60, \"date\": \"2020-06-28T00:00:00\", \"score\": 1, \"index\": 93, \"Scores_new\": \"1 Star\"}, {\"level_0\": 61, \"date\": \"2020-06-28T00:00:00\", \"score\": 2, \"index\": 29, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 62, \"date\": \"2020-06-28T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 63, \"date\": \"2020-06-28T00:00:00\", \"score\": 4, \"index\": 41, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 64, \"date\": \"2020-06-28T00:00:00\", \"score\": 5, \"index\": 141, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 65, \"date\": \"2020-06-29T00:00:00\", \"score\": 1, \"index\": 101, \"Scores_new\": \"1 Star\"}, {\"level_0\": 66, \"date\": \"2020-06-29T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 67, \"date\": \"2020-06-29T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 68, \"date\": \"2020-06-29T00:00:00\", \"score\": 4, \"index\": 31, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 69, \"date\": \"2020-06-29T00:00:00\", \"score\": 5, \"index\": 102, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 70, \"date\": \"2020-06-30T00:00:00\", \"score\": 1, \"index\": 86, \"Scores_new\": \"1 Star\"}, {\"level_0\": 71, \"date\": \"2020-06-30T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 72, \"date\": \"2020-06-30T00:00:00\", \"score\": 3, \"index\": 23, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 73, \"date\": \"2020-06-30T00:00:00\", \"score\": 4, \"index\": 28, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 74, \"date\": \"2020-06-30T00:00:00\", \"score\": 5, \"index\": 105, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 75, \"date\": \"2020-07-01T00:00:00\", \"score\": 1, \"index\": 90, \"Scores_new\": \"1 Star\"}, {\"level_0\": 76, \"date\": \"2020-07-01T00:00:00\", \"score\": 2, \"index\": 31, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 77, \"date\": \"2020-07-01T00:00:00\", \"score\": 3, \"index\": 23, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 78, \"date\": \"2020-07-01T00:00:00\", \"score\": 4, \"index\": 32, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 79, \"date\": \"2020-07-01T00:00:00\", \"score\": 5, \"index\": 88, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 80, \"date\": \"2020-07-02T00:00:00\", \"score\": 1, \"index\": 130, \"Scores_new\": \"1 Star\"}, {\"level_0\": 81, \"date\": \"2020-07-02T00:00:00\", \"score\": 2, \"index\": 50, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 82, \"date\": \"2020-07-02T00:00:00\", \"score\": 3, \"index\": 94, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 83, \"date\": \"2020-07-02T00:00:00\", \"score\": 4, \"index\": 84, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 84, \"date\": \"2020-07-02T00:00:00\", \"score\": 5, \"index\": 245, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 85, \"date\": \"2020-07-03T00:00:00\", \"score\": 1, \"index\": 177, \"Scores_new\": \"1 Star\"}, {\"level_0\": 86, \"date\": \"2020-07-03T00:00:00\", \"score\": 2, \"index\": 82, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 87, \"date\": \"2020-07-03T00:00:00\", \"score\": 3, \"index\": 155, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 88, \"date\": \"2020-07-03T00:00:00\", \"score\": 4, \"index\": 119, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 89, \"date\": \"2020-07-03T00:00:00\", \"score\": 5, \"index\": 249, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 90, \"date\": \"2020-07-04T00:00:00\", \"score\": 1, \"index\": 153, \"Scores_new\": \"1 Star\"}, {\"level_0\": 91, \"date\": \"2020-07-04T00:00:00\", \"score\": 2, \"index\": 54, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 92, \"date\": \"2020-07-04T00:00:00\", \"score\": 3, \"index\": 86, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 93, \"date\": \"2020-07-04T00:00:00\", \"score\": 4, \"index\": 91, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 94, \"date\": \"2020-07-04T00:00:00\", \"score\": 5, \"index\": 182, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 95, \"date\": \"2020-07-05T00:00:00\", \"score\": 1, \"index\": 134, \"Scores_new\": \"1 Star\"}, {\"level_0\": 96, \"date\": \"2020-07-05T00:00:00\", \"score\": 2, \"index\": 67, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 97, \"date\": \"2020-07-05T00:00:00\", \"score\": 3, \"index\": 83, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 98, \"date\": \"2020-07-05T00:00:00\", \"score\": 4, \"index\": 52, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 99, \"date\": \"2020-07-05T00:00:00\", \"score\": 5, \"index\": 133, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 100, \"date\": \"2020-07-06T00:00:00\", \"score\": 1, \"index\": 182, \"Scores_new\": \"1 Star\"}, {\"level_0\": 101, \"date\": \"2020-07-06T00:00:00\", \"score\": 2, \"index\": 66, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 102, \"date\": \"2020-07-06T00:00:00\", \"score\": 3, \"index\": 82, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 103, \"date\": \"2020-07-06T00:00:00\", \"score\": 4, \"index\": 43, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 104, \"date\": \"2020-07-06T00:00:00\", \"score\": 5, \"index\": 155, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 105, \"date\": \"2020-07-07T00:00:00\", \"score\": 1, \"index\": 131, \"Scores_new\": \"1 Star\"}, {\"level_0\": 106, \"date\": \"2020-07-07T00:00:00\", \"score\": 2, \"index\": 39, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 107, \"date\": \"2020-07-07T00:00:00\", \"score\": 3, \"index\": 54, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 108, \"date\": \"2020-07-07T00:00:00\", \"score\": 4, \"index\": 40, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 109, \"date\": \"2020-07-07T00:00:00\", \"score\": 5, \"index\": 117, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 110, \"date\": \"2020-07-08T00:00:00\", \"score\": 1, \"index\": 122, \"Scores_new\": \"1 Star\"}, {\"level_0\": 111, \"date\": \"2020-07-08T00:00:00\", \"score\": 2, \"index\": 52, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 112, \"date\": \"2020-07-08T00:00:00\", \"score\": 3, \"index\": 62, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 113, \"date\": \"2020-07-08T00:00:00\", \"score\": 4, \"index\": 34, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 114, \"date\": \"2020-07-08T00:00:00\", \"score\": 5, \"index\": 128, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 115, \"date\": \"2020-07-09T00:00:00\", \"score\": 1, \"index\": 130, \"Scores_new\": \"1 Star\"}, {\"level_0\": 116, \"date\": \"2020-07-09T00:00:00\", \"score\": 2, \"index\": 33, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 117, \"date\": \"2020-07-09T00:00:00\", \"score\": 3, \"index\": 52, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 118, \"date\": \"2020-07-09T00:00:00\", \"score\": 4, \"index\": 43, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 119, \"date\": \"2020-07-09T00:00:00\", \"score\": 5, \"index\": 107, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 120, \"date\": \"2020-07-10T00:00:00\", \"score\": 1, \"index\": 116, \"Scores_new\": \"1 Star\"}, {\"level_0\": 121, \"date\": \"2020-07-10T00:00:00\", \"score\": 2, \"index\": 44, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 122, \"date\": \"2020-07-10T00:00:00\", \"score\": 3, \"index\": 46, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 123, \"date\": \"2020-07-10T00:00:00\", \"score\": 4, \"index\": 38, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 124, \"date\": \"2020-07-10T00:00:00\", \"score\": 5, \"index\": 91, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 125, \"date\": \"2020-07-11T00:00:00\", \"score\": 1, \"index\": 100, \"Scores_new\": \"1 Star\"}, {\"level_0\": 126, \"date\": \"2020-07-11T00:00:00\", \"score\": 2, \"index\": 30, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 127, \"date\": \"2020-07-11T00:00:00\", \"score\": 3, \"index\": 34, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 128, \"date\": \"2020-07-11T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 129, \"date\": \"2020-07-11T00:00:00\", \"score\": 5, \"index\": 100, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 130, \"date\": \"2020-07-12T00:00:00\", \"score\": 1, \"index\": 91, \"Scores_new\": \"1 Star\"}, {\"level_0\": 131, \"date\": \"2020-07-12T00:00:00\", \"score\": 2, \"index\": 46, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 132, \"date\": \"2020-07-12T00:00:00\", \"score\": 3, \"index\": 38, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 133, \"date\": \"2020-07-12T00:00:00\", \"score\": 4, \"index\": 35, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 134, \"date\": \"2020-07-12T00:00:00\", \"score\": 5, \"index\": 96, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 135, \"date\": \"2020-07-13T00:00:00\", \"score\": 1, \"index\": 112, \"Scores_new\": \"1 Star\"}, {\"level_0\": 136, \"date\": \"2020-07-13T00:00:00\", \"score\": 2, \"index\": 39, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 137, \"date\": \"2020-07-13T00:00:00\", \"score\": 3, \"index\": 50, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 138, \"date\": \"2020-07-13T00:00:00\", \"score\": 4, \"index\": 23, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 139, \"date\": \"2020-07-13T00:00:00\", \"score\": 5, \"index\": 93, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 140, \"date\": \"2020-07-14T00:00:00\", \"score\": 1, \"index\": 115, \"Scores_new\": \"1 Star\"}, {\"level_0\": 141, \"date\": \"2020-07-14T00:00:00\", \"score\": 2, \"index\": 41, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 142, \"date\": \"2020-07-14T00:00:00\", \"score\": 3, \"index\": 37, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 143, \"date\": \"2020-07-14T00:00:00\", \"score\": 4, \"index\": 21, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 144, \"date\": \"2020-07-14T00:00:00\", \"score\": 5, \"index\": 90, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 145, \"date\": \"2020-07-15T00:00:00\", \"score\": 1, \"index\": 79, \"Scores_new\": \"1 Star\"}, {\"level_0\": 146, \"date\": \"2020-07-15T00:00:00\", \"score\": 2, \"index\": 33, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 147, \"date\": \"2020-07-15T00:00:00\", \"score\": 3, \"index\": 35, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 148, \"date\": \"2020-07-15T00:00:00\", \"score\": 4, \"index\": 24, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 149, \"date\": \"2020-07-15T00:00:00\", \"score\": 5, \"index\": 63, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 150, \"date\": \"2020-07-16T00:00:00\", \"score\": 1, \"index\": 91, \"Scores_new\": \"1 Star\"}, {\"level_0\": 151, \"date\": \"2020-07-16T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 152, \"date\": \"2020-07-16T00:00:00\", \"score\": 3, \"index\": 33, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 153, \"date\": \"2020-07-16T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 154, \"date\": \"2020-07-16T00:00:00\", \"score\": 5, \"index\": 55, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 155, \"date\": \"2020-07-17T00:00:00\", \"score\": 1, \"index\": 78, \"Scores_new\": \"1 Star\"}, {\"level_0\": 156, \"date\": \"2020-07-17T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 157, \"date\": \"2020-07-17T00:00:00\", \"score\": 3, \"index\": 30, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 158, \"date\": \"2020-07-17T00:00:00\", \"score\": 4, \"index\": 17, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 159, \"date\": \"2020-07-17T00:00:00\", \"score\": 5, \"index\": 41, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 160, \"date\": \"2020-07-18T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 161, \"date\": \"2020-07-18T00:00:00\", \"score\": 2, \"index\": 38, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 162, \"date\": \"2020-07-18T00:00:00\", \"score\": 3, \"index\": 33, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 163, \"date\": \"2020-07-18T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 164, \"date\": \"2020-07-18T00:00:00\", \"score\": 5, \"index\": 46, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 165, \"date\": \"2020-07-19T00:00:00\", \"score\": 1, \"index\": 68, \"Scores_new\": \"1 Star\"}, {\"level_0\": 166, \"date\": \"2020-07-19T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 167, \"date\": \"2020-07-19T00:00:00\", \"score\": 3, \"index\": 24, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 168, \"date\": \"2020-07-19T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 169, \"date\": \"2020-07-19T00:00:00\", \"score\": 5, \"index\": 35, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 170, \"date\": \"2020-07-20T00:00:00\", \"score\": 1, \"index\": 73, \"Scores_new\": \"1 Star\"}, {\"level_0\": 171, \"date\": \"2020-07-20T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 172, \"date\": \"2020-07-20T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 173, \"date\": \"2020-07-20T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 174, \"date\": \"2020-07-20T00:00:00\", \"score\": 5, \"index\": 57, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 175, \"date\": \"2020-07-21T00:00:00\", \"score\": 1, \"index\": 78, \"Scores_new\": \"1 Star\"}, {\"level_0\": 176, \"date\": \"2020-07-21T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 177, \"date\": \"2020-07-21T00:00:00\", \"score\": 3, \"index\": 22, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 178, \"date\": \"2020-07-21T00:00:00\", \"score\": 4, \"index\": 15, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 179, \"date\": \"2020-07-21T00:00:00\", \"score\": 5, \"index\": 67, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 180, \"date\": \"2020-07-22T00:00:00\", \"score\": 1, \"index\": 68, \"Scores_new\": \"1 Star\"}, {\"level_0\": 181, \"date\": \"2020-07-22T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 182, \"date\": \"2020-07-22T00:00:00\", \"score\": 3, \"index\": 18, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 183, \"date\": \"2020-07-22T00:00:00\", \"score\": 4, \"index\": 26, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 184, \"date\": \"2020-07-22T00:00:00\", \"score\": 5, \"index\": 69, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 185, \"date\": \"2020-07-23T00:00:00\", \"score\": 1, \"index\": 91, \"Scores_new\": \"1 Star\"}, {\"level_0\": 186, \"date\": \"2020-07-23T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 187, \"date\": \"2020-07-23T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 188, \"date\": \"2020-07-23T00:00:00\", \"score\": 4, \"index\": 31, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 189, \"date\": \"2020-07-23T00:00:00\", \"score\": 5, \"index\": 65, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 190, \"date\": \"2020-07-24T00:00:00\", \"score\": 1, \"index\": 169, \"Scores_new\": \"1 Star\"}, {\"level_0\": 191, \"date\": \"2020-07-24T00:00:00\", \"score\": 2, \"index\": 38, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 192, \"date\": \"2020-07-24T00:00:00\", \"score\": 3, \"index\": 33, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 193, \"date\": \"2020-07-24T00:00:00\", \"score\": 4, \"index\": 46, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 194, \"date\": \"2020-07-24T00:00:00\", \"score\": 5, \"index\": 115, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 195, \"date\": \"2020-07-25T00:00:00\", \"score\": 1, \"index\": 145, \"Scores_new\": \"1 Star\"}, {\"level_0\": 196, \"date\": \"2020-07-25T00:00:00\", \"score\": 2, \"index\": 35, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 197, \"date\": \"2020-07-25T00:00:00\", \"score\": 3, \"index\": 35, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 198, \"date\": \"2020-07-25T00:00:00\", \"score\": 4, \"index\": 34, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 199, \"date\": \"2020-07-25T00:00:00\", \"score\": 5, \"index\": 118, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 200, \"date\": \"2020-07-26T00:00:00\", \"score\": 1, \"index\": 96, \"Scores_new\": \"1 Star\"}, {\"level_0\": 201, \"date\": \"2020-07-26T00:00:00\", \"score\": 2, \"index\": 26, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 202, \"date\": \"2020-07-26T00:00:00\", \"score\": 3, \"index\": 30, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 203, \"date\": \"2020-07-26T00:00:00\", \"score\": 4, \"index\": 33, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 204, \"date\": \"2020-07-26T00:00:00\", \"score\": 5, \"index\": 97, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 205, \"date\": \"2020-07-27T00:00:00\", \"score\": 1, \"index\": 70, \"Scores_new\": \"1 Star\"}, {\"level_0\": 206, \"date\": \"2020-07-27T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 207, \"date\": \"2020-07-27T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 208, \"date\": \"2020-07-27T00:00:00\", \"score\": 4, \"index\": 18, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 209, \"date\": \"2020-07-27T00:00:00\", \"score\": 5, \"index\": 74, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 210, \"date\": \"2020-07-28T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 211, \"date\": \"2020-07-28T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 212, \"date\": \"2020-07-28T00:00:00\", \"score\": 3, \"index\": 24, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 213, \"date\": \"2020-07-28T00:00:00\", \"score\": 4, \"index\": 16, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 214, \"date\": \"2020-07-28T00:00:00\", \"score\": 5, \"index\": 64, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 215, \"date\": \"2020-07-29T00:00:00\", \"score\": 1, \"index\": 53, \"Scores_new\": \"1 Star\"}, {\"level_0\": 216, \"date\": \"2020-07-29T00:00:00\", \"score\": 2, \"index\": 19, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 217, \"date\": \"2020-07-29T00:00:00\", \"score\": 3, \"index\": 21, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 218, \"date\": \"2020-07-29T00:00:00\", \"score\": 4, \"index\": 21, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 219, \"date\": \"2020-07-29T00:00:00\", \"score\": 5, \"index\": 41, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 220, \"date\": \"2020-07-30T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 221, \"date\": \"2020-07-30T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 222, \"date\": \"2020-07-30T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 223, \"date\": \"2020-07-30T00:00:00\", \"score\": 4, \"index\": 18, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 224, \"date\": \"2020-07-30T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 225, \"date\": \"2020-07-31T00:00:00\", \"score\": 1, \"index\": 37, \"Scores_new\": \"1 Star\"}, {\"level_0\": 226, \"date\": \"2020-07-31T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 227, \"date\": \"2020-07-31T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 228, \"date\": \"2020-07-31T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 229, \"date\": \"2020-07-31T00:00:00\", \"score\": 5, \"index\": 33, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 230, \"date\": \"2020-08-01T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 231, \"date\": \"2020-08-01T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 232, \"date\": \"2020-08-01T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 233, \"date\": \"2020-08-01T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 234, \"date\": \"2020-08-01T00:00:00\", \"score\": 5, \"index\": 29, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 235, \"date\": \"2020-08-02T00:00:00\", \"score\": 1, \"index\": 30, \"Scores_new\": \"1 Star\"}, {\"level_0\": 236, \"date\": \"2020-08-02T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 237, \"date\": \"2020-08-02T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 238, \"date\": \"2020-08-02T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 239, \"date\": \"2020-08-02T00:00:00\", \"score\": 5, \"index\": 35, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 240, \"date\": \"2020-08-03T00:00:00\", \"score\": 1, \"index\": 33, \"Scores_new\": \"1 Star\"}, {\"level_0\": 241, \"date\": \"2020-08-03T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 242, \"date\": \"2020-08-03T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 243, \"date\": \"2020-08-03T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 244, \"date\": \"2020-08-03T00:00:00\", \"score\": 5, \"index\": 27, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 245, \"date\": \"2020-08-04T00:00:00\", \"score\": 1, \"index\": 42, \"Scores_new\": \"1 Star\"}, {\"level_0\": 246, \"date\": \"2020-08-04T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 247, \"date\": \"2020-08-04T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 248, \"date\": \"2020-08-04T00:00:00\", \"score\": 4, \"index\": 15, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 249, \"date\": \"2020-08-04T00:00:00\", \"score\": 5, \"index\": 44, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 250, \"date\": \"2020-08-05T00:00:00\", \"score\": 1, \"index\": 40, \"Scores_new\": \"1 Star\"}, {\"level_0\": 251, \"date\": \"2020-08-05T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 252, \"date\": \"2020-08-05T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 253, \"date\": \"2020-08-05T00:00:00\", \"score\": 4, \"index\": 14, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 254, \"date\": \"2020-08-05T00:00:00\", \"score\": 5, \"index\": 34, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 255, \"date\": \"2020-08-06T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 256, \"date\": \"2020-08-06T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 257, \"date\": \"2020-08-06T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 258, \"date\": \"2020-08-06T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 259, \"date\": \"2020-08-06T00:00:00\", \"score\": 5, \"index\": 35, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 260, \"date\": \"2020-08-07T00:00:00\", \"score\": 1, \"index\": 40, \"Scores_new\": \"1 Star\"}, {\"level_0\": 261, \"date\": \"2020-08-07T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 262, \"date\": \"2020-08-07T00:00:00\", \"score\": 3, \"index\": 17, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 263, \"date\": \"2020-08-07T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 264, \"date\": \"2020-08-07T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 265, \"date\": \"2020-08-08T00:00:00\", \"score\": 1, \"index\": 28, \"Scores_new\": \"1 Star\"}, {\"level_0\": 266, \"date\": \"2020-08-08T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 267, \"date\": \"2020-08-08T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 268, \"date\": \"2020-08-08T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 269, \"date\": \"2020-08-08T00:00:00\", \"score\": 5, \"index\": 29, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 270, \"date\": \"2020-08-09T00:00:00\", \"score\": 1, \"index\": 29, \"Scores_new\": \"1 Star\"}, {\"level_0\": 271, \"date\": \"2020-08-09T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 272, \"date\": \"2020-08-09T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 273, \"date\": \"2020-08-09T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 274, \"date\": \"2020-08-09T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 275, \"date\": \"2020-08-10T00:00:00\", \"score\": 1, \"index\": 26, \"Scores_new\": \"1 Star\"}, {\"level_0\": 276, \"date\": \"2020-08-10T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 277, \"date\": \"2020-08-10T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 278, \"date\": \"2020-08-10T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 279, \"date\": \"2020-08-10T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 280, \"date\": \"2020-08-11T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 281, \"date\": \"2020-08-11T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 282, \"date\": \"2020-08-11T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 283, \"date\": \"2020-08-11T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 284, \"date\": \"2020-08-11T00:00:00\", \"score\": 5, \"index\": 30, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 285, \"date\": \"2020-08-12T00:00:00\", \"score\": 1, \"index\": 49, \"Scores_new\": \"1 Star\"}, {\"level_0\": 286, \"date\": \"2020-08-12T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 287, \"date\": \"2020-08-12T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 288, \"date\": \"2020-08-12T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 289, \"date\": \"2020-08-12T00:00:00\", \"score\": 5, \"index\": 36, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 290, \"date\": \"2020-08-13T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 291, \"date\": \"2020-08-13T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 292, \"date\": \"2020-08-13T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 293, \"date\": \"2020-08-13T00:00:00\", \"score\": 4, \"index\": 16, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 294, \"date\": \"2020-08-13T00:00:00\", \"score\": 5, \"index\": 37, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 295, \"date\": \"2020-08-14T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 296, \"date\": \"2020-08-14T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 297, \"date\": \"2020-08-14T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 298, \"date\": \"2020-08-14T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 299, \"date\": \"2020-08-14T00:00:00\", \"score\": 5, \"index\": 37, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 300, \"date\": \"2020-08-15T00:00:00\", \"score\": 1, \"index\": 54, \"Scores_new\": \"1 Star\"}, {\"level_0\": 301, \"date\": \"2020-08-15T00:00:00\", \"score\": 2, \"index\": 22, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 302, \"date\": \"2020-08-15T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 303, \"date\": \"2020-08-15T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 304, \"date\": \"2020-08-15T00:00:00\", \"score\": 5, \"index\": 33, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 305, \"date\": \"2020-08-16T00:00:00\", \"score\": 1, \"index\": 48, \"Scores_new\": \"1 Star\"}, {\"level_0\": 306, \"date\": \"2020-08-16T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 307, \"date\": \"2020-08-16T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 308, \"date\": \"2020-08-16T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 309, \"date\": \"2020-08-16T00:00:00\", \"score\": 5, \"index\": 34, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 310, \"date\": \"2020-08-17T00:00:00\", \"score\": 1, \"index\": 48, \"Scores_new\": \"1 Star\"}, {\"level_0\": 311, \"date\": \"2020-08-17T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 312, \"date\": \"2020-08-17T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 313, \"date\": \"2020-08-17T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 314, \"date\": \"2020-08-17T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 315, \"date\": \"2020-08-18T00:00:00\", \"score\": 1, \"index\": 53, \"Scores_new\": \"1 Star\"}, {\"level_0\": 316, \"date\": \"2020-08-18T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 317, \"date\": \"2020-08-18T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 318, \"date\": \"2020-08-18T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 319, \"date\": \"2020-08-18T00:00:00\", \"score\": 5, \"index\": 25, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 320, \"date\": \"2020-08-19T00:00:00\", \"score\": 1, \"index\": 48, \"Scores_new\": \"1 Star\"}, {\"level_0\": 321, \"date\": \"2020-08-19T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 322, \"date\": \"2020-08-19T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 323, \"date\": \"2020-08-19T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 324, \"date\": \"2020-08-19T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 325, \"date\": \"2020-08-20T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 326, \"date\": \"2020-08-20T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 327, \"date\": \"2020-08-20T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 328, \"date\": \"2020-08-20T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 329, \"date\": \"2020-08-20T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 330, \"date\": \"2020-08-21T00:00:00\", \"score\": 1, \"index\": 55, \"Scores_new\": \"1 Star\"}, {\"level_0\": 331, \"date\": \"2020-08-21T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 332, \"date\": \"2020-08-21T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 333, \"date\": \"2020-08-21T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 334, \"date\": \"2020-08-21T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 335, \"date\": \"2020-08-22T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 336, \"date\": \"2020-08-22T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 337, \"date\": \"2020-08-22T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 338, \"date\": \"2020-08-22T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 339, \"date\": \"2020-08-22T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 340, \"date\": \"2020-08-23T00:00:00\", \"score\": 1, \"index\": 50, \"Scores_new\": \"1 Star\"}, {\"level_0\": 341, \"date\": \"2020-08-23T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 342, \"date\": \"2020-08-23T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 343, \"date\": \"2020-08-23T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 344, \"date\": \"2020-08-23T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 345, \"date\": \"2020-08-24T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 346, \"date\": \"2020-08-24T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 347, \"date\": \"2020-08-24T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 348, \"date\": \"2020-08-24T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 349, \"date\": \"2020-08-24T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 350, \"date\": \"2020-08-25T00:00:00\", \"score\": 1, \"index\": 64, \"Scores_new\": \"1 Star\"}, {\"level_0\": 351, \"date\": \"2020-08-25T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 352, \"date\": \"2020-08-25T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 353, \"date\": \"2020-08-25T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 354, \"date\": \"2020-08-25T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 355, \"date\": \"2020-08-26T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 356, \"date\": \"2020-08-26T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 357, \"date\": \"2020-08-26T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 358, \"date\": \"2020-08-26T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 359, \"date\": \"2020-08-26T00:00:00\", \"score\": 5, \"index\": 12, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 360, \"date\": \"2020-08-27T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 361, \"date\": \"2020-08-27T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 362, \"date\": \"2020-08-27T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 363, \"date\": \"2020-08-27T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 364, \"date\": \"2020-08-27T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 365, \"date\": \"2020-08-28T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 366, \"date\": \"2020-08-28T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 367, \"date\": \"2020-08-28T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 368, \"date\": \"2020-08-28T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 369, \"date\": \"2020-08-28T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 370, \"date\": \"2020-08-29T00:00:00\", \"score\": 1, \"index\": 31, \"Scores_new\": \"1 Star\"}, {\"level_0\": 371, \"date\": \"2020-08-29T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 372, \"date\": \"2020-08-29T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 373, \"date\": \"2020-08-29T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 374, \"date\": \"2020-08-29T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 375, \"date\": \"2020-08-30T00:00:00\", \"score\": 1, \"index\": 47, \"Scores_new\": \"1 Star\"}, {\"level_0\": 376, \"date\": \"2020-08-30T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 377, \"date\": \"2020-08-30T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 378, \"date\": \"2020-08-30T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 379, \"date\": \"2020-08-30T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 380, \"date\": \"2020-08-31T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 381, \"date\": \"2020-08-31T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 382, \"date\": \"2020-08-31T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 383, \"date\": \"2020-08-31T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 384, \"date\": \"2020-08-31T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 385, \"date\": \"2020-09-01T00:00:00\", \"score\": 1, \"index\": 37, \"Scores_new\": \"1 Star\"}, {\"level_0\": 386, \"date\": \"2020-09-01T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 387, \"date\": \"2020-09-01T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 388, \"date\": \"2020-09-01T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 389, \"date\": \"2020-09-01T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 390, \"date\": \"2020-09-02T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 391, \"date\": \"2020-09-02T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 392, \"date\": \"2020-09-02T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 393, \"date\": \"2020-09-02T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 394, \"date\": \"2020-09-02T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 395, \"date\": \"2020-09-03T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 396, \"date\": \"2020-09-03T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 397, \"date\": \"2020-09-03T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 398, \"date\": \"2020-09-03T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 399, \"date\": \"2020-09-03T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 400, \"date\": \"2020-09-04T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 401, \"date\": \"2020-09-04T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 402, \"date\": \"2020-09-04T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 403, \"date\": \"2020-09-04T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 404, \"date\": \"2020-09-04T00:00:00\", \"score\": 5, \"index\": 41, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 405, \"date\": \"2020-09-05T00:00:00\", \"score\": 1, \"index\": 60, \"Scores_new\": \"1 Star\"}, {\"level_0\": 406, \"date\": \"2020-09-05T00:00:00\", \"score\": 2, \"index\": 22, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 407, \"date\": \"2020-09-05T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 408, \"date\": \"2020-09-05T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 409, \"date\": \"2020-09-05T00:00:00\", \"score\": 5, \"index\": 27, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 410, \"date\": \"2020-09-06T00:00:00\", \"score\": 1, \"index\": 43, \"Scores_new\": \"1 Star\"}, {\"level_0\": 411, \"date\": \"2020-09-06T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 412, \"date\": \"2020-09-06T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 413, \"date\": \"2020-09-06T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 414, \"date\": \"2020-09-06T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 415, \"date\": \"2020-09-07T00:00:00\", \"score\": 1, \"index\": 47, \"Scores_new\": \"1 Star\"}, {\"level_0\": 416, \"date\": \"2020-09-07T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 417, \"date\": \"2020-09-07T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 418, \"date\": \"2020-09-07T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 419, \"date\": \"2020-09-07T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 420, \"date\": \"2020-09-08T00:00:00\", \"score\": 1, \"index\": 35, \"Scores_new\": \"1 Star\"}, {\"level_0\": 421, \"date\": \"2020-09-08T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 422, \"date\": \"2020-09-08T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 423, \"date\": \"2020-09-08T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 424, \"date\": \"2020-09-08T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 425, \"date\": \"2020-09-09T00:00:00\", \"score\": 1, \"index\": 48, \"Scores_new\": \"1 Star\"}, {\"level_0\": 426, \"date\": \"2020-09-09T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 427, \"date\": \"2020-09-09T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 428, \"date\": \"2020-09-09T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 429, \"date\": \"2020-09-09T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 430, \"date\": \"2020-09-10T00:00:00\", \"score\": 1, \"index\": 30, \"Scores_new\": \"1 Star\"}, {\"level_0\": 431, \"date\": \"2020-09-10T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 432, \"date\": \"2020-09-10T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 433, \"date\": \"2020-09-10T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 434, \"date\": \"2020-09-10T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 435, \"date\": \"2020-09-11T00:00:00\", \"score\": 1, \"index\": 34, \"Scores_new\": \"1 Star\"}, {\"level_0\": 436, \"date\": \"2020-09-11T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 437, \"date\": \"2020-09-11T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 438, \"date\": \"2020-09-11T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 439, \"date\": \"2020-09-11T00:00:00\", \"score\": 5, \"index\": 7, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 440, \"date\": \"2020-09-12T00:00:00\", \"score\": 1, \"index\": 31, \"Scores_new\": \"1 Star\"}, {\"level_0\": 441, \"date\": \"2020-09-12T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 442, \"date\": \"2020-09-12T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 443, \"date\": \"2020-09-12T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 444, \"date\": \"2020-09-12T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 445, \"date\": \"2020-09-13T00:00:00\", \"score\": 1, \"index\": 23, \"Scores_new\": \"1 Star\"}, {\"level_0\": 446, \"date\": \"2020-09-13T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 447, \"date\": \"2020-09-13T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 448, \"date\": \"2020-09-13T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 449, \"date\": \"2020-09-13T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 450, \"date\": \"2020-09-14T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 451, \"date\": \"2020-09-14T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 452, \"date\": \"2020-09-14T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 453, \"date\": \"2020-09-14T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 454, \"date\": \"2020-09-14T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 455, \"date\": \"2020-09-15T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 456, \"date\": \"2020-09-15T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 457, \"date\": \"2020-09-15T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 458, \"date\": \"2020-09-15T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 459, \"date\": \"2020-09-15T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 460, \"date\": \"2020-09-16T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 461, \"date\": \"2020-09-16T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 462, \"date\": \"2020-09-16T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 463, \"date\": \"2020-09-16T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 464, \"date\": \"2020-09-16T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 465, \"date\": \"2020-09-17T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 466, \"date\": \"2020-09-17T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 467, \"date\": \"2020-09-17T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 468, \"date\": \"2020-09-17T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 469, \"date\": \"2020-09-17T00:00:00\", \"score\": 5, \"index\": 12, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 470, \"date\": \"2020-09-18T00:00:00\", \"score\": 1, \"index\": 35, \"Scores_new\": \"1 Star\"}, {\"level_0\": 471, \"date\": \"2020-09-18T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 472, \"date\": \"2020-09-18T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 473, \"date\": \"2020-09-18T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 474, \"date\": \"2020-09-18T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 475, \"date\": \"2020-09-19T00:00:00\", \"score\": 1, \"index\": 29, \"Scores_new\": \"1 Star\"}, {\"level_0\": 476, \"date\": \"2020-09-19T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 477, \"date\": \"2020-09-19T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 478, \"date\": \"2020-09-19T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 479, \"date\": \"2020-09-19T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 480, \"date\": \"2020-09-20T00:00:00\", \"score\": 1, \"index\": 43, \"Scores_new\": \"1 Star\"}, {\"level_0\": 481, \"date\": \"2020-09-20T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 482, \"date\": \"2020-09-20T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 483, \"date\": \"2020-09-20T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 484, \"date\": \"2020-09-20T00:00:00\", \"score\": 5, \"index\": 12, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 485, \"date\": \"2020-09-21T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 486, \"date\": \"2020-09-21T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 487, \"date\": \"2020-09-21T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 488, \"date\": \"2020-09-21T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 489, \"date\": \"2020-09-21T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 490, \"date\": \"2020-09-22T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 491, \"date\": \"2020-09-22T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 492, \"date\": \"2020-09-22T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 493, \"date\": \"2020-09-22T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 494, \"date\": \"2020-09-22T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 495, \"date\": \"2020-09-23T00:00:00\", \"score\": 1, \"index\": 110, \"Scores_new\": \"1 Star\"}, {\"level_0\": 496, \"date\": \"2020-09-23T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 497, \"date\": \"2020-09-23T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 498, \"date\": \"2020-09-23T00:00:00\", \"score\": 4, \"index\": 17, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 499, \"date\": \"2020-09-23T00:00:00\", \"score\": 5, \"index\": 49, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 500, \"date\": \"2020-09-24T00:00:00\", \"score\": 1, \"index\": 77, \"Scores_new\": \"1 Star\"}, {\"level_0\": 501, \"date\": \"2020-09-24T00:00:00\", \"score\": 2, \"index\": 17, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 502, \"date\": \"2020-09-24T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 503, \"date\": \"2020-09-24T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 504, \"date\": \"2020-09-24T00:00:00\", \"score\": 5, \"index\": 31, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 505, \"date\": \"2020-09-25T00:00:00\", \"score\": 1, \"index\": 53, \"Scores_new\": \"1 Star\"}, {\"level_0\": 506, \"date\": \"2020-09-25T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 507, \"date\": \"2020-09-25T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 508, \"date\": \"2020-09-25T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 509, \"date\": \"2020-09-25T00:00:00\", \"score\": 5, \"index\": 29, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 510, \"date\": \"2020-09-26T00:00:00\", \"score\": 1, \"index\": 48, \"Scores_new\": \"1 Star\"}, {\"level_0\": 511, \"date\": \"2020-09-26T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 512, \"date\": \"2020-09-26T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 513, \"date\": \"2020-09-26T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 514, \"date\": \"2020-09-26T00:00:00\", \"score\": 5, \"index\": 27, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 515, \"date\": \"2020-09-27T00:00:00\", \"score\": 1, \"index\": 35, \"Scores_new\": \"1 Star\"}, {\"level_0\": 516, \"date\": \"2020-09-27T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 517, \"date\": \"2020-09-27T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 518, \"date\": \"2020-09-27T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 519, \"date\": \"2020-09-27T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 520, \"date\": \"2020-09-28T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 521, \"date\": \"2020-09-28T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 522, \"date\": \"2020-09-28T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 523, \"date\": \"2020-09-28T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 524, \"date\": \"2020-09-28T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 525, \"date\": \"2020-09-29T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 526, \"date\": \"2020-09-29T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 527, \"date\": \"2020-09-29T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 528, \"date\": \"2020-09-29T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 529, \"date\": \"2020-09-29T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 530, \"date\": \"2020-09-30T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 531, \"date\": \"2020-09-30T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 532, \"date\": \"2020-09-30T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 533, \"date\": \"2020-09-30T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 534, \"date\": \"2020-09-30T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 535, \"date\": \"2020-10-01T00:00:00\", \"score\": 1, \"index\": 43, \"Scores_new\": \"1 Star\"}, {\"level_0\": 536, \"date\": \"2020-10-01T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 537, \"date\": \"2020-10-01T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 538, \"date\": \"2020-10-01T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 539, \"date\": \"2020-10-01T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 540, \"date\": \"2020-10-02T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 541, \"date\": \"2020-10-02T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 542, \"date\": \"2020-10-02T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 543, \"date\": \"2020-10-02T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 544, \"date\": \"2020-10-02T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 545, \"date\": \"2020-10-03T00:00:00\", \"score\": 1, \"index\": 27, \"Scores_new\": \"1 Star\"}, {\"level_0\": 546, \"date\": \"2020-10-03T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 547, \"date\": \"2020-10-03T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 548, \"date\": \"2020-10-03T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 549, \"date\": \"2020-10-03T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 550, \"date\": \"2020-10-04T00:00:00\", \"score\": 1, \"index\": 41, \"Scores_new\": \"1 Star\"}, {\"level_0\": 551, \"date\": \"2020-10-04T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 552, \"date\": \"2020-10-04T00:00:00\", \"score\": 3, \"index\": 3, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 553, \"date\": \"2020-10-04T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 554, \"date\": \"2020-10-04T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 555, \"date\": \"2020-10-05T00:00:00\", \"score\": 1, \"index\": 53, \"Scores_new\": \"1 Star\"}, {\"level_0\": 556, \"date\": \"2020-10-05T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 557, \"date\": \"2020-10-05T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 558, \"date\": \"2020-10-05T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 559, \"date\": \"2020-10-05T00:00:00\", \"score\": 5, \"index\": 5, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 560, \"date\": \"2020-10-06T00:00:00\", \"score\": 1, \"index\": 26, \"Scores_new\": \"1 Star\"}, {\"level_0\": 561, \"date\": \"2020-10-06T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 562, \"date\": \"2020-10-06T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 563, \"date\": \"2020-10-06T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 564, \"date\": \"2020-10-06T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 565, \"date\": \"2020-10-07T00:00:00\", \"score\": 1, \"index\": 62, \"Scores_new\": \"1 Star\"}, {\"level_0\": 566, \"date\": \"2020-10-07T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 567, \"date\": \"2020-10-07T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 568, \"date\": \"2020-10-07T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 569, \"date\": \"2020-10-07T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 570, \"date\": \"2020-10-08T00:00:00\", \"score\": 1, \"index\": 67, \"Scores_new\": \"1 Star\"}, {\"level_0\": 571, \"date\": \"2020-10-08T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 572, \"date\": \"2020-10-08T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 573, \"date\": \"2020-10-08T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 574, \"date\": \"2020-10-08T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 575, \"date\": \"2020-10-09T00:00:00\", \"score\": 1, \"index\": 65, \"Scores_new\": \"1 Star\"}, {\"level_0\": 576, \"date\": \"2020-10-09T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 577, \"date\": \"2020-10-09T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 578, \"date\": \"2020-10-09T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 579, \"date\": \"2020-10-09T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 580, \"date\": \"2020-10-10T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 581, \"date\": \"2020-10-10T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 582, \"date\": \"2020-10-10T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 583, \"date\": \"2020-10-10T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 584, \"date\": \"2020-10-10T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 585, \"date\": \"2020-10-11T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 586, \"date\": \"2020-10-11T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 587, \"date\": \"2020-10-11T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 588, \"date\": \"2020-10-11T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 589, \"date\": \"2020-10-11T00:00:00\", \"score\": 5, \"index\": 26, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 590, \"date\": \"2020-10-12T00:00:00\", \"score\": 1, \"index\": 60, \"Scores_new\": \"1 Star\"}, {\"level_0\": 591, \"date\": \"2020-10-12T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 592, \"date\": \"2020-10-12T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 593, \"date\": \"2020-10-12T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 594, \"date\": \"2020-10-12T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 595, \"date\": \"2020-10-13T00:00:00\", \"score\": 1, \"index\": 67, \"Scores_new\": \"1 Star\"}, {\"level_0\": 596, \"date\": \"2020-10-13T00:00:00\", \"score\": 2, \"index\": 20, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 597, \"date\": \"2020-10-13T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 598, \"date\": \"2020-10-13T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 599, \"date\": \"2020-10-13T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 600, \"date\": \"2020-10-14T00:00:00\", \"score\": 1, \"index\": 83, \"Scores_new\": \"1 Star\"}, {\"level_0\": 601, \"date\": \"2020-10-14T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 602, \"date\": \"2020-10-14T00:00:00\", \"score\": 3, \"index\": 17, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 603, \"date\": \"2020-10-14T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 604, \"date\": \"2020-10-14T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 605, \"date\": \"2020-10-15T00:00:00\", \"score\": 1, \"index\": 85, \"Scores_new\": \"1 Star\"}, {\"level_0\": 606, \"date\": \"2020-10-15T00:00:00\", \"score\": 2, \"index\": 26, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 607, \"date\": \"2020-10-15T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 608, \"date\": \"2020-10-15T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 609, \"date\": \"2020-10-15T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 610, \"date\": \"2020-10-16T00:00:00\", \"score\": 1, \"index\": 81, \"Scores_new\": \"1 Star\"}, {\"level_0\": 611, \"date\": \"2020-10-16T00:00:00\", \"score\": 2, \"index\": 27, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 612, \"date\": \"2020-10-16T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 613, \"date\": \"2020-10-16T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 614, \"date\": \"2020-10-16T00:00:00\", \"score\": 5, \"index\": 41, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 615, \"date\": \"2020-10-17T00:00:00\", \"score\": 1, \"index\": 125, \"Scores_new\": \"1 Star\"}, {\"level_0\": 616, \"date\": \"2020-10-17T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 617, \"date\": \"2020-10-17T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 618, \"date\": \"2020-10-17T00:00:00\", \"score\": 4, \"index\": 16, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 619, \"date\": \"2020-10-17T00:00:00\", \"score\": 5, \"index\": 34, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 620, \"date\": \"2020-10-18T00:00:00\", \"score\": 1, \"index\": 118, \"Scores_new\": \"1 Star\"}, {\"level_0\": 621, \"date\": \"2020-10-18T00:00:00\", \"score\": 2, \"index\": 22, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 622, \"date\": \"2020-10-18T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 623, \"date\": \"2020-10-18T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 624, \"date\": \"2020-10-18T00:00:00\", \"score\": 5, \"index\": 43, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 625, \"date\": \"2020-10-19T00:00:00\", \"score\": 1, \"index\": 190, \"Scores_new\": \"1 Star\"}, {\"level_0\": 626, \"date\": \"2020-10-19T00:00:00\", \"score\": 2, \"index\": 54, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 627, \"date\": \"2020-10-19T00:00:00\", \"score\": 3, \"index\": 45, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 628, \"date\": \"2020-10-19T00:00:00\", \"score\": 4, \"index\": 45, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 629, \"date\": \"2020-10-19T00:00:00\", \"score\": 5, \"index\": 152, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 630, \"date\": \"2020-10-20T00:00:00\", \"score\": 1, \"index\": 182, \"Scores_new\": \"1 Star\"}, {\"level_0\": 631, \"date\": \"2020-10-20T00:00:00\", \"score\": 2, \"index\": 44, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 632, \"date\": \"2020-10-20T00:00:00\", \"score\": 3, \"index\": 56, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 633, \"date\": \"2020-10-20T00:00:00\", \"score\": 4, \"index\": 36, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 634, \"date\": \"2020-10-20T00:00:00\", \"score\": 5, \"index\": 91, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 635, \"date\": \"2020-10-21T00:00:00\", \"score\": 1, \"index\": 105, \"Scores_new\": \"1 Star\"}, {\"level_0\": 636, \"date\": \"2020-10-21T00:00:00\", \"score\": 2, \"index\": 23, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 637, \"date\": \"2020-10-21T00:00:00\", \"score\": 3, \"index\": 30, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 638, \"date\": \"2020-10-21T00:00:00\", \"score\": 4, \"index\": 21, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 639, \"date\": \"2020-10-21T00:00:00\", \"score\": 5, \"index\": 52, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 640, \"date\": \"2020-10-22T00:00:00\", \"score\": 1, \"index\": 117, \"Scores_new\": \"1 Star\"}, {\"level_0\": 641, \"date\": \"2020-10-22T00:00:00\", \"score\": 2, \"index\": 27, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 642, \"date\": \"2020-10-22T00:00:00\", \"score\": 3, \"index\": 41, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 643, \"date\": \"2020-10-22T00:00:00\", \"score\": 4, \"index\": 28, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 644, \"date\": \"2020-10-22T00:00:00\", \"score\": 5, \"index\": 43, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 645, \"date\": \"2020-10-23T00:00:00\", \"score\": 1, \"index\": 98, \"Scores_new\": \"1 Star\"}, {\"level_0\": 646, \"date\": \"2020-10-23T00:00:00\", \"score\": 2, \"index\": 24, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 647, \"date\": \"2020-10-23T00:00:00\", \"score\": 3, \"index\": 24, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 648, \"date\": \"2020-10-23T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 649, \"date\": \"2020-10-23T00:00:00\", \"score\": 5, \"index\": 37, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 650, \"date\": \"2020-10-24T00:00:00\", \"score\": 1, \"index\": 73, \"Scores_new\": \"1 Star\"}, {\"level_0\": 651, \"date\": \"2020-10-24T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 652, \"date\": \"2020-10-24T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 653, \"date\": \"2020-10-24T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 654, \"date\": \"2020-10-24T00:00:00\", \"score\": 5, \"index\": 36, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 655, \"date\": \"2020-10-25T00:00:00\", \"score\": 1, \"index\": 80, \"Scores_new\": \"1 Star\"}, {\"level_0\": 656, \"date\": \"2020-10-25T00:00:00\", \"score\": 2, \"index\": 20, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 657, \"date\": \"2020-10-25T00:00:00\", \"score\": 3, \"index\": 22, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 658, \"date\": \"2020-10-25T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 659, \"date\": \"2020-10-25T00:00:00\", \"score\": 5, \"index\": 37, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 660, \"date\": \"2020-10-26T00:00:00\", \"score\": 1, \"index\": 90, \"Scores_new\": \"1 Star\"}, {\"level_0\": 661, \"date\": \"2020-10-26T00:00:00\", \"score\": 2, \"index\": 20, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 662, \"date\": \"2020-10-26T00:00:00\", \"score\": 3, \"index\": 18, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 663, \"date\": \"2020-10-26T00:00:00\", \"score\": 4, \"index\": 14, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 664, \"date\": \"2020-10-26T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 665, \"date\": \"2020-10-27T00:00:00\", \"score\": 1, \"index\": 81, \"Scores_new\": \"1 Star\"}, {\"level_0\": 666, \"date\": \"2020-10-27T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 667, \"date\": \"2020-10-27T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 668, \"date\": \"2020-10-27T00:00:00\", \"score\": 4, \"index\": 21, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 669, \"date\": \"2020-10-27T00:00:00\", \"score\": 5, \"index\": 36, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 670, \"date\": \"2020-10-28T00:00:00\", \"score\": 1, \"index\": 81, \"Scores_new\": \"1 Star\"}, {\"level_0\": 671, \"date\": \"2020-10-28T00:00:00\", \"score\": 2, \"index\": 22, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 672, \"date\": \"2020-10-28T00:00:00\", \"score\": 3, \"index\": 31, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 673, \"date\": \"2020-10-28T00:00:00\", \"score\": 4, \"index\": 18, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 674, \"date\": \"2020-10-28T00:00:00\", \"score\": 5, \"index\": 36, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 675, \"date\": \"2020-10-29T00:00:00\", \"score\": 1, \"index\": 93, \"Scores_new\": \"1 Star\"}, {\"level_0\": 676, \"date\": \"2020-10-29T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 677, \"date\": \"2020-10-29T00:00:00\", \"score\": 3, \"index\": 23, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 678, \"date\": \"2020-10-29T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 679, \"date\": \"2020-10-29T00:00:00\", \"score\": 5, \"index\": 42, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 680, \"date\": \"2020-10-30T00:00:00\", \"score\": 1, \"index\": 103, \"Scores_new\": \"1 Star\"}, {\"level_0\": 681, \"date\": \"2020-10-30T00:00:00\", \"score\": 2, \"index\": 28, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 682, \"date\": \"2020-10-30T00:00:00\", \"score\": 3, \"index\": 27, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 683, \"date\": \"2020-10-30T00:00:00\", \"score\": 4, \"index\": 15, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 684, \"date\": \"2020-10-30T00:00:00\", \"score\": 5, \"index\": 37, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 685, \"date\": \"2020-10-31T00:00:00\", \"score\": 1, \"index\": 72, \"Scores_new\": \"1 Star\"}, {\"level_0\": 686, \"date\": \"2020-10-31T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 687, \"date\": \"2020-10-31T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 688, \"date\": \"2020-10-31T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 689, \"date\": \"2020-10-31T00:00:00\", \"score\": 5, \"index\": 24, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 690, \"date\": \"2020-11-01T00:00:00\", \"score\": 1, \"index\": 70, \"Scores_new\": \"1 Star\"}, {\"level_0\": 691, \"date\": \"2020-11-01T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 692, \"date\": \"2020-11-01T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 693, \"date\": \"2020-11-01T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 694, \"date\": \"2020-11-01T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 695, \"date\": \"2020-11-02T00:00:00\", \"score\": 1, \"index\": 79, \"Scores_new\": \"1 Star\"}, {\"level_0\": 696, \"date\": \"2020-11-02T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 697, \"date\": \"2020-11-02T00:00:00\", \"score\": 3, \"index\": 23, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 698, \"date\": \"2020-11-02T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 699, \"date\": \"2020-11-02T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 700, \"date\": \"2020-11-03T00:00:00\", \"score\": 1, \"index\": 61, \"Scores_new\": \"1 Star\"}, {\"level_0\": 701, \"date\": \"2020-11-03T00:00:00\", \"score\": 2, \"index\": 24, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 702, \"date\": \"2020-11-03T00:00:00\", \"score\": 3, \"index\": 29, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 703, \"date\": \"2020-11-03T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 704, \"date\": \"2020-11-03T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 705, \"date\": \"2020-11-04T00:00:00\", \"score\": 1, \"index\": 64, \"Scores_new\": \"1 Star\"}, {\"level_0\": 706, \"date\": \"2020-11-04T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 707, \"date\": \"2020-11-04T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 708, \"date\": \"2020-11-04T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 709, \"date\": \"2020-11-04T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 710, \"date\": \"2020-11-05T00:00:00\", \"score\": 1, \"index\": 53, \"Scores_new\": \"1 Star\"}, {\"level_0\": 711, \"date\": \"2020-11-05T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 712, \"date\": \"2020-11-05T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 713, \"date\": \"2020-11-05T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 714, \"date\": \"2020-11-05T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 715, \"date\": \"2020-11-06T00:00:00\", \"score\": 1, \"index\": 68, \"Scores_new\": \"1 Star\"}, {\"level_0\": 716, \"date\": \"2020-11-06T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 717, \"date\": \"2020-11-06T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 718, \"date\": \"2020-11-06T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 719, \"date\": \"2020-11-06T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 720, \"date\": \"2020-11-07T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 721, \"date\": \"2020-11-07T00:00:00\", \"score\": 2, \"index\": 17, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 722, \"date\": \"2020-11-07T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 723, \"date\": \"2020-11-07T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 724, \"date\": \"2020-11-07T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 725, \"date\": \"2020-11-08T00:00:00\", \"score\": 1, \"index\": 57, \"Scores_new\": \"1 Star\"}, {\"level_0\": 726, \"date\": \"2020-11-08T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 727, \"date\": \"2020-11-08T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 728, \"date\": \"2020-11-08T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 729, \"date\": \"2020-11-08T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 730, \"date\": \"2020-11-09T00:00:00\", \"score\": 1, \"index\": 61, \"Scores_new\": \"1 Star\"}, {\"level_0\": 731, \"date\": \"2020-11-09T00:00:00\", \"score\": 2, \"index\": 17, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 732, \"date\": \"2020-11-09T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 733, \"date\": \"2020-11-09T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 734, \"date\": \"2020-11-09T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 735, \"date\": \"2020-11-10T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 736, \"date\": \"2020-11-10T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 737, \"date\": \"2020-11-10T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 738, \"date\": \"2020-11-10T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 739, \"date\": \"2020-11-10T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 740, \"date\": \"2020-11-11T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 741, \"date\": \"2020-11-11T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 742, \"date\": \"2020-11-11T00:00:00\", \"score\": 3, \"index\": 22, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 743, \"date\": \"2020-11-11T00:00:00\", \"score\": 4, \"index\": 16, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 744, \"date\": \"2020-11-11T00:00:00\", \"score\": 5, \"index\": 29, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 745, \"date\": \"2020-11-12T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 746, \"date\": \"2020-11-12T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 747, \"date\": \"2020-11-12T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 748, \"date\": \"2020-11-12T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 749, \"date\": \"2020-11-12T00:00:00\", \"score\": 5, \"index\": 32, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 750, \"date\": \"2020-11-13T00:00:00\", \"score\": 1, \"index\": 65, \"Scores_new\": \"1 Star\"}, {\"level_0\": 751, \"date\": \"2020-11-13T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 752, \"date\": \"2020-11-13T00:00:00\", \"score\": 3, \"index\": 20, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 753, \"date\": \"2020-11-13T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 754, \"date\": \"2020-11-13T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 755, \"date\": \"2020-11-14T00:00:00\", \"score\": 1, \"index\": 62, \"Scores_new\": \"1 Star\"}, {\"level_0\": 756, \"date\": \"2020-11-14T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 757, \"date\": \"2020-11-14T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 758, \"date\": \"2020-11-14T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 759, \"date\": \"2020-11-14T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 760, \"date\": \"2020-11-15T00:00:00\", \"score\": 1, \"index\": 85, \"Scores_new\": \"1 Star\"}, {\"level_0\": 761, \"date\": \"2020-11-15T00:00:00\", \"score\": 2, \"index\": 39, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 762, \"date\": \"2020-11-15T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 763, \"date\": \"2020-11-15T00:00:00\", \"score\": 4, \"index\": 13, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 764, \"date\": \"2020-11-15T00:00:00\", \"score\": 5, \"index\": 25, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 765, \"date\": \"2020-11-16T00:00:00\", \"score\": 1, \"index\": 105, \"Scores_new\": \"1 Star\"}, {\"level_0\": 766, \"date\": \"2020-11-16T00:00:00\", \"score\": 2, \"index\": 31, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 767, \"date\": \"2020-11-16T00:00:00\", \"score\": 3, \"index\": 38, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 768, \"date\": \"2020-11-16T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 769, \"date\": \"2020-11-16T00:00:00\", \"score\": 5, \"index\": 30, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 770, \"date\": \"2020-11-17T00:00:00\", \"score\": 1, \"index\": 72, \"Scores_new\": \"1 Star\"}, {\"level_0\": 771, \"date\": \"2020-11-17T00:00:00\", \"score\": 2, \"index\": 23, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 772, \"date\": \"2020-11-17T00:00:00\", \"score\": 3, \"index\": 29, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 773, \"date\": \"2020-11-17T00:00:00\", \"score\": 4, \"index\": 21, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 774, \"date\": \"2020-11-17T00:00:00\", \"score\": 5, \"index\": 44, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 775, \"date\": \"2020-11-18T00:00:00\", \"score\": 1, \"index\": 64, \"Scores_new\": \"1 Star\"}, {\"level_0\": 776, \"date\": \"2020-11-18T00:00:00\", \"score\": 2, \"index\": 20, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 777, \"date\": \"2020-11-18T00:00:00\", \"score\": 3, \"index\": 22, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 778, \"date\": \"2020-11-18T00:00:00\", \"score\": 4, \"index\": 16, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 779, \"date\": \"2020-11-18T00:00:00\", \"score\": 5, \"index\": 33, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 780, \"date\": \"2020-11-19T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 781, \"date\": \"2020-11-19T00:00:00\", \"score\": 2, \"index\": 26, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 782, \"date\": \"2020-11-19T00:00:00\", \"score\": 3, \"index\": 25, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 783, \"date\": \"2020-11-19T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 784, \"date\": \"2020-11-19T00:00:00\", \"score\": 5, \"index\": 33, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 785, \"date\": \"2020-11-20T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 786, \"date\": \"2020-11-20T00:00:00\", \"score\": 2, \"index\": 19, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 787, \"date\": \"2020-11-20T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 788, \"date\": \"2020-11-20T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 789, \"date\": \"2020-11-20T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 790, \"date\": \"2020-11-21T00:00:00\", \"score\": 1, \"index\": 64, \"Scores_new\": \"1 Star\"}, {\"level_0\": 791, \"date\": \"2020-11-21T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 792, \"date\": \"2020-11-21T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 793, \"date\": \"2020-11-21T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 794, \"date\": \"2020-11-21T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 795, \"date\": \"2020-11-22T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 796, \"date\": \"2020-11-22T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 797, \"date\": \"2020-11-22T00:00:00\", \"score\": 3, \"index\": 18, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 798, \"date\": \"2020-11-22T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 799, \"date\": \"2020-11-22T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 800, \"date\": \"2020-11-23T00:00:00\", \"score\": 1, \"index\": 77, \"Scores_new\": \"1 Star\"}, {\"level_0\": 801, \"date\": \"2020-11-23T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 802, \"date\": \"2020-11-23T00:00:00\", \"score\": 3, \"index\": 17, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 803, \"date\": \"2020-11-23T00:00:00\", \"score\": 4, \"index\": 17, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 804, \"date\": \"2020-11-23T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 805, \"date\": \"2020-11-24T00:00:00\", \"score\": 1, \"index\": 70, \"Scores_new\": \"1 Star\"}, {\"level_0\": 806, \"date\": \"2020-11-24T00:00:00\", \"score\": 2, \"index\": 24, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 807, \"date\": \"2020-11-24T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 808, \"date\": \"2020-11-24T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 809, \"date\": \"2020-11-24T00:00:00\", \"score\": 5, \"index\": 25, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 810, \"date\": \"2020-11-25T00:00:00\", \"score\": 1, \"index\": 84, \"Scores_new\": \"1 Star\"}, {\"level_0\": 811, \"date\": \"2020-11-25T00:00:00\", \"score\": 2, \"index\": 29, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 812, \"date\": \"2020-11-25T00:00:00\", \"score\": 3, \"index\": 40, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 813, \"date\": \"2020-11-25T00:00:00\", \"score\": 4, \"index\": 25, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 814, \"date\": \"2020-11-25T00:00:00\", \"score\": 5, \"index\": 86, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 815, \"date\": \"2020-11-26T00:00:00\", \"score\": 1, \"index\": 158, \"Scores_new\": \"1 Star\"}, {\"level_0\": 816, \"date\": \"2020-11-26T00:00:00\", \"score\": 2, \"index\": 77, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 817, \"date\": \"2020-11-26T00:00:00\", \"score\": 3, \"index\": 101, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 818, \"date\": \"2020-11-26T00:00:00\", \"score\": 4, \"index\": 82, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 819, \"date\": \"2020-11-26T00:00:00\", \"score\": 5, \"index\": 124, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 820, \"date\": \"2020-11-27T00:00:00\", \"score\": 1, \"index\": 143, \"Scores_new\": \"1 Star\"}, {\"level_0\": 821, \"date\": \"2020-11-27T00:00:00\", \"score\": 2, \"index\": 36, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 822, \"date\": \"2020-11-27T00:00:00\", \"score\": 3, \"index\": 58, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 823, \"date\": \"2020-11-27T00:00:00\", \"score\": 4, \"index\": 53, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 824, \"date\": \"2020-11-27T00:00:00\", \"score\": 5, \"index\": 91, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 825, \"date\": \"2020-11-28T00:00:00\", \"score\": 1, \"index\": 70, \"Scores_new\": \"1 Star\"}, {\"level_0\": 826, \"date\": \"2020-11-28T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 827, \"date\": \"2020-11-28T00:00:00\", \"score\": 3, \"index\": 24, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 828, \"date\": \"2020-11-28T00:00:00\", \"score\": 4, \"index\": 24, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 829, \"date\": \"2020-11-28T00:00:00\", \"score\": 5, \"index\": 65, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 830, \"date\": \"2020-11-29T00:00:00\", \"score\": 1, \"index\": 67, \"Scores_new\": \"1 Star\"}, {\"level_0\": 831, \"date\": \"2020-11-29T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 832, \"date\": \"2020-11-29T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 833, \"date\": \"2020-11-29T00:00:00\", \"score\": 4, \"index\": 14, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 834, \"date\": \"2020-11-29T00:00:00\", \"score\": 5, \"index\": 47, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 835, \"date\": \"2020-11-30T00:00:00\", \"score\": 1, \"index\": 70, \"Scores_new\": \"1 Star\"}, {\"level_0\": 836, \"date\": \"2020-11-30T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 837, \"date\": \"2020-11-30T00:00:00\", \"score\": 3, \"index\": 26, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 838, \"date\": \"2020-11-30T00:00:00\", \"score\": 4, \"index\": 15, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 839, \"date\": \"2020-11-30T00:00:00\", \"score\": 5, \"index\": 24, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 840, \"date\": \"2020-12-01T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 841, \"date\": \"2020-12-01T00:00:00\", \"score\": 2, \"index\": 19, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 842, \"date\": \"2020-12-01T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 843, \"date\": \"2020-12-01T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 844, \"date\": \"2020-12-01T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 845, \"date\": \"2020-12-02T00:00:00\", \"score\": 1, \"index\": 69, \"Scores_new\": \"1 Star\"}, {\"level_0\": 846, \"date\": \"2020-12-02T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 847, \"date\": \"2020-12-02T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 848, \"date\": \"2020-12-02T00:00:00\", \"score\": 4, \"index\": 21, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 849, \"date\": \"2020-12-02T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 850, \"date\": \"2020-12-03T00:00:00\", \"score\": 1, \"index\": 64, \"Scores_new\": \"1 Star\"}, {\"level_0\": 851, \"date\": \"2020-12-03T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 852, \"date\": \"2020-12-03T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 853, \"date\": \"2020-12-03T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 854, \"date\": \"2020-12-03T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 855, \"date\": \"2020-12-04T00:00:00\", \"score\": 1, \"index\": 78, \"Scores_new\": \"1 Star\"}, {\"level_0\": 856, \"date\": \"2020-12-04T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 857, \"date\": \"2020-12-04T00:00:00\", \"score\": 3, \"index\": 19, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 858, \"date\": \"2020-12-04T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 859, \"date\": \"2020-12-04T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 860, \"date\": \"2020-12-05T00:00:00\", \"score\": 1, \"index\": 63, \"Scores_new\": \"1 Star\"}, {\"level_0\": 861, \"date\": \"2020-12-05T00:00:00\", \"score\": 2, \"index\": 19, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 862, \"date\": \"2020-12-05T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 863, \"date\": \"2020-12-05T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 864, \"date\": \"2020-12-05T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 865, \"date\": \"2020-12-06T00:00:00\", \"score\": 1, \"index\": 74, \"Scores_new\": \"1 Star\"}, {\"level_0\": 866, \"date\": \"2020-12-06T00:00:00\", \"score\": 2, \"index\": 17, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 867, \"date\": \"2020-12-06T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 868, \"date\": \"2020-12-06T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 869, \"date\": \"2020-12-06T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 870, \"date\": \"2020-12-07T00:00:00\", \"score\": 1, \"index\": 79, \"Scores_new\": \"1 Star\"}, {\"level_0\": 871, \"date\": \"2020-12-07T00:00:00\", \"score\": 2, \"index\": 17, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 872, \"date\": \"2020-12-07T00:00:00\", \"score\": 3, \"index\": 25, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 873, \"date\": \"2020-12-07T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 874, \"date\": \"2020-12-07T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 875, \"date\": \"2020-12-08T00:00:00\", \"score\": 1, \"index\": 83, \"Scores_new\": \"1 Star\"}, {\"level_0\": 876, \"date\": \"2020-12-08T00:00:00\", \"score\": 2, \"index\": 23, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 877, \"date\": \"2020-12-08T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 878, \"date\": \"2020-12-08T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 879, \"date\": \"2020-12-08T00:00:00\", \"score\": 5, \"index\": 24, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 880, \"date\": \"2020-12-09T00:00:00\", \"score\": 1, \"index\": 63, \"Scores_new\": \"1 Star\"}, {\"level_0\": 881, \"date\": \"2020-12-09T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 882, \"date\": \"2020-12-09T00:00:00\", \"score\": 3, \"index\": 27, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 883, \"date\": \"2020-12-09T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 884, \"date\": \"2020-12-09T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 885, \"date\": \"2020-12-10T00:00:00\", \"score\": 1, \"index\": 51, \"Scores_new\": \"1 Star\"}, {\"level_0\": 886, \"date\": \"2020-12-10T00:00:00\", \"score\": 2, \"index\": 29, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 887, \"date\": \"2020-12-10T00:00:00\", \"score\": 3, \"index\": 18, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 888, \"date\": \"2020-12-10T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 889, \"date\": \"2020-12-10T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 890, \"date\": \"2020-12-11T00:00:00\", \"score\": 1, \"index\": 67, \"Scores_new\": \"1 Star\"}, {\"level_0\": 891, \"date\": \"2020-12-11T00:00:00\", \"score\": 2, \"index\": 20, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 892, \"date\": \"2020-12-11T00:00:00\", \"score\": 3, \"index\": 20, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 893, \"date\": \"2020-12-11T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 894, \"date\": \"2020-12-11T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 895, \"date\": \"2020-12-12T00:00:00\", \"score\": 1, \"index\": 75, \"Scores_new\": \"1 Star\"}, {\"level_0\": 896, \"date\": \"2020-12-12T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 897, \"date\": \"2020-12-12T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 898, \"date\": \"2020-12-12T00:00:00\", \"score\": 4, \"index\": 17, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 899, \"date\": \"2020-12-12T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 900, \"date\": \"2020-12-13T00:00:00\", \"score\": 1, \"index\": 71, \"Scores_new\": \"1 Star\"}, {\"level_0\": 901, \"date\": \"2020-12-13T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 902, \"date\": \"2020-12-13T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 903, \"date\": \"2020-12-13T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 904, \"date\": \"2020-12-13T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 905, \"date\": \"2020-12-14T00:00:00\", \"score\": 1, \"index\": 96, \"Scores_new\": \"1 Star\"}, {\"level_0\": 906, \"date\": \"2020-12-14T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 907, \"date\": \"2020-12-14T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 908, \"date\": \"2020-12-14T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 909, \"date\": \"2020-12-14T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 910, \"date\": \"2020-12-15T00:00:00\", \"score\": 1, \"index\": 93, \"Scores_new\": \"1 Star\"}, {\"level_0\": 911, \"date\": \"2020-12-15T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 912, \"date\": \"2020-12-15T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 913, \"date\": \"2020-12-15T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 914, \"date\": \"2020-12-15T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 915, \"date\": \"2020-12-16T00:00:00\", \"score\": 1, \"index\": 104, \"Scores_new\": \"1 Star\"}, {\"level_0\": 916, \"date\": \"2020-12-16T00:00:00\", \"score\": 2, \"index\": 19, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 917, \"date\": \"2020-12-16T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 918, \"date\": \"2020-12-16T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 919, \"date\": \"2020-12-16T00:00:00\", \"score\": 5, \"index\": 25, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 920, \"date\": \"2020-12-17T00:00:00\", \"score\": 1, \"index\": 120, \"Scores_new\": \"1 Star\"}, {\"level_0\": 921, \"date\": \"2020-12-17T00:00:00\", \"score\": 2, \"index\": 31, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 922, \"date\": \"2020-12-17T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 923, \"date\": \"2020-12-17T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 924, \"date\": \"2020-12-17T00:00:00\", \"score\": 5, \"index\": 72, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 925, \"date\": \"2020-12-18T00:00:00\", \"score\": 1, \"index\": 110, \"Scores_new\": \"1 Star\"}, {\"level_0\": 926, \"date\": \"2020-12-18T00:00:00\", \"score\": 2, \"index\": 27, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 927, \"date\": \"2020-12-18T00:00:00\", \"score\": 3, \"index\": 37, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 928, \"date\": \"2020-12-18T00:00:00\", \"score\": 4, \"index\": 26, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 929, \"date\": \"2020-12-18T00:00:00\", \"score\": 5, \"index\": 69, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 930, \"date\": \"2020-12-19T00:00:00\", \"score\": 1, \"index\": 94, \"Scores_new\": \"1 Star\"}, {\"level_0\": 931, \"date\": \"2020-12-19T00:00:00\", \"score\": 2, \"index\": 18, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 932, \"date\": \"2020-12-19T00:00:00\", \"score\": 3, \"index\": 39, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 933, \"date\": \"2020-12-19T00:00:00\", \"score\": 4, \"index\": 23, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 934, \"date\": \"2020-12-19T00:00:00\", \"score\": 5, \"index\": 45, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 935, \"date\": \"2020-12-20T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 936, \"date\": \"2020-12-20T00:00:00\", \"score\": 2, \"index\": 22, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 937, \"date\": \"2020-12-20T00:00:00\", \"score\": 3, \"index\": 28, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 938, \"date\": \"2020-12-20T00:00:00\", \"score\": 4, \"index\": 17, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 939, \"date\": \"2020-12-20T00:00:00\", \"score\": 5, \"index\": 38, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 940, \"date\": \"2020-12-21T00:00:00\", \"score\": 1, \"index\": 71, \"Scores_new\": \"1 Star\"}, {\"level_0\": 941, \"date\": \"2020-12-21T00:00:00\", \"score\": 2, \"index\": 28, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 942, \"date\": \"2020-12-21T00:00:00\", \"score\": 3, \"index\": 16, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 943, \"date\": \"2020-12-21T00:00:00\", \"score\": 4, \"index\": 16, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 944, \"date\": \"2020-12-21T00:00:00\", \"score\": 5, \"index\": 34, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 945, \"date\": \"2020-12-22T00:00:00\", \"score\": 1, \"index\": 65, \"Scores_new\": \"1 Star\"}, {\"level_0\": 946, \"date\": \"2020-12-22T00:00:00\", \"score\": 2, \"index\": 20, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 947, \"date\": \"2020-12-22T00:00:00\", \"score\": 3, \"index\": 17, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 948, \"date\": \"2020-12-22T00:00:00\", \"score\": 4, \"index\": 15, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 949, \"date\": \"2020-12-22T00:00:00\", \"score\": 5, \"index\": 28, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 950, \"date\": \"2020-12-23T00:00:00\", \"score\": 1, \"index\": 55, \"Scores_new\": \"1 Star\"}, {\"level_0\": 951, \"date\": \"2020-12-23T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 952, \"date\": \"2020-12-23T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 953, \"date\": \"2020-12-23T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 954, \"date\": \"2020-12-23T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 955, \"date\": \"2020-12-24T00:00:00\", \"score\": 1, \"index\": 53, \"Scores_new\": \"1 Star\"}, {\"level_0\": 956, \"date\": \"2020-12-24T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 957, \"date\": \"2020-12-24T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 958, \"date\": \"2020-12-24T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 959, \"date\": \"2020-12-24T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 960, \"date\": \"2020-12-25T00:00:00\", \"score\": 1, \"index\": 55, \"Scores_new\": \"1 Star\"}, {\"level_0\": 961, \"date\": \"2020-12-25T00:00:00\", \"score\": 2, \"index\": 21, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 962, \"date\": \"2020-12-25T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 963, \"date\": \"2020-12-25T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 964, \"date\": \"2020-12-25T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 965, \"date\": \"2020-12-26T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 966, \"date\": \"2020-12-26T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 967, \"date\": \"2020-12-26T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 968, \"date\": \"2020-12-26T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 969, \"date\": \"2020-12-26T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 970, \"date\": \"2020-12-27T00:00:00\", \"score\": 1, \"index\": 58, \"Scores_new\": \"1 Star\"}, {\"level_0\": 971, \"date\": \"2020-12-27T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 972, \"date\": \"2020-12-27T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 973, \"date\": \"2020-12-27T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 974, \"date\": \"2020-12-27T00:00:00\", \"score\": 5, \"index\": 12, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 975, \"date\": \"2020-12-28T00:00:00\", \"score\": 1, \"index\": 74, \"Scores_new\": \"1 Star\"}, {\"level_0\": 976, \"date\": \"2020-12-28T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 977, \"date\": \"2020-12-28T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 978, \"date\": \"2020-12-28T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 979, \"date\": \"2020-12-28T00:00:00\", \"score\": 5, \"index\": 31, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 980, \"date\": \"2020-12-29T00:00:00\", \"score\": 1, \"index\": 75, \"Scores_new\": \"1 Star\"}, {\"level_0\": 981, \"date\": \"2020-12-29T00:00:00\", \"score\": 2, \"index\": 25, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 982, \"date\": \"2020-12-29T00:00:00\", \"score\": 3, \"index\": 24, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 983, \"date\": \"2020-12-29T00:00:00\", \"score\": 4, \"index\": 22, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 984, \"date\": \"2020-12-29T00:00:00\", \"score\": 5, \"index\": 58, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 985, \"date\": \"2020-12-30T00:00:00\", \"score\": 1, \"index\": 99, \"Scores_new\": \"1 Star\"}, {\"level_0\": 986, \"date\": \"2020-12-30T00:00:00\", \"score\": 2, \"index\": 35, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 987, \"date\": \"2020-12-30T00:00:00\", \"score\": 3, \"index\": 36, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 988, \"date\": \"2020-12-30T00:00:00\", \"score\": 4, \"index\": 33, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 989, \"date\": \"2020-12-30T00:00:00\", \"score\": 5, \"index\": 65, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 990, \"date\": \"2020-12-31T00:00:00\", \"score\": 1, \"index\": 37, \"Scores_new\": \"1 Star\"}, {\"level_0\": 991, \"date\": \"2020-12-31T00:00:00\", \"score\": 2, \"index\": 17, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 992, \"date\": \"2020-12-31T00:00:00\", \"score\": 3, \"index\": 14, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 993, \"date\": \"2020-12-31T00:00:00\", \"score\": 4, \"index\": 24, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 994, \"date\": \"2020-12-31T00:00:00\", \"score\": 5, \"index\": 32, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 995, \"date\": \"2021-01-01T00:00:00\", \"score\": 1, \"index\": 40, \"Scores_new\": \"1 Star\"}, {\"level_0\": 996, \"date\": \"2021-01-01T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 997, \"date\": \"2021-01-01T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 998, \"date\": \"2021-01-01T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 999, \"date\": \"2021-01-01T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1000, \"date\": \"2021-01-02T00:00:00\", \"score\": 1, \"index\": 51, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1001, \"date\": \"2021-01-02T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1002, \"date\": \"2021-01-02T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1003, \"date\": \"2021-01-02T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1004, \"date\": \"2021-01-02T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1005, \"date\": \"2021-01-03T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1006, \"date\": \"2021-01-03T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1007, \"date\": \"2021-01-03T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1008, \"date\": \"2021-01-03T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1009, \"date\": \"2021-01-03T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1010, \"date\": \"2021-01-04T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1011, \"date\": \"2021-01-04T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1012, \"date\": \"2021-01-04T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1013, \"date\": \"2021-01-04T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1014, \"date\": \"2021-01-04T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1015, \"date\": \"2021-01-05T00:00:00\", \"score\": 1, \"index\": 49, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1016, \"date\": \"2021-01-05T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1017, \"date\": \"2021-01-05T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1018, \"date\": \"2021-01-05T00:00:00\", \"score\": 4, \"index\": 9, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1019, \"date\": \"2021-01-05T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1020, \"date\": \"2021-01-06T00:00:00\", \"score\": 1, \"index\": 52, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1021, \"date\": \"2021-01-06T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1022, \"date\": \"2021-01-06T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1023, \"date\": \"2021-01-06T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1024, \"date\": \"2021-01-06T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1025, \"date\": \"2021-01-07T00:00:00\", \"score\": 1, \"index\": 56, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1026, \"date\": \"2021-01-07T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1027, \"date\": \"2021-01-07T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1028, \"date\": \"2021-01-07T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1029, \"date\": \"2021-01-07T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1030, \"date\": \"2021-01-08T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1031, \"date\": \"2021-01-08T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1032, \"date\": \"2021-01-08T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1033, \"date\": \"2021-01-08T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1034, \"date\": \"2021-01-08T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1035, \"date\": \"2021-01-09T00:00:00\", \"score\": 1, \"index\": 43, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1036, \"date\": \"2021-01-09T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1037, \"date\": \"2021-01-09T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1038, \"date\": \"2021-01-09T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1039, \"date\": \"2021-01-09T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1040, \"date\": \"2021-01-10T00:00:00\", \"score\": 1, \"index\": 32, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1041, \"date\": \"2021-01-10T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1042, \"date\": \"2021-01-10T00:00:00\", \"score\": 3, \"index\": 3, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1043, \"date\": \"2021-01-10T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1044, \"date\": \"2021-01-10T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1045, \"date\": \"2021-01-11T00:00:00\", \"score\": 1, \"index\": 34, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1046, \"date\": \"2021-01-11T00:00:00\", \"score\": 2, \"index\": 5, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1047, \"date\": \"2021-01-11T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1048, \"date\": \"2021-01-11T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1049, \"date\": \"2021-01-11T00:00:00\", \"score\": 5, \"index\": 2, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1050, \"date\": \"2021-01-12T00:00:00\", \"score\": 1, \"index\": 39, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1051, \"date\": \"2021-01-12T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1052, \"date\": \"2021-01-12T00:00:00\", \"score\": 3, \"index\": 1, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1053, \"date\": \"2021-01-12T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1054, \"date\": \"2021-01-12T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1055, \"date\": \"2021-01-13T00:00:00\", \"score\": 1, \"index\": 146, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1056, \"date\": \"2021-01-13T00:00:00\", \"score\": 2, \"index\": 46, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1057, \"date\": \"2021-01-13T00:00:00\", \"score\": 3, \"index\": 50, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1058, \"date\": \"2021-01-13T00:00:00\", \"score\": 4, \"index\": 36, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1059, \"date\": \"2021-01-13T00:00:00\", \"score\": 5, \"index\": 32, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1060, \"date\": \"2021-01-14T00:00:00\", \"score\": 1, \"index\": 92, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1061, \"date\": \"2021-01-14T00:00:00\", \"score\": 2, \"index\": 19, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1062, \"date\": \"2021-01-14T00:00:00\", \"score\": 3, \"index\": 20, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1063, \"date\": \"2021-01-14T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1064, \"date\": \"2021-01-14T00:00:00\", \"score\": 5, \"index\": 23, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1065, \"date\": \"2021-01-15T00:00:00\", \"score\": 1, \"index\": 49, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1066, \"date\": \"2021-01-15T00:00:00\", \"score\": 2, \"index\": 15, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1067, \"date\": \"2021-01-15T00:00:00\", \"score\": 3, \"index\": 11, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1068, \"date\": \"2021-01-15T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1069, \"date\": \"2021-01-15T00:00:00\", \"score\": 5, \"index\": 18, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1070, \"date\": \"2021-01-16T00:00:00\", \"score\": 1, \"index\": 59, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1071, \"date\": \"2021-01-16T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1072, \"date\": \"2021-01-16T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1073, \"date\": \"2021-01-16T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1074, \"date\": \"2021-01-16T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1075, \"date\": \"2021-01-17T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1076, \"date\": \"2021-01-17T00:00:00\", \"score\": 2, \"index\": 1, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1077, \"date\": \"2021-01-17T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1078, \"date\": \"2021-01-17T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1079, \"date\": \"2021-01-17T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1080, \"date\": \"2021-01-18T00:00:00\", \"score\": 1, \"index\": 33, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1081, \"date\": \"2021-01-18T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1082, \"date\": \"2021-01-18T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1083, \"date\": \"2021-01-18T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1084, \"date\": \"2021-01-18T00:00:00\", \"score\": 5, \"index\": 16, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1085, \"date\": \"2021-01-19T00:00:00\", \"score\": 1, \"index\": 46, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1086, \"date\": \"2021-01-19T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1087, \"date\": \"2021-01-19T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1088, \"date\": \"2021-01-19T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1089, \"date\": \"2021-01-19T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1090, \"date\": \"2021-01-20T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1091, \"date\": \"2021-01-20T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1092, \"date\": \"2021-01-20T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1093, \"date\": \"2021-01-20T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1094, \"date\": \"2021-01-20T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1095, \"date\": \"2021-01-21T00:00:00\", \"score\": 1, \"index\": 34, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1096, \"date\": \"2021-01-21T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1097, \"date\": \"2021-01-21T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1098, \"date\": \"2021-01-21T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1099, \"date\": \"2021-01-21T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1100, \"date\": \"2021-01-22T00:00:00\", \"score\": 1, \"index\": 38, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1101, \"date\": \"2021-01-22T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1102, \"date\": \"2021-01-22T00:00:00\", \"score\": 3, \"index\": 1, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1103, \"date\": \"2021-01-22T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1104, \"date\": \"2021-01-22T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1105, \"date\": \"2021-01-23T00:00:00\", \"score\": 1, \"index\": 25, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1106, \"date\": \"2021-01-23T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1107, \"date\": \"2021-01-23T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1108, \"date\": \"2021-01-23T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1109, \"date\": \"2021-01-23T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1110, \"date\": \"2021-01-24T00:00:00\", \"score\": 1, \"index\": 32, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1111, \"date\": \"2021-01-24T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1112, \"date\": \"2021-01-24T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1113, \"date\": \"2021-01-24T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1114, \"date\": \"2021-01-24T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1115, \"date\": \"2021-01-25T00:00:00\", \"score\": 1, \"index\": 23, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1116, \"date\": \"2021-01-25T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1117, \"date\": \"2021-01-25T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1118, \"date\": \"2021-01-25T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1119, \"date\": \"2021-01-25T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1120, \"date\": \"2021-01-26T00:00:00\", \"score\": 1, \"index\": 32, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1121, \"date\": \"2021-01-26T00:00:00\", \"score\": 2, \"index\": 14, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1122, \"date\": \"2021-01-26T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1123, \"date\": \"2021-01-26T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1124, \"date\": \"2021-01-26T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1125, \"date\": \"2021-01-27T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1126, \"date\": \"2021-01-27T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1127, \"date\": \"2021-01-27T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1128, \"date\": \"2021-01-27T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1129, \"date\": \"2021-01-27T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1130, \"date\": \"2021-01-28T00:00:00\", \"score\": 1, \"index\": 32, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1131, \"date\": \"2021-01-28T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1132, \"date\": \"2021-01-28T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1133, \"date\": \"2021-01-28T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1134, \"date\": \"2021-01-28T00:00:00\", \"score\": 5, \"index\": 8, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1135, \"date\": \"2021-01-29T00:00:00\", \"score\": 1, \"index\": 48, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1136, \"date\": \"2021-01-29T00:00:00\", \"score\": 2, \"index\": 16, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1137, \"date\": \"2021-01-29T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1138, \"date\": \"2021-01-29T00:00:00\", \"score\": 4, \"index\": 11, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1139, \"date\": \"2021-01-29T00:00:00\", \"score\": 5, \"index\": 34, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1140, \"date\": \"2021-01-30T00:00:00\", \"score\": 1, \"index\": 54, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1141, \"date\": \"2021-01-30T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1142, \"date\": \"2021-01-30T00:00:00\", \"score\": 3, \"index\": 18, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1143, \"date\": \"2021-01-30T00:00:00\", \"score\": 4, \"index\": 20, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1144, \"date\": \"2021-01-30T00:00:00\", \"score\": 5, \"index\": 72, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1145, \"date\": \"2021-01-31T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1146, \"date\": \"2021-01-31T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1147, \"date\": \"2021-01-31T00:00:00\", \"score\": 3, \"index\": 13, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1148, \"date\": \"2021-01-31T00:00:00\", \"score\": 4, \"index\": 12, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1149, \"date\": \"2021-01-31T00:00:00\", \"score\": 5, \"index\": 22, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1150, \"date\": \"2021-02-01T00:00:00\", \"score\": 1, \"index\": 27, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1151, \"date\": \"2021-02-01T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1152, \"date\": \"2021-02-01T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1153, \"date\": \"2021-02-01T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1154, \"date\": \"2021-02-01T00:00:00\", \"score\": 5, \"index\": 17, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1155, \"date\": \"2021-02-02T00:00:00\", \"score\": 1, \"index\": 34, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1156, \"date\": \"2021-02-02T00:00:00\", \"score\": 2, \"index\": 12, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1157, \"date\": \"2021-02-02T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1158, \"date\": \"2021-02-02T00:00:00\", \"score\": 4, \"index\": 10, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1159, \"date\": \"2021-02-02T00:00:00\", \"score\": 5, \"index\": 13, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1160, \"date\": \"2021-02-03T00:00:00\", \"score\": 1, \"index\": 29, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1161, \"date\": \"2021-02-03T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1162, \"date\": \"2021-02-03T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1163, \"date\": \"2021-02-03T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1164, \"date\": \"2021-02-03T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1165, \"date\": \"2021-02-04T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1166, \"date\": \"2021-02-04T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1167, \"date\": \"2021-02-04T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1168, \"date\": \"2021-02-04T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1169, \"date\": \"2021-02-04T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1170, \"date\": \"2021-02-05T00:00:00\", \"score\": 1, \"index\": 33, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1171, \"date\": \"2021-02-05T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1172, \"date\": \"2021-02-05T00:00:00\", \"score\": 3, \"index\": 15, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1173, \"date\": \"2021-02-05T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1174, \"date\": \"2021-02-05T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1175, \"date\": \"2021-02-06T00:00:00\", \"score\": 1, \"index\": 20, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1176, \"date\": \"2021-02-06T00:00:00\", \"score\": 2, \"index\": 6, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1177, \"date\": \"2021-02-06T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1178, \"date\": \"2021-02-06T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1179, \"date\": \"2021-02-06T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1180, \"date\": \"2021-02-07T00:00:00\", \"score\": 1, \"index\": 23, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1181, \"date\": \"2021-02-07T00:00:00\", \"score\": 2, \"index\": 2, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1182, \"date\": \"2021-02-07T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1183, \"date\": \"2021-02-07T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1184, \"date\": \"2021-02-07T00:00:00\", \"score\": 5, \"index\": 8, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1185, \"date\": \"2021-02-08T00:00:00\", \"score\": 1, \"index\": 21, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1186, \"date\": \"2021-02-08T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1187, \"date\": \"2021-02-08T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1188, \"date\": \"2021-02-08T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1189, \"date\": \"2021-02-08T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1190, \"date\": \"2021-02-09T00:00:00\", \"score\": 1, \"index\": 26, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1191, \"date\": \"2021-02-09T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1192, \"date\": \"2021-02-09T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1193, \"date\": \"2021-02-09T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1194, \"date\": \"2021-02-10T00:00:00\", \"score\": 1, \"index\": 41, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1195, \"date\": \"2021-02-10T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1196, \"date\": \"2021-02-10T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1197, \"date\": \"2021-02-10T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1198, \"date\": \"2021-02-10T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1199, \"date\": \"2021-02-11T00:00:00\", \"score\": 1, \"index\": 32, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1200, \"date\": \"2021-02-11T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1201, \"date\": \"2021-02-11T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1202, \"date\": \"2021-02-11T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1203, \"date\": \"2021-02-11T00:00:00\", \"score\": 5, \"index\": 20, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1204, \"date\": \"2021-02-12T00:00:00\", \"score\": 1, \"index\": 42, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1205, \"date\": \"2021-02-12T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1206, \"date\": \"2021-02-12T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1207, \"date\": \"2021-02-12T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1208, \"date\": \"2021-02-12T00:00:00\", \"score\": 5, \"index\": 21, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1209, \"date\": \"2021-02-13T00:00:00\", \"score\": 1, \"index\": 44, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1210, \"date\": \"2021-02-13T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1211, \"date\": \"2021-02-13T00:00:00\", \"score\": 3, \"index\": 10, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1212, \"date\": \"2021-02-13T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1213, \"date\": \"2021-02-13T00:00:00\", \"score\": 5, \"index\": 19, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1214, \"date\": \"2021-02-14T00:00:00\", \"score\": 1, \"index\": 37, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1215, \"date\": \"2021-02-14T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1216, \"date\": \"2021-02-14T00:00:00\", \"score\": 3, \"index\": 3, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1217, \"date\": \"2021-02-14T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1218, \"date\": \"2021-02-14T00:00:00\", \"score\": 5, \"index\": 8, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1219, \"date\": \"2021-02-15T00:00:00\", \"score\": 1, \"index\": 34, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1220, \"date\": \"2021-02-15T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1221, \"date\": \"2021-02-15T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1222, \"date\": \"2021-02-15T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1223, \"date\": \"2021-02-15T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1224, \"date\": \"2021-02-16T00:00:00\", \"score\": 1, \"index\": 22, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1225, \"date\": \"2021-02-16T00:00:00\", \"score\": 2, \"index\": 3, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1226, \"date\": \"2021-02-16T00:00:00\", \"score\": 3, \"index\": 2, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1227, \"date\": \"2021-02-16T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1228, \"date\": \"2021-02-16T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1229, \"date\": \"2021-02-17T00:00:00\", \"score\": 1, \"index\": 32, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1230, \"date\": \"2021-02-17T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1231, \"date\": \"2021-02-17T00:00:00\", \"score\": 3, \"index\": 2, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1232, \"date\": \"2021-02-17T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1233, \"date\": \"2021-02-17T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1234, \"date\": \"2021-02-18T00:00:00\", \"score\": 1, \"index\": 25, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1235, \"date\": \"2021-02-18T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1236, \"date\": \"2021-02-18T00:00:00\", \"score\": 3, \"index\": 1, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1237, \"date\": \"2021-02-18T00:00:00\", \"score\": 4, \"index\": 1, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1238, \"date\": \"2021-02-18T00:00:00\", \"score\": 5, \"index\": 11, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1239, \"date\": \"2021-02-19T00:00:00\", \"score\": 1, \"index\": 26, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1240, \"date\": \"2021-02-19T00:00:00\", \"score\": 2, \"index\": 2, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1241, \"date\": \"2021-02-19T00:00:00\", \"score\": 3, \"index\": 6, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1242, \"date\": \"2021-02-19T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1243, \"date\": \"2021-02-19T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1244, \"date\": \"2021-02-20T00:00:00\", \"score\": 1, \"index\": 21, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1245, \"date\": \"2021-02-20T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1246, \"date\": \"2021-02-20T00:00:00\", \"score\": 3, \"index\": 5, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1247, \"date\": \"2021-02-20T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1248, \"date\": \"2021-02-20T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1249, \"date\": \"2021-02-21T00:00:00\", \"score\": 1, \"index\": 13, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1250, \"date\": \"2021-02-21T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1251, \"date\": \"2021-02-21T00:00:00\", \"score\": 3, \"index\": 2, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1252, \"date\": \"2021-02-21T00:00:00\", \"score\": 5, \"index\": 9, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1253, \"date\": \"2021-02-22T00:00:00\", \"score\": 1, \"index\": 33, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1254, \"date\": \"2021-02-22T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1255, \"date\": \"2021-02-22T00:00:00\", \"score\": 3, \"index\": 2, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1256, \"date\": \"2021-02-22T00:00:00\", \"score\": 4, \"index\": 1, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1257, \"date\": \"2021-02-22T00:00:00\", \"score\": 5, \"index\": 7, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1258, \"date\": \"2021-02-23T00:00:00\", \"score\": 1, \"index\": 29, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1259, \"date\": \"2021-02-23T00:00:00\", \"score\": 2, \"index\": 4, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1260, \"date\": \"2021-02-23T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1261, \"date\": \"2021-02-23T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1262, \"date\": \"2021-02-23T00:00:00\", \"score\": 5, \"index\": 7, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1263, \"date\": \"2021-02-24T00:00:00\", \"score\": 1, \"index\": 28, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1264, \"date\": \"2021-02-24T00:00:00\", \"score\": 2, \"index\": 5, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1265, \"date\": \"2021-02-24T00:00:00\", \"score\": 3, \"index\": 3, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1266, \"date\": \"2021-02-24T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1267, \"date\": \"2021-02-24T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1268, \"date\": \"2021-02-25T00:00:00\", \"score\": 1, \"index\": 22, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1269, \"date\": \"2021-02-25T00:00:00\", \"score\": 2, \"index\": 5, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1270, \"date\": \"2021-02-25T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1271, \"date\": \"2021-02-25T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1272, \"date\": \"2021-02-25T00:00:00\", \"score\": 5, \"index\": 6, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1273, \"date\": \"2021-02-26T00:00:00\", \"score\": 1, \"index\": 14, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1274, \"date\": \"2021-02-26T00:00:00\", \"score\": 2, \"index\": 11, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1275, \"date\": \"2021-02-26T00:00:00\", \"score\": 3, \"index\": 3, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1276, \"date\": \"2021-02-26T00:00:00\", \"score\": 4, \"index\": 7, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1277, \"date\": \"2021-02-26T00:00:00\", \"score\": 5, \"index\": 10, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1278, \"date\": \"2021-02-27T00:00:00\", \"score\": 1, \"index\": 21, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1279, \"date\": \"2021-02-27T00:00:00\", \"score\": 2, \"index\": 3, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1280, \"date\": \"2021-02-27T00:00:00\", \"score\": 3, \"index\": 3, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1281, \"date\": \"2021-02-27T00:00:00\", \"score\": 4, \"index\": 3, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1282, \"date\": \"2021-02-27T00:00:00\", \"score\": 5, \"index\": 12, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1283, \"date\": \"2021-02-28T00:00:00\", \"score\": 1, \"index\": 37, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1284, \"date\": \"2021-02-28T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1285, \"date\": \"2021-02-28T00:00:00\", \"score\": 3, \"index\": 7, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1286, \"date\": \"2021-02-28T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1287, \"date\": \"2021-02-28T00:00:00\", \"score\": 5, \"index\": 8, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1288, \"date\": \"2021-03-01T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1289, \"date\": \"2021-03-01T00:00:00\", \"score\": 2, \"index\": 9, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1290, \"date\": \"2021-03-01T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1291, \"date\": \"2021-03-01T00:00:00\", \"score\": 4, \"index\": 6, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1292, \"date\": \"2021-03-01T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1293, \"date\": \"2021-03-02T00:00:00\", \"score\": 1, \"index\": 36, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1294, \"date\": \"2021-03-02T00:00:00\", \"score\": 2, \"index\": 7, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1295, \"date\": \"2021-03-02T00:00:00\", \"score\": 3, \"index\": 12, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1296, \"date\": \"2021-03-02T00:00:00\", \"score\": 4, \"index\": 5, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1297, \"date\": \"2021-03-02T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1298, \"date\": \"2021-03-03T00:00:00\", \"score\": 1, \"index\": 45, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1299, \"date\": \"2021-03-03T00:00:00\", \"score\": 2, \"index\": 13, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1300, \"date\": \"2021-03-03T00:00:00\", \"score\": 3, \"index\": 9, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1301, \"date\": \"2021-03-03T00:00:00\", \"score\": 4, \"index\": 4, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1302, \"date\": \"2021-03-03T00:00:00\", \"score\": 5, \"index\": 15, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1303, \"date\": \"2021-03-04T00:00:00\", \"score\": 1, \"index\": 43, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1304, \"date\": \"2021-03-04T00:00:00\", \"score\": 2, \"index\": 10, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1305, \"date\": \"2021-03-04T00:00:00\", \"score\": 3, \"index\": 8, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1306, \"date\": \"2021-03-04T00:00:00\", \"score\": 4, \"index\": 8, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1307, \"date\": \"2021-03-04T00:00:00\", \"score\": 5, \"index\": 14, \"Scores_new\": \"5 Stars\"}, {\"level_0\": 1308, \"date\": \"2021-03-05T00:00:00\", \"score\": 1, \"index\": 29, \"Scores_new\": \"1 Star\"}, {\"level_0\": 1309, \"date\": \"2021-03-05T00:00:00\", \"score\": 2, \"index\": 8, \"Scores_new\": \"2 Stars\"}, {\"level_0\": 1310, \"date\": \"2021-03-05T00:00:00\", \"score\": 3, \"index\": 4, \"Scores_new\": \"3 Stars\"}, {\"level_0\": 1311, \"date\": \"2021-03-05T00:00:00\", \"score\": 4, \"index\": 2, \"Scores_new\": \"4 Stars\"}, {\"level_0\": 1312, \"date\": \"2021-03-05T00:00:00\", \"score\": 5, \"index\": 5, \"Scores_new\": \"5 Stars\"}]}}, {\"mode\": \"vega-lite\"});\n",
              "</script>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OP4-oBGCg3ml"
      },
      "source": [
        "#E. Baseline Model: Naive Bayes Classifier"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mSJtF5tia5L1"
      },
      "source": [
        "## 5 labels"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2VznM20thrYZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "aec0c60a-c272-4c46-f6b1-0b02bc6b9eb8"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import fetch_20newsgroups\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "from sklearn.model_selection import train_test_split\n",
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "from nltk.corpus import stopwords\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "sns.set() # use seaborn plotting style"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "1P3lf3BvkB-U",
        "outputId": "98ecfb20-1a55-42b7-8025-67e2426a3893"
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(df_Corona['content'], df_Corona['score'], random_state=1)\n",
        "word_freq_df = pd.DataFrame(X_train_cv.toarray(), columns=cv.get_feature_names())\n",
        "top_words_df = pd.DataFrame(word_freq_df.sum()).sort_values(0, ascending=False)\n",
        "top_words_df[0:100]"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>app</th>\n",
              "      <td>33061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>funktioniert</th>\n",
              "      <td>6602</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>seit</th>\n",
              "      <td>5448</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mehr</th>\n",
              "      <td>5350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gut</th>\n",
              "      <td>4618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>liegt</th>\n",
              "      <td>846</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>besser</th>\n",
              "      <td>845</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gelÃ¶scht</th>\n",
              "      <td>843</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>843</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>kommunikation</th>\n",
              "      <td>833</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows Ã— 1 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                   0\n",
              "app            33061\n",
              "funktioniert    6602\n",
              "seit            5448\n",
              "mehr            5350\n",
              "gut             4618\n",
              "...              ...\n",
              "liegt            846\n",
              "besser           845\n",
              "gelÃ¶scht         843\n",
              "20               843\n",
              "kommunikation    833\n",
              "\n",
              "[100 rows x 1 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nMxstjxgkuou"
      },
      "source": [
        "from sklearn.naive_bayes import MultinomialNB\n",
        "\n",
        "  t0 = time.time()\n",
        "\n",
        "naive_bayes = MultinomialNB()\n",
        "naive_bayes.fit(X_train_cv, y_train)\n",
        "predictions = naive_bayes.predict(X_test_cv)"
      ],
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "f2yyUwUY68Cz",
        "outputId": "47f36589-62c3-4aca-b417-e3bf2b53ff9d"
      },
      "source": [
        "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
        "print('Accuracy score: ', accuracy_score(y_test, predictions))\n",
        "print('Balanced score: ', balanced_accuracy_score(y_test, predictions))"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy score:  0.6303563019934076\n",
            "Balanced score:  0.3976337405070521\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "FGkXBb2P5hKo",
        "outputId": "75b4714b-0b95-4ddb-c98a-59e116c2a976"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "cm = confusion_matrix(y_test, predictions)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='RdBu', cbar=True, fmt='d')\n",
        "plt.xlabel('true label')\n",
        "plt.ylabel('predicted label')"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(80.90000000000006, 0.5, 'predicted label')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "nM350F65Iza2",
        "outputId": "d5cc2798-a569-42ad-fdf4-e9d2d42a9ec8"
      },
      "source": [
        "testing_predictions = []\n",
        "for i in range(len(X_test)):\n",
        "    if predictions[i] == 1:\n",
        "        testing_predictions.append('1 Star')\n",
        "    elif predictions[i] == 2:\n",
        "        testing_predictions.append('2 Stars')\n",
        "    elif predictions[i] == 3:\n",
        "        testing_predictions.append('3 Stars')\n",
        "    elif predictions[i] == 4:\n",
        "        testing_predictions.append('4 Stars')\n",
        "    else:\n",
        "        testing_predictions.append('5 Stars')\n",
        "\n",
        "check_df = pd.DataFrame({'actual_label': list(y_test), 'prediction': testing_predictions, 'Review Text':list(X_test)})"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>actual_label</th>\n",
              "      <th>prediction</th>\n",
              "      <th>abstract</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1 Star</td>\n",
              "      <td>Die App ist vÃ¶llig nutzlos, mein Testergebnis ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>5 Stars</td>\n",
              "      <td>Diese App ist sehr gut.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5</td>\n",
              "      <td>5 Stars</td>\n",
              "      <td>Gute Sache</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>1 Star</td>\n",
              "      <td>Empfehlenswert. Ich wÃ¼nsche mir aber eine Meld...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1 Star</td>\n",
              "      <td>Einfach nur armselig! Eine App die einen vor C...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12737</th>\n",
              "      <td>1</td>\n",
              "      <td>1 Star</td>\n",
              "      <td>Die App hat Ã¼ber zwei Wochen stabil funktionie...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12738</th>\n",
              "      <td>1</td>\n",
              "      <td>1 Star</td>\n",
              "      <td>Mit einer auslÃ¤ndischen Nummer kann man leider...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12739</th>\n",
              "      <td>1</td>\n",
              "      <td>1 Star</td>\n",
              "      <td>Der fehler besteht schon sehr lange und ich ha...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12740</th>\n",
              "      <td>1</td>\n",
              "      <td>1 Star</td>\n",
              "      <td>Nach der Installation der App hat der Akku nur...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12741</th>\n",
              "      <td>1</td>\n",
              "      <td>1 Star</td>\n",
              "      <td>Diese App ist absolut unbrauchbar. Es wurden U...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>12742 rows Ã— 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       actual_label  ...                                           abstract\n",
              "0                 1  ...  Die App ist vÃ¶llig nutzlos, mein Testergebnis ...\n",
              "1                 5  ...                            Diese App ist sehr gut.\n",
              "2                 5  ...                                         Gute Sache\n",
              "3                 3  ...  Empfehlenswert. Ich wÃ¼nsche mir aber eine Meld...\n",
              "4                 1  ...  Einfach nur armselig! Eine App die einen vor C...\n",
              "...             ...  ...                                                ...\n",
              "12737             1  ...  Die App hat Ã¼ber zwei Wochen stabil funktionie...\n",
              "12738             1  ...  Mit einer auslÃ¤ndischen Nummer kann man leider...\n",
              "12739             1  ...  Der fehler besteht schon sehr lange und ich ha...\n",
              "12740             1  ...  Nach der Installation der App hat der Akku nur...\n",
              "12741             1  ...  Diese App ist absolut unbrauchbar. Es wurden U...\n",
              "\n",
              "[12742 rows x 3 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3S-f3oTdbAHt"
      },
      "source": [
        "## 3 labels"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MUJqAkBrbAHw"
      },
      "source": [
        "import numpy as np, pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import fetch_20newsgroups\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "sns.set() # use seaborn plotting style"
      ],
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "kttKaYKKbAHx",
        "outputId": "8a9c0eab-19e7-4572-de3c-5187d5e48746"
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(df_Corona['content'], df_Corona['adjusted'], random_state=1)\n",
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "from nltk.corpus import stopwords\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "\n",
        "german_stop_words = stopwords.words('german')\n",
        "\n",
        "cv = CountVectorizer(stop_words = german_stop_words) # Now use this in your pipeline\n",
        "\n",
        "X_train_cv = cv.fit_transform(X_train)\n",
        "X_test_cv = cv.transform(X_test)"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "NhgS5Z1IbAHx",
        "outputId": "f79505fb-d548-47a1-dba8-8f14dcc0db09"
      },
      "source": [
        "word_freq_df = pd.DataFrame(X_train_cv.toarray(), columns=cv.get_feature_names())\n",
        "top_words_df = pd.DataFrame(word_freq_df.sum()).sort_values(0, ascending=False)\n",
        "top_words_df[0:100]"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>app</th>\n",
              "      <td>33061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>funktioniert</th>\n",
              "      <td>6602</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>seit</th>\n",
              "      <td>5448</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mehr</th>\n",
              "      <td>5350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gut</th>\n",
              "      <td>4618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>liegt</th>\n",
              "      <td>846</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>besser</th>\n",
              "      <td>845</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gelÃ¶scht</th>\n",
              "      <td>843</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>843</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>kommunikation</th>\n",
              "      <td>833</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows Ã— 1 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                   0\n",
              "app            33061\n",
              "funktioniert    6602\n",
              "seit            5448\n",
              "mehr            5350\n",
              "gut             4618\n",
              "...              ...\n",
              "liegt            846\n",
              "besser           845\n",
              "gelÃ¶scht         843\n",
              "20               843\n",
              "kommunikation    833\n",
              "\n",
              "[100 rows x 1 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VVkKHvmPbAHy"
      },
      "source": [
        "from sklearn.naive_bayes import MultinomialNB\n",
        "naive_bayes = MultinomialNB()\n",
        "naive_bayes.fit(X_train_cv, y_train)\n",
        "predictions = naive_bayes.predict(X_test_cv)"
      ],
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "07JqPPYzbAHy",
        "outputId": "d508c42d-917b-4600-a248-407d2ba317d8"
      },
      "source": [
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, balanced_accuracy_score\n",
        "print('Accuracy score: ', accuracy_score(y_test, predictions))\n",
        "print('Balanced score: ', balanced_accuracy_score(y_test, predictions))"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy score:  0.6946319259142991\n",
            "Accuracy score:  0.6856773276384708\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "dSK6CbAxbAHy",
        "outputId": "3d00582e-365c-4216-9711-d346d4480d0d"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "cm = confusion_matrix(y_test, predictions)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='RdBu', cbar=True, fmt='d')\n",
        "plt.xlabel('true label')\n",
        "plt.ylabel('predicted label')"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(80.90000000000006, 0.5, 'predicted label')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RuBqUkczJYcY"
      },
      "source": [
        "# B. Data Preprocessing BERT"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 311,
          "referenced_widgets": [
            "e3b00c17fed2476e83fed318c901c600",
            "832644e49e054413aa40ced166ab0ece",
            "070876289fd14390b3050a7318a843b6",
            "e0797627b95b4c1a88b36f2cf3110afa",
            "d682d11d3eb2439187d74418427ea0a7",
            "b1797282e82b49bca3ea8bf9104b7d5b",
            "641c675906274c52816f4102340c9eaa",
            "a1959703a5d343768e1a0d766c883023",
            "f0b3344cf2c6463388150ffcb3a81acc",
            "85ae54d4d1964a32bac096bda22dfd2d",
            "a81df7971ba94c7f908332095f0b45ad",
            "eff4265bf39c40e7958550d5dbda5af4",
            "71802be9b04242139576e25d24ed73d9",
            "955b70d5ccf8434b9b9db7a0629701f3",
            "213bff2f7c8b4b96b0351768bed88c63",
            "3e11a3628a704ca79960390013ca356b",
            "58bd7e71115644e48e469e6b574bbf53",
            "b43b973d13184790add90745109f1f95",
            "5cbfc63e59c449f08d2ed1b0a63f3715",
            "f3072d9a3d894807aefcbd787483fce3",
            "365d5f9ec3b94c08a6115c1fe4b95694",
            "5e3749f370054241b3a45606b381ff41",
            "a35cf7b04af84d0cb1db81513bf2e891",
            "cd032b53428f450b8fef02daefb57fcd"
          ]
        },
        "id": "ECfrj8WcXw_4",
        "outputId": "f633eeec-ce78-401b-fb17-d741db9de036"
      },
      "source": [
        "from torch.utils.data import TensorDataset, random_split\n",
        "from torch.utils.data import DataLoader, RandomSampler, SequentialSampler\n",
        "\n",
        "#Loading Multilingual Tokenizer\n",
        "tokenizer_mono = BertTokenizer.from_pretrained('bert-base-german-cased', do_lower_case=True, strip_accents = False)\n",
        "\n",
        "input_ids_mono = []\n",
        "attention_masks_mono = []\n",
        "\n",
        "# For every sentence...\n",
        "for sent in reviews:\n",
        "    # `encode_plus` will:\n",
        "    #   (1) Tokenize the sentence.\n",
        "    #   (2) Prepend the `[CLS]` token to the start.\n",
        "    #   (3) Append the `[SEP]` token to the end.\n",
        "    #   (4) Map tokens to their IDs.\n",
        "    #   (5) Pad or truncate the sentence to `max_length`\n",
        "    #   (6) Create attention masks for [PAD] tokens.\n",
        "    encoded_dict_mono = tokenizer_mono.__call__(\n",
        "                        sent,                      # Sentence to encode.\n",
        "                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n",
        "                        max_length = 256,           # Pad & truncate all sentences.\n",
        "                        pad_to_max_length = True,\n",
        "                        return_tensors = 'pt', \n",
        "                        return_attention_mask=True,\n",
        "                        truncation=True    # Return pytorch tensors.\n",
        "                   )\n",
        "\n",
        "    input_ids_mono.append(encoded_dict_mono['input_ids'])\n",
        "    attention_masks_mono.append(encoded_dict_mono['attention_mask'])\n",
        "\n",
        "# Convert the lists into tensors and combining them into one single Tensordataset\n",
        "input_ids_mono = torch.cat(input_ids_mono, dim=0)\n",
        "attention_masks_mono = torch.cat(attention_masks_mono, dim=0)\n",
        "labels = torch.tensor(stars.values)\n",
        "dataset_mono = TensorDataset(input_ids_mono, attention_masks_mono, labels)\n",
        "\n",
        "# Splitting dataset into test_dataset and train_dataset\n",
        "train_size = int(0.8 * len(dataset_mono))\n",
        "test_size = len(dataset_mono) - train_size\n",
        "train_dataset_mono, test_dataset_mono = random_split(dataset_mono, [train_size, test_size])\n",
        "\n",
        "# Splitting test into test and train Set\n",
        "train_size = int(0.9 * len(train_dataset_mono))\n",
        "val_size = len(train_dataset_mono) - train_size\n",
        "train_dataset_mono, val_dataset_mono = random_split(train_dataset_mono, [train_size, val_size])\n",
        "\n",
        "print('{:>5,} test samples'.format(test_size))\n",
        "print('{:>5,} training samples'.format(train_size))\n",
        "print('{:>5,} validation samples'.format(val_size))\n",
        "\n",
        "#Sending Test, Validation and Train Tensordatasets to Dataloader\n",
        "batch_size = 16\n",
        "train_dataloader_mono = DataLoader(\n",
        "            train_dataset_mono,  \n",
        "            sampler = RandomSampler(train_dataset_mono), \n",
        "            batch_size = batch_size \n",
        "        )\n",
        "validation_dataloader_mono = DataLoader(\n",
        "            val_dataset_mono, \n",
        "            sampler = SequentialSampler(val_dataset_mono),\n",
        "            batch_size = batch_size \n",
        "        )\n",
        "test_dataloader_mono = DataLoader(\n",
        "            test_dataset_mono,\n",
        "            sampler = SequentialSampler(test_dataset_mono), \n",
        "            batch_size = batch_size\n",
        ")\n",
        "\n",
        "print('')\n",
        "print('Done')"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "e3b00c17fed2476e83fed318c901c600",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=254728.0, style=ProgressStyle(descriptiâ€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "f0b3344cf2c6463388150ffcb3a81acc",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=29.0, style=ProgressStyle(description_wâ€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "58bd7e71115644e48e469e6b574bbf53",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=485115.0, style=ProgressStyle(descriptiâ€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/transformers/tokenization_utils_base.py:2079: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).\n",
            "  FutureWarning,\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "10,194 test samples\n",
            "36,694 training samples\n",
            "4,078 validation samples\n",
            "\n",
            "Done\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 311,
          "referenced_widgets": [
            "d220f4b3a69b4de69c342fe521ed8598",
            "a5044cb903f749deae501dbe93ecfcaf",
            "d326afbffae140b6b579fa9e5feaccad",
            "1a67764b35ad4b62990463f291c706bd",
            "1cd961c871a0438fb4998a56710d6444",
            "8b1a8d7355d04b0ab8b574ff287afd03",
            "18aea5e58f8a47e186aed38fdff405f1",
            "405b4ebdfc434a1aa45ac5e5dc3d3ac9",
            "4cede60785e0405cb8135c84616d6aae",
            "696159ebbc524060979af8e2e3212e8c",
            "241cf76d60b04ac0bad85d80f666785a",
            "e70f7702c8884ad5a946229d17b0944f",
            "c9c83d1ceb9a412eb70528b34309ca8a",
            "717762cc701840a69020c13cd7cf8e9e",
            "16ae3b3f70da43858e7a783133f02767",
            "bebe58b26c964ae49ea44f5c0e958e14",
            "fad1dccd3dc74a13a8dd58753b47d73e",
            "b95274570e734afd9c035cc150b0d7bf",
            "2414fd95a2714b638c782ce9e2dab4f0",
            "b0615044a7634920a79cb6d3af1b7436",
            "e917df1d647440759870fa84fe74adcf",
            "330060ee0ac849edbab67ad03232e42e",
            "117f2d2b430944c5a3ec0ed95ad6bd87",
            "5c86ba8f182540b4a52447b3dacac3b1"
          ]
        },
        "id": "_DS-pmEbdL7Z",
        "outputId": "b104621e-f132-46fc-be9e-50b6d559df70"
      },
      "source": [
        "from torch.utils.data import TensorDataset, random_split\n",
        "from torch.utils.data import DataLoader, RandomSampler, SequentialSampler\n",
        "\n",
        "#Loading Multilingual Tokenizer\n",
        "tokenizer_multi = BertTokenizer.from_pretrained('bert-base-multilingual-cased', do_lower_case=True, strip_accents = False)\n",
        "\n",
        "input_ids_multi = []\n",
        "attention_masks_multi = []\n",
        "\n",
        "# For every sentence...\n",
        "for sent in reviews:\n",
        "    # `encode_plus` will:\n",
        "    #   (1) Tokenize the sentence.\n",
        "    #   (2) Prepend the `[CLS]` token to the start.\n",
        "    #   (3) Append the `[SEP]` token to the end.\n",
        "    #   (4) Map tokens to their IDs.\n",
        "    #   (5) Pad or truncate the sentence to `max_length`\n",
        "    #   (6) Create attention masks for [PAD] tokens.\n",
        "    encoded_dict_multi = tokenizer_multi.__call__(\n",
        "                        sent,                      # Sentence to encode.\n",
        "                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n",
        "                        max_length = 256,           # Pad & truncate all sentences.\n",
        "                        pad_to_max_length = True,\n",
        "                        return_tensors = 'pt', \n",
        "                        return_attention_mask=True,\n",
        "                        truncation=True    # Return pytorch tensors.\n",
        "                   )\n",
        "\n",
        "    input_ids_multi.append(encoded_dict_multi['input_ids'])\n",
        "    attention_masks_multi.append(encoded_dict_multi['attention_mask'])\n",
        "\n",
        "# Convert the lists into tensors and combining them into one single Tensordataset\n",
        "input_ids_multi = torch.cat(input_ids_multi, dim=0)\n",
        "attention_masks_multi = torch.cat(attention_masks_multi, dim=0)\n",
        "labels = torch.tensor(stars.values)\n",
        "dataset_multi = TensorDataset(input_ids_multi, attention_masks_multi, labels)\n",
        "\n",
        "# Splitting dataset into test_dataset and train_dataset\n",
        "train_size = int(0.8 * len(dataset_multi))\n",
        "test_size = len(dataset_multi) - train_size\n",
        "train_dataset_multi, test_dataset_multi = random_split(dataset_multi, [train_size, test_size])\n",
        "\n",
        "# Splitting test into test and train Set\n",
        "train_size = int(0.9 * len(train_dataset_multi))\n",
        "val_size = len(train_dataset_multi) - train_size\n",
        "train_dataset_multi, val_dataset_multi = random_split(train_dataset_multi, [train_size, val_size])\n",
        "\n",
        "print('{:>5,} test samples'.format(test_size))\n",
        "print('{:>5,} training samples'.format(train_size))\n",
        "print('{:>5,} validation samples'.format(val_size))\n",
        "\n",
        "#Sending Test, Validation and Train Tensordatasets to Dataloader\n",
        "batch_size = 16\n",
        "train_dataloader_multi = DataLoader(\n",
        "            train_dataset_multi,  \n",
        "            sampler = RandomSampler(train_dataset_multi), \n",
        "            batch_size = batch_size \n",
        "        )\n",
        "validation_dataloader_multi = DataLoader(\n",
        "            val_dataset_multi, \n",
        "            sampler = SequentialSampler(val_dataset_multi),\n",
        "            batch_size = batch_size \n",
        "        )\n",
        "test_dataloader_multi = DataLoader(\n",
        "            test_dataset_multi,\n",
        "            sampler = SequentialSampler(test_dataset_multi), \n",
        "            batch_size = batch_size\n",
        ")\n",
        "\n",
        "print('')\n",
        "print('Done')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "d220f4b3a69b4de69c342fe521ed8598",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=995526.0, style=ProgressStyle(descriptiâ€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "4cede60785e0405cb8135c84616d6aae",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=29.0, style=ProgressStyle(description_wâ€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "fad1dccd3dc74a13a8dd58753b47d73e",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=1961828.0, style=ProgressStyle(descriptâ€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/transformers/tokenization_utils_base.py:2079: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).\n",
            "  FutureWarning,\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "10,194 test samples\n",
            "36,694 training samples\n",
            "4,078 validation samples\n",
            "\n",
            "Done\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fBLyngF0_H6n"
      },
      "source": [
        "## Checking Token Lenght"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tQThUf8fJYcY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "outputId": "8acc33d9-8d14-470d-aedb-b1ac726ba8a3"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "token_lens = []\n",
        "for txt in df_Corona.content:\n",
        "  tokens = tokenizer_mono.encode(txt, max_length=400)\n",
        "  token_lens.append(len(tokens))\n",
        "\n",
        "picture = sns.distplot(token_lens)\n",
        "plt.xlabel('Token count');"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "vv9dp7-1_ABM",
        "outputId": "02869be1-6baa-475c-8da1-8ee19070c212"
      },
      "source": [
        "import collections\n",
        "counter=collections.Counter(token_lens)\n",
        "print(counter)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Counter({4: 1265, 5: 1250, 6: 1210, 7: 1126, 8: 990, 9: 952, 10: 909, 3: 866, 11: 836, 13: 824, 12: 820, 15: 787, 14: 780, 16: 776, 19: 711, 18: 698, 17: 688, 22: 672, 21: 667, 25: 660, 26: 654, 20: 653, 23: 652, 29: 626, 24: 617, 31: 604, 28: 585, 30: 572, 33: 566, 27: 566, 37: 564, 38: 539, 35: 536, 41: 523, 34: 522, 36: 511, 32: 502, 39: 498, 40: 483, 43: 462, 45: 460, 42: 453, 46: 428, 53: 415, 49: 407, 44: 402, 52: 395, 47: 395, 51: 391, 50: 385, 48: 384, 55: 367, 57: 358, 58: 356, 56: 348, 54: 344, 61: 340, 59: 335, 67: 319, 62: 316, 63: 314, 60: 313, 65: 303, 64: 300, 68: 294, 66: 289, 71: 273, 70: 256, 69: 254, 75: 254, 77: 246, 73: 244, 78: 234, 76: 234, 117: 234, 121: 228, 72: 222, 115: 220, 113: 219, 112: 217, 116: 215, 82: 215, 114: 214, 74: 210, 110: 205, 79: 205, 119: 202, 83: 202, 109: 201, 86: 201, 106: 200, 111: 199, 84: 199, 81: 196, 90: 196, 108: 195, 80: 195, 87: 192, 118: 192, 92: 190, 94: 189, 123: 189, 91: 188, 120: 186, 104: 184, 89: 184, 88: 182, 107: 181, 85: 179, 96: 175, 126: 175, 122: 173, 99: 172, 95: 170, 101: 169, 100: 165, 93: 162, 103: 160, 102: 158, 124: 157, 97: 156, 105: 156, 98: 155, 125: 142, 127: 126, 128: 100, 130: 88, 131: 85, 132: 78, 129: 77, 250: 76, 134: 76, 133: 68, 135: 47, 136: 44, 139: 38, 137: 33, 140: 31, 138: 28, 142: 23, 141: 23, 144: 21, 145: 15, 146: 14, 151: 14, 143: 13, 148: 13, 147: 12, 150: 12, 155: 11, 149: 9, 154: 9, 165: 7, 163: 7, 164: 6, 152: 6, 170: 5, 167: 5, 166: 5, 169: 4, 158: 4, 159: 4, 176: 4, 177: 4, 153: 4, 174: 4, 175: 4, 168: 4, 192: 4, 157: 4, 189: 3, 186: 3, 182: 3, 231: 3, 195: 3, 198: 3, 173: 3, 162: 3, 156: 3, 178: 3, 204: 2, 183: 2, 211: 2, 239: 2, 207: 2, 229: 2, 203: 2, 160: 2, 244: 2, 223: 2, 237: 2, 190: 2, 222: 2, 236: 2, 212: 2, 171: 2, 172: 2, 208: 1, 191: 1, 245: 1, 225: 1, 161: 1, 227: 1, 233: 1, 200: 1, 210: 1, 202: 1, 217: 1, 220: 1, 209: 1, 184: 1, 238: 1, 230: 1, 180: 1, 221: 1, 215: 1, 226: 1, 187: 1, 224: 1, 242: 1, 199: 1, 188: 1, 248: 1, 232: 1, 234: 1, 197: 1, 206: 1, 216: 1, 179: 1, 181: 1, 201: 1})\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NQ8-yBc1cr_N"
      },
      "source": [
        "# C. Model 1: Monolingual"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dx-DkwPGA6Z5"
      },
      "source": [
        "### Define Monolingual Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "33e35aa120bc457cb64839b71e1f4aa7",
            "e028799a49e24ef6ad8850504d65a1ed",
            "55076e086dca4349adf89169518f32da",
            "73f19f993ee84b3488dc4904137052fb",
            "239f44ea571244dc89c8a941ce5bdc11",
            "05d949439c23443d9627ea183c6e6d92",
            "616e527baa42421bbe7585edb7009c8b",
            "0e5dcadf25ae4a55a4d2b85500c48d67",
            "6bb2546095574d6f97aa8ff403a25ca5",
            "190c836c7af1444bbda11713544d8542",
            "4a02c3d847f343648c3cda36ce9bfda8",
            "ac57f0fa93ca4e99bd09f15fd828aecf",
            "6b9652df1c704644930d1d31239b5539",
            "1001274e2ac54899ae54f4c427052140",
            "606e5d46052848999243417bd75e72f9",
            "c42b7ca071b94ab2a0d6fbea37a46194"
          ]
        },
        "id": "tz1LxfyZfklk",
        "outputId": "1638c4fd-235e-4c2b-a1c8-4e8c32cc2cf6"
      },
      "source": [
        "from transformers import BertForSequenceClassification, AdamW, BertConfig\n",
        "\n",
        "# Load BertForSequenceClassification, the pretrained BERT model with a single \n",
        "# linear classification layer on top. \n",
        "model_mono = BertForSequenceClassification.from_pretrained(\n",
        "    \"bert-base-german-cased\", # Use the 12-layer BERT model, with an uncased vocab.\n",
        "    num_labels = 5, # The number of output labels--2 for binary classification.\n",
        "                    # You can increase this for multi-class tasks.   \n",
        "    output_attentions = False, # Whether the model returns attentions weights.\n",
        "    output_hidden_states = False, # Whether the model returns all hidden-states.\n",
        ")\n",
        "\n",
        "print('')\n",
        "\n",
        "model_mono.cuda()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "33e35aa120bc457cb64839b71e1f4aa7",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=433.0, style=ProgressStyle(description_â€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "6bb2546095574d6f97aa8ff403a25ca5",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=438869143.0, style=ProgressStyle(descriâ€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "Some weights of the model checkpoint at bert-base-german-cased were not used when initializing BertForSequenceClassification: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.seq_relationship.weight', 'cls.seq_relationship.bias']\n",
            "- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n",
            "- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n",
            "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-german-cased and are newly initialized: ['classifier.weight', 'classifier.bias']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "BertForSequenceClassification(\n",
              "  (bert): BertModel(\n",
              "    (embeddings): BertEmbeddings(\n",
              "      (word_embeddings): Embedding(30000, 768, padding_idx=0)\n",
              "      (position_embeddings): Embedding(512, 768)\n",
              "      (token_type_embeddings): Embedding(2, 768)\n",
              "      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "      (dropout): Dropout(p=0.1, inplace=False)\n",
              "    )\n",
              "    (encoder): BertEncoder(\n",
              "      (layer): ModuleList(\n",
              "        (0): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (1): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (2): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (3): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (4): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (5): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (6): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (7): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (8): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (9): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (10): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (11): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "    (pooler): BertPooler(\n",
              "      (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "      (activation): Tanh()\n",
              "    )\n",
              "  )\n",
              "  (dropout): Dropout(p=0.1, inplace=False)\n",
              "  (classifier): Linear(in_features=768, out_features=5, bias=True)\n",
              ")"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cpwhee_31Av2"
      },
      "source": [
        "from transformers import get_linear_schedule_with_warmup\n",
        "\n",
        "# Number of training epochs. The BERT authors recommend between 2 and 4. \n",
        "# We chose to run for 4, but we'll see later that this may be over-fitting the\n",
        "# training data.\n",
        "epochs = 2\n",
        "\n",
        "# Total number of training steps is [number of batches] x [number of epochs]. \n",
        "# (Note that this is not the same as the number of training samples).\n",
        "total_steps = len(train_dataloader_mono) * epochs\n",
        "\n",
        "optimizer = AdamW(model_mono.parameters(),\n",
        "                  lr = 2e-5, # args.learning_rate - default is 5e-5, our notebook had 2e-5\n",
        "                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.\n",
        "                )\n",
        "\n",
        "# Create the learning rate scheduler.\n",
        "scheduler = get_linear_schedule_with_warmup(optimizer, \n",
        "                                            num_warmup_steps = 0, # Default value in run_glue.py\n",
        "                                            num_training_steps = total_steps)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "icWD3wMm1ecO"
      },
      "source": [
        "##Training"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dxN0_O6l1eIx"
      },
      "source": [
        "# Function to calculate the accuracy of our predictions vs labels\n",
        "def flat_accuracy(preds, labels):\n",
        "    pred_flat = np.argmax(preds, axis=1).flatten()\n",
        "    labels_flat = labels.flatten()\n",
        "    return np.sum(pred_flat == labels_flat) / len(labels_flat)\n",
        "\n",
        "# Helper function for formatting elapsed times as hh:mm:ss\n",
        "\n",
        "import time\n",
        "import datetime\n",
        "\n",
        "def format_time(elapsed):\n",
        "    '''\n",
        "    Takes a time in seconds and returns a string hh:mm:ss\n",
        "    '''\n",
        "    # Round to the nearest second.\n",
        "    elapsed_rounded = int(round((elapsed)))\n",
        "    \n",
        "    # Format as hh:mm:ss\n",
        "    return str(datetime.timedelta(seconds=elapsed_rounded))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-peSOh1r13mD",
        "outputId": "a2d07cb6-ec71-478b-ac7e-5132562ec963"
      },
      "source": [
        "import random\n",
        "import numpy as np\n",
        "\n",
        "# This training code is based on the `run_glue.py` script here:\n",
        "# https://github.com/huggingface/transformers/blob/5bfcd0485ece086ebcbed2d008813037968a9e58/examples/run_glue.py#L128\n",
        "\n",
        "# Set the seed value all over the place to make this reproducible.\n",
        "seed_val = 42\n",
        "\n",
        "random.seed(seed_val)\n",
        "np.random.seed(seed_val)\n",
        "torch.manual_seed(seed_val)\n",
        "torch.cuda.manual_seed_all(seed_val)\n",
        "\n",
        "# We'll store a number of quantities such as training and validation loss, \n",
        "# validation accuracy, and timings.\n",
        "training_stats_mono = []\n",
        "\n",
        "# Measure the total training time for the whole run.\n",
        "total_t0 = time.time()\n",
        "\n",
        "# For each epoch...\n",
        "for epoch_i in range(0, epochs):\n",
        "    \n",
        "    # ========================================\n",
        "    #               Training\n",
        "    # ========================================\n",
        "    \n",
        "    # Perform one full pass over the training set.\n",
        "\n",
        "    print(\"\")\n",
        "    print('======== Epoch {:} / {:} ========'.format(epoch_i + 1, epochs))\n",
        "    print('Training...')\n",
        "\n",
        "    # Measure how long the training epoch takes.\n",
        "    t0 = time.time()\n",
        "\n",
        "    # Reset the total loss for this epoch.\n",
        "    total_train_loss = 0\n",
        "\n",
        "    # Put the model into training mode. Don't be mislead--the call to \n",
        "    # `train` just changes the *mode*, it doesn't *perform* the training.\n",
        "    # `dropout` and `batchnorm` layers behave differently during training\n",
        "    # vs. test (source: https://stackoverflow.com/questions/51433378/what-does-model-train-do-in-pytorch)\n",
        "    model_mono.train()\n",
        "\n",
        "    # For each batch of training data...\n",
        "    for step, batch in enumerate(train_dataloader_mono):\n",
        "\n",
        "        # Progress update every 40 batches.\n",
        "        if step % 40 == 0 and not step == 0:\n",
        "            # Calculate elapsed time in minutes.\n",
        "            elapsed = format_time(time.time() - t0)\n",
        "            \n",
        "            # Report progress.\n",
        "            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader_mono), elapsed))\n",
        "\n",
        "        # Unpack this training batch from our dataloader. \n",
        "        #\n",
        "        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n",
        "        # `to` method.\n",
        "        #\n",
        "        # `batch` contains three pytorch tensors:\n",
        "        #   [0]: input ids \n",
        "        #   [1]: attention masks\n",
        "        #   [2]: labels \n",
        "        b_input_ids = batch[0].to(device)\n",
        "        b_input_mask = batch[1].to(device)\n",
        "        b_labels = batch[2].to(device)\n",
        "\n",
        "        # Always clear any previously calculated gradients before performing a\n",
        "        # backward pass. PyTorch doesn't do this automatically because \n",
        "        # accumulating the gradients is \"convenient while training RNNs\". \n",
        "        # (source: https://stackoverflow.com/questions/48001598/why-do-we-need-to-call-zero-grad-in-pytorch)\n",
        "        model_mono.zero_grad()        \n",
        "\n",
        "        # Perform a forward pass (evaluate the model on this training batch).\n",
        "        # In PyTorch, calling `model` will in turn call the model's `forward` \n",
        "        # function and pass down the arguments. The `forward` function is \n",
        "        # documented here: \n",
        "        # https://huggingface.co/transformers/model_doc/bert.html#bertforsequenceclassification\n",
        "        # The results are returned in a results object, documented here:\n",
        "        # https://huggingface.co/transformers/main_classes/output.html#transformers.modeling_outputs.SequenceClassifierOutput\n",
        "        # Specifically, we'll get the loss (because we provided labels) and the\n",
        "        # \"logits\"--the model outputs prior to activation.\n",
        "        result = model_mono(b_input_ids, \n",
        "                       token_type_ids=None, \n",
        "                       attention_mask=b_input_mask, \n",
        "                       labels=b_labels,\n",
        "                       return_dict=True)\n",
        "\n",
        "        loss = result.loss\n",
        "        logits = result.logits\n",
        "\n",
        "        # Accumulate the training loss over all of the batches so that we can\n",
        "        # calculate the average loss at the end. `loss` is a Tensor containing a\n",
        "        # single value; the `.item()` function just returns the Python value \n",
        "        # from the tensor.\n",
        "        total_train_loss += loss.item()\n",
        "\n",
        "        # Perform a backward pass to calculate the gradients.\n",
        "        loss.backward()\n",
        "\n",
        "        # Clip the norm of the gradients to 1.0.\n",
        "        # This is to help prevent the \"exploding gradients\" problem.\n",
        "        torch.nn.utils.clip_grad_norm_(model_mono.parameters(), 1.0)\n",
        "\n",
        "        # Update parameters and take a step using the computed gradient.\n",
        "        # The optimizer dictates the \"update rule\"--how the parameters are\n",
        "        # modified based on their gradients, the learning rate, etc.\n",
        "        optimizer.step()\n",
        "\n",
        "        # Update the learning rate.\n",
        "        scheduler.step()\n",
        "\n",
        "    # Calculate the average loss over all of the batches.\n",
        "    avg_train_loss = total_train_loss / len(train_dataloader_mono)            \n",
        "    \n",
        "    # Measure how long this epoch took.\n",
        "    training_time = format_time(time.time() - t0)\n",
        "\n",
        "    print(\"\")\n",
        "    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n",
        "    print(\"  Training epcoh took: {:}\".format(training_time))\n",
        "        \n",
        "    # ========================================\n",
        "    #               Validation\n",
        "    # ========================================\n",
        "    # After the completion of each training epoch, measure our performance on\n",
        "    # our validation set.\n",
        "\n",
        "    print(\"\")\n",
        "    print(\"Running Validation...\")\n",
        "\n",
        "    t0 = time.time()\n",
        "\n",
        "    # Put the model in evaluation mode--the dropout layers behave differently\n",
        "    # during evaluation.\n",
        "    model_mono.eval()\n",
        "\n",
        "    # Tracking variables \n",
        "    total_eval_accuracy = 0\n",
        "    total_eval_loss = 0\n",
        "    nb_eval_steps = 0\n",
        "\n",
        "    # Evaluate data for one epoch\n",
        "    for batch in validation_dataloader_mono:\n",
        "        \n",
        "        # Unpack this training batch from our dataloader. \n",
        "        #\n",
        "        # As we unpack the batch, we'll also copy each tensor to the GPU using \n",
        "        # the `to` method.\n",
        "        #\n",
        "        # `batch` contains three pytorch tensors:\n",
        "        #   [0]: input ids \n",
        "        #   [1]: attention masks\n",
        "        #   [2]: labels \n",
        "        b_input_ids = batch[0].to(device)\n",
        "        b_input_mask = batch[1].to(device)\n",
        "        b_labels = batch[2].to(device)\n",
        "        \n",
        "        # Tell pytorch not to bother with constructing the compute graph during\n",
        "        # the forward pass, since this is only needed for backprop (training).\n",
        "        with torch.no_grad():        \n",
        "\n",
        "            # Forward pass, calculate logit predictions.\n",
        "            # token_type_ids is the same as the \"segment ids\", which \n",
        "            # differentiates sentence 1 and 2 in 2-sentence tasks.\n",
        "            result = model_mono(b_input_ids, \n",
        "                           token_type_ids=None, \n",
        "                           attention_mask=b_input_mask,\n",
        "                           labels=b_labels,\n",
        "                           return_dict=True)\n",
        "\n",
        "        # Get the loss and \"logits\" output by the model. The \"logits\" are the \n",
        "        # output values prior to applying an activation function like the \n",
        "        # softmax.\n",
        "        loss = result.loss\n",
        "        logits = result.logits\n",
        "            \n",
        "        # Accumulate the validation loss.\n",
        "        total_eval_loss += loss.item()\n",
        "\n",
        "        # Move logits and labels to CPU\n",
        "        logits = logits.detach().cpu().numpy()\n",
        "        label_ids = b_labels.to('cpu').numpy()\n",
        "\n",
        "        # Calculate the accuracy for this batch of test sentences, and\n",
        "        # accumulate it over all batches.\n",
        "        total_eval_accuracy += flat_accuracy(logits, label_ids)\n",
        "        \n",
        "\n",
        "    # Report the final accuracy for this validation run.\n",
        "    avg_val_accuracy = total_eval_accuracy / len(validation_dataloader_mono)\n",
        "    print(\"  Accuracy: {0:.2f}\".format(avg_val_accuracy))\n",
        "\n",
        "    # Calculate the average loss over all of the batches.\n",
        "    avg_val_loss = total_eval_loss / len(validation_dataloader_mono)\n",
        "    \n",
        "    # Measure how long the validation run took.\n",
        "    validation_time = format_time(time.time() - t0)\n",
        "    \n",
        "    print(\"  Validation Loss: {0:.2f}\".format(avg_val_loss))\n",
        "    print(\"  Validation took: {:}\".format(validation_time))\n",
        "\n",
        "    # Record all statistics from this epoch.\n",
        "    training_stats_mono.append(\n",
        "        {\n",
        "            'epoch': epoch_i + 1,\n",
        "            'Training Loss': avg_train_loss,\n",
        "            'Valid. Loss': avg_val_loss,\n",
        "            'Valid. Accur.': avg_val_accuracy,\n",
        "            'Training Time': training_time,\n",
        "            'Validation Time': validation_time\n",
        "        }\n",
        "    )\n",
        "\n",
        "print(\"\")\n",
        "print(\"Training complete!\")\n",
        "\n",
        "print(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "======== Epoch 1 / 2 ========\n",
            "Training...\n",
            "  Batch    40  of  2,294.    Elapsed: 0:00:20.\n",
            "  Batch    80  of  2,294.    Elapsed: 0:00:40.\n",
            "  Batch   120  of  2,294.    Elapsed: 0:01:00.\n",
            "  Batch   160  of  2,294.    Elapsed: 0:01:21.\n",
            "  Batch   200  of  2,294.    Elapsed: 0:01:41.\n",
            "  Batch   240  of  2,294.    Elapsed: 0:02:01.\n",
            "  Batch   280  of  2,294.    Elapsed: 0:02:21.\n",
            "  Batch   320  of  2,294.    Elapsed: 0:02:41.\n",
            "  Batch   360  of  2,294.    Elapsed: 0:03:01.\n",
            "  Batch   400  of  2,294.    Elapsed: 0:03:21.\n",
            "  Batch   440  of  2,294.    Elapsed: 0:03:41.\n",
            "  Batch   480  of  2,294.    Elapsed: 0:04:01.\n",
            "  Batch   520  of  2,294.    Elapsed: 0:04:21.\n",
            "  Batch   560  of  2,294.    Elapsed: 0:04:41.\n",
            "  Batch   600  of  2,294.    Elapsed: 0:05:01.\n",
            "  Batch   640  of  2,294.    Elapsed: 0:05:21.\n",
            "  Batch   680  of  2,294.    Elapsed: 0:05:41.\n",
            "  Batch   720  of  2,294.    Elapsed: 0:06:02.\n",
            "  Batch   760  of  2,294.    Elapsed: 0:06:22.\n",
            "  Batch   800  of  2,294.    Elapsed: 0:06:42.\n",
            "  Batch   840  of  2,294.    Elapsed: 0:07:02.\n",
            "  Batch   880  of  2,294.    Elapsed: 0:07:22.\n",
            "  Batch   920  of  2,294.    Elapsed: 0:07:42.\n",
            "  Batch   960  of  2,294.    Elapsed: 0:08:02.\n",
            "  Batch 1,000  of  2,294.    Elapsed: 0:08:22.\n",
            "  Batch 1,040  of  2,294.    Elapsed: 0:08:42.\n",
            "  Batch 1,080  of  2,294.    Elapsed: 0:09:02.\n",
            "  Batch 1,120  of  2,294.    Elapsed: 0:09:22.\n",
            "  Batch 1,160  of  2,294.    Elapsed: 0:09:42.\n",
            "  Batch 1,200  of  2,294.    Elapsed: 0:10:03.\n",
            "  Batch 1,240  of  2,294.    Elapsed: 0:10:23.\n",
            "  Batch 1,280  of  2,294.    Elapsed: 0:10:43.\n",
            "  Batch 1,320  of  2,294.    Elapsed: 0:11:03.\n",
            "  Batch 1,360  of  2,294.    Elapsed: 0:11:23.\n",
            "  Batch 1,400  of  2,294.    Elapsed: 0:11:43.\n",
            "  Batch 1,440  of  2,294.    Elapsed: 0:12:03.\n",
            "  Batch 1,480  of  2,294.    Elapsed: 0:12:23.\n",
            "  Batch 1,520  of  2,294.    Elapsed: 0:12:43.\n",
            "  Batch 1,560  of  2,294.    Elapsed: 0:13:03.\n",
            "  Batch 1,600  of  2,294.    Elapsed: 0:13:23.\n",
            "  Batch 1,640  of  2,294.    Elapsed: 0:13:44.\n",
            "  Batch 1,680  of  2,294.    Elapsed: 0:14:04.\n",
            "  Batch 1,720  of  2,294.    Elapsed: 0:14:24.\n",
            "  Batch 1,760  of  2,294.    Elapsed: 0:14:44.\n",
            "  Batch 1,800  of  2,294.    Elapsed: 0:15:04.\n",
            "  Batch 1,840  of  2,294.    Elapsed: 0:15:24.\n",
            "  Batch 1,880  of  2,294.    Elapsed: 0:15:44.\n",
            "  Batch 1,920  of  2,294.    Elapsed: 0:16:04.\n",
            "  Batch 1,960  of  2,294.    Elapsed: 0:16:24.\n",
            "  Batch 2,000  of  2,294.    Elapsed: 0:16:44.\n",
            "  Batch 2,040  of  2,294.    Elapsed: 0:17:04.\n",
            "  Batch 2,080  of  2,294.    Elapsed: 0:17:24.\n",
            "  Batch 2,120  of  2,294.    Elapsed: 0:17:45.\n",
            "  Batch 2,160  of  2,294.    Elapsed: 0:18:05.\n",
            "  Batch 2,200  of  2,294.    Elapsed: 0:18:25.\n",
            "  Batch 2,240  of  2,294.    Elapsed: 0:18:45.\n",
            "  Batch 2,280  of  2,294.    Elapsed: 0:19:05.\n",
            "\n",
            "  Average training loss: 0.91\n",
            "  Training epcoh took: 0:19:12\n",
            "\n",
            "Running Validation...\n",
            "  Accuracy: 0.69\n",
            "  Validation Loss: 0.81\n",
            "  Validation took: 0:00:38\n",
            "\n",
            "======== Epoch 2 / 2 ========\n",
            "Training...\n",
            "  Batch    40  of  2,294.    Elapsed: 0:00:20.\n",
            "  Batch    80  of  2,294.    Elapsed: 0:00:40.\n",
            "  Batch   120  of  2,294.    Elapsed: 0:01:00.\n",
            "  Batch   160  of  2,294.    Elapsed: 0:01:21.\n",
            "  Batch   200  of  2,294.    Elapsed: 0:01:41.\n",
            "  Batch   240  of  2,294.    Elapsed: 0:02:01.\n",
            "  Batch   280  of  2,294.    Elapsed: 0:02:21.\n",
            "  Batch   320  of  2,294.    Elapsed: 0:02:41.\n",
            "  Batch   360  of  2,294.    Elapsed: 0:03:01.\n",
            "  Batch   400  of  2,294.    Elapsed: 0:03:21.\n",
            "  Batch   440  of  2,294.    Elapsed: 0:03:42.\n",
            "  Batch   480  of  2,294.    Elapsed: 0:04:02.\n",
            "  Batch   520  of  2,294.    Elapsed: 0:04:22.\n",
            "  Batch   560  of  2,294.    Elapsed: 0:04:42.\n",
            "  Batch   600  of  2,294.    Elapsed: 0:05:02.\n",
            "  Batch   640  of  2,294.    Elapsed: 0:05:22.\n",
            "  Batch   680  of  2,294.    Elapsed: 0:05:42.\n",
            "  Batch   720  of  2,294.    Elapsed: 0:06:02.\n",
            "  Batch   760  of  2,294.    Elapsed: 0:06:22.\n",
            "  Batch   800  of  2,294.    Elapsed: 0:06:42.\n",
            "  Batch   840  of  2,294.    Elapsed: 0:07:02.\n",
            "  Batch   880  of  2,294.    Elapsed: 0:07:22.\n",
            "  Batch   920  of  2,294.    Elapsed: 0:07:42.\n",
            "  Batch   960  of  2,294.    Elapsed: 0:08:02.\n",
            "  Batch 1,000  of  2,294.    Elapsed: 0:08:23.\n",
            "  Batch 1,040  of  2,294.    Elapsed: 0:08:43.\n",
            "  Batch 1,080  of  2,294.    Elapsed: 0:09:03.\n",
            "  Batch 1,120  of  2,294.    Elapsed: 0:09:23.\n",
            "  Batch 1,160  of  2,294.    Elapsed: 0:09:43.\n",
            "  Batch 1,200  of  2,294.    Elapsed: 0:10:03.\n",
            "  Batch 1,240  of  2,294.    Elapsed: 0:10:23.\n",
            "  Batch 1,280  of  2,294.    Elapsed: 0:10:44.\n",
            "  Batch 1,320  of  2,294.    Elapsed: 0:11:04.\n",
            "  Batch 1,360  of  2,294.    Elapsed: 0:11:24.\n",
            "  Batch 1,400  of  2,294.    Elapsed: 0:11:45.\n",
            "  Batch 1,440  of  2,294.    Elapsed: 0:12:05.\n",
            "  Batch 1,480  of  2,294.    Elapsed: 0:12:25.\n",
            "  Batch 1,520  of  2,294.    Elapsed: 0:12:46.\n",
            "  Batch 1,560  of  2,294.    Elapsed: 0:13:06.\n",
            "  Batch 1,600  of  2,294.    Elapsed: 0:13:26.\n",
            "  Batch 1,640  of  2,294.    Elapsed: 0:13:46.\n",
            "  Batch 1,680  of  2,294.    Elapsed: 0:14:07.\n",
            "  Batch 1,720  of  2,294.    Elapsed: 0:14:27.\n",
            "  Batch 1,760  of  2,294.    Elapsed: 0:14:47.\n",
            "  Batch 1,800  of  2,294.    Elapsed: 0:15:08.\n",
            "  Batch 1,840  of  2,294.    Elapsed: 0:15:28.\n",
            "  Batch 1,880  of  2,294.    Elapsed: 0:15:48.\n",
            "  Batch 1,920  of  2,294.    Elapsed: 0:16:09.\n",
            "  Batch 1,960  of  2,294.    Elapsed: 0:16:29.\n",
            "  Batch 2,000  of  2,294.    Elapsed: 0:16:49.\n",
            "  Batch 2,040  of  2,294.    Elapsed: 0:17:10.\n",
            "  Batch 2,080  of  2,294.    Elapsed: 0:17:30.\n",
            "  Batch 2,120  of  2,294.    Elapsed: 0:17:50.\n",
            "  Batch 2,160  of  2,294.    Elapsed: 0:18:10.\n",
            "  Batch 2,200  of  2,294.    Elapsed: 0:18:31.\n",
            "  Batch 2,240  of  2,294.    Elapsed: 0:18:51.\n",
            "  Batch 2,280  of  2,294.    Elapsed: 0:19:11.\n",
            "\n",
            "  Average training loss: 0.72\n",
            "  Training epcoh took: 0:19:18\n",
            "\n",
            "Running Validation...\n",
            "  Accuracy: 0.69\n",
            "  Validation Loss: 0.82\n",
            "  Validation took: 0:00:39\n",
            "\n",
            "Training complete!\n",
            "Total training took 0:39:47 (h:mm:ss)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Id7DENf0Gftl"
      },
      "source": [
        "## Visualizing and Analysing Results"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 137
        },
        "id": "8gaEML-7DLXj",
        "outputId": "91f1af58-d7ae-4603-bfc4-ab7b5f31cf93"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Display floats with two decimal places.\n",
        "pd.set_option('precision', 2)\n",
        "\n",
        "# Create a DataFrame from our training statistics.\n",
        "df_stats_mono = pd.DataFrame(data=training_stats_mono)\n",
        "\n",
        "# Use the 'epoch' as the row index.\n",
        "df_stats_mono = df_stats_mono.set_index('epoch')\n",
        "\n",
        "# A hack to force the column headers to wrap.\n",
        "#df = df.style.set_table_styles([dict(selector=\"th\",props=[('max-width', '70px')])])\n",
        "\n",
        "# Display the table.\n",
        "df_stats_mono"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Training Loss</th>\n",
              "      <th>Valid. Loss</th>\n",
              "      <th>Valid. Accur.</th>\n",
              "      <th>Training Time</th>\n",
              "      <th>Validation Time</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>epoch</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.91</td>\n",
              "      <td>0.81</td>\n",
              "      <td>0.69</td>\n",
              "      <td>0:19:12</td>\n",
              "      <td>0:00:38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.72</td>\n",
              "      <td>0.82</td>\n",
              "      <td>0.69</td>\n",
              "      <td>0:19:18</td>\n",
              "      <td>0:00:39</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Training Loss  Valid. Loss  Valid. Accur. Training Time Validation Time\n",
              "epoch                                                                         \n",
              "1               0.91         0.81           0.69       0:19:12         0:00:38\n",
              "2               0.72         0.82           0.69       0:19:18         0:00:39"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "jwI75lODDYTe",
        "outputId": "d1ca0d8f-f19b-49bb-dd29-45ebe6ad2680"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "% matplotlib inline\n",
        "\n",
        "import seaborn as sns\n",
        "\n",
        "# Use plot styling from seaborn.\n",
        "sns.set(style='darkgrid')\n",
        "\n",
        "# Increase the plot size and font size.\n",
        "sns.set(font_scale=1.5)\n",
        "plt.rcParams[\"figure.figsize\"] = (12,6)\n",
        "\n",
        "# Plot the learning curve.\n",
        "plt.plot(df_stats_mono['Training Loss'], 'b-o', label=\"Training\")\n",
        "plt.plot(df_stats_mono['Valid. Loss'], 'g-o', label=\"Validation\")\n",
        "\n",
        "# Label the plot.\n",
        "plt.title(\"Training & Validation Loss\")\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.xticks([1, 2])\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RuuzytURc1aI"
      },
      "source": [
        "## Testing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mTMlE5Ysc23M"
      },
      "source": [
        "test_dataset_mono\n",
        "prediction_sampler_mono = SequentialSampler(test_dataset_mono)\n",
        "prediction_dataloader_mono = DataLoader(test_dataset_mono, sampler=prediction_sampler_mono, batch_size=batch_size)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yQduPBMqeDsa",
        "outputId": "eafd4f52-b386-4b38-f8d9-7021ffd822b6"
      },
      "source": [
        "# Prediction on test set\n",
        "\n",
        "print('Predicting labels for {:,} test sentences...'.format(len(test_dataset_mono)))\n",
        "\n",
        "# Put model in evaluation mode\n",
        "model_mono.eval()\n",
        "\n",
        "# Tracking variables \n",
        "predictions_mono , true_labels_mono = [], []\n",
        "\n",
        "# Predict \n",
        "for batch in test_dataloader_mono:\n",
        "  # Add batch to GPU\n",
        "  batch = tuple(t.to(device) for t in batch)\n",
        "  \n",
        "  # Unpack the inputs from our dataloader\n",
        "  b_input_ids, b_input_mask, b_labels = batch\n",
        "  \n",
        "  # Telling the model not to compute or store gradients, saving memory and \n",
        "  # speeding up prediction\n",
        "  with torch.no_grad():\n",
        "      # Forward pass, calculate logit predictions\n",
        "      outputs = model_mono(b_input_ids, token_type_ids=None, \n",
        "                      attention_mask=b_input_mask)\n",
        "\n",
        "  logits = outputs[0]\n",
        "\n",
        "  # Move logits and labels to CPU\n",
        "  logits = logits.detach().cpu().numpy()\n",
        "  label_ids = b_labels.to('cpu').numpy()\n",
        "  \n",
        "  # Store predictions and true labels\n",
        "  predictions_mono.append(logits)\n",
        "  true_labels_mono.append(label_ids)\n",
        "\n",
        "print('    DONE.')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Predicting labels for 10,194 test sentences...\n",
            "    DONE.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fXPQOg0gf1HK",
        "outputId": "709347c9-c5b6-4292-cbb9-5e41c364eb0d"
      },
      "source": [
        "print(true_labels_mono[0])\n",
        "print(predictions_mono[0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0 4 2 4 4 0 4 3 1 3 3 0 4 1 0 0]\n",
            "[[ 4.589082    0.75394714 -1.3093244  -2.542929   -2.0926423 ]\n",
            " [-2.0657063  -2.295465   -1.2962898   1.324208    5.005747  ]\n",
            " [-2.2580905  -1.1252809   1.1244539   1.7449403   0.5870063 ]\n",
            " [-1.8664746  -2.3870509  -1.1067454   1.6400917   5.590362  ]\n",
            " [-1.5158584  -2.4167655  -1.3080684   1.4206082   5.2224417 ]\n",
            " [ 0.11149705 -1.398812   -0.4551178   0.23599663  0.96156496]\n",
            " [-2.2421174  -2.343614   -0.9670802   1.7508303   5.406732  ]\n",
            " [-1.8739299  -1.7719563  -0.22684139  1.7413712   2.2580438 ]\n",
            " [ 0.9778629   0.7779645   0.34595692 -1.2309864  -1.1917466 ]\n",
            " [ 0.41991377 -0.67942727 -0.18491335 -0.11120989  0.10514011]\n",
            " [-1.8470767  -0.95044965  1.127133    1.5476288   0.1707204 ]\n",
            " [-0.5807849   0.55094635  1.4314581   0.14411959 -1.5270978 ]\n",
            " [-2.497148   -0.8645059   0.8291114   2.1856022   0.8814925 ]\n",
            " [ 0.8539855   0.25196928  0.14745821 -0.40032965 -1.4642509 ]\n",
            " [ 3.1565897   1.6185471   0.03378526 -2.2092361  -3.0471542 ]\n",
            " [ 4.6159716   0.34175357 -1.5957056  -2.3693993  -1.7307565 ]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zrdAgnx2d3Ry",
        "outputId": "4c42d90b-16a1-4199-e602-ca8d44274976"
      },
      "source": [
        "from sklearn.metrics import matthews_corrcoef, balanced_accuracy_score\n",
        "import numpy as np\n",
        "\n",
        "balanced_acc_set_mono = []\n",
        "global_prediction_mono = []\n",
        "\n",
        "# Evaluate each test batch using Matthew's correlation coefficient\n",
        "print('Estimating Balanced_accuracy_score for each batch...')\n",
        "\n",
        "# For each input batch...\n",
        "for i in range(len(true_labels_mono)):\n",
        "  \n",
        "  # The predictions for this batch are a 5-column ndarray (from \"0\" (1 Star) \n",
        "  # to \"4\" (5 Stars)). Pick the label with the highest value and turn this\n",
        "  # in to a list.\n",
        "  pred_labels_i = np.argmax(predictions_mono[i], axis=1).flatten()\n",
        "  global_prediction_mono.append(pred_labels_i)\n",
        "  \n",
        "  # Calculate and store the coef for this batch.  \n",
        "  balanced_acc = balanced_accuracy_score(true_labels_mono[i], pred_labels_i)                \n",
        "  balanced_acc_set_mono.append(balanced_acc)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Estimating Balanced_accuracy_score for each batch...\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1859: UserWarning: y_pred contains classes not in y_true\n",
            "  warnings.warn('y_pred contains classes not in y_true')\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BXxruo4bDY71"
      },
      "source": [
        "flat_list = [item for sublist in global_prediction_mono for item in sublist]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "wLIMuGbgCGGu",
        "outputId": "5bd07a29-f9b2-4b0b-e962-50985356ba60"
      },
      "source": [
        "# Distribution of Predictions\n",
        "plt.hist(flat_list)\n",
        "plt.title('Prediction Labels')\n",
        "plt.ylabel('Predictions')\n",
        "plt.xlabel('Labels')\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "10_FdWwMg34R",
        "outputId": "2438d389-7f3f-4581-fcf7-8f5e0797c383"
      },
      "source": [
        "# Combine the results across all batches. \n",
        "flat_predictions = np.concatenate(predictions_mono, axis=0)\n",
        "\n",
        "# For each sample, pick the label (0 to 4) with the higher score.\n",
        "flat_predictions = np.argmax(flat_predictions, axis=1).flatten()\n",
        "\n",
        "# Combine the correct labels for each batch into a single list.\n",
        "flat_true_labels_mono = np.concatenate(true_labels_mono, axis=0)\n",
        "\n",
        "# Calculate the MCC\n",
        "acc = balanced_accuracy_score(flat_true_labels_mono, flat_predictions)\n",
        "acc_absolut = accuracy_score(flat_true_labels_mono, flat_predictions)\n",
        "\n",
        "print('Total balanced_acc_set: %.3f' % acc)\n",
        "print('Total acc_set: %.3f' % acc_absolut)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total balanced_acc_set: 0.490\n",
            "Total acc_set: 0.682\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "9Wu-oesRJ5C-",
        "outputId": "7705460e-2780-4155-fea3-3f28185e39be"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "cm = confusion_matrix(flat_predictions, flat_true_labels_mono)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='RdBu', cbar=True, fmt='d')\n",
        "plt.xlabel('true label')\n",
        "plt.ylabel('predicted label')\n",
        "\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
        "print('Accuracy score: ', accuracy_score(flat_predictions, flat_true_labels_mono))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy score:  0.6823621738277418\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "luqdQk3W55mG",
        "outputId": "36ee4136-89a1-4238-db7f-a59fdac12109"
      },
      "source": [
        "columns = [\"1\", \"2\", \"3\",\"4\",\"5\"]\n",
        "rows = [\"1\", \"2\", \"3\",\"4\",\"5\"]\n",
        "cm_mono_5 = pd.DataFrame(data=cm, index=rows, columns=columns)\n",
        "print(cm_mono_5)\n",
        "cm_mono_5.to_csv('confusion_matrix_mono_5.csv')\n",
        "!cp confusion_matrix_mono_5.csv \"drive/My Drive/Colab_Machine_Learning/Gespeicherte Modelle/Confusion_Matrices/\""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      1    2    3    4     5\n",
            "1  2995  582  370  119   132\n",
            "2   147  118   90   21     3\n",
            "3   248  208  378  190    84\n",
            "4    36   42  173  232   165\n",
            "5   138   50  121  319  3233\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rtSGw5N1IfBG"
      },
      "source": [
        "## Saving Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5TklxQlrIfBG",
        "outputId": "6badcca3-102e-48df-f456-1aa624233418"
      },
      "source": [
        "import os\n",
        "\n",
        "# Saving best-practices: if you use defaults names for the model, you can reload it using from_pretrained()\n",
        "\n",
        "output_dir = './model_save_monolingual_5/'\n",
        "\n",
        "# Create output directory if needed\n",
        "if not os.path.exists(output_dir):\n",
        "    os.makedirs(output_dir)\n",
        "\n",
        "print(\"Saving model to %s\" % output_dir)\n",
        "\n",
        "# Save a trained model, configuration and tokenizer using `save_pretrained()`.\n",
        "# They can then be reloaded using `from_pretrained()`\n",
        "model_to_save = model_mono.module if hasattr(model_mono, 'module') else model_mono  # Take care of distributed/parallel training\n",
        "model_to_save.save_pretrained(output_dir)\n",
        "tokenizer_mono.save_pretrained(output_dir)\n",
        "\n",
        "# Good practice: save your training arguments together with the trained model\n",
        "# torch.save(args, os.path.join(output_dir, 'training_args.bin'))\n",
        "\n",
        "!cp -r ./model_save_monolingual_5/ \"drive/MyDrive/Colab_Machine_Learning/Gespeicherte Modelle/monolingual_5\""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Saving model to ./model_save_monolingual_5/\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('./model_save_monolingual_5/tokenizer_config.json',\n",
              " './model_save_monolingual_5/special_tokens_map.json',\n",
              " './model_save_monolingual_5/vocab.txt',\n",
              " './model_save_monolingual_5/added_tokens.json')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mFsyCz1Scio-"
      },
      "source": [
        "#D. Model 2: Multilingual"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "okIblIIJcADZ"
      },
      "source": [
        "### Define Multilingual Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "2a3a49aafb1b4556a186c6b9aa496055",
            "d87f4c62e69d45c2a7bb182a80bc3898",
            "51ca169b995e409789eb92cd9891ace7",
            "b1682ac9144c41c9b6eca5d409b9c6a4",
            "c01c10e0d106453484d56882d4b3716b",
            "88cb07f35a7c415c90b942c0ebcbf331",
            "1c92e9a80b4646b99eb5f52327ad3a5e",
            "0b4692d64e814ea087c537b806254b0a",
            "0ab363dd1f76491d970b76adf86b1c48",
            "225ac301a97441adad27a3f128ff327e",
            "d518ff179e834a768e58f4efbd512377",
            "c4205d1214c944f483aef7c91c4ef9db",
            "e285b29077854290b49e3ad7f5f7cb89",
            "9c496c9e3f6147b3b8a16dc3e0097b94",
            "6b4ff50004084e2c934beefdcff2f265",
            "df5a4ec898b246b08139c46f349ca4b0"
          ]
        },
        "id": "XQpf12xfcADr",
        "outputId": "24d42c95-c371-4557-9ff0-afc2280732a9"
      },
      "source": [
        "from transformers import BertForSequenceClassification, AdamW, BertConfig\n",
        "\n",
        "# Load BertForSequenceClassification, the pretrained BERT model with a single \n",
        "# linear classification layer on top. \n",
        "model_multi = BertForSequenceClassification.from_pretrained(\n",
        "    \"bert-base-multilingual-cased\", # Use the 12-layer BERT model, with an uncased vocab.\n",
        "    num_labels = 5, # The number of output labels--2 for binary classification.\n",
        "                    # You can increase this for multi-class tasks.   \n",
        "    output_attentions = False, # Whether the model returns attentions weights.\n",
        "    output_hidden_states = False, # Whether the model returns all hidden-states.\n",
        ")\n",
        "\n",
        "print('')\n",
        "\n",
        "model_multi.cuda()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "2a3a49aafb1b4556a186c6b9aa496055",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=625.0, style=ProgressStyle(description_â€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "0ab363dd1f76491d970b76adf86b1c48",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=714314041.0, style=ProgressStyle(descriâ€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "Some weights of the model checkpoint at bert-base-multilingual-cased were not used when initializing BertForSequenceClassification: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.decoder.weight', 'cls.seq_relationship.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias']\n",
            "- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n",
            "- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n",
            "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-multilingual-cased and are newly initialized: ['classifier.weight', 'classifier.bias']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "BertForSequenceClassification(\n",
              "  (bert): BertModel(\n",
              "    (embeddings): BertEmbeddings(\n",
              "      (word_embeddings): Embedding(119547, 768, padding_idx=0)\n",
              "      (position_embeddings): Embedding(512, 768)\n",
              "      (token_type_embeddings): Embedding(2, 768)\n",
              "      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "      (dropout): Dropout(p=0.1, inplace=False)\n",
              "    )\n",
              "    (encoder): BertEncoder(\n",
              "      (layer): ModuleList(\n",
              "        (0): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (1): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (2): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (3): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (4): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (5): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (6): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (7): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (8): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (9): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (10): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (11): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "    (pooler): BertPooler(\n",
              "      (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "      (activation): Tanh()\n",
              "    )\n",
              "  )\n",
              "  (dropout): Dropout(p=0.1, inplace=False)\n",
              "  (classifier): Linear(in_features=768, out_features=5, bias=True)\n",
              ")"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dQ4HR2XEcADr"
      },
      "source": [
        "from transformers import get_linear_schedule_with_warmup\n",
        "\n",
        "# Number of training epochs. The BERT authors recommend between 2 and 4. \n",
        "# We chose to run for 4, but we'll see later that this may be over-fitting the\n",
        "# training data.\n",
        "epochs = 2\n",
        "\n",
        "# Total number of training steps is [number of batches] x [number of epochs]. \n",
        "# (Note that this is not the same as the number of training samples).\n",
        "total_steps = len(train_dataloader_multi) * epochs\n",
        "\n",
        "optimizer = AdamW(model_multi.parameters(),\n",
        "                  lr = 2e-5, # args.learning_rate - default is 5e-5, our notebook had 2e-5\n",
        "                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.\n",
        "                )\n",
        "\n",
        "# Create the learning rate scheduler.\n",
        "scheduler = get_linear_schedule_with_warmup(optimizer, \n",
        "                                            num_warmup_steps = 0, # Default value in run_glue.py\n",
        "                                            num_training_steps = total_steps)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mu0UPZWZcADs"
      },
      "source": [
        "##Training"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cHscQLjbcADt",
        "outputId": "bfd3b849-f0d8-4c4a-b335-7f027f425aaf"
      },
      "source": [
        "import random\n",
        "import numpy as np\n",
        "\n",
        "# This training code is based on the `run_glue.py` script here:\n",
        "# https://github.com/huggingface/transformers/blob/5bfcd0485ece086ebcbed2d008813037968a9e58/examples/run_glue.py#L128\n",
        "\n",
        "# Set the seed value all over the place to make this reproducible.\n",
        "seed_val = 42\n",
        "\n",
        "random.seed(seed_val)\n",
        "np.random.seed(seed_val)\n",
        "torch.manual_seed(seed_val)\n",
        "torch.cuda.manual_seed_all(seed_val)\n",
        "\n",
        "# We'll store a number of quantities such as training and validation loss, \n",
        "# validation accuracy, and timings.\n",
        "training_stats_multi = []\n",
        "\n",
        "# Measure the total training time for the whole run.\n",
        "total_t0 = time.time()\n",
        "\n",
        "# For each epoch...\n",
        "for epoch_i in range(0, epochs):\n",
        "    \n",
        "    # ========================================\n",
        "    #               Training\n",
        "    # ========================================\n",
        "    \n",
        "    # Perform one full pass over the training set.\n",
        "\n",
        "    print(\"\")\n",
        "    print('======== Epoch {:} / {:} ========'.format(epoch_i + 1, epochs))\n",
        "    print('Training...')\n",
        "\n",
        "    # Measure how long the training epoch takes.\n",
        "    t0 = time.time()\n",
        "\n",
        "    # Reset the total loss for this epoch.\n",
        "    total_train_loss = 0\n",
        "\n",
        "    # Put the model into training mode. Don't be mislead--the call to \n",
        "    # `train` just changes the *mode*, it doesn't *perform* the training.\n",
        "    # `dropout` and `batchnorm` layers behave differently during training\n",
        "    # vs. test (source: https://stackoverflow.com/questions/51433378/what-does-model-train-do-in-pytorch)\n",
        "    model_multi.train()\n",
        "\n",
        "    # For each batch of training data...\n",
        "    for step, batch in enumerate(train_dataloader_multi):\n",
        "\n",
        "        # Progress update every 40 batches.\n",
        "        if step % 40 == 0 and not step == 0:\n",
        "            # Calculate elapsed time in minutes.\n",
        "            elapsed = format_time(time.time() - t0)\n",
        "            \n",
        "            # Report progress.\n",
        "            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader_multi), elapsed))\n",
        "\n",
        "        # Unpack this training batch from our dataloader. \n",
        "        #\n",
        "        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n",
        "        # `to` method.\n",
        "        #\n",
        "        # `batch` contains three pytorch tensors:\n",
        "        #   [0]: input ids \n",
        "        #   [1]: attention masks\n",
        "        #   [2]: labels \n",
        "        b_input_ids = batch[0].to(device)\n",
        "        b_input_mask = batch[1].to(device)\n",
        "        b_labels = batch[2].to(device)\n",
        "\n",
        "        # Always clear any previously calculated gradients before performing a\n",
        "        # backward pass. PyTorch doesn't do this automatically because \n",
        "        # accumulating the gradients is \"convenient while training RNNs\". \n",
        "        # (source: https://stackoverflow.com/questions/48001598/why-do-we-need-to-call-zero-grad-in-pytorch)\n",
        "        model_multi.zero_grad()        \n",
        "\n",
        "        # Perform a forward pass (evaluate the model on this training batch).\n",
        "        # In PyTorch, calling `model` will in turn call the model's `forward` \n",
        "        # function and pass down the arguments. The `forward` function is \n",
        "        # documented here: \n",
        "        # https://huggingface.co/transformers/model_doc/bert.html#bertforsequenceclassification\n",
        "        # The results are returned in a results object, documented here:\n",
        "        # https://huggingface.co/transformers/main_classes/output.html#transformers.modeling_outputs.SequenceClassifierOutput\n",
        "        # Specifically, we'll get the loss (because we provided labels) and the\n",
        "        # \"logits\"--the model outputs prior to activation.\n",
        "        result = model_multi(b_input_ids, \n",
        "                       token_type_ids=None, \n",
        "                       attention_mask=b_input_mask, \n",
        "                       labels=b_labels,\n",
        "                       return_dict=True)\n",
        "\n",
        "        loss = result.loss\n",
        "        logits = result.logits\n",
        "\n",
        "        # Accumulate the training loss over all of the batches so that we can\n",
        "        # calculate the average loss at the end. `loss` is a Tensor containing a\n",
        "        # single value; the `.item()` function just returns the Python value \n",
        "        # from the tensor.\n",
        "        total_train_loss += loss.item()\n",
        "\n",
        "        # Perform a backward pass to calculate the gradients.\n",
        "        loss.backward()\n",
        "\n",
        "        # Clip the norm of the gradients to 1.0.\n",
        "        # This is to help prevent the \"exploding gradients\" problem.\n",
        "        torch.nn.utils.clip_grad_norm_(model_multi.parameters(), 1.0)\n",
        "\n",
        "        # Update parameters and take a step using the computed gradient.\n",
        "        # The optimizer dictates the \"update rule\"--how the parameters are\n",
        "        # modified based on their gradients, the learning rate, etc.\n",
        "        optimizer.step()\n",
        "\n",
        "        # Update the learning rate.\n",
        "        scheduler.step()\n",
        "\n",
        "    # Calculate the average loss over all of the batches.\n",
        "    avg_train_loss = total_train_loss / len(train_dataloader_multi)            \n",
        "    \n",
        "    # Measure how long this epoch took.\n",
        "    training_time = format_time(time.time() - t0)\n",
        "\n",
        "    print(\"\")\n",
        "    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n",
        "    print(\"  Training epcoh took: {:}\".format(training_time))\n",
        "        \n",
        "    # ========================================\n",
        "    #               Validation\n",
        "    # ========================================\n",
        "    # After the completion of each training epoch, measure our performance on\n",
        "    # our validation set.\n",
        "\n",
        "    print(\"\")\n",
        "    print(\"Running Validation...\")\n",
        "\n",
        "    t0 = time.time()\n",
        "\n",
        "    # Put the model in evaluation mode--the dropout layers behave differently\n",
        "    # during evaluation.\n",
        "    model_multi.eval()\n",
        "\n",
        "    # Tracking variables \n",
        "    total_eval_accuracy = 0\n",
        "    total_eval_loss = 0\n",
        "    nb_eval_steps = 0\n",
        "\n",
        "    # Evaluate data for one epoch\n",
        "    for batch in validation_dataloader_multi:\n",
        "        \n",
        "        # Unpack this training batch from our dataloader. \n",
        "        #\n",
        "        # As we unpack the batch, we'll also copy each tensor to the GPU using \n",
        "        # the `to` method.\n",
        "        #\n",
        "        # `batch` contains three pytorch tensors:\n",
        "        #   [0]: input ids \n",
        "        #   [1]: attention masks\n",
        "        #   [2]: labels \n",
        "        b_input_ids = batch[0].to(device)\n",
        "        b_input_mask = batch[1].to(device)\n",
        "        b_labels = batch[2].to(device)\n",
        "        \n",
        "        # Tell pytorch not to bother with constructing the compute graph during\n",
        "        # the forward pass, since this is only needed for backprop (training).\n",
        "        with torch.no_grad():        \n",
        "\n",
        "            # Forward pass, calculate logit predictions.\n",
        "            # token_type_ids is the same as the \"segment ids\", which \n",
        "            # differentiates sentence 1 and 2 in 2-sentence tasks.\n",
        "            result = model_multi(b_input_ids, \n",
        "                           token_type_ids=None, \n",
        "                           attention_mask=b_input_mask,\n",
        "                           labels=b_labels,\n",
        "                           return_dict=True)\n",
        "\n",
        "        # Get the loss and \"logits\" output by the model. The \"logits\" are the \n",
        "        # output values prior to applying an activation function like the \n",
        "        # softmax.\n",
        "        loss = result.loss\n",
        "        logits = result.logits\n",
        "            \n",
        "        # Accumulate the validation loss.\n",
        "        total_eval_loss += loss.item()\n",
        "\n",
        "        # Move logits and labels to CPU\n",
        "        logits = logits.detach().cpu().numpy()\n",
        "        label_ids = b_labels.to('cpu').numpy()\n",
        "\n",
        "        # Calculate the accuracy for this batch of test sentences, and\n",
        "        # accumulate it over all batches.\n",
        "        total_eval_accuracy += flat_accuracy(logits, label_ids)\n",
        "        \n",
        "\n",
        "    # Report the final accuracy for this validation run.\n",
        "    avg_val_accuracy = total_eval_accuracy / len(validation_dataloader_multi)\n",
        "    print(\"  Accuracy: {0:.2f}\".format(avg_val_accuracy))\n",
        "\n",
        "    # Calculate the average loss over all of the batches.\n",
        "    avg_val_loss = total_eval_loss / len(validation_dataloader_multi)\n",
        "    \n",
        "    # Measure how long the validation run took.\n",
        "    validation_time = format_time(time.time() - t0)\n",
        "    \n",
        "    print(\"  Validation Loss: {0:.2f}\".format(avg_val_loss))\n",
        "    print(\"  Validation took: {:}\".format(validation_time))\n",
        "\n",
        "    # Record all statistics from this epoch.\n",
        "    training_stats_multi.append(\n",
        "        {\n",
        "            'epoch': epoch_i + 1,\n",
        "            'Training Loss': avg_train_loss,\n",
        "            'Valid. Loss': avg_val_loss,\n",
        "            'Valid. Accur.': avg_val_accuracy,\n",
        "            'Training Time': training_time,\n",
        "            'Validation Time': validation_time\n",
        "        }\n",
        "    )\n",
        "\n",
        "print(\"\")\n",
        "print(\"Training complete!\")\n",
        "\n",
        "print(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "======== Epoch 1 / 2 ========\n",
            "Training...\n",
            "  Batch    40  of  2,294.    Elapsed: 0:00:21.\n",
            "  Batch    80  of  2,294.    Elapsed: 0:00:41.\n",
            "  Batch   120  of  2,294.    Elapsed: 0:01:02.\n",
            "  Batch   160  of  2,294.    Elapsed: 0:01:22.\n",
            "  Batch   200  of  2,294.    Elapsed: 0:01:43.\n",
            "  Batch   240  of  2,294.    Elapsed: 0:02:04.\n",
            "  Batch   280  of  2,294.    Elapsed: 0:02:24.\n",
            "  Batch   320  of  2,294.    Elapsed: 0:02:45.\n",
            "  Batch   360  of  2,294.    Elapsed: 0:03:05.\n",
            "  Batch   400  of  2,294.    Elapsed: 0:03:26.\n",
            "  Batch   440  of  2,294.    Elapsed: 0:03:47.\n",
            "  Batch   480  of  2,294.    Elapsed: 0:04:07.\n",
            "  Batch   520  of  2,294.    Elapsed: 0:04:28.\n",
            "  Batch   560  of  2,294.    Elapsed: 0:04:48.\n",
            "  Batch   600  of  2,294.    Elapsed: 0:05:09.\n",
            "  Batch   640  of  2,294.    Elapsed: 0:05:30.\n",
            "  Batch   680  of  2,294.    Elapsed: 0:05:50.\n",
            "  Batch   720  of  2,294.    Elapsed: 0:06:11.\n",
            "  Batch   760  of  2,294.    Elapsed: 0:06:31.\n",
            "  Batch   800  of  2,294.    Elapsed: 0:06:52.\n",
            "  Batch   840  of  2,294.    Elapsed: 0:07:13.\n",
            "  Batch   880  of  2,294.    Elapsed: 0:07:33.\n",
            "  Batch   920  of  2,294.    Elapsed: 0:07:54.\n",
            "  Batch   960  of  2,294.    Elapsed: 0:08:14.\n",
            "  Batch 1,000  of  2,294.    Elapsed: 0:08:35.\n",
            "  Batch 1,040  of  2,294.    Elapsed: 0:08:55.\n",
            "  Batch 1,080  of  2,294.    Elapsed: 0:09:16.\n",
            "  Batch 1,120  of  2,294.    Elapsed: 0:09:37.\n",
            "  Batch 1,160  of  2,294.    Elapsed: 0:09:57.\n",
            "  Batch 1,200  of  2,294.    Elapsed: 0:10:18.\n",
            "  Batch 1,240  of  2,294.    Elapsed: 0:10:38.\n",
            "  Batch 1,280  of  2,294.    Elapsed: 0:10:59.\n",
            "  Batch 1,320  of  2,294.    Elapsed: 0:11:19.\n",
            "  Batch 1,360  of  2,294.    Elapsed: 0:11:40.\n",
            "  Batch 1,400  of  2,294.    Elapsed: 0:12:01.\n",
            "  Batch 1,440  of  2,294.    Elapsed: 0:12:21.\n",
            "  Batch 1,480  of  2,294.    Elapsed: 0:12:42.\n",
            "  Batch 1,520  of  2,294.    Elapsed: 0:13:02.\n",
            "  Batch 1,560  of  2,294.    Elapsed: 0:13:23.\n",
            "  Batch 1,600  of  2,294.    Elapsed: 0:13:43.\n",
            "  Batch 1,640  of  2,294.    Elapsed: 0:14:04.\n",
            "  Batch 1,680  of  2,294.    Elapsed: 0:14:24.\n",
            "  Batch 1,720  of  2,294.    Elapsed: 0:14:45.\n",
            "  Batch 1,760  of  2,294.    Elapsed: 0:15:05.\n",
            "  Batch 1,800  of  2,294.    Elapsed: 0:15:26.\n",
            "  Batch 1,840  of  2,294.    Elapsed: 0:15:47.\n",
            "  Batch 1,880  of  2,294.    Elapsed: 0:16:07.\n",
            "  Batch 1,920  of  2,294.    Elapsed: 0:16:28.\n",
            "  Batch 1,960  of  2,294.    Elapsed: 0:16:48.\n",
            "  Batch 2,000  of  2,294.    Elapsed: 0:17:09.\n",
            "  Batch 2,040  of  2,294.    Elapsed: 0:17:29.\n",
            "  Batch 2,080  of  2,294.    Elapsed: 0:17:50.\n",
            "  Batch 2,120  of  2,294.    Elapsed: 0:18:10.\n",
            "  Batch 2,160  of  2,294.    Elapsed: 0:18:31.\n",
            "  Batch 2,200  of  2,294.    Elapsed: 0:18:52.\n",
            "  Batch 2,240  of  2,294.    Elapsed: 0:19:12.\n",
            "  Batch 2,280  of  2,294.    Elapsed: 0:19:33.\n",
            "\n",
            "  Average training loss: 0.96\n",
            "  Training epcoh took: 0:19:40\n",
            "\n",
            "Running Validation...\n",
            "  Accuracy: 0.66\n",
            "  Validation Loss: 0.87\n",
            "  Validation took: 0:00:38\n",
            "\n",
            "======== Epoch 2 / 2 ========\n",
            "Training...\n",
            "  Batch    40  of  2,294.    Elapsed: 0:00:21.\n",
            "  Batch    80  of  2,294.    Elapsed: 0:00:41.\n",
            "  Batch   120  of  2,294.    Elapsed: 0:01:02.\n",
            "  Batch   160  of  2,294.    Elapsed: 0:01:22.\n",
            "  Batch   200  of  2,294.    Elapsed: 0:01:43.\n",
            "  Batch   240  of  2,294.    Elapsed: 0:02:04.\n",
            "  Batch   280  of  2,294.    Elapsed: 0:02:24.\n",
            "  Batch   320  of  2,294.    Elapsed: 0:02:45.\n",
            "  Batch   360  of  2,294.    Elapsed: 0:03:06.\n",
            "  Batch   400  of  2,294.    Elapsed: 0:03:26.\n",
            "  Batch   440  of  2,294.    Elapsed: 0:03:47.\n",
            "  Batch   480  of  2,294.    Elapsed: 0:04:08.\n",
            "  Batch   520  of  2,294.    Elapsed: 0:04:29.\n",
            "  Batch   560  of  2,294.    Elapsed: 0:04:49.\n",
            "  Batch   600  of  2,294.    Elapsed: 0:05:10.\n",
            "  Batch   640  of  2,294.    Elapsed: 0:05:31.\n",
            "  Batch   680  of  2,294.    Elapsed: 0:05:51.\n",
            "  Batch   720  of  2,294.    Elapsed: 0:06:12.\n",
            "  Batch   760  of  2,294.    Elapsed: 0:06:33.\n",
            "  Batch   800  of  2,294.    Elapsed: 0:06:53.\n",
            "  Batch   840  of  2,294.    Elapsed: 0:07:14.\n",
            "  Batch   880  of  2,294.    Elapsed: 0:07:35.\n",
            "  Batch   920  of  2,294.    Elapsed: 0:07:55.\n",
            "  Batch   960  of  2,294.    Elapsed: 0:08:16.\n",
            "  Batch 1,000  of  2,294.    Elapsed: 0:08:37.\n",
            "  Batch 1,040  of  2,294.    Elapsed: 0:08:57.\n",
            "  Batch 1,080  of  2,294.    Elapsed: 0:09:18.\n",
            "  Batch 1,120  of  2,294.    Elapsed: 0:09:39.\n",
            "  Batch 1,160  of  2,294.    Elapsed: 0:09:59.\n",
            "  Batch 1,200  of  2,294.    Elapsed: 0:10:20.\n",
            "  Batch 1,240  of  2,294.    Elapsed: 0:10:40.\n",
            "  Batch 1,280  of  2,294.    Elapsed: 0:11:01.\n",
            "  Batch 1,320  of  2,294.    Elapsed: 0:11:22.\n",
            "  Batch 1,360  of  2,294.    Elapsed: 0:11:42.\n",
            "  Batch 1,400  of  2,294.    Elapsed: 0:12:03.\n",
            "  Batch 1,440  of  2,294.    Elapsed: 0:12:24.\n",
            "  Batch 1,480  of  2,294.    Elapsed: 0:12:44.\n",
            "  Batch 1,520  of  2,294.    Elapsed: 0:13:05.\n",
            "  Batch 1,560  of  2,294.    Elapsed: 0:13:25.\n",
            "  Batch 1,600  of  2,294.    Elapsed: 0:13:46.\n",
            "  Batch 1,640  of  2,294.    Elapsed: 0:14:07.\n",
            "  Batch 1,680  of  2,294.    Elapsed: 0:14:27.\n",
            "  Batch 1,720  of  2,294.    Elapsed: 0:14:48.\n",
            "  Batch 1,760  of  2,294.    Elapsed: 0:15:09.\n",
            "  Batch 1,800  of  2,294.    Elapsed: 0:15:29.\n",
            "  Batch 1,840  of  2,294.    Elapsed: 0:15:50.\n",
            "  Batch 1,880  of  2,294.    Elapsed: 0:16:11.\n",
            "  Batch 1,920  of  2,294.    Elapsed: 0:16:31.\n",
            "  Batch 1,960  of  2,294.    Elapsed: 0:16:52.\n",
            "  Batch 2,000  of  2,294.    Elapsed: 0:17:13.\n",
            "  Batch 2,040  of  2,294.    Elapsed: 0:17:33.\n",
            "  Batch 2,080  of  2,294.    Elapsed: 0:17:54.\n",
            "  Batch 2,120  of  2,294.    Elapsed: 0:18:15.\n",
            "  Batch 2,160  of  2,294.    Elapsed: 0:18:35.\n",
            "  Batch 2,200  of  2,294.    Elapsed: 0:18:56.\n",
            "  Batch 2,240  of  2,294.    Elapsed: 0:19:17.\n",
            "  Batch 2,280  of  2,294.    Elapsed: 0:19:37.\n",
            "\n",
            "  Average training loss: 0.78\n",
            "  Training epcoh took: 0:19:44\n",
            "\n",
            "Running Validation...\n",
            "  Accuracy: 0.68\n",
            "  Validation Loss: 0.84\n",
            "  Validation took: 0:00:38\n",
            "\n",
            "Training complete!\n",
            "Total training took 0:40:40 (h:mm:ss)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H9R3LdSLdU9r"
      },
      "source": [
        "## Visualizing and Analysing Results"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 137
        },
        "id": "Cj_VbZSedGdb",
        "outputId": "b13b012f-d958-4fb4-b2f0-b96f1ca73256"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Display floats with two decimal places.\n",
        "pd.set_option('precision', 2)\n",
        "\n",
        "# Create a DataFrame from our training statistics.\n",
        "df_stats_multi = pd.DataFrame(data=training_stats_multi)\n",
        "\n",
        "# Use the 'epoch' as the row index.\n",
        "df_stats_multi = df_stats_multi.set_index('epoch')\n",
        "\n",
        "# A hack to force the column headers to wrap.\n",
        "#df = df.style.set_table_styles([dict(selector=\"th\",props=[('max-width', '70px')])])\n",
        "\n",
        "# Display the table.\n",
        "df_stats_multi"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Training Loss</th>\n",
              "      <th>Valid. Loss</th>\n",
              "      <th>Valid. Accur.</th>\n",
              "      <th>Training Time</th>\n",
              "      <th>Validation Time</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>epoch</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.96</td>\n",
              "      <td>0.87</td>\n",
              "      <td>0.66</td>\n",
              "      <td>0:19:40</td>\n",
              "      <td>0:00:38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.78</td>\n",
              "      <td>0.84</td>\n",
              "      <td>0.68</td>\n",
              "      <td>0:19:44</td>\n",
              "      <td>0:00:38</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Training Loss  Valid. Loss  Valid. Accur. Training Time Validation Time\n",
              "epoch                                                                         \n",
              "1               0.96         0.87           0.66       0:19:40         0:00:38\n",
              "2               0.78         0.84           0.68       0:19:44         0:00:38"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HsFt9TIZbUTk"
      },
      "source": [
        "## Testing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5fFpeYHpdqyu",
        "outputId": "ec8e8f05-afef-46cb-d5de-55e02d70a140"
      },
      "source": [
        "# Prediction on test set\n",
        "\n",
        "print('Predicting labels for {:,} test sentences...'.format(len(test_dataset_multi)))\n",
        "\n",
        "# Put model in evaluation mode\n",
        "model_multi.eval()\n",
        "\n",
        "# Tracking variables \n",
        "predictions_multi , true_labels_multi = [], []\n",
        "\n",
        "# Predict \n",
        "for batch in test_dataloader_multi:\n",
        "  # Add batch to GPU\n",
        "  batch = tuple(t.to(device) for t in batch)\n",
        "  \n",
        "  # Unpack the inputs from our dataloader\n",
        "  b_input_ids, b_input_mask, b_labels = batch\n",
        "  \n",
        "  # Telling the model not to compute or store gradients, saving memory and \n",
        "  # speeding up prediction\n",
        "  with torch.no_grad():\n",
        "      # Forward pass, calculate logit predictions\n",
        "      outputs = model_multi(b_input_ids, token_type_ids=None, \n",
        "                      attention_mask=b_input_mask)\n",
        "\n",
        "  logits = outputs[0]\n",
        "\n",
        "  # Move logits and labels to CPU\n",
        "  logits = logits.detach().cpu().numpy()\n",
        "  label_ids = b_labels.to('cpu').numpy()\n",
        "  \n",
        "  # Store predictions and true labels\n",
        "  predictions_multi.append(logits)\n",
        "  true_labels_multi.append(label_ids)\n",
        "\n",
        "print('    DONE.')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[array([[ 1.5962061 ,  1.1776042 , -2.1977391 ],\n",
              "        [-1.3738276 ,  2.0249047 , -0.49196902],\n",
              "        [ 2.6908658 ,  0.7584609 , -2.8881607 ],\n",
              "        [ 1.6099753 ,  0.70946586, -1.8623308 ],\n",
              "        [-2.8347118 ,  0.12742333,  2.3970096 ],\n",
              "        [-3.319519  , -0.5563503 ,  3.4217794 ],\n",
              "        [ 2.7652729 , -0.10454625, -2.0615354 ],\n",
              "        [ 0.8713106 ,  1.9502742 , -2.4099846 ],\n",
              "        [-3.1864684 , -0.51869655,  3.288676  ],\n",
              "        [-1.4803996 ,  1.8790824 , -0.38484487],\n",
              "        [-3.4322028 ,  0.31176353,  2.8611197 ],\n",
              "        [-2.7443001 , -0.63006604,  3.073776  ],\n",
              "        [-3.2717874 , -0.59914625,  3.3545797 ],\n",
              "        [-2.6313243 ,  0.5955628 ,  1.8473921 ],\n",
              "        [ 1.1060009 ,  1.056819  , -1.6546866 ],\n",
              "        [-3.2943494 , -0.59885514,  3.4085436 ]], dtype=float32),\n",
              " array([[-3.3587735 , -0.26998326,  3.1757617 ],\n",
              "        [-2.96843   , -0.31972566,  2.9319763 ],\n",
              "        [ 1.7135004 ,  0.9821633 , -2.110468  ],\n",
              "        [-3.3372645 , -0.00584412,  2.9329293 ],\n",
              "        [-2.846972  ,  1.1242281 ,  1.5390234 ],\n",
              "        [-3.3145025 , -0.5032592 ,  3.3434546 ],\n",
              "        [-2.9560606 ,  0.65010834,  2.0703678 ],\n",
              "        [-1.8769535 ,  1.5448838 ,  0.24809502],\n",
              "        [ 0.13761133,  1.1532989 , -0.8734327 ],\n",
              "        [ 1.341873  ,  1.2780403 , -2.0251966 ],\n",
              "        [-0.6075502 ,  0.9601801 , -0.10663318],\n",
              "        [-0.27289605,  0.8501433 , -0.2685779 ],\n",
              "        [-3.5143416 ,  0.14890946,  2.9089208 ],\n",
              "        [-2.5322433 ,  1.1976081 ,  1.2321005 ],\n",
              "        [-3.1881392 , -0.75894785,  3.4383898 ],\n",
              "        [ 0.33503607,  1.7970723 , -1.7443994 ]], dtype=float32),\n",
              " array([[ 2.2883408e-01,  1.9036528e+00, -1.6889212e+00],\n",
              "        [ 8.3352554e-01,  1.7461444e+00, -2.0431211e+00],\n",
              "        [ 5.0085777e-01,  1.1121930e+00, -1.1278486e+00],\n",
              "        [-2.1759474e-01,  1.6672190e+00, -1.0620559e+00],\n",
              "        [-3.2426491e+00, -1.2268116e-01,  2.9715672e+00],\n",
              "        [-3.2518308e+00, -6.5967542e-01,  3.4534211e+00],\n",
              "        [-1.3158449e+00,  1.6590761e+00, -1.9215478e-01],\n",
              "        [-3.3929873e+00, -2.1046840e-01,  3.1762481e+00],\n",
              "        [-3.2936156e+00, -6.5722656e-01,  3.4519944e+00],\n",
              "        [ 1.1931155e+00,  1.6714501e+00, -2.2890251e+00],\n",
              "        [-9.5314366e-01, -1.0158308e-01,  9.9551356e-01],\n",
              "        [ 2.1295869e+00,  9.9097824e-01, -2.5724697e+00],\n",
              "        [ 3.4023094e+00, -2.5842225e-03, -2.8266497e+00],\n",
              "        [ 2.4324193e+00,  7.0824313e-01, -2.5463943e+00],\n",
              "        [ 1.8345157e+00,  7.6490140e-01, -2.0129228e+00],\n",
              "        [ 5.4421699e-01,  1.2508613e+00, -1.2930017e+00]], dtype=float32),\n",
              " array([[-2.3253999e+00, -6.7626131e-01,  2.6245728e+00],\n",
              "        [-2.8137925e+00, -5.5672580e-01,  2.9927969e+00],\n",
              "        [-3.3625910e+00, -2.0485653e-01,  3.1042461e+00],\n",
              "        [-1.7791175e+00,  2.6207212e-01,  1.6698785e+00],\n",
              "        [ 5.6310243e-04, -1.5952443e+00,  1.2587907e+00],\n",
              "        [ 2.5323234e+00,  6.5649670e-01, -2.5040882e+00],\n",
              "        [ 2.3797576e+00,  1.0067166e+00, -2.7672024e+00],\n",
              "        [-3.3825672e+00, -3.2144201e-01,  3.2252572e+00],\n",
              "        [-3.0090225e-01,  1.0314621e+00, -2.9573384e-01],\n",
              "        [-3.3027136e+00, -1.8755823e-01,  3.1270542e+00],\n",
              "        [ 3.1484487e+00,  1.7771125e-02, -2.5407705e+00],\n",
              "        [-3.3456581e+00, -5.4735541e-01,  3.4156821e+00],\n",
              "        [ 3.0188434e+00,  1.8630835e-01, -2.7264414e+00],\n",
              "        [-3.2774212e+00, -5.9764278e-01,  3.3584080e+00],\n",
              "        [-2.8715370e+00,  8.6409944e-01,  1.7031311e+00],\n",
              "        [ 2.2888241e+00,  1.1452872e+00, -2.7264290e+00]], dtype=float32),\n",
              " array([[ 1.704358  ,  0.79893106, -2.0125606 ],\n",
              "        [-2.0382445 ,  0.9898529 ,  0.9368815 ],\n",
              "        [ 2.5225945 ,  0.7439268 , -2.609303  ],\n",
              "        [ 0.96293133,  1.431363  , -1.8392152 ],\n",
              "        [ 3.2673845 ,  0.27651417, -2.9772682 ],\n",
              "        [ 0.8618811 ,  1.6902758 , -2.0368671 ],\n",
              "        [ 1.2491292 ,  1.5268836 , -2.1892142 ],\n",
              "        [ 3.322165  ,  0.09303803, -2.7920504 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [ 2.795856  , -0.36590466, -2.0313663 ],\n",
              "        [-2.5440938 ,  0.42271706,  1.9679284 ],\n",
              "        [-3.1856844 ,  0.01227662,  2.8088598 ],\n",
              "        [-3.435629  , -0.36125842,  3.2715237 ],\n",
              "        [-3.3515587 , -0.3953988 ,  3.272972  ],\n",
              "        [-2.832194  ,  0.5232709 ,  1.9670542 ],\n",
              "        [-1.8584818 ,  1.8292998 ,  0.01550547]], dtype=float32),\n",
              " array([[ 1.1927149 ,  1.2415489 , -1.8907738 ],\n",
              "        [ 1.2802274 ,  1.0829765 , -1.7732623 ],\n",
              "        [ 1.8929327 ,  1.2658952 , -2.5470932 ],\n",
              "        [ 2.6719117 ,  0.4846197 , -2.508369  ],\n",
              "        [ 1.2344875 , -0.35802934, -0.8245357 ],\n",
              "        [-1.187981  , -1.1389073 ,  2.0387356 ],\n",
              "        [ 1.9055711 ,  1.0711337 , -2.4195325 ],\n",
              "        [ 2.6509502 ,  0.563972  , -2.500588  ],\n",
              "        [-2.7046864 ,  1.070319  ,  1.4567876 ],\n",
              "        [-2.4685047 , -0.8729993 ,  3.0258203 ],\n",
              "        [ 2.5523312 , -0.63681424, -1.5844915 ],\n",
              "        [-1.1031057 ,  2.091221  , -0.82778966],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 1.2862252 ,  0.10561613, -1.0222005 ],\n",
              "        [ 0.01218223,  1.9736859 , -1.5154667 ],\n",
              "        [ 3.2488208 , -0.7769695 , -2.038995  ]], dtype=float32),\n",
              " array([[-3.2554379 , -0.7031544 ,  3.4660466 ],\n",
              "        [ 1.6201564 ,  0.2183501 , -1.4854645 ],\n",
              "        [ 2.3458016 ,  0.37763545, -2.2055445 ],\n",
              "        [ 0.4078159 ,  1.74992   , -1.6574271 ],\n",
              "        [ 1.8752402 ,  1.3490028 , -2.586056  ],\n",
              "        [ 1.6773083 ,  0.14783779, -1.4621143 ],\n",
              "        [ 2.2009783 ,  0.9113001 , -2.499943  ],\n",
              "        [ 3.5309687 , -0.6449082 , -2.4761438 ],\n",
              "        [ 3.518     , -0.50134236, -2.5976613 ],\n",
              "        [ 0.9791524 ,  1.4304619 , -1.8055365 ],\n",
              "        [ 0.32601663,  1.366835  , -1.2136034 ],\n",
              "        [ 1.2848953 ,  1.1465296 , -1.9954622 ],\n",
              "        [-2.8493423 , -0.7376772 ,  3.2904582 ],\n",
              "        [-0.12817417,  1.1891521 , -0.7625154 ],\n",
              "        [-2.5712616 ,  1.0225012 ,  1.4590535 ],\n",
              "        [-3.2888439 , -0.6257528 ,  3.4330053 ]], dtype=float32),\n",
              " array([[-3.5046546 ,  0.5411923 ,  2.575911  ],\n",
              "        [ 0.40341103,  1.8950316 , -1.8288763 ],\n",
              "        [ 2.6306999 ,  0.39868477, -2.3705497 ],\n",
              "        [-1.2155124 ,  0.8732364 ,  0.35632885],\n",
              "        [-2.1170356 ,  0.9984365 ,  0.99310213],\n",
              "        [ 2.30831   ,  0.20882916, -2.0020995 ],\n",
              "        [-3.0395093 , -0.70068204,  3.2629442 ],\n",
              "        [-3.0483408 , -0.7304175 ,  3.3227868 ],\n",
              "        [ 1.1681029 ,  0.28373033, -1.0788982 ],\n",
              "        [ 3.6675334 , -0.6806195 , -2.5333667 ],\n",
              "        [-1.4375414 ,  0.94243467,  0.5457577 ],\n",
              "        [-3.3876057 , -0.30374822,  3.2304997 ],\n",
              "        [-3.0572503 , -0.5976628 ,  3.2727017 ],\n",
              "        [ 3.1082375 ,  0.62047505, -3.0889382 ],\n",
              "        [-1.4134773 ,  1.3486469 ,  0.16759986],\n",
              "        [-2.8293903 ,  0.6711985 ,  1.9223086 ]], dtype=float32),\n",
              " array([[-2.8645082 , -0.6491447 ,  3.111363  ],\n",
              "        [-2.9596856 , -0.84130096,  3.4251266 ],\n",
              "        [-3.2524054 , -0.5513825 ,  3.3660545 ],\n",
              "        [ 3.0339653 ,  0.22132938, -2.7745268 ],\n",
              "        [-2.2162757 ,  1.2387584 ,  0.9765507 ],\n",
              "        [-2.9268334 ,  0.09321954,  2.5737393 ],\n",
              "        [ 3.3111413 ,  0.24729834, -2.9437003 ],\n",
              "        [-2.9413974 , -0.86273193,  3.361864  ],\n",
              "        [-2.5806491 , -0.4550115 ,  2.6342468 ],\n",
              "        [-3.2770092 , -0.18547836,  3.1304011 ],\n",
              "        [ 0.27794808,  1.4881622 , -1.4787288 ],\n",
              "        [-2.9771736 , -0.96312785,  3.4784918 ],\n",
              "        [-3.0730565 , -0.86038923,  3.4087129 ],\n",
              "        [ 3.6183364 , -0.09190837, -2.967507  ],\n",
              "        [-3.3286948 , -0.29793787,  3.189866  ],\n",
              "        [-2.8197896 , -0.5103528 ,  2.9724379 ]], dtype=float32),\n",
              " array([[-0.6836284 ,  1.6227638 , -0.7244719 ],\n",
              "        [-3.020423  ,  0.14716858,  2.5566974 ],\n",
              "        [ 1.8014008 ,  0.13449748, -1.4512813 ],\n",
              "        [ 1.0648061 ,  1.2018405 , -1.7153362 ],\n",
              "        [ 2.0415795 , -0.6260028 , -1.3041223 ],\n",
              "        [-3.31174   , -0.43725613,  3.3304527 ],\n",
              "        [-0.97689146,  1.7051393 , -0.61207557],\n",
              "        [ 0.12338819, -1.0310103 ,  0.83483493],\n",
              "        [-3.481694  ,  0.13923326,  2.9390202 ],\n",
              "        [ 1.2265978 ,  1.2479225 , -1.922198  ],\n",
              "        [-3.3486874 , -0.50802296,  3.4020805 ],\n",
              "        [-1.9672552 ,  1.9080926 ,  0.06133479],\n",
              "        [ 1.8256855 ,  1.1085671 , -2.2912211 ],\n",
              "        [-2.5325997 ,  0.43314156,  1.9013968 ],\n",
              "        [ 0.88180715,  1.5374341 , -1.9270144 ],\n",
              "        [ 2.0123043 ,  0.8000634 , -2.2901459 ]], dtype=float32),\n",
              " array([[ 2.2552311 ,  0.4980729 , -2.3210368 ],\n",
              "        [ 2.065621  ,  1.316812  , -2.7754622 ],\n",
              "        [ 2.0993314 ,  1.1369466 , -2.6747098 ],\n",
              "        [ 0.98978657,  0.7843925 , -1.2420814 ],\n",
              "        [ 0.8716749 ,  1.5892411 , -1.9372239 ],\n",
              "        [ 1.8556916 ,  1.0825509 , -2.2215996 ],\n",
              "        [-2.741267  , -0.16731857,  2.6933434 ],\n",
              "        [ 3.5288143 , -0.06754027, -2.8406787 ],\n",
              "        [ 2.2167017 ,  0.9804787 , -2.586206  ],\n",
              "        [-2.6843593 ,  0.72699773,  1.7573678 ],\n",
              "        [-2.0610611 ,  1.8099064 ,  0.19601648],\n",
              "        [ 2.4448216 ,  0.75711924, -2.5906763 ],\n",
              "        [-3.2793996 , -0.35204265,  3.228805  ],\n",
              "        [-3.1856072 , -0.7721822 ,  3.4811587 ],\n",
              "        [ 1.5339154 ,  1.3929667 , -2.3795502 ],\n",
              "        [-3.2625985 , -0.6691736 ,  3.456748  ]], dtype=float32),\n",
              " array([[ 1.1861557 ,  1.34998   , -2.1045933 ],\n",
              "        [-3.2022028 ,  0.21966228,  2.607027  ],\n",
              "        [ 3.4422166 , -0.86809033, -2.2537024 ],\n",
              "        [ 3.6263592 , -0.5540065 , -2.6157842 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [-1.4697778 ,  1.9201449 , -0.40450856],\n",
              "        [ 2.821778  ,  0.85761195, -2.984351  ],\n",
              "        [-0.49255714,  0.9343337 , -0.09852882],\n",
              "        [-1.0066981 ,  0.26545724,  0.63241506],\n",
              "        [-3.0803435 , -0.92433345,  3.4784536 ],\n",
              "        [ 3.5575593 , -0.39229622, -2.6209135 ],\n",
              "        [ 1.7904698 ,  1.3702582 , -2.4763365 ],\n",
              "        [ 1.146839  ,  1.3864272 , -2.030164  ],\n",
              "        [-1.1254668 ,  1.1786191 ,  0.2273544 ],\n",
              "        [-2.2062047 ,  1.6626923 ,  0.44170085],\n",
              "        [-0.23068115,  1.2233201 , -0.80324316]], dtype=float32),\n",
              " array([[-2.8188243 ,  0.09796923,  2.4462943 ],\n",
              "        [-1.5232263 ,  1.9605521 , -0.19817147],\n",
              "        [ 3.3120868 ,  0.01674052, -2.672722  ],\n",
              "        [ 0.19053642,  1.7694546 , -1.5529557 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 3.1572301 , -0.3418338 , -2.2816849 ],\n",
              "        [-2.2242239 , -0.6612954 ,  2.4325953 ],\n",
              "        [ 1.3481494 ,  0.28443322, -1.2386916 ],\n",
              "        [ 1.1392092 ,  1.2243599 , -1.8469763 ],\n",
              "        [ 1.2748747 ,  1.1520532 , -1.8527061 ],\n",
              "        [ 0.6705892 , -0.1423485 , -0.47493   ],\n",
              "        [ 2.4449584 ,  1.0746537 , -2.8115602 ],\n",
              "        [ 0.84642667,  0.05969894, -0.6693128 ],\n",
              "        [ 1.7359637 ,  0.91604936, -2.0643108 ],\n",
              "        [ 2.7199404 ,  0.6652349 , -2.8128347 ],\n",
              "        [ 0.70828885,  1.4232949 , -1.5194618 ]], dtype=float32),\n",
              " array([[ 2.990067  , -0.02353501, -2.3827107 ],\n",
              "        [-3.275077  , -0.63267946,  3.4191425 ],\n",
              "        [ 0.75072944,  1.3436686 , -1.573426  ],\n",
              "        [-0.98330325,  1.6554385 , -0.67762095],\n",
              "        [-0.63793355,  1.3415433 , -0.3891133 ],\n",
              "        [ 1.8994907 ,  0.98195267, -2.392569  ],\n",
              "        [ 0.7349699 ,  1.2923075 , -1.4992262 ],\n",
              "        [ 2.2664106 ,  1.0559255 , -2.7658362 ],\n",
              "        [-3.1187909 , -0.8334565 ,  3.474987  ],\n",
              "        [-3.3601537 , -0.14360729,  3.1314018 ],\n",
              "        [ 1.0654917 ,  1.5374397 , -2.0401473 ],\n",
              "        [-0.5867141 ,  1.4414763 , -0.549687  ],\n",
              "        [-3.2594106 , -0.2984487 ,  3.077341  ],\n",
              "        [ 2.2843816 , -1.631354  , -0.71117914],\n",
              "        [-3.3059957 , -0.6380647 ,  3.451071  ],\n",
              "        [ 2.2184339 ,  0.9643456 , -2.6200995 ]], dtype=float32),\n",
              " array([[ 1.2570386 ,  1.3028182 , -2.1617393 ],\n",
              "        [ 0.96815354,  1.6449655 , -2.2701178 ],\n",
              "        [-3.1322207 , -0.4884217 ,  3.1962872 ],\n",
              "        [-3.246596  , -0.5915204 ,  3.380403  ],\n",
              "        [ 2.8843362 ,  0.7492463 , -2.9050212 ],\n",
              "        [ 1.5489179 , -1.4955982 , -0.1640901 ],\n",
              "        [ 3.2082713 ,  0.2422978 , -2.9844036 ],\n",
              "        [ 1.9036075 ,  1.2280585 , -2.5202775 ],\n",
              "        [ 2.1245112 ,  1.2255381 , -2.734155  ],\n",
              "        [-1.2092162 , -0.6643514 ,  1.678928  ],\n",
              "        [ 0.15921506,  0.77369344, -0.6378482 ],\n",
              "        [ 3.089592  ,  0.43484518, -2.852468  ],\n",
              "        [-0.9754071 ,  1.6910466 , -0.7123642 ],\n",
              "        [-2.1732717 ,  0.59625036,  1.5240905 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [-0.89191544, -0.01149823,  0.8794937 ]], dtype=float32),\n",
              " array([[-3.2596762 , -0.4226694 ,  3.2057896 ],\n",
              "        [ 3.4422166 , -0.86809033, -2.2537024 ],\n",
              "        [ 0.9955546 ,  1.2881852 , -1.72922   ],\n",
              "        [ 0.4643365 , -0.5090431 ,  0.14253229],\n",
              "        [-1.2017752 ,  1.9729575 , -0.69110096],\n",
              "        [ 2.0006282 ,  1.1583503 , -2.5192256 ],\n",
              "        [ 1.2882642 ,  0.6686387 , -1.5600182 ],\n",
              "        [-3.2929614 , -0.58332306,  3.3992229 ],\n",
              "        [ 2.301015  ,  0.28801364, -2.1454642 ],\n",
              "        [-3.1503456 , -0.58826524,  3.2642555 ],\n",
              "        [-1.5457433 ,  1.3363813 ,  0.3944673 ],\n",
              "        [-2.6022804 ,  1.0044624 ,  1.5773902 ],\n",
              "        [ 0.402387  ,  0.29376906, -0.5587728 ],\n",
              "        [ 2.5192094 ,  0.818907  , -2.6910388 ],\n",
              "        [ 1.1500682 , -0.06006799, -0.7647679 ],\n",
              "        [ 0.7012952 ,  1.2920796 , -1.466846  ]], dtype=float32),\n",
              " array([[ 0.12402299,  1.7355882 , -1.5192375 ],\n",
              "        [ 1.9920176 ,  1.3204504 , -2.6752958 ],\n",
              "        [ 0.36670604,  2.1443586 , -2.0307407 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-3.2196648 , -0.7049569 ,  3.464282  ],\n",
              "        [-3.303224  , -0.5908284 ,  3.3978949 ],\n",
              "        [ 1.7555789 ,  1.199921  , -2.4431338 ],\n",
              "        [ 3.6659608 , -0.45121148, -2.749003  ],\n",
              "        [-2.706178  , -0.00385853,  2.400753  ],\n",
              "        [-3.3634748 , -0.3948333 ,  3.2775836 ],\n",
              "        [ 3.6044486 ,  0.02900078, -3.0607471 ],\n",
              "        [-3.012285  , -0.64325964,  3.2074103 ],\n",
              "        [-0.4123194 ,  1.509194  , -0.81300664],\n",
              "        [ 2.5146246 ,  0.89058137, -2.6399186 ],\n",
              "        [ 1.0338916 ,  0.9687681 , -1.6035225 ],\n",
              "        [-1.8900229 ,  0.06419767,  1.788738  ]], dtype=float32),\n",
              " array([[ 2.4925969 ,  1.0961114 , -2.840336  ],\n",
              "        [ 0.89213187,  1.4725713 , -1.8955077 ],\n",
              "        [ 1.7704889 ,  1.2302097 , -2.3569517 ],\n",
              "        [ 2.342612  ,  0.9726532 , -2.7076845 ],\n",
              "        [ 2.0172832 ,  1.3938696 , -2.7789977 ],\n",
              "        [-0.9472925 , -0.15764055,  1.0211865 ],\n",
              "        [-3.3776305 , -0.45303872,  3.3548698 ],\n",
              "        [-1.9083673 ,  1.6799201 ,  0.18248448],\n",
              "        [ 0.09819171,  1.0913371 , -0.80662185],\n",
              "        [-3.513816  , -0.1756886 ,  3.2195895 ],\n",
              "        [-0.13212082,  1.7949363 , -1.2153666 ],\n",
              "        [-0.89055103,  0.32401094,  0.48810083],\n",
              "        [-3.172587  , -0.61953753,  3.3579931 ],\n",
              "        [ 2.8838246 ,  0.51491076, -2.745897  ],\n",
              "        [-3.1019714 , -0.8706985 ,  3.468731  ],\n",
              "        [-3.318717  , -0.30186573,  3.1999965 ]], dtype=float32),\n",
              " array([[-3.1863396 , -0.47498012,  3.2493458 ],\n",
              "        [ 1.6117404 ,  1.5302305 , -2.4871018 ],\n",
              "        [-3.2702577 , -0.5030633 ,  3.3230133 ],\n",
              "        [-3.4628055 , -0.25173894,  3.2396677 ],\n",
              "        [-3.1975915 , -0.44414642,  3.2493749 ],\n",
              "        [-3.4370475 , -0.28974202,  3.2401376 ],\n",
              "        [ 2.2781482 ,  1.0719742 , -2.7945225 ],\n",
              "        [ 1.4065303 ,  1.5308813 , -2.354904  ],\n",
              "        [ 1.5223746 ,  1.3438119 , -2.352472  ],\n",
              "        [-0.65172815,  1.8625289 , -0.8303281 ],\n",
              "        [-1.2243439 ,  2.115948  , -0.7256326 ],\n",
              "        [-2.5822074 ,  0.8876357 ,  1.4780691 ],\n",
              "        [ 0.23862402,  0.68830895, -0.7575927 ],\n",
              "        [ 0.9191873 ,  1.649129  , -2.1061625 ],\n",
              "        [-0.94297856, -0.19408053,  0.93144166],\n",
              "        [ 2.3291955 ,  0.03504129, -1.945098  ]], dtype=float32),\n",
              " array([[ 0.24523802,  1.4015918 , -1.1635498 ],\n",
              "        [-0.22047405,  1.2112792 , -0.61924684],\n",
              "        [ 1.2382251 ,  1.1546397 , -1.9702957 ],\n",
              "        [ 0.27698734,  2.1230516 , -1.9715401 ],\n",
              "        [-3.0990503 , -0.25962535,  2.966566  ],\n",
              "        [ 3.5593674 , -0.8299894 , -2.2701359 ],\n",
              "        [ 0.26211312,  1.2630519 , -1.1115379 ],\n",
              "        [-0.5440521 ,  1.3930186 , -0.5759783 ],\n",
              "        [ 1.2986156 ,  0.41291007, -1.3449097 ],\n",
              "        [ 1.908706  ,  1.1843837 , -2.5439343 ],\n",
              "        [-3.2828317 , -0.4319966 ,  3.2498436 ],\n",
              "        [ 1.6477982 ,  0.0192343 , -1.149257  ],\n",
              "        [ 1.193214  ,  1.2007376 , -1.8935726 ],\n",
              "        [ 1.7546347 ,  1.1517142 , -2.453511  ],\n",
              "        [-1.7100753 ,  1.5523075 ,  0.1885463 ],\n",
              "        [ 0.9243934 ,  1.4840151 , -1.9481204 ]], dtype=float32),\n",
              " array([[ 3.2553356 , -0.40170997, -2.4556167 ],\n",
              "        [ 1.4059834 ,  1.1741458 , -2.0261788 ],\n",
              "        [-3.414673  ,  0.42032084,  2.577581  ],\n",
              "        [ 3.0031106 ,  0.48831537, -2.820146  ],\n",
              "        [ 3.6470892 , -0.57863224, -2.6859407 ],\n",
              "        [-3.2220213 , -0.32961848,  3.1303105 ],\n",
              "        [ 0.3951253 , -0.6454244 ,  0.4409653 ],\n",
              "        [ 2.708246  ,  0.79818773, -2.8156776 ],\n",
              "        [-3.3340414 , -0.52158815,  3.3857462 ],\n",
              "        [-3.0561326 ,  0.44398627,  2.2401724 ],\n",
              "        [-2.0050056 ,  1.3386694 ,  0.6743616 ],\n",
              "        [ 3.4293501 , -0.7770517 , -2.3116364 ],\n",
              "        [ 2.8578947 ,  0.490882  , -2.7001946 ],\n",
              "        [ 3.4954746 ,  0.12713116, -3.0202923 ],\n",
              "        [ 0.17338243,  1.748912  , -1.5816867 ],\n",
              "        [-0.30063865,  1.7485436 , -1.0577693 ]], dtype=float32),\n",
              " array([[-3.2632706 , -0.63621294,  3.396635  ],\n",
              "        [ 2.934133  , -0.43440518, -1.9819686 ],\n",
              "        [-1.0282804 ,  1.7043331 , -0.47795182],\n",
              "        [-1.6321958 ,  1.3793653 ,  0.09353913],\n",
              "        [ 1.8423132 ,  1.522551  , -2.7303286 ],\n",
              "        [-3.1773252 , -0.40504673,  3.1936064 ],\n",
              "        [-3.311556  , -0.60236084,  3.3964162 ],\n",
              "        [ 2.1707897 , -0.14230356, -1.7072914 ],\n",
              "        [ 2.3759625 ,  0.7000637 , -2.5339885 ],\n",
              "        [-3.1758945 , -0.4200603 ,  3.1397905 ],\n",
              "        [-3.4303503 , -0.14020315,  3.113021  ],\n",
              "        [-3.2033322 , -0.5210286 ,  3.3206239 ],\n",
              "        [ 2.2833555 ,  1.2084867 , -2.8509014 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 3.0667326 ,  0.65248287, -3.1079369 ],\n",
              "        [-3.0811307 , -0.81759214,  3.402577  ]], dtype=float32),\n",
              " array([[-2.1049225 ,  1.2645472 ,  0.81391764],\n",
              "        [-0.07656018,  1.7719638 , -1.2083317 ],\n",
              "        [-3.2014282 , -0.7752899 ,  3.4828484 ],\n",
              "        [-3.392424  , -0.24911755,  3.1918697 ],\n",
              "        [-2.8461382 , -0.7634142 ,  3.1868799 ],\n",
              "        [ 1.7622093 ,  1.2526586 , -2.3275013 ],\n",
              "        [ 0.9509849 ,  1.5319155 , -1.9728749 ],\n",
              "        [ 0.67214555,  1.876881  , -2.122106  ],\n",
              "        [ 2.0937529 ,  1.0093944 , -2.4182382 ],\n",
              "        [-2.8481543 ,  0.44754007,  2.0219202 ],\n",
              "        [ 1.0910724 ,  1.7219512 , -2.2410283 ],\n",
              "        [ 0.56853575,  1.6205566 , -1.8360512 ],\n",
              "        [ 1.5792516 ,  1.3075391 , -2.257384  ],\n",
              "        [-3.2597706 , -0.25963253,  3.167055  ],\n",
              "        [-2.663605  ,  0.68699217,  1.7099725 ],\n",
              "        [ 1.3373665 ,  1.7013456 , -2.4568613 ]], dtype=float32),\n",
              " array([[ 3.0772989 ,  0.3208757 , -2.778018  ],\n",
              "        [ 1.418826  ,  1.2409952 , -2.0139775 ],\n",
              "        [-3.2258286 ,  0.41855255,  2.4513726 ],\n",
              "        [ 0.4365696 ,  1.5336543 , -1.4368367 ],\n",
              "        [ 3.5149205 ,  0.04309881, -3.0189173 ],\n",
              "        [ 2.8765848 ,  0.71199346, -3.1183715 ],\n",
              "        [ 3.2960536 , -0.34029326, -2.360178  ],\n",
              "        [ 1.6096541 ,  1.1699138 , -2.2886696 ],\n",
              "        [-1.9281377 ,  0.5142076 ,  1.3273752 ],\n",
              "        [ 1.3552505 ,  0.94451594, -1.7908154 ],\n",
              "        [ 0.31816575,  1.6356169 , -1.5402253 ],\n",
              "        [ 1.1527289 , -0.2380587 , -0.54406536],\n",
              "        [-1.2059463 , -0.39760718,  1.5587811 ],\n",
              "        [ 1.9016197 ,  1.3788439 , -2.6305587 ],\n",
              "        [-2.7324655 ,  0.6882542 ,  1.8638247 ],\n",
              "        [ 2.4864411 ,  0.5577419 , -2.3267717 ]], dtype=float32),\n",
              " array([[-3.4421523 , -0.37717688,  3.3571987 ],\n",
              "        [-3.2869291 ,  0.37189457,  2.6472373 ],\n",
              "        [ 1.2765751 ,  0.21873935, -1.2733712 ],\n",
              "        [ 2.729502  ,  0.9399594 , -2.990469  ],\n",
              "        [ 0.22193691,  1.3002067 , -1.0121839 ],\n",
              "        [ 1.4085828 ,  1.0336332 , -1.8645731 ],\n",
              "        [ 1.4789943 ,  1.483737  , -2.3076227 ],\n",
              "        [-2.0243733 ,  1.6315184 ,  0.27275735],\n",
              "        [-2.1727636 ,  1.4939727 ,  0.76151085],\n",
              "        [ 2.6117954 ,  0.33696494, -2.4130151 ],\n",
              "        [ 2.4223602 ,  0.79526925, -2.5587616 ],\n",
              "        [-0.9721472 ,  1.7049485 , -0.45665544],\n",
              "        [-3.2530398 , -0.56577766,  3.364643  ],\n",
              "        [-0.22786604,  1.4085177 , -0.9038073 ],\n",
              "        [-3.2689364 , -0.62434924,  3.406925  ],\n",
              "        [-0.34729975,  1.1084116 , -0.40555695]], dtype=float32),\n",
              " array([[ 3.5800745 , -0.8348419 , -2.4867115 ],\n",
              "        [-3.3057013 , -0.6551424 ,  3.452095  ],\n",
              "        [-3.289839  , -0.5118489 ,  3.2944617 ],\n",
              "        [-0.80263454,  0.9632938 ,  0.02826543],\n",
              "        [ 0.47431496,  1.6975547 , -1.8338844 ],\n",
              "        [ 2.9084451 ,  0.14967677, -2.46482   ],\n",
              "        [ 0.48069626,  0.71053946, -0.7411125 ],\n",
              "        [-3.1830428 , -0.07810403,  2.8799767 ],\n",
              "        [-1.1212404 ,  1.7835652 , -0.4403864 ],\n",
              "        [-1.1892617 ,  1.8034849 , -0.529591  ],\n",
              "        [-2.532462  , -0.91396755,  3.0134296 ],\n",
              "        [-2.3844087 , -0.95073897,  2.8399627 ],\n",
              "        [ 0.9005508 ,  0.9288844 , -1.4439982 ],\n",
              "        [-3.157101  ,  0.5340541 ,  2.355804  ],\n",
              "        [-1.297118  ,  1.08152   ,  0.3660056 ],\n",
              "        [-3.1476433 ,  0.32468727,  2.425933  ]], dtype=float32),\n",
              " array([[ 0.31819603, -0.8884784 ,  0.68014026],\n",
              "        [ 1.7049443 ,  1.5408798 , -2.761651  ],\n",
              "        [-3.199032  , -0.68971306,  3.427004  ],\n",
              "        [-2.1577435 ,  1.7312397 ,  0.31792447],\n",
              "        [ 1.7475927 ,  1.1777798 , -2.4334335 ],\n",
              "        [ 1.7767293 ,  0.3193719 , -1.6050398 ],\n",
              "        [ 0.95588875,  0.7047801 , -1.2497636 ],\n",
              "        [-3.2861373 ,  0.6822541 ,  2.2948456 ],\n",
              "        [ 1.9606513 ,  1.2465348 , -2.5280027 ],\n",
              "        [-0.10477936,  1.4716965 , -0.9715417 ],\n",
              "        [-1.0970558 ,  1.2672912 , -0.09667862],\n",
              "        [ 1.5127522 ,  1.6816239 , -2.6051412 ],\n",
              "        [-1.7099967 ,  2.0129364 , -0.3111239 ],\n",
              "        [ 2.130535  ,  1.3120254 , -2.7717915 ],\n",
              "        [ 1.8484083 ,  1.0187263 , -2.258816  ],\n",
              "        [-3.3218603 , -0.22881971,  3.1589208 ]], dtype=float32),\n",
              " array([[ 1.7219113 ,  0.95355743, -2.1264677 ],\n",
              "        [ 2.842551  ,  0.49278122, -2.68425   ],\n",
              "        [ 0.6224561 , -0.8595276 ,  0.22495721],\n",
              "        [ 1.457414  ,  1.0467817 , -2.0419245 ],\n",
              "        [ 0.011107  ,  1.1918049 , -0.85854745],\n",
              "        [-0.8326105 ,  0.81357116,  0.21691364],\n",
              "        [ 2.8882306 ,  0.6498443 , -2.8372972 ],\n",
              "        [-3.273362  , -0.63711894,  3.4124603 ],\n",
              "        [-0.6404626 , -0.56048095,  1.1162885 ],\n",
              "        [-0.64978385,  1.6905609 , -0.77016544],\n",
              "        [-3.4060793 , -0.11035495,  3.0266857 ],\n",
              "        [ 3.3761466 ,  0.06817811, -2.8818116 ],\n",
              "        [-3.3541143 , -0.43336478,  3.3698564 ],\n",
              "        [-1.8122452 ,  1.9791263 , -0.1587165 ],\n",
              "        [ 0.637567  ,  1.1332806 , -1.6067452 ],\n",
              "        [ 3.0295358 ,  0.8153609 , -3.1187024 ]], dtype=float32),\n",
              " array([[ 2.8252163 ,  0.0492039 , -2.4303553 ],\n",
              "        [ 3.5240135 , -0.22106436, -2.7332103 ],\n",
              "        [ 1.5218447 ,  1.3874899 , -2.3865223 ],\n",
              "        [-1.5621172 ,  1.4997793 ,  0.07124915],\n",
              "        [-3.433272  , -0.2769167 ,  3.263373  ],\n",
              "        [-2.563203  ,  0.07647982,  2.0149784 ],\n",
              "        [ 2.6120632 ,  0.4681446 , -2.5031023 ],\n",
              "        [ 2.5237286 ,  0.9615921 , -2.8211565 ],\n",
              "        [-1.7801577 ,  2.0635307 , -0.22935781],\n",
              "        [-3.161675  ,  0.721779  ,  2.2198515 ],\n",
              "        [ 0.1856726 ,  1.4401804 , -1.2302895 ],\n",
              "        [ 0.90960664, -0.68235284, -0.50268936],\n",
              "        [ 1.4812468 ,  1.222682  , -2.1370392 ],\n",
              "        [ 2.2777274 ,  0.58108985, -2.2333786 ],\n",
              "        [-0.05830212,  1.4085666 , -1.0312712 ],\n",
              "        [-2.997175  , -0.99788547,  3.4719436 ]], dtype=float32),\n",
              " array([[-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [ 1.3158267 ,  1.6363951 , -2.2391937 ],\n",
              "        [-3.1761568 , -0.8187115 ,  3.4795785 ],\n",
              "        [-1.3983251 ,  2.068568  , -0.4171059 ],\n",
              "        [ 3.547602  , -0.6299969 , -2.5416665 ],\n",
              "        [ 2.1271615 ,  0.9831221 , -2.5355878 ],\n",
              "        [ 2.7850451 , -0.1644026 , -2.1519473 ],\n",
              "        [-3.213651  , -0.4291127 ,  3.1999576 ],\n",
              "        [ 2.8584762 ,  0.47304872, -2.7261806 ],\n",
              "        [-1.1083411 ,  1.0268759 ,  0.14657483],\n",
              "        [ 1.7743424 ,  0.5019361 , -1.7854024 ],\n",
              "        [ 0.16968173,  1.379854  , -1.2070489 ],\n",
              "        [-0.90107006,  1.7609535 , -0.48925924],\n",
              "        [ 1.4561433 ,  0.6409555 , -1.6703486 ],\n",
              "        [ 3.1224606 ,  0.23979929, -2.7652507 ],\n",
              "        [-2.3191926 ,  0.95438015,  1.011008  ]], dtype=float32),\n",
              " array([[-0.71993035,  2.2048657 , -1.186579  ],\n",
              "        [-1.7438847 , -0.07597493,  1.5665797 ],\n",
              "        [ 0.21619135, -0.39868402,  0.28306386],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 2.9561694 ,  0.7721211 , -3.0847335 ],\n",
              "        [ 0.5899166 ,  1.4917092 , -1.6154699 ],\n",
              "        [ 1.3859255 ,  1.062974  , -2.1123185 ],\n",
              "        [ 1.375527  ,  1.4142457 , -2.3081257 ],\n",
              "        [ 1.1066033 ,  1.8885815 , -2.5141397 ],\n",
              "        [ 1.4632632 ,  1.0775403 , -2.1855507 ],\n",
              "        [ 1.9602777 ,  0.8398709 , -2.3273654 ],\n",
              "        [ 3.2131507 ,  0.32035172, -2.9840965 ],\n",
              "        [-2.3853385 ,  0.7686694 ,  1.489704  ],\n",
              "        [-1.6339356 , -0.57359755,  1.9382913 ],\n",
              "        [ 3.2524703 ,  0.37380096, -3.0065203 ],\n",
              "        [ 2.6571472 ,  0.6608499 , -2.6838107 ]], dtype=float32),\n",
              " array([[ 3.2889855 , -0.8983329 , -1.9017383 ],\n",
              "        [-0.02563014,  1.7292014 , -1.4101942 ],\n",
              "        [ 0.22943386,  1.8034405 , -1.6950266 ],\n",
              "        [-1.962797  ,  1.0828937 ,  1.0438433 ],\n",
              "        [-0.5497517 ,  1.9844836 , -1.1675925 ],\n",
              "        [ 2.2778912 ,  0.0680555 , -1.9885906 ],\n",
              "        [ 2.3529408 ,  0.8027974 , -2.5835052 ],\n",
              "        [ 1.0537316 ,  1.194365  , -1.7487836 ],\n",
              "        [-0.89198565, -0.51035523,  1.4025702 ],\n",
              "        [-3.327574  , -0.36570677,  3.29313   ],\n",
              "        [-3.2894838 ,  0.8422054 ,  2.1876838 ],\n",
              "        [-3.0628288 , -0.8401991 ,  3.4121008 ],\n",
              "        [ 1.6030064 ,  1.1181797 , -2.213705  ],\n",
              "        [-3.208069  , -0.64098555,  3.4137065 ],\n",
              "        [ 1.5205342 ,  1.57852   , -2.5328    ],\n",
              "        [-3.2762725 , -0.68056107,  3.4681096 ]], dtype=float32),\n",
              " array([[-3.235291  , -0.6825804 ,  3.4517186 ],\n",
              "        [-0.63247794,  1.9208992 , -1.1239017 ],\n",
              "        [ 2.0155714 ,  1.0072218 , -2.3886046 ],\n",
              "        [-3.1719406 , -0.81878567,  3.502687  ],\n",
              "        [-2.090138  ,  0.60996825,  1.3859475 ],\n",
              "        [-3.1841443 , -0.73590803,  3.451619  ],\n",
              "        [-1.6811049 ,  1.6291347 ,  0.13546756],\n",
              "        [ 1.7227863 ,  0.8398855 , -1.9532956 ],\n",
              "        [ 2.23852   ,  1.1604675 , -2.7630897 ],\n",
              "        [-3.2503226 , -0.60214216,  3.3806717 ],\n",
              "        [ 1.2188464 ,  1.0640858 , -1.8376385 ],\n",
              "        [ 2.0367424 ,  0.7954214 , -2.1957378 ],\n",
              "        [ 2.9658716 ,  0.6763662 , -2.9449852 ],\n",
              "        [ 0.9214292 ,  0.23939827, -0.7877356 ],\n",
              "        [ 0.88808423, -1.2151111 ,  0.28624728],\n",
              "        [ 1.0651807 ,  1.2847131 , -1.7769006 ]], dtype=float32),\n",
              " array([[-1.661956  ,  0.8752767 ,  0.729439  ],\n",
              "        [-3.3655465 , -0.40956035,  3.3100576 ],\n",
              "        [-2.3692899 ,  0.8796452 ,  1.2992511 ],\n",
              "        [-2.953993  , -0.7770138 ,  3.2852702 ],\n",
              "        [-1.6935436 ,  0.51944065,  1.0705875 ],\n",
              "        [ 1.4705497 ,  0.4053471 , -1.59635   ],\n",
              "        [ 1.4488364 ,  1.6665225 , -2.5000663 ],\n",
              "        [ 0.296931  ,  1.65432   , -1.4513371 ],\n",
              "        [ 2.1266499 ,  1.1490644 , -2.6964834 ],\n",
              "        [ 2.5313108 , -1.1441637 , -1.1677314 ],\n",
              "        [ 3.2449057 ,  0.20023179, -2.8829827 ],\n",
              "        [ 2.4344203 ,  0.45344302, -2.179927  ],\n",
              "        [ 1.9252692 ,  0.79971874, -2.154779  ],\n",
              "        [ 2.6764967 ,  0.31794688, -2.5674353 ],\n",
              "        [ 1.8029132 ,  0.3996084 , -1.6677202 ],\n",
              "        [ 1.5386772 ,  1.3064917 , -2.2077284 ]], dtype=float32),\n",
              " array([[ 0.76175755,  2.0693538 , -2.3820865 ],\n",
              "        [ 0.45456547,  0.96439886, -1.0301358 ],\n",
              "        [-3.2713382 , -0.685022  ,  3.4582548 ],\n",
              "        [-3.0069878 ,  0.9957445 ,  1.8814487 ],\n",
              "        [-3.3540285 , -0.5504292 ,  3.4124491 ],\n",
              "        [-3.3029358 , -0.20702234,  3.0761814 ],\n",
              "        [ 1.7359569 , -0.90878475, -0.7112672 ],\n",
              "        [ 3.5225153 , -0.59305555, -2.520958  ],\n",
              "        [ 3.5153766 , -0.6964276 , -2.429102  ],\n",
              "        [ 2.2859452 ,  1.3008353 , -2.9558823 ],\n",
              "        [ 0.50213784,  1.1643989 , -1.2619001 ],\n",
              "        [ 0.8109912 ,  1.3973855 , -1.7213498 ],\n",
              "        [ 1.649763  ,  1.1917418 , -2.238886  ],\n",
              "        [-1.4545785 ,  0.6193266 ,  0.7030251 ],\n",
              "        [ 3.1932094 ,  0.19743809, -2.8242755 ],\n",
              "        [-3.0891292 , -0.4295965 ,  3.0857134 ]], dtype=float32),\n",
              " array([[ 3.6681526 , -0.61521614, -2.578031  ],\n",
              "        [-3.208442  , -0.7252346 ,  3.4378257 ],\n",
              "        [ 1.4379073 ,  0.97576797, -1.8981082 ],\n",
              "        [-1.5568033 , -0.30357087,  1.6766459 ],\n",
              "        [ 2.1090243 ,  0.9436451 , -2.5403643 ],\n",
              "        [-3.3272107 ,  0.7263408 ,  2.335001  ],\n",
              "        [ 2.834014  ,  0.68507123, -2.973915  ],\n",
              "        [-2.946739  , -0.845528  ,  3.3387675 ],\n",
              "        [-3.0193336 ,  0.35266712,  2.4333918 ],\n",
              "        [ 1.9207412 ,  1.3242779 , -2.5826921 ],\n",
              "        [-2.042821  ,  0.8066734 ,  1.1302407 ],\n",
              "        [-0.07982217,  1.5142406 , -1.0040612 ],\n",
              "        [ 1.8833355 ,  1.444307  , -2.6646147 ],\n",
              "        [ 1.1015958 ,  1.25641   , -1.8534346 ],\n",
              "        [-1.5378281 ,  0.81185985,  0.81610346],\n",
              "        [-1.5521154 ,  1.8360897 , -0.14189509]], dtype=float32),\n",
              " array([[ 2.8807976 ,  0.49632582, -2.6943262 ],\n",
              "        [ 2.5141356 ,  0.46775505, -2.4235475 ],\n",
              "        [ 1.1047984 ,  1.0972348 , -1.7727398 ],\n",
              "        [ 0.41319883,  1.54518   , -1.4599079 ],\n",
              "        [ 3.4233563 ,  0.37939486, -3.168347  ],\n",
              "        [ 2.0958118 ,  1.0181721 , -2.454495  ],\n",
              "        [ 2.4367807 ,  0.22765504, -2.0851727 ],\n",
              "        [ 1.249389  ,  0.7823636 , -1.6097981 ],\n",
              "        [-1.2799162 ,  1.2491642 ,  0.0125733 ],\n",
              "        [-3.2267046 , -0.5530847 ,  3.2877007 ],\n",
              "        [-0.40642744, -0.2488571 ,  0.745846  ],\n",
              "        [-3.4659808 ,  0.08427235,  2.9959974 ],\n",
              "        [-3.2534077 , -0.57712626,  3.4125404 ],\n",
              "        [ 3.6320589 , -0.22502163, -2.8936682 ],\n",
              "        [ 2.2636733 ,  1.2090012 , -2.829834  ],\n",
              "        [-3.2979512 , -0.6483197 ,  3.4533277 ]], dtype=float32),\n",
              " array([[-3.3986638 , -0.468602  ,  3.351902  ],\n",
              "        [ 1.0988562 ,  1.2404214 , -1.8426934 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [ 2.8580525 ,  0.6261476 , -2.8509524 ],\n",
              "        [ 1.9230326 ,  1.1091621 , -2.4222703 ],\n",
              "        [-0.9668948 ,  1.291674  , -0.19864002],\n",
              "        [-1.2693912 ,  0.9353411 ,  0.45544794],\n",
              "        [-3.3411512 , -0.22477064,  3.1491914 ],\n",
              "        [-3.1205528 , -0.7279465 ,  3.3469205 ],\n",
              "        [-2.9108365 ,  0.14546472,  2.4290729 ],\n",
              "        [-0.34929457,  0.7422672 , -0.13455807],\n",
              "        [ 0.4760163 ,  0.47301334, -0.8549555 ],\n",
              "        [-0.5027216 ,  1.3031472 , -0.505167  ],\n",
              "        [ 1.761445  ,  1.3234684 , -2.4353142 ],\n",
              "        [-3.298478  , -0.5644755 ,  3.3482409 ],\n",
              "        [-3.0329196 , -0.88609016,  3.465325  ]], dtype=float32),\n",
              " array([[-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [ 1.4329282 ,  1.641368  , -2.4691107 ],\n",
              "        [ 3.5846174 , -0.6918253 , -2.5068402 ],\n",
              "        [-1.1534971 ,  1.659414  , -0.4204833 ],\n",
              "        [-1.0304921 ,  1.9625145 , -0.79265106],\n",
              "        [ 0.44324145,  1.5829948 , -1.4900379 ],\n",
              "        [-2.9126637 , -0.4387348 ,  2.9609334 ],\n",
              "        [-0.21943286,  1.6651845 , -0.9849078 ],\n",
              "        [ 0.57713383,  1.1714835 , -1.3734989 ],\n",
              "        [-3.4067552 , -0.47184795,  3.3704581 ],\n",
              "        [-0.5378836 ,  1.3906865 , -0.50776386],\n",
              "        [ 0.25397345,  1.749842  , -1.5162668 ],\n",
              "        [ 1.8944806 , -0.36429253, -1.2880745 ],\n",
              "        [-2.1057546 ,  1.8949069 ,  0.22925307],\n",
              "        [ 1.4057871 ,  1.0744894 , -1.9390855 ],\n",
              "        [-0.00375625,  2.0275898 , -1.6813008 ]], dtype=float32),\n",
              " array([[-3.0980666 ,  0.45704606,  2.3586726 ],\n",
              "        [ 2.4833126 ,  0.9075229 , -2.8284473 ],\n",
              "        [-3.2011707 , -0.55012774,  3.3061476 ],\n",
              "        [-3.325217  , -0.51886356,  3.4134407 ],\n",
              "        [-3.517608  , -0.1945055 ,  3.23402   ],\n",
              "        [-2.4306295 ,  1.6935748 ,  0.6167556 ],\n",
              "        [-3.2999997 ,  0.74785066,  2.2609866 ],\n",
              "        [-2.9660347 , -0.30398676,  2.866458  ],\n",
              "        [-3.3061547 , -0.54291844,  3.3889024 ],\n",
              "        [-2.208275  ,  1.7569107 ,  0.41667846],\n",
              "        [ 1.9380829 ,  0.94474936, -2.2211318 ],\n",
              "        [-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [-3.321304  , -0.6246686 ,  3.447155  ],\n",
              "        [-3.2242873 , -0.7323208 ,  3.4676428 ],\n",
              "        [-2.1757724 ,  0.18317184,  1.551007  ],\n",
              "        [-3.2376158 , -0.7068447 ,  3.4547644 ]], dtype=float32),\n",
              " array([[ 0.99778444,  1.3649715 , -1.8684069 ],\n",
              "        [-0.23530158,  1.190128  , -0.67029184],\n",
              "        [-2.7556932 ,  0.6734855 ,  1.943223  ],\n",
              "        [-2.9226177 ,  1.2258424 ,  1.47524   ],\n",
              "        [ 1.6752592 ,  1.3432058 , -2.4778402 ],\n",
              "        [-2.979068  , -0.91591406,  3.4240274 ],\n",
              "        [ 2.1079946 ,  1.2586546 , -2.7887013 ],\n",
              "        [ 2.5023077 ,  0.5534453 , -2.4925365 ],\n",
              "        [-3.2854714 , -0.7232189 ,  3.4596775 ],\n",
              "        [-2.8114812 ,  1.2083507 ,  1.4911069 ],\n",
              "        [ 3.3645542 , -0.5216694 , -2.223859  ],\n",
              "        [ 0.7105957 ,  1.5497404 , -1.8206474 ],\n",
              "        [-3.0153356 ,  0.26839748,  2.4759185 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [-2.9996407 , -0.7211029 ,  3.2840273 ],\n",
              "        [ 1.3656079 ,  1.0824544 , -1.9245261 ]], dtype=float32),\n",
              " array([[-3.2268317 , -0.22680834,  3.064857  ],\n",
              "        [ 3.2008696 ,  0.32646355, -2.9721622 ],\n",
              "        [ 0.7811659 ,  1.22      , -1.5320623 ],\n",
              "        [-2.8329687 ,  0.81413853,  1.6751803 ],\n",
              "        [ 0.4142611 , -1.1716273 ,  0.62865365],\n",
              "        [ 2.6069384 ,  0.4103937 , -2.3960052 ],\n",
              "        [ 0.48945034,  1.516744  , -1.5475101 ],\n",
              "        [-2.3410273 ,  1.4858527 ,  0.759898  ],\n",
              "        [ 0.98956645,  0.74077654, -1.3621864 ],\n",
              "        [-1.1899992 ,  0.9993923 ,  0.3383401 ],\n",
              "        [ 2.8690681 ,  0.7662693 , -3.0352645 ],\n",
              "        [ 2.110483  ,  0.47554603, -1.9722928 ],\n",
              "        [ 0.9401073 ,  1.1060005 , -1.6116515 ],\n",
              "        [-2.4518619 ,  0.2309504 ,  1.9793255 ],\n",
              "        [ 2.1319308 ,  0.9421935 , -2.484177  ],\n",
              "        [ 0.05282532,  1.5253111 , -1.2693583 ]], dtype=float32),\n",
              " array([[ 2.0975769 , -0.78286225, -1.0777823 ],\n",
              "        [-3.2021692 , -0.5098808 ,  3.2754102 ],\n",
              "        [-3.3774233 , -0.6248502 ,  3.439236  ],\n",
              "        [-1.2710263 ,  2.1054864 , -0.61861765],\n",
              "        [-2.3754022 ,  1.0943583 ,  1.1554036 ],\n",
              "        [-1.2121128 ,  2.108048  , -0.51126873],\n",
              "        [-3.3112166 , -0.5203338 ,  3.4093332 ],\n",
              "        [-1.2562816 ,  1.9800766 , -0.48230723],\n",
              "        [-1.3429711 ,  0.7325533 ,  0.6705454 ],\n",
              "        [ 1.6288041 ,  0.8500266 , -2.017148  ],\n",
              "        [ 1.738896  ,  0.8334807 , -2.1681428 ],\n",
              "        [ 3.6394916 , -0.678841  , -2.4836364 ],\n",
              "        [-1.6870676 ,  0.5287011 ,  1.2294084 ],\n",
              "        [-1.9057704 ,  1.8219327 ,  0.10445119],\n",
              "        [ 1.5096039 ,  1.0698458 , -2.0761545 ],\n",
              "        [ 2.5616958 ,  0.8318964 , -2.7658105 ]], dtype=float32),\n",
              " array([[-3.296322  , -0.67902267,  3.4668283 ],\n",
              "        [-2.9116602 , -0.64327204,  3.175065  ],\n",
              "        [ 2.9339435 ,  0.07681321, -2.3769078 ],\n",
              "        [-0.05936961,  1.6989554 , -1.1820042 ],\n",
              "        [-1.2134811 ,  1.8517987 , -0.49736297],\n",
              "        [ 2.2562525 ,  0.15492955, -1.8541553 ],\n",
              "        [ 2.766414  ,  0.82478184, -3.0269806 ],\n",
              "        [-0.6011757 ,  1.8628035 , -1.1354086 ],\n",
              "        [-3.2277951 , -0.21892259,  3.0546837 ],\n",
              "        [ 3.1965048 ,  0.01286973, -2.6386554 ],\n",
              "        [-3.1695368 , -0.5755757 ,  3.3531866 ],\n",
              "        [ 3.6441903 , -0.56816316, -2.5742507 ],\n",
              "        [-1.3153449 ,  1.7680417 , -0.3572414 ],\n",
              "        [ 1.1259898 ,  1.6318282 , -2.0456483 ],\n",
              "        [-0.47702017,  1.5760226 , -0.8854799 ],\n",
              "        [ 2.5676138 ,  0.33634928, -2.3246956 ]], dtype=float32),\n",
              " array([[ 1.0207403 ,  0.84269387, -1.3161311 ],\n",
              "        [ 3.4999764 , -0.7571416 , -2.4056194 ],\n",
              "        [ 2.9987137 ,  0.82561225, -3.0767555 ],\n",
              "        [ 2.7034223 ,  0.4430966 , -2.566187  ],\n",
              "        [-3.2846005 ,  0.25546506,  2.6672282 ],\n",
              "        [ 1.2299275 ,  1.4712628 , -1.9978544 ],\n",
              "        [-2.0415037 ,  0.14576623,  1.746622  ],\n",
              "        [-3.01758   , -0.74457765,  3.269139  ],\n",
              "        [-2.9883087 , -0.6528199 ,  3.1744556 ],\n",
              "        [-3.5174656 , -0.04600735,  3.0803244 ],\n",
              "        [ 0.8391407 ,  1.2430904 , -1.659659  ],\n",
              "        [ 3.028406  , -0.2179713 , -2.2281299 ],\n",
              "        [ 1.9195253 ,  1.2444698 , -2.5729146 ],\n",
              "        [ 1.922028  ,  0.6309267 , -2.1336262 ],\n",
              "        [-1.5618352 ,  0.90261346,  0.5924117 ],\n",
              "        [ 3.5395205 ,  0.220344  , -3.1528683 ]], dtype=float32),\n",
              " array([[-3.42860198e+00, -1.19248256e-01,  3.09616709e+00],\n",
              "        [ 2.99131894e+00,  7.41076410e-01, -3.00795245e+00],\n",
              "        [-4.17054176e-01, -1.59287691e-01,  6.09455585e-01],\n",
              "        [ 1.53433466e+00,  1.28376448e+00, -2.25760365e+00],\n",
              "        [ 8.82943213e-01,  3.46605510e-01, -8.52930486e-01],\n",
              "        [ 6.67189360e-01,  1.36494911e+00, -1.52461529e+00],\n",
              "        [ 4.69328135e-01,  1.00490439e+00, -1.08215630e+00],\n",
              "        [ 1.81205094e+00,  1.01929538e-01, -1.61663389e+00],\n",
              "        [ 2.70726895e+00,  6.33779883e-01, -2.69027042e+00],\n",
              "        [ 3.38665795e+00,  2.37330757e-02, -2.83021355e+00],\n",
              "        [-7.65779316e-01,  1.40411341e+00, -4.09356028e-01],\n",
              "        [ 2.10143447e+00,  3.29731256e-01, -1.92571008e+00],\n",
              "        [ 2.22404552e+00, -8.95215511e-01, -1.05545735e+00],\n",
              "        [-1.11814344e-03,  1.13722408e+00, -8.23436022e-01],\n",
              "        [-8.32876563e-01,  8.84697080e-01,  1.07344501e-01],\n",
              "        [-2.65643597e-01, -1.19225371e+00,  1.13990474e+00]], dtype=float32),\n",
              " array([[ 2.3189733 ,  1.1224042 , -2.8628888 ],\n",
              "        [-1.0548477 ,  1.2894431 ,  0.03598907],\n",
              "        [-1.0154127 ,  2.1148424 , -0.85605836],\n",
              "        [ 1.7632679 ,  0.66237986, -1.9163778 ],\n",
              "        [-2.8772762 ,  0.26181284,  2.3990724 ],\n",
              "        [ 2.2923117 ,  1.100871  , -2.764975  ],\n",
              "        [ 3.0640414 ,  0.5349654 , -2.9291322 ],\n",
              "        [ 0.95750374,  1.6934057 , -2.1773117 ],\n",
              "        [-3.3748672 , -0.492036  ,  3.3908944 ],\n",
              "        [-1.6295222 , -0.02891147,  1.561651  ],\n",
              "        [-3.1069214 , -0.5753642 ,  3.1708245 ],\n",
              "        [-3.3278883 , -0.6021642 ,  3.4212809 ],\n",
              "        [ 2.7336571 ,  0.23188224, -2.3962646 ],\n",
              "        [-3.0880816 , -0.78397465,  3.4104385 ],\n",
              "        [ 2.056979  ,  1.1938982 , -2.695366  ],\n",
              "        [ 3.386447  ,  0.2105158 , -3.0188198 ]], dtype=float32),\n",
              " array([[-3.3635943 , -0.38985625,  3.3055286 ],\n",
              "        [-0.1377194 ,  1.1242288 , -0.70989466],\n",
              "        [-1.3513374 ,  1.3451003 ,  0.03425246],\n",
              "        [-3.4095733 , -0.06603406,  3.0431747 ],\n",
              "        [-3.2933896 , -0.56893295,  3.3634415 ],\n",
              "        [ 0.20648648,  1.8807642 , -1.767625  ],\n",
              "        [-3.355636  , -0.48973894,  3.3775105 ],\n",
              "        [ 1.5677892 ,  0.7717839 , -1.872947  ],\n",
              "        [ 2.6682732 ,  0.71141267, -2.781918  ],\n",
              "        [-2.8115423 , -1.0796531 ,  3.362735  ],\n",
              "        [-2.5378582 ,  0.9792603 ,  1.4663723 ],\n",
              "        [-3.3936186 , -0.4155043 ,  3.3199549 ],\n",
              "        [ 3.6995091 , -0.25019783, -2.9228423 ],\n",
              "        [-3.3903105 , -0.02792224,  3.017537  ],\n",
              "        [ 2.7964184 ,  0.34873345, -2.558855  ],\n",
              "        [-3.1705592 , -0.8074372 ,  3.460876  ]], dtype=float32),\n",
              " array([[-1.4806495 , -0.34239763,  1.6977497 ],\n",
              "        [ 2.4439044 ,  1.0022796 , -2.823392  ],\n",
              "        [-3.2271369 , -0.73722327,  3.4579415 ],\n",
              "        [-2.644348  ,  1.073171  ,  1.382302  ],\n",
              "        [ 3.564391  , -0.08181783, -2.9398856 ],\n",
              "        [ 0.9793599 ,  1.1269912 , -1.6430368 ],\n",
              "        [ 2.1960926 ,  0.83586025, -2.4643455 ],\n",
              "        [-3.140982  , -0.5687406 ,  3.3091478 ],\n",
              "        [-3.0246427 , -0.9820677 ,  3.4632456 ],\n",
              "        [-3.2194922 , -0.7223668 ,  3.4749699 ],\n",
              "        [-1.711152  ,  1.3527449 ,  0.450751  ],\n",
              "        [ 0.06800099,  1.2827866 , -0.85640293],\n",
              "        [ 1.7801932 ,  1.0313917 , -2.191697  ],\n",
              "        [ 1.3210014 ,  1.5293342 , -2.1938443 ],\n",
              "        [ 2.5006673 ,  0.05786002, -2.0471597 ],\n",
              "        [ 0.98234665,  0.6463142 , -1.2478133 ]], dtype=float32),\n",
              " array([[ 0.02089741,  1.561966  , -1.2257137 ],\n",
              "        [ 2.1951637 ,  1.074224  , -2.6742086 ],\n",
              "        [ 2.9741473 , -0.43771875, -2.10295   ],\n",
              "        [-1.6088618 , -0.85502756,  2.2406163 ],\n",
              "        [ 2.1462967 ,  0.7377739 , -2.393317  ],\n",
              "        [-2.8188617 , -0.16026615,  2.698734  ],\n",
              "        [ 2.0477488 ,  0.90685   , -2.3901606 ],\n",
              "        [-1.3510394 ,  1.6473333 , -0.12619865],\n",
              "        [ 3.036365  , -0.66673464, -1.9804827 ],\n",
              "        [-3.111807  , -0.60194165,  3.2905316 ],\n",
              "        [-1.0272309 ,  1.9568536 , -0.7929218 ],\n",
              "        [-0.6486986 ,  1.8186709 , -0.9817489 ],\n",
              "        [ 2.7372303 ,  0.24427086, -2.3220625 ],\n",
              "        [-0.5354163 ,  1.9752191 , -1.1788926 ],\n",
              "        [-3.194154  , -0.78606594,  3.4790258 ],\n",
              "        [ 0.80835795,  1.4675109 , -1.7802749 ]], dtype=float32),\n",
              " array([[-3.1693509e+00, -7.6635516e-01,  3.4749594e+00],\n",
              "        [-2.7145913e+00, -9.1243125e-03,  2.4379377e+00],\n",
              "        [ 1.8631116e+00,  9.8623693e-01, -2.2498803e+00],\n",
              "        [-9.6785462e-01,  1.6346596e+00, -4.4880539e-01],\n",
              "        [ 2.8855493e+00, -1.4438380e-02, -2.3995185e+00],\n",
              "        [ 2.5332699e+00,  5.3235710e-01, -2.4737043e+00],\n",
              "        [-3.2526495e+00,  2.7573954e-02,  2.8739724e+00],\n",
              "        [ 1.8053240e-01, -4.5564395e-01,  4.1564485e-01],\n",
              "        [ 2.8995035e+00,  6.5253145e-01, -2.9014163e+00],\n",
              "        [ 2.4624360e+00,  9.6383971e-01, -2.7947316e+00],\n",
              "        [-3.3186228e+00, -6.1469698e-01,  3.4335966e+00],\n",
              "        [-7.4510270e-01,  1.6561160e+00, -6.4704895e-01],\n",
              "        [ 2.6526225e+00,  4.5296499e-01, -2.5604987e+00],\n",
              "        [-3.2131736e+00, -1.3488320e-04,  2.7694011e+00],\n",
              "        [ 1.6512960e+00,  1.5069004e+00, -2.4838629e+00],\n",
              "        [-3.4203255e+00, -2.3970984e-01,  3.2044544e+00]], dtype=float32),\n",
              " array([[-0.05669085,  0.9753946 , -0.7812951 ],\n",
              "        [ 0.7296824 ,  1.3547546 , -1.5657054 ],\n",
              "        [ 3.1022217 , -0.13775553, -2.3790503 ],\n",
              "        [ 1.1897815 ,  1.4642934 , -2.3232856 ],\n",
              "        [ 2.402366  ,  0.73043233, -2.5710268 ],\n",
              "        [ 3.4556553 ,  0.04425117, -2.9318519 ],\n",
              "        [ 3.2104013 ,  0.46073076, -3.0725589 ],\n",
              "        [-2.4621484 ,  1.3997524 ,  0.92890465],\n",
              "        [ 2.7405975 ,  0.74125683, -2.787484  ],\n",
              "        [-3.2904894 , -0.6326842 ,  3.4539125 ],\n",
              "        [-2.3668463 ,  1.0955125 ,  1.2574697 ],\n",
              "        [-3.0508702 , -0.89022344,  3.4751983 ],\n",
              "        [ 3.4337444 ,  0.1526939 , -3.0287538 ],\n",
              "        [-3.372239  , -0.24645008,  3.1649184 ],\n",
              "        [ 3.535057  , -0.94024026, -2.2594433 ],\n",
              "        [-3.2156584 ,  0.63682425,  2.3290257 ]], dtype=float32),\n",
              " array([[-3.3419483 , -0.5569101 ,  3.4110112 ],\n",
              "        [-2.8548212 , -0.733766  ,  3.066408  ],\n",
              "        [-1.479107  ,  1.2387484 ,  0.26283324],\n",
              "        [-0.5624233 ,  1.0684868 , -0.28497022],\n",
              "        [ 2.3856232 , -0.1769498 , -1.7258055 ],\n",
              "        [ 0.09356388, -0.45651218,  0.34265274],\n",
              "        [ 2.6927965 , -0.49001044, -1.7236786 ],\n",
              "        [ 2.473309  ,  0.39399087, -2.3173873 ],\n",
              "        [-0.9320734 ,  1.2443897 , -0.08811281],\n",
              "        [-3.1524909 ,  0.87871885,  2.0589547 ],\n",
              "        [ 1.4030224 ,  1.0149066 , -1.9326847 ],\n",
              "        [ 1.7702286 ,  1.4959465 , -2.6969867 ],\n",
              "        [-2.8622272 ,  0.541589  ,  2.0476108 ],\n",
              "        [ 2.4792297 ,  0.9140204 , -2.75838   ],\n",
              "        [-2.6511545 , -0.6067623 ,  2.8418522 ],\n",
              "        [ 3.2921288 , -0.9503813 , -2.0585907 ]], dtype=float32),\n",
              " array([[ 3.4442856 , -0.8859161 , -2.2218897 ],\n",
              "        [ 2.7704468 ,  0.741693  , -2.8692732 ],\n",
              "        [ 1.6298645 ,  1.3216712 , -2.3620858 ],\n",
              "        [-1.342388  ,  1.3413168 ,  0.08941584],\n",
              "        [ 1.0287734 ,  1.8914552 , -2.4815385 ],\n",
              "        [ 0.9957563 ,  1.6372503 , -2.2228658 ],\n",
              "        [-3.0754182 , -0.86989194,  3.4327374 ],\n",
              "        [ 1.2968022 ,  0.8223115 , -1.7195622 ],\n",
              "        [-2.8650076 , -0.34086213,  2.7654612 ],\n",
              "        [-1.8913587 ,  1.4073536 ,  0.57473564],\n",
              "        [-3.3122337 , -0.2526688 ,  3.1561706 ],\n",
              "        [-3.155193  , -0.79356205,  3.475347  ],\n",
              "        [-3.2601147 , -0.3456808 ,  3.1395867 ],\n",
              "        [ 3.322165  ,  0.09303803, -2.7920504 ],\n",
              "        [ 2.8066437 ,  0.6190686 , -2.791121  ],\n",
              "        [ 1.4020225 ,  1.5394698 , -2.4486485 ]], dtype=float32),\n",
              " array([[ 1.7203745 , -0.57862854, -0.88341445],\n",
              "        [ 1.6973921 ,  1.3080806 , -2.4381573 ],\n",
              "        [ 0.36374363,  1.2608329 , -1.179678  ],\n",
              "        [ 3.6531951 , -0.6688707 , -2.544106  ],\n",
              "        [ 1.8448497 ,  1.5693165 , -2.8384628 ],\n",
              "        [ 3.5083323 ,  0.02765074, -2.932456  ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-3.2908368 , -0.04662909,  2.9330583 ],\n",
              "        [ 1.078988  ,  1.4961087 , -2.1224391 ],\n",
              "        [-3.0579565 ,  1.2126182 ,  1.7660669 ],\n",
              "        [ 2.185691  ,  1.3230042 , -2.8567462 ],\n",
              "        [ 2.3574677 ,  1.2172579 , -2.8337183 ],\n",
              "        [-1.8334664 , -0.947451  ,  2.626749  ],\n",
              "        [-1.9504298 , -0.32959786,  2.1941633 ],\n",
              "        [ 0.1074293 ,  1.9812    , -1.6622106 ],\n",
              "        [-3.1943352 , -0.4605209 ,  3.2308855 ]], dtype=float32),\n",
              " array([[-2.6247962 , -0.26764244,  2.553361  ],\n",
              "        [ 3.1737897 ,  0.23345949, -2.750898  ],\n",
              "        [-1.7445128 ,  1.4468004 ,  0.43587208],\n",
              "        [-3.5738246 ,  0.13288996,  2.998085  ],\n",
              "        [-1.4713668 ,  2.0244522 , -0.39569765],\n",
              "        [-2.5880275 ,  1.268918  ,  1.1369884 ],\n",
              "        [-3.463023  , -0.2639636 ,  3.261651  ],\n",
              "        [-2.0779078 , -1.0208027 ,  2.8156471 ],\n",
              "        [ 0.831618  ,  1.3566968 , -1.6988169 ],\n",
              "        [ 1.3013794 ,  1.2974777 , -2.157035  ],\n",
              "        [-3.0550978 , -0.93580306,  3.436484  ],\n",
              "        [ 2.4466903 ,  0.39143616, -2.2437916 ],\n",
              "        [ 1.2738338 ,  1.7951454 , -2.5881348 ],\n",
              "        [-3.2039661 , -0.68215   ,  3.4050698 ],\n",
              "        [-3.4113286 , -0.16538383,  3.1508853 ],\n",
              "        [ 0.01142418,  1.2995522 , -0.92927235]], dtype=float32),\n",
              " array([[-1.6820805 ,  1.4648702 ,  0.4247345 ],\n",
              "        [ 3.0851524 , -0.21279994, -2.3949306 ],\n",
              "        [-2.9026673 , -0.7997235 ,  3.1976433 ],\n",
              "        [ 3.2265975 ,  0.07394543, -2.7286549 ],\n",
              "        [-3.2596185 , -0.68250763,  3.41453   ],\n",
              "        [ 0.45354196,  1.4384831 , -1.5072236 ],\n",
              "        [ 2.096999  ,  0.9548042 , -2.443965  ],\n",
              "        [ 1.4578115 ,  1.5482776 , -2.3593435 ],\n",
              "        [-1.3818358 ,  0.5472512 ,  0.86877865],\n",
              "        [ 3.0926201 ,  0.5285206 , -2.8925624 ],\n",
              "        [-1.1380192 ,  0.49840632,  0.8027726 ],\n",
              "        [-2.8131187 , -0.8123746 ,  3.2788    ],\n",
              "        [-3.0606418 , -0.9305235 ,  3.4819632 ],\n",
              "        [-1.1841525 ,  1.3810918 , -0.04834892],\n",
              "        [ 2.698949  ,  0.8329348 , -2.807724  ],\n",
              "        [-1.3443758 ,  0.83214146,  0.5842582 ]], dtype=float32),\n",
              " array([[ 2.5166438 ,  0.65907365, -2.4639645 ],\n",
              "        [ 2.3800442 ,  1.0303857 , -2.7289333 ],\n",
              "        [-1.3167529 ,  1.6742221 , -0.27175146],\n",
              "        [-2.2210772 ,  0.9825759 ,  1.1896152 ],\n",
              "        [-1.7792026 ,  1.9540913 , -0.2824511 ],\n",
              "        [ 2.5764558 , -0.22410679, -1.8019493 ],\n",
              "        [-2.1341338 ,  0.04070316,  1.9922583 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 0.6419961 ,  1.6033453 , -1.7896031 ],\n",
              "        [ 2.0575058 ,  1.2961164 , -2.6140738 ],\n",
              "        [-2.9858634 , -0.10257582,  2.8599658 ],\n",
              "        [ 3.2690847 , -0.39620742, -2.32499   ],\n",
              "        [ 3.190203  ,  0.5009198 , -2.9566321 ],\n",
              "        [-3.2115276 , -0.51603293,  3.29605   ],\n",
              "        [-3.1001894 ,  0.5382734 ,  2.2438135 ],\n",
              "        [-3.2061486 ,  0.11578861,  2.6439662 ]], dtype=float32),\n",
              " array([[ 3.6528428 , -0.36553156, -2.772472  ],\n",
              "        [-0.86824673,  1.7531296 , -0.6766146 ],\n",
              "        [ 2.5677412 ,  0.7641796 , -2.597154  ],\n",
              "        [ 1.9157614 ,  1.291699  , -2.5089025 ],\n",
              "        [-0.41112018,  1.9398845 , -1.1420996 ],\n",
              "        [-3.2163327 , -0.49861506,  3.2298868 ],\n",
              "        [ 0.2430041 ,  1.8163773 , -1.6545401 ],\n",
              "        [ 0.27932248,  1.3307594 , -1.2340076 ],\n",
              "        [-3.112541  , -0.7604059 ,  3.3768778 ],\n",
              "        [ 2.3734818 ,  0.4614064 , -2.2687423 ],\n",
              "        [-3.1770122 , -0.65639734,  3.3761947 ],\n",
              "        [ 2.106249  ,  0.5900081 , -2.1384306 ],\n",
              "        [ 3.2348883 , -0.3483198 , -2.3452902 ],\n",
              "        [-3.1815474 , -0.6733742 ,  3.3794937 ],\n",
              "        [-0.6311093 ,  1.9460338 , -1.0929503 ],\n",
              "        [-3.0299733 , -0.7106322 ,  3.3323312 ]], dtype=float32),\n",
              " array([[-1.1374546 ,  1.823315  , -0.5290249 ],\n",
              "        [ 0.7300831 ,  1.7192775 , -1.9204065 ],\n",
              "        [-2.5788827 ,  0.8869753 ,  1.3937522 ],\n",
              "        [ 3.0466971 , -0.3278403 , -2.1848264 ],\n",
              "        [-3.2407415 , -0.7739378 ,  3.4778948 ],\n",
              "        [-0.46116948,  1.7644672 , -1.0110307 ],\n",
              "        [-3.3631012 , -0.31380367,  3.273243  ],\n",
              "        [-3.3770492 , -0.1815207 ,  3.1399083 ],\n",
              "        [-0.66278785,  0.4058858 ,  0.4425356 ],\n",
              "        [ 1.6459193 ,  1.2597389 , -2.3346205 ],\n",
              "        [ 3.5638063 , -0.50501597, -2.5998487 ],\n",
              "        [-3.2833626 , -0.45879894,  3.2465534 ],\n",
              "        [ 0.9639997 ,  1.5473078 , -2.0170708 ],\n",
              "        [ 3.6272058 , -0.16990133, -2.9858708 ],\n",
              "        [-0.28172982,  1.4274403 , -0.93334174],\n",
              "        [ 2.695979  ,  0.40108725, -2.5084577 ]], dtype=float32),\n",
              " array([[-1.8475748 ,  1.9022645 , -0.12335873],\n",
              "        [-1.4415109 , -1.4912437 ,  2.5830898 ],\n",
              "        [-3.0445926 ,  0.7246483 ,  2.0777674 ],\n",
              "        [ 1.1967973 ,  1.1024042 , -1.942534  ],\n",
              "        [ 3.274022  ,  0.07398231, -2.7925663 ],\n",
              "        [-2.7840889 , -0.56811607,  2.848196  ],\n",
              "        [-2.6784365 ,  1.0472302 ,  1.5533144 ],\n",
              "        [ 1.6357135 ,  0.8964889 , -2.078966  ],\n",
              "        [ 3.3972821 ,  0.38546413, -3.1066797 ],\n",
              "        [-3.330451  ,  0.69908416,  2.3478131 ],\n",
              "        [ 0.02776928,  1.4806738 , -1.1445793 ],\n",
              "        [-3.2886302 ,  0.5403549 ,  2.3511262 ],\n",
              "        [ 0.14247042,  1.5197763 , -1.2958407 ],\n",
              "        [-3.5090373 , -0.1487404 ,  3.224252  ],\n",
              "        [-0.69686705,  1.3047882 , -0.34678   ],\n",
              "        [-3.1267297 , -0.5996288 ,  3.3174474 ]], dtype=float32),\n",
              " array([[ 1.1612325 ,  1.449375  , -2.0749037 ],\n",
              "        [ 1.0959826 ,  1.6121582 , -2.0593152 ],\n",
              "        [-2.920519  , -0.83883655,  3.328126  ],\n",
              "        [-2.4761524 ,  1.5291979 ,  0.92193496],\n",
              "        [ 1.3928493 ,  1.767629  , -2.5792394 ],\n",
              "        [ 1.1308614 ,  1.3081256 , -1.8714564 ],\n",
              "        [-3.1643384 , -0.78089935,  3.492873  ],\n",
              "        [ 1.2290634 ,  1.1268632 , -1.7679925 ],\n",
              "        [-3.2402413 , -0.6265034 ,  3.4289875 ],\n",
              "        [ 3.587478  , -0.38241866, -2.7626877 ],\n",
              "        [ 2.0796459 ,  1.1523842 , -2.6624708 ],\n",
              "        [-3.2797902 , -0.5614263 ,  3.3753686 ],\n",
              "        [ 3.4664304 ,  0.18594776, -3.0168571 ],\n",
              "        [ 3.36264   , -0.6432686 , -2.2058105 ],\n",
              "        [-2.8159044 ,  1.1368493 ,  1.4093785 ],\n",
              "        [ 2.5149574 , -0.25042394, -1.6894703 ]], dtype=float32),\n",
              " array([[ 3.5861871 , -0.21198493, -2.899851  ],\n",
              "        [ 3.5586815 , -0.5471508 , -2.5489836 ],\n",
              "        [-0.99608135,  1.0690757 ,  0.11802784],\n",
              "        [ 3.388881  ,  0.23544742, -3.013431  ],\n",
              "        [-1.2881335 ,  2.0986938 , -0.6723511 ],\n",
              "        [ 1.3921932 ,  1.2558972 , -2.2265313 ],\n",
              "        [ 1.1852931 ,  0.9443147 , -1.5909659 ],\n",
              "        [-1.2052914 ,  1.6973941 , -0.4909923 ],\n",
              "        [ 1.1187229 ,  1.712243  , -2.335009  ],\n",
              "        [-1.4912883 ,  1.4126109 ,  0.26368734],\n",
              "        [-0.5832276 ,  1.4622046 , -0.62791145],\n",
              "        [ 2.5135596 ,  0.9864231 , -2.8226957 ],\n",
              "        [ 2.480623  ,  1.0217099 , -2.833305  ],\n",
              "        [-2.2988088 ,  1.3441525 ,  0.81828094],\n",
              "        [-2.9227993 , -0.435965  ,  2.9351587 ],\n",
              "        [ 1.8388854 ,  1.3891786 , -2.554614  ]], dtype=float32),\n",
              " array([[ 0.4471459 ,  1.6154709 , -1.5536097 ],\n",
              "        [-2.664664  ,  0.22790496,  2.2998202 ],\n",
              "        [ 1.4833454 ,  0.89601016, -1.9004545 ],\n",
              "        [-2.1388319 ,  1.593173  ,  0.57774067],\n",
              "        [ 1.2502297 ,  0.97024935, -1.7792623 ],\n",
              "        [-1.3116091 ,  1.5206159 , -0.00859682],\n",
              "        [ 3.390428  , -0.5890618 , -2.4174213 ],\n",
              "        [ 3.3879433 ,  0.37070498, -3.1582077 ],\n",
              "        [-3.1625414 , -0.33781803,  3.1271982 ],\n",
              "        [-3.1746914 , -0.78039396,  3.4487457 ],\n",
              "        [-0.8575809 , -0.3020572 ,  0.9847978 ],\n",
              "        [ 1.0985773 ,  1.6394101 , -2.2805557 ],\n",
              "        [ 0.1834037 ,  1.5755223 , -1.2848597 ],\n",
              "        [ 3.4422166 , -0.86809033, -2.2537024 ],\n",
              "        [-3.3681161 , -0.23595437,  3.1023154 ],\n",
              "        [-3.2708418 , -0.2863867 ,  3.1652856 ]], dtype=float32),\n",
              " array([[-2.702037  , -0.9900497 ,  3.2372344 ],\n",
              "        [ 3.621383  , -0.12594861, -2.9332764 ],\n",
              "        [ 2.422784  ,  0.99188894, -2.795457  ],\n",
              "        [ 3.4745982 , -0.88259137, -2.298429  ],\n",
              "        [-2.8951647 , -0.38161138,  2.9432116 ],\n",
              "        [ 3.6167033 , -0.31637812, -2.7546167 ],\n",
              "        [-3.2467995 , -0.6461723 ,  3.4174984 ],\n",
              "        [ 0.6443217 ,  1.4880277 , -1.7380966 ],\n",
              "        [-3.3080633 , -0.20960459,  3.0876122 ],\n",
              "        [-3.3165374 , -0.5614816 ,  3.4178994 ],\n",
              "        [-3.3529162 , -0.22264482,  3.17744   ],\n",
              "        [-2.8104324 , -0.3025407 ,  2.7612867 ],\n",
              "        [-2.6928263 ,  1.1213019 ,  1.5010126 ],\n",
              "        [ 1.1942503 ,  1.7515652 , -2.455494  ],\n",
              "        [ 2.563018  ,  0.94755626, -2.9120321 ],\n",
              "        [ 0.32098153, -1.1630782 ,  0.8093298 ]], dtype=float32),\n",
              " array([[ 1.8837615 , -0.1540913 , -1.3691769 ],\n",
              "        [-3.4238133 , -0.3665098 ,  3.3122048 ],\n",
              "        [ 1.9908863 ,  1.213071  , -2.533783  ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-3.0894573 ,  0.1098701 ,  2.6245532 ],\n",
              "        [-3.1080377 ,  0.8753762 ,  1.9598758 ],\n",
              "        [ 2.365936  ,  0.12239279, -1.9059769 ],\n",
              "        [ 0.8779834 ,  1.5341064 , -1.9076343 ],\n",
              "        [-3.1862667 ,  0.32964978,  2.4825938 ],\n",
              "        [-3.1942372 ,  0.81063735,  2.159405  ],\n",
              "        [ 1.656239  , -0.44994402, -1.0091268 ],\n",
              "        [ 1.7392441 ,  1.3175246 , -2.474184  ],\n",
              "        [ 0.27996668,  1.7650435 , -1.6907771 ],\n",
              "        [-0.15403658,  1.8856348 , -1.4427016 ],\n",
              "        [ 2.2463925 ,  0.6011914 , -2.3117046 ],\n",
              "        [-1.6552624 ,  1.8347145 , -0.11478073]], dtype=float32),\n",
              " array([[-0.18500441,  0.61676806, -0.2220248 ],\n",
              "        [-2.9746945 , -0.15561113,  2.8385696 ],\n",
              "        [-1.9056652 ,  1.260366  ,  0.5112958 ],\n",
              "        [ 1.8850433 ,  0.8149446 , -2.1523175 ],\n",
              "        [ 0.5707186 ,  1.6062981 , -1.7440736 ],\n",
              "        [ 2.671662  ,  0.27836224, -2.362627  ],\n",
              "        [-3.3608105 , -0.26258793,  3.1424289 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-0.6099858 ,  1.3565995 , -0.3968007 ],\n",
              "        [-3.2980053 , -0.62946856,  3.421523  ],\n",
              "        [-0.6185854 ,  1.9625694 , -1.1751425 ],\n",
              "        [ 1.3065101 ,  0.78474766, -1.5737053 ],\n",
              "        [-1.3716148 , -0.28959337,  1.6249077 ],\n",
              "        [-2.9881234 ,  1.3029119 ,  1.5744911 ],\n",
              "        [-3.3375862 , -0.39499906,  3.2974715 ],\n",
              "        [-0.20702627,  1.2799114 , -0.7609562 ]], dtype=float32),\n",
              " array([[-3.3067393 , -0.5795802 ,  3.4202034 ],\n",
              "        [ 2.1511986 ,  1.2047246 , -2.733777  ],\n",
              "        [-0.47981998,  1.6824424 , -0.99862313],\n",
              "        [-2.657067  , -0.93706584,  3.156209  ],\n",
              "        [ 2.1057608 ,  0.8198904 , -2.462955  ],\n",
              "        [-2.8213995 , -0.988775  ,  3.3498194 ],\n",
              "        [ 1.7959431 ,  0.61709166, -1.8303338 ],\n",
              "        [ 2.1327336 ,  1.0517632 , -2.5960722 ],\n",
              "        [ 1.0101427 ,  1.4032748 , -1.8445193 ],\n",
              "        [-3.226785  , -0.66212726,  3.4168735 ],\n",
              "        [-2.9707406 , -0.9302137 ,  3.43164   ],\n",
              "        [ 0.7235401 ,  1.5801883 , -1.6704873 ],\n",
              "        [-3.1755373 , -0.77214366,  3.4674373 ],\n",
              "        [-2.793061  ,  0.14218143,  2.3327332 ],\n",
              "        [-2.582492  ,  0.8462838 ,  1.685575  ],\n",
              "        [ 2.2104404 ,  1.1823609 , -2.7132106 ]], dtype=float32),\n",
              " array([[-0.8956714 ,  1.5694414 , -0.4954071 ],\n",
              "        [ 2.7113755 ,  0.7499225 , -2.7316139 ],\n",
              "        [-3.392073  ,  0.20775744,  2.844843  ],\n",
              "        [-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [ 3.3040059 , -0.29437613, -2.497082  ],\n",
              "        [-3.0595064 , -0.90976614,  3.4899926 ],\n",
              "        [ 2.2817008 ,  1.3409557 , -3.067841  ],\n",
              "        [-3.1780941 , -0.75872445,  3.460278  ],\n",
              "        [-3.0770018 , -0.6205287 ,  3.2659338 ],\n",
              "        [-3.358853  , -0.45923674,  3.364981  ],\n",
              "        [ 2.8204253 ,  0.9089191 , -3.0613194 ],\n",
              "        [ 3.1714423 ,  0.0499721 , -2.5829186 ],\n",
              "        [-0.2970465 ,  1.7624718 , -1.1095301 ],\n",
              "        [ 0.8432419 ,  1.7959955 , -2.1253304 ],\n",
              "        [ 2.9016926 ,  0.18998523, -2.5618117 ],\n",
              "        [ 3.5393698 ,  0.09416225, -3.0051367 ]], dtype=float32),\n",
              " array([[ 2.6331933 , -0.5161047 , -1.660383  ],\n",
              "        [-3.3266776 , -0.25446716,  3.1825638 ],\n",
              "        [-0.23055753,  1.5756937 , -0.9922739 ],\n",
              "        [ 0.1026101 ,  1.5329071 , -1.21463   ],\n",
              "        [ 3.0485032 ,  0.6280166 , -3.0647213 ],\n",
              "        [ 3.6007583 , -0.58369917, -2.5751865 ],\n",
              "        [ 1.688752  ,  0.15905592, -1.3242586 ],\n",
              "        [ 0.08710634,  1.8306903 , -1.4722333 ],\n",
              "        [ 3.5755193 , -0.05064693, -3.0000653 ],\n",
              "        [-3.3867753 ,  0.2968021 ,  2.7637959 ],\n",
              "        [ 0.46552923,  1.8156859 , -1.701071  ],\n",
              "        [-0.83724165,  1.1030283 , -0.03860356],\n",
              "        [-2.230232  ,  1.7931219 ,  0.37814265],\n",
              "        [-3.3558984 , -0.5430068 ,  3.426538  ],\n",
              "        [-0.6526629 ,  1.9211684 , -1.0500832 ],\n",
              "        [ 3.3316796 ,  0.3618949 , -3.1772022 ]], dtype=float32),\n",
              " array([[ 1.4674779 ,  0.9850236 , -1.8314801 ],\n",
              "        [ 3.381793  , -0.46748632, -2.3963287 ],\n",
              "        [-3.2383487 , -0.64756763,  3.4344783 ],\n",
              "        [-3.295257  , -0.5054492 ,  3.3589644 ],\n",
              "        [ 1.0134628 ,  1.6139383 , -2.1104877 ],\n",
              "        [ 1.2945347 ,  1.2570629 , -1.9962147 ],\n",
              "        [ 3.6558092 , -0.6104877 , -2.6215196 ],\n",
              "        [ 3.0334578 ,  0.44675222, -2.8630176 ],\n",
              "        [ 0.9983717 ,  0.3553394 , -1.0654466 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [ 1.1139727 ,  1.1005459 , -1.7333449 ],\n",
              "        [ 1.754496  ,  0.4729784 , -1.7703573 ],\n",
              "        [-3.334355  , -0.55315053,  3.4078436 ],\n",
              "        [-3.3511875 , -0.3346391 ,  3.1962898 ]], dtype=float32),\n",
              " array([[-3.2924285 , -0.2117411 ,  3.1089168 ],\n",
              "        [ 0.1365908 ,  1.2282035 , -0.9918088 ],\n",
              "        [ 1.8321218 ,  1.2289778 , -2.4027717 ],\n",
              "        [ 1.885356  ,  1.1294409 , -2.384337  ],\n",
              "        [-3.4987586 , -0.25166622,  3.2261095 ],\n",
              "        [-0.0973701 ,  1.216791  , -0.7646487 ],\n",
              "        [ 0.3537068 , -0.64550227,  0.23583287],\n",
              "        [-1.5935951 ,  0.31004384,  1.1743083 ],\n",
              "        [-3.409973  , -0.41898552,  3.3280077 ],\n",
              "        [-0.5720133 ,  1.4452163 , -0.6035357 ],\n",
              "        [-3.4283195 , -0.40165564,  3.3375359 ],\n",
              "        [-2.0057542 , -0.5206075 ,  2.2389603 ],\n",
              "        [ 1.2381655 ,  0.43309632, -1.4017298 ],\n",
              "        [ 1.7851677 ,  0.95501494, -2.187769  ],\n",
              "        [ 2.744881  ,  0.16884539, -2.4057653 ],\n",
              "        [ 3.6576865 , -0.36096597, -2.8168135 ]], dtype=float32),\n",
              " array([[ 1.8821601 ,  0.9730954 , -2.388684  ],\n",
              "        [-1.9215989 ,  1.9739482 ,  0.11582948],\n",
              "        [-3.515395  ,  0.04492304,  3.0343604 ],\n",
              "        [ 2.5468514 ,  0.893157  , -2.8083968 ],\n",
              "        [-2.1182377 , -0.5805536 ,  2.2298546 ],\n",
              "        [-0.12078097,  0.22797266,  0.15507255],\n",
              "        [ 1.1463    ,  1.2982385 , -1.9657388 ],\n",
              "        [-0.19854051,  0.876003  , -0.34741503],\n",
              "        [ 0.94681984,  1.0489768 , -1.5369849 ],\n",
              "        [ 0.328055  ,  0.56179273, -0.6425238 ],\n",
              "        [-3.4040506 , -0.4039592 ,  3.3520725 ],\n",
              "        [ 1.4425073 ,  1.4276575 , -2.253807  ],\n",
              "        [ 1.3383843 ,  1.7052877 , -2.4778986 ],\n",
              "        [-1.7189494 ,  1.2004191 ,  0.6614727 ],\n",
              "        [ 2.2938616 ,  1.1276659 , -2.8241692 ],\n",
              "        [ 2.6854694 ,  0.8672209 , -2.8838446 ]], dtype=float32),\n",
              " array([[-0.7770596 ,  1.7539561 , -0.6786835 ],\n",
              "        [ 1.0234213 ,  1.0150789 , -1.5488106 ],\n",
              "        [ 2.0815694 ,  0.52210057, -2.0982997 ],\n",
              "        [ 2.0337515 ,  0.6821753 , -2.0700104 ],\n",
              "        [-3.3387663 , -0.5973598 ,  3.4334667 ],\n",
              "        [ 1.142013  ,  1.4859558 , -2.0390925 ],\n",
              "        [-3.4482644 , -0.19219044,  3.2181656 ],\n",
              "        [ 2.9407501 , -0.903268  , -1.537657  ],\n",
              "        [ 1.8235029 ,  0.9316862 , -2.2840734 ],\n",
              "        [ 2.2209408 ,  0.78033566, -2.3844087 ],\n",
              "        [ 3.5865707 , -0.7339213 , -2.4198112 ],\n",
              "        [-3.266956  ,  0.86715287,  2.1215205 ],\n",
              "        [ 3.5605738 , -0.47673032, -2.6439137 ],\n",
              "        [ 2.8476408 ,  0.9377998 , -3.093435  ],\n",
              "        [ 1.6825408 ,  0.9896027 , -2.0684962 ],\n",
              "        [-0.38745874,  0.24344456,  0.3014159 ]], dtype=float32),\n",
              " array([[-3.1103628 , -0.61862797,  3.2580798 ],\n",
              "        [-3.1443512 , -0.47523454,  3.1271536 ],\n",
              "        [ 2.050121  ,  1.1784567 , -2.6175327 ],\n",
              "        [ 1.8741415 ,  1.347061  , -2.640242  ],\n",
              "        [ 0.16065888,  1.3603412 , -1.1467069 ],\n",
              "        [-1.6187395 ,  1.2737508 ,  0.4767194 ],\n",
              "        [ 0.4738634 , -0.01141463, -0.3221307 ],\n",
              "        [-0.7683553 ,  1.8719677 , -0.9540332 ],\n",
              "        [ 1.5828351 ,  1.1931388 , -2.2190082 ],\n",
              "        [ 1.0363003 ,  1.6017629 , -2.1682487 ],\n",
              "        [ 0.86315215,  1.6492581 , -1.9535723 ],\n",
              "        [ 3.362343  , -0.8824646 , -2.16649   ],\n",
              "        [ 0.16501209,  1.6774429 , -1.4648556 ],\n",
              "        [-1.8327018 , -0.2909017 ,  1.7444158 ],\n",
              "        [ 2.2699416 ,  1.3084251 , -2.9053948 ],\n",
              "        [ 1.0240861 ,  1.5395184 , -2.1616569 ]], dtype=float32),\n",
              " array([[-3.082921  , -0.5336328 ,  3.1180928 ],\n",
              "        [ 1.9335175 ,  0.34167835, -1.8179893 ],\n",
              "        [ 3.2457528 , -0.7538798 , -2.135992  ],\n",
              "        [-0.17448382,  1.6443912 , -1.1289259 ],\n",
              "        [-0.8455951 ,  0.8254355 ,  0.08131462],\n",
              "        [-0.7761037 ,  0.52796894,  0.31218442],\n",
              "        [-1.8819305 , -0.79431236,  2.36728   ],\n",
              "        [-3.3278883 , -0.6021642 ,  3.4212809 ],\n",
              "        [-0.62260705,  0.63732904,  0.04032966],\n",
              "        [ 3.2368882 ,  0.45724592, -3.0135562 ],\n",
              "        [ 2.3476808 ,  1.0142335 , -2.6675797 ],\n",
              "        [-0.1576927 ,  1.311585  , -0.8268991 ],\n",
              "        [-1.3783933 ,  1.8603212 , -0.40014476],\n",
              "        [ 0.25569874,  0.628203  , -0.69804984],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [ 1.4931945 ,  1.4496704 , -2.3713517 ]], dtype=float32),\n",
              " array([[-0.80845284,  1.2311394 , -0.28823698],\n",
              "        [ 1.9226276 , -0.31219444, -1.3512032 ],\n",
              "        [-1.3159671 ,  1.9073377 , -0.43603244],\n",
              "        [-0.7210875 ,  1.6003596 , -0.68065214],\n",
              "        [ 2.6755245 ,  0.31288302, -2.3872068 ],\n",
              "        [ 2.389694  ,  0.7635997 , -2.4646578 ],\n",
              "        [ 3.502813  ,  0.22735874, -3.0532937 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [-2.4572423 , -0.73119724,  2.8374908 ],\n",
              "        [-3.0218246 , -0.7890348 ,  3.3676062 ],\n",
              "        [ 2.8904538 ,  0.5220603 , -2.7577462 ],\n",
              "        [-1.00896   ,  1.8911303 , -0.7846147 ],\n",
              "        [-2.6807919 , -0.7498067 ,  3.0261235 ],\n",
              "        [-3.131076  ,  0.148478  ,  2.692502  ],\n",
              "        [ 0.61383134,  0.69903296, -0.97515106],\n",
              "        [ 3.2930262 , -0.07942691, -2.617853  ]], dtype=float32),\n",
              " array([[ 1.0755215 ,  1.5272905 , -2.1025562 ],\n",
              "        [ 1.5528568 ,  0.90367764, -1.9232119 ],\n",
              "        [ 2.3454626 ,  1.150375  , -2.8862138 ],\n",
              "        [ 0.6102082 ,  1.2272052 , -1.2585332 ],\n",
              "        [-3.1747246 , -0.24896356,  3.0057712 ],\n",
              "        [ 2.9614446 ,  0.23896223, -2.5286653 ],\n",
              "        [ 0.11665942,  1.9933422 , -1.7056148 ],\n",
              "        [-3.3212297 , -0.54676735,  3.4102092 ],\n",
              "        [ 0.8390453 ,  0.21000543, -0.68168396],\n",
              "        [ 2.9649942 , -0.27459177, -2.167582  ],\n",
              "        [-3.1494129 , -0.22444879,  3.0046153 ],\n",
              "        [-2.6628168 ,  0.7563169 ,  1.6221454 ],\n",
              "        [ 2.636204  ,  0.98456144, -3.010201  ],\n",
              "        [-1.4159235 ,  0.55907166,  0.62998366],\n",
              "        [ 2.9829996 , -1.0235046 , -1.5523376 ],\n",
              "        [ 1.4539486 ,  1.560302  , -2.5099313 ]], dtype=float32),\n",
              " array([[-3.1723547 , -0.8409765 ,  3.489016  ],\n",
              "        [-3.1687834 , -0.69266737,  3.3908436 ],\n",
              "        [ 2.2984076 ,  0.8862817 , -2.5258658 ],\n",
              "        [ 2.4091644 ,  1.0698198 , -2.8837888 ],\n",
              "        [-3.2428038 , -0.26450235,  3.0954022 ],\n",
              "        [ 3.5264623 , -0.77386904, -2.310965  ],\n",
              "        [ 2.383759  ,  1.2853774 , -3.0192518 ],\n",
              "        [-3.1192746 , -0.3346636 ,  3.0324748 ],\n",
              "        [-3.0362246 ,  1.090569  ,  1.792702  ],\n",
              "        [ 1.790305  ,  1.0253688 , -2.211627  ],\n",
              "        [ 2.5147102 ,  0.930559  , -2.8653398 ],\n",
              "        [ 0.59557   ,  1.4454505 , -1.5352511 ],\n",
              "        [ 1.1058599 ,  1.2659862 , -1.8068178 ],\n",
              "        [-1.7304882 ,  0.8301623 ,  0.92473775],\n",
              "        [ 3.0778425 ,  0.5588054 , -3.0397966 ],\n",
              "        [ 2.3626125 ,  0.93087065, -2.6032968 ]], dtype=float32),\n",
              " array([[ 1.2509177 ,  1.4456428 , -2.1004562 ],\n",
              "        [-2.9151244 , -0.7166243 ,  3.2190914 ],\n",
              "        [ 1.716551  , -0.28843686, -1.0957699 ],\n",
              "        [ 0.6116857 ,  1.670457  , -1.7924662 ],\n",
              "        [-3.3734512 , -0.5248343 ,  3.3852882 ],\n",
              "        [ 1.9739681 ,  0.6671221 , -2.075191  ],\n",
              "        [-0.21985891,  1.7444928 , -1.1586953 ],\n",
              "        [ 1.4477584 , -0.2728353 , -1.0427418 ],\n",
              "        [ 2.2858229 ,  1.2665757 , -2.9123454 ],\n",
              "        [-0.26550087,  0.907261  , -0.5704044 ],\n",
              "        [ 2.952515  ,  0.46125862, -2.748413  ],\n",
              "        [-3.3980193 , -0.23557845,  3.2159834 ],\n",
              "        [-1.5051647 ,  1.7300142 , -0.03097572],\n",
              "        [-3.1596997 , -0.5861784 ,  3.339395  ],\n",
              "        [-0.8486017 ,  1.9924912 , -0.9004255 ],\n",
              "        [ 1.2440995 ,  0.76195586, -1.6869341 ]], dtype=float32),\n",
              " array([[ 2.0235045 ,  1.0434451 , -2.6357677 ],\n",
              "        [-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [-1.294482  ,  0.756075  ,  0.56233764],\n",
              "        [ 0.72882503,  1.9512678 , -2.1719837 ],\n",
              "        [-1.6170448 ,  0.44579569,  1.1344609 ],\n",
              "        [ 1.9581039 ,  1.062748  , -2.3292644 ],\n",
              "        [ 1.4473561 ,  0.9732933 , -1.9078459 ],\n",
              "        [ 2.2808304 ,  0.93092144, -2.6010566 ],\n",
              "        [ 3.0140111 ,  0.04923888, -2.5521092 ],\n",
              "        [ 0.0247774 ,  2.1968868 , -1.8089168 ],\n",
              "        [-3.1255858 , -0.5490273 ,  3.273861  ],\n",
              "        [ 2.952425  ,  0.53043896, -2.6927757 ],\n",
              "        [-0.19713941,  1.7064654 , -1.069388  ],\n",
              "        [ 1.8650964 ,  1.0925496 , -2.3656306 ],\n",
              "        [ 2.0653858 ,  1.243495  , -2.7508645 ],\n",
              "        [-3.320007  , -0.44701192,  3.3321266 ]], dtype=float32),\n",
              " array([[ 1.5248321e+00,  1.4165574e+00, -2.3698986e+00],\n",
              "        [ 1.7930853e+00,  6.5500057e-01, -2.1288540e+00],\n",
              "        [ 1.3571108e-03, -8.2205820e-01,  6.9485295e-01],\n",
              "        [-3.3264091e+00, -5.2097774e-01,  3.3540316e+00],\n",
              "        [ 2.3780534e-02,  1.9348208e+00, -1.6275442e+00],\n",
              "        [-3.4897478e+00,  4.1782543e-01,  2.7492003e+00],\n",
              "        [-3.4498050e+00, -3.7754330e-01,  3.3528836e+00],\n",
              "        [-3.1496060e+00, -7.5671571e-01,  3.4660511e+00],\n",
              "        [-2.9426334e+00,  6.3472593e-01,  1.9831558e+00],\n",
              "        [-3.1398892e+00, -3.6311945e-01,  3.0546947e+00],\n",
              "        [-3.2511227e+00, -4.0266359e-01,  3.1756022e+00],\n",
              "        [-3.3660886e+00, -1.9869696e-02,  3.0082996e+00],\n",
              "        [-4.1534624e-01,  2.1016641e+00, -1.3409622e+00],\n",
              "        [ 2.0874002e+00,  1.1663252e+00, -2.4988127e+00],\n",
              "        [-2.8484497e+00, -9.8782974e-01,  3.3862827e+00],\n",
              "        [-3.3107903e+00, -6.5450174e-01,  3.4615951e+00]], dtype=float32),\n",
              " array([[-3.2778792 , -0.7082874 ,  3.4486303 ],\n",
              "        [ 1.0520769 ,  1.0964231 , -1.6447269 ],\n",
              "        [ 1.3574606 ,  0.0537583 , -1.1283672 ],\n",
              "        [-2.238551  ,  1.2253941 ,  0.9965062 ],\n",
              "        [-1.3823508 ,  0.9779401 ,  0.5300959 ],\n",
              "        [-0.52195954,  0.6818141 ,  0.00491846],\n",
              "        [-3.2278926 , -0.16735554,  2.9138525 ],\n",
              "        [-2.2525833 ,  1.1750475 ,  0.9530259 ],\n",
              "        [ 3.627095  , -0.27524987, -2.8653655 ],\n",
              "        [ 1.9615839 ,  0.82985795, -2.2886808 ],\n",
              "        [ 1.1556171 ,  1.6398841 , -2.1700492 ],\n",
              "        [ 2.1008651 ,  0.53234863, -2.1738582 ],\n",
              "        [-3.215317  , -0.19875807,  3.0182943 ],\n",
              "        [ 1.4551023 ,  0.6962246 , -1.8129215 ],\n",
              "        [ 2.6399848 ,  0.891904  , -2.8617668 ],\n",
              "        [ 0.5409319 ,  1.2430531 , -1.33233   ]], dtype=float32),\n",
              " array([[ 1.7112776 ,  1.0046719 , -2.1586235 ],\n",
              "        [-2.7321923 ,  0.8108132 ,  1.7783518 ],\n",
              "        [-0.5911172 , -1.0394982 ,  1.4937656 ],\n",
              "        [ 1.2225593 ,  0.8826926 , -1.6158116 ],\n",
              "        [ 2.5210764 ,  0.09409694, -2.169935  ],\n",
              "        [ 3.253443  ,  0.28122842, -2.924068  ],\n",
              "        [-1.425303  , -0.17218171,  1.4573259 ],\n",
              "        [ 3.0616922 ,  0.38879567, -2.7934089 ],\n",
              "        [-3.3057013 , -0.6551424 ,  3.452095  ],\n",
              "        [ 1.9959809 ,  0.91514266, -2.2416942 ],\n",
              "        [-3.1682918 , -0.8039608 ,  3.474882  ],\n",
              "        [ 1.7357754 , -0.9858192 , -0.8660753 ],\n",
              "        [ 0.49851665,  0.8960845 , -1.0999452 ],\n",
              "        [-0.30553618, -0.2707798 ,  0.5606361 ],\n",
              "        [ 3.276704  ,  0.47572774, -3.1026816 ],\n",
              "        [-1.9094115 ,  1.6191672 ,  0.2872758 ]], dtype=float32),\n",
              " array([[ 2.4680307 ,  0.7609123 , -2.6916962 ],\n",
              "        [-2.1727946 , -1.1165437 ,  2.9228194 ],\n",
              "        [-3.3187778 , -0.5853201 ,  3.4280257 ],\n",
              "        [ 0.09579423,  1.9408664 , -1.5960481 ],\n",
              "        [-1.4170591 ,  1.6991276 , -0.12792693],\n",
              "        [ 1.2589124 ,  1.5872173 , -2.3757324 ],\n",
              "        [ 3.1334178 ,  0.70053333, -3.136705  ],\n",
              "        [-1.048891  ,  1.8154073 , -0.55781484],\n",
              "        [ 1.435465  ,  1.7621999 , -2.6213872 ],\n",
              "        [ 2.0531042 ,  1.003072  , -2.3788238 ],\n",
              "        [ 1.2516811 ,  1.5922557 , -2.395761  ],\n",
              "        [-2.3254242 ,  1.6773967 ,  0.66556144],\n",
              "        [-0.51773506,  1.4584203 , -0.70158154],\n",
              "        [-3.1426346 , -0.10217898,  2.9070883 ],\n",
              "        [ 1.1371299 ,  1.1574515 , -1.8475343 ],\n",
              "        [ 0.5211938 ,  1.8575677 , -1.9570735 ]], dtype=float32),\n",
              " array([[-0.59551895,  1.1997417 , -0.48564106],\n",
              "        [-3.1800318 , -0.57954234,  3.3655198 ],\n",
              "        [ 1.0981125 ,  1.1756963 , -1.6469502 ],\n",
              "        [-3.2213774 , -0.7647122 ,  3.4822412 ],\n",
              "        [ 3.0226786 ,  0.49782732, -2.848643  ],\n",
              "        [-2.1788356 ,  1.6794037 ,  0.533696  ],\n",
              "        [-1.4272224 ,  1.8442525 , -0.4088101 ],\n",
              "        [ 3.238736  ,  0.07130871, -2.6354809 ],\n",
              "        [-3.080891  , -0.8669505 ,  3.4307566 ],\n",
              "        [ 0.10941198,  1.4578208 , -1.0917531 ],\n",
              "        [-3.326381  , -0.26125187,  3.1334603 ],\n",
              "        [ 2.2919652 ,  0.46234044, -2.162206  ],\n",
              "        [ 2.461383  ,  0.94421345, -2.6873093 ],\n",
              "        [-0.99385923,  1.3258107 , -0.09473629],\n",
              "        [-2.9454007 , -0.25185528,  2.8709378 ],\n",
              "        [-2.9375446 , -0.5113609 ,  3.1140091 ]], dtype=float32),\n",
              " array([[ 3.362242  , -0.19280301, -2.6048675 ],\n",
              "        [ 1.1112463 , -0.5653381 , -0.40953335],\n",
              "        [-1.4629911 ,  1.7639374 , -0.42015448],\n",
              "        [-0.8038414 ,  2.109924  , -1.1613678 ],\n",
              "        [ 0.50424635, -0.18329921, -0.22115856],\n",
              "        [ 0.72622985,  1.2199129 , -1.2850885 ],\n",
              "        [-1.1318616 , -1.0607638 ,  1.8614331 ],\n",
              "        [ 3.1735246 , -0.5447904 , -2.1807332 ],\n",
              "        [-0.9834769 ,  1.7465377 , -0.47526658],\n",
              "        [-0.5783455 ,  1.1415124 , -0.2938667 ],\n",
              "        [-3.335844  , -0.23237233,  3.1397176 ],\n",
              "        [ 2.5332828 ,  0.86705303, -2.7336516 ],\n",
              "        [-0.41893777,  1.1583241 , -0.5635481 ],\n",
              "        [ 3.131325  , -0.18674509, -2.321026  ],\n",
              "        [-3.079479  , -0.6652596 ,  3.33529   ],\n",
              "        [ 0.51490456,  0.9720377 , -1.1942251 ]], dtype=float32),\n",
              " array([[-0.19196558,  1.4776542 , -0.9873526 ],\n",
              "        [ 0.47101238,  1.4944203 , -1.6167088 ],\n",
              "        [ 1.0602735 ,  1.0366414 , -1.748084  ],\n",
              "        [ 0.93082404,  1.3901974 , -1.7104112 ],\n",
              "        [-3.1449177 ,  0.43331376,  2.447435  ],\n",
              "        [ 0.10452753,  1.8234134 , -1.5551687 ],\n",
              "        [-3.237581  , -0.71939945,  3.473692  ],\n",
              "        [ 2.5715687 ,  0.6869316 , -2.5128891 ],\n",
              "        [ 1.2588247 ,  1.2736882 , -2.0057914 ],\n",
              "        [ 0.40639955,  1.7059911 , -1.6560512 ],\n",
              "        [-3.385474  ,  0.1891696 ,  2.783064  ],\n",
              "        [-1.1252244 ,  1.6835564 , -0.40794447],\n",
              "        [ 0.04326626,  1.4085618 , -1.1050206 ],\n",
              "        [ 0.1674375 ,  0.7008493 , -0.63308454],\n",
              "        [-0.49605992,  1.6217831 , -0.84199774],\n",
              "        [-2.5154421 ,  1.1683389 ,  1.2552432 ]], dtype=float32),\n",
              " array([[-2.9316862 , -0.7078919 ,  3.204083  ],\n",
              "        [ 1.5880392 ,  1.6360992 , -2.5562272 ],\n",
              "        [ 0.65526485,  1.0287285 , -1.3292665 ],\n",
              "        [ 0.9859551 ,  1.4004091 , -1.7908973 ],\n",
              "        [ 3.1984985 ,  0.46866608, -3.0271077 ],\n",
              "        [ 2.6028593 ,  1.0301715 , -2.9883249 ],\n",
              "        [-2.8918474 ,  0.11591854,  2.5579536 ],\n",
              "        [ 1.53341   , -0.81296813, -0.5658694 ],\n",
              "        [ 3.407198  ,  0.02847594, -2.9360192 ],\n",
              "        [ 0.43424195, -0.30296275, -0.00794237],\n",
              "        [ 1.8423584 ,  1.3475555 , -2.5800242 ],\n",
              "        [-0.31130606,  0.7932259 , -0.18900019],\n",
              "        [-0.6020447 ,  1.7462115 , -0.809485  ],\n",
              "        [ 0.5007627 ,  0.9986639 , -1.0705117 ],\n",
              "        [-3.3027136 , -0.18755823,  3.1270542 ],\n",
              "        [-2.7210643 ,  0.5755396 ,  1.9658003 ]], dtype=float32),\n",
              " array([[-3.4724853 ,  0.02335957,  3.0093503 ],\n",
              "        [ 0.40541562,  1.657071  , -1.660553  ],\n",
              "        [ 1.964784  ,  0.70702934, -2.1732595 ],\n",
              "        [ 3.296903  ,  0.09041093, -2.8732553 ],\n",
              "        [ 3.5533755 , -0.4982353 , -2.6255574 ],\n",
              "        [ 2.629894  ,  0.51477414, -2.4933167 ],\n",
              "        [-3.1159308 , -0.21067306,  2.9419143 ],\n",
              "        [ 2.0482981 ,  1.037212  , -2.42688   ],\n",
              "        [-3.13997   , -0.5688801 ,  3.3057985 ],\n",
              "        [ 2.9738448 , -0.45016804, -2.0602307 ],\n",
              "        [-3.1968687 , -0.6167742 ,  3.3141758 ],\n",
              "        [ 1.4844681 , -1.4281039 , -0.04555067],\n",
              "        [-0.9303021 ,  1.8108908 , -0.6735082 ],\n",
              "        [ 0.87971455,  0.6068711 , -1.177789  ],\n",
              "        [ 0.01005654,  1.3255306 , -0.9759208 ],\n",
              "        [-3.1996043 , -0.34043726,  3.0722425 ]], dtype=float32),\n",
              " array([[ 2.4272926 ,  1.1039797 , -2.8696866 ],\n",
              "        [ 1.6905346 ,  1.4484318 , -2.5199547 ],\n",
              "        [-2.9873946 ,  0.23026943,  2.519867  ],\n",
              "        [ 1.546243  ,  0.8640077 , -1.865489  ],\n",
              "        [-0.10685421,  1.3475932 , -0.96428335],\n",
              "        [ 0.94085526,  1.2628549 , -1.6851374 ],\n",
              "        [-3.3753717 , -0.30117548,  3.2307653 ],\n",
              "        [ 1.6721236 , -1.232668  , -0.46173498],\n",
              "        [-3.3288188 , -0.11701251,  3.0911546 ],\n",
              "        [ 0.5643338 ,  1.7414392 , -1.7750363 ],\n",
              "        [-2.1203005 ,  0.35314125,  1.6173769 ],\n",
              "        [ 1.8902413 , -0.59549975, -0.9976574 ],\n",
              "        [-3.2749655 , -0.31225887,  3.1726415 ],\n",
              "        [ 2.9629729 ,  0.5325035 , -2.8180518 ],\n",
              "        [ 1.893632  ,  1.4670016 , -2.6968408 ],\n",
              "        [-3.4166048 , -0.36981544,  3.3467994 ]], dtype=float32),\n",
              " array([[-1.1432562 ,  1.5846281 , -0.29718557],\n",
              "        [-3.2984102 ,  0.17696592,  2.7096672 ],\n",
              "        [-0.06697623,  2.0109096 , -1.5432203 ],\n",
              "        [-2.5273736 ,  0.9114552 ,  1.5040381 ],\n",
              "        [ 2.5220358 ,  0.31896293, -2.335767  ],\n",
              "        [ 2.867517  ,  0.69242233, -2.967453  ],\n",
              "        [-0.10683853,  1.2766309 , -0.8916022 ],\n",
              "        [ 1.9711589 , -0.682497  , -1.2211674 ],\n",
              "        [-3.1108081 , -0.6241283 ,  3.340888  ],\n",
              "        [-0.94616234,  1.4558412 , -0.28952962],\n",
              "        [ 1.3316432 ,  1.471612  , -2.3510585 ],\n",
              "        [ 2.3009236 ,  0.9399857 , -2.5969973 ],\n",
              "        [-0.3753098 ,  1.456378  , -0.7368178 ],\n",
              "        [-3.324029  ,  0.3593057 ,  2.6488771 ],\n",
              "        [-3.1503456 , -0.58826524,  3.2642555 ],\n",
              "        [ 2.1405594 ,  0.13437158, -1.8436496 ]], dtype=float32),\n",
              " array([[-0.00981427,  2.1381984 , -1.6474628 ],\n",
              "        [-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [ 0.47163817,  1.1990963 , -1.3623048 ],\n",
              "        [ 0.52492136,  0.9090435 , -1.1251085 ],\n",
              "        [ 0.18870589,  1.7554411 , -1.5591917 ],\n",
              "        [-3.3995368 , -0.35975835,  3.3362384 ],\n",
              "        [-3.4595034 , -0.33631966,  3.2719045 ],\n",
              "        [-3.231115  , -0.7442374 ,  3.465792  ],\n",
              "        [ 2.4291875 ,  0.7939254 , -2.6719236 ],\n",
              "        [-1.8326544 ,  1.8899345 , -0.16842805],\n",
              "        [-3.2474325 , -0.45827264,  3.2704446 ],\n",
              "        [-1.3461336 ,  0.95516896,  0.59235877],\n",
              "        [-1.3484957 ,  1.6493193 , -0.03195578],\n",
              "        [ 0.20125143,  1.5785824 , -1.525179  ],\n",
              "        [ 2.52186   , -0.27779022, -1.7043455 ],\n",
              "        [-3.2032933 , -0.5806558 ,  3.3324955 ]], dtype=float32),\n",
              " array([[-3.323227  , -0.5860133 ,  3.4173734 ],\n",
              "        [ 2.9269075 ,  0.64948916, -2.8756294 ],\n",
              "        [ 2.0637934 ,  0.85450983, -2.395275  ],\n",
              "        [ 0.2644991 ,  0.24567097, -0.35643333],\n",
              "        [ 3.0846555 ,  0.6167908 , -3.0239477 ],\n",
              "        [ 0.070327  ,  0.7628119 , -0.4543746 ],\n",
              "        [-1.7831745 ,  1.1953846 ,  0.58744836],\n",
              "        [-3.30852   , -0.65237105,  3.446858  ],\n",
              "        [-3.4578848 ,  0.33459172,  2.7107477 ],\n",
              "        [ 0.41504356,  1.5245908 , -1.5687344 ],\n",
              "        [-2.1075425 ,  1.791203  ,  0.43175665],\n",
              "        [-1.3252386 ,  2.0328772 , -0.5831729 ],\n",
              "        [ 3.658631  , -0.2306962 , -2.9430537 ],\n",
              "        [-2.4329565 ,  0.72073615,  1.3717046 ],\n",
              "        [ 1.0385996 ,  1.6247538 , -2.1312256 ],\n",
              "        [-2.489249  , -0.78722686,  3.0020118 ]], dtype=float32),\n",
              " array([[-3.0475557 ,  1.0059909 ,  1.8785553 ],\n",
              "        [-2.999133  , -0.8327567 ,  3.3873746 ],\n",
              "        [ 2.3839004 ,  0.726339  , -2.5007765 ],\n",
              "        [-0.9622449 ,  1.6075698 , -0.58202887],\n",
              "        [ 0.99551576,  0.91445583, -1.6116742 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [ 2.2823732 ,  1.0127316 , -2.7458634 ],\n",
              "        [ 0.95973843,  1.6542763 , -2.1958632 ],\n",
              "        [ 1.622058  ,  1.0970721 , -2.2434587 ],\n",
              "        [-1.5194491 ,  0.41916516,  1.1575704 ],\n",
              "        [ 2.8133733 ,  0.8477317 , -2.9662137 ],\n",
              "        [-0.4585134 ,  1.4741765 , -0.6655969 ],\n",
              "        [ 2.4435499 , -0.7985672 , -1.3462625 ],\n",
              "        [-3.1828935 , -0.04367307,  2.8014717 ],\n",
              "        [ 2.7536614 ,  0.609433  , -2.8015208 ],\n",
              "        [ 0.06775224,  1.3396232 , -0.946681  ]], dtype=float32),\n",
              " array([[-1.7194865 ,  1.6954051 ,  0.14686064],\n",
              "        [ 1.0131217 ,  1.8572155 , -2.5187626 ],\n",
              "        [-3.1534655 , -0.27907097,  3.0037742 ],\n",
              "        [ 0.93696326,  1.023753  , -1.5682874 ],\n",
              "        [-1.072178  ,  1.7794433 , -0.55508393],\n",
              "        [ 2.2655866 ,  0.52530444, -2.2510827 ],\n",
              "        [-3.3084013 , -0.52350336,  3.3674457 ],\n",
              "        [ 2.3567026 ,  1.2605639 , -2.9144459 ],\n",
              "        [-3.119456  , -0.78937733,  3.4138393 ],\n",
              "        [ 3.0318782 , -0.2764912 , -2.2051444 ],\n",
              "        [-2.6407075 , -0.2282578 ,  2.5840104 ],\n",
              "        [ 3.4171727 ,  0.24090713, -3.033217  ],\n",
              "        [ 1.4548919 ,  0.9701116 , -1.8370107 ],\n",
              "        [ 0.6420569 ,  1.1866941 , -1.3108802 ],\n",
              "        [-2.6760876 ,  0.8603035 ,  1.5821736 ],\n",
              "        [-2.317405  , -0.05327442,  2.2765346 ]], dtype=float32),\n",
              " array([[ 1.7967623 ,  0.9505631 , -2.1750607 ],\n",
              "        [-3.1659405 , -0.70505285,  3.411284  ],\n",
              "        [ 0.06582488,  1.6538287 , -1.4074249 ],\n",
              "        [-3.373718  , -0.05881204,  2.9746192 ],\n",
              "        [ 1.3537124 ,  1.4686445 , -2.2245789 ],\n",
              "        [ 0.3252303 ,  1.8982811 , -1.7246103 ],\n",
              "        [ 2.327214  ,  0.8684447 , -2.5603833 ],\n",
              "        [ 3.556851  , -0.6564178 , -2.454146  ],\n",
              "        [ 1.5184838 ,  1.6217664 , -2.5390267 ],\n",
              "        [-1.7797014 ,  1.3012661 ,  0.58560663],\n",
              "        [-3.379094  , -0.448554  ,  3.376224  ],\n",
              "        [-3.3437693 , -0.25471753,  3.1431274 ],\n",
              "        [-3.3878868 , -0.5321785 ,  3.3931274 ],\n",
              "        [-1.1200393 ,  1.791485  , -0.5473895 ],\n",
              "        [ 3.2013283 , -0.16239285, -2.4460154 ],\n",
              "        [ 3.1292083 ,  0.3768413 , -2.864955  ]], dtype=float32),\n",
              " array([[-3.2357314 , -0.32050762,  3.0317917 ],\n",
              "        [ 3.5138679 , -0.63931865, -2.4633446 ],\n",
              "        [ 0.4520584 ,  1.845698  , -1.9512572 ],\n",
              "        [ 2.2641668 ,  1.2317036 , -2.8234344 ],\n",
              "        [ 1.4501346 ,  1.3776109 , -2.2808332 ],\n",
              "        [-3.3798184 , -0.21609654,  3.1609526 ],\n",
              "        [ 2.6225302 ,  0.97410315, -2.9008822 ],\n",
              "        [-2.812249  ,  0.9717984 ,  1.5618119 ],\n",
              "        [-3.2893336 ,  0.70396113,  2.336176  ],\n",
              "        [-3.2797356 , -0.5572641 ,  3.3923655 ],\n",
              "        [-1.693915  ,  1.8832551 , -0.30922654],\n",
              "        [ 2.295097  ,  0.96906155, -2.6383524 ],\n",
              "        [ 1.7324511 ,  1.2189199 , -2.363852  ],\n",
              "        [-3.439905  , -0.25682873,  3.2308028 ],\n",
              "        [ 2.6892135 , -0.20495379, -2.0710673 ],\n",
              "        [ 0.46961597,  1.6347767 , -1.6637897 ]], dtype=float32),\n",
              " array([[-3.3027136 , -0.18755823,  3.1270542 ],\n",
              "        [-2.0675704 , -0.08116806,  1.9443796 ],\n",
              "        [-0.90183634,  1.3009709 , -0.1538657 ],\n",
              "        [ 3.3319516 , -0.44564474, -2.2421746 ],\n",
              "        [ 2.4133635 ,  0.23002735, -2.0794394 ],\n",
              "        [ 2.7789032 ,  0.15282738, -2.3633995 ],\n",
              "        [-3.129413  , -0.8320278 ,  3.468471  ],\n",
              "        [-3.2739623 , -0.19520506,  3.086923  ],\n",
              "        [ 1.2283384 ,  1.3946255 , -2.076627  ],\n",
              "        [-3.0232575 , -0.49922776,  3.1389666 ],\n",
              "        [-1.9086964 , -0.4747937 ,  2.2029843 ],\n",
              "        [ 0.77033263,  1.5799997 , -1.8148263 ],\n",
              "        [-3.214864  , -0.76851934,  3.4811416 ],\n",
              "        [-0.3203474 ,  0.47741422, -0.08563091],\n",
              "        [ 3.566693  , -0.627369  , -2.5542626 ],\n",
              "        [ 1.269548  ,  0.42013767, -1.2634774 ]], dtype=float32),\n",
              " array([[ 2.0602782 ,  1.128081  , -2.6133733 ],\n",
              "        [-2.2780511 ,  1.5663313 ,  0.59375554],\n",
              "        [ 2.1151173 ,  1.0543936 , -2.6084146 ],\n",
              "        [-2.9262965 , -0.46555072,  3.0494342 ],\n",
              "        [-3.1919715 , -0.8009602 ,  3.4414277 ],\n",
              "        [ 3.6346114 ,  0.0089109 , -3.0661516 ],\n",
              "        [ 1.5372436 ,  0.6436337 , -1.7106075 ],\n",
              "        [ 3.239536  ,  0.1088922 , -2.8126447 ],\n",
              "        [ 0.8757251 ,  1.4848553 , -1.8545017 ],\n",
              "        [ 2.3763082 ,  0.48082873, -2.2795975 ],\n",
              "        [ 0.70164424,  0.90101904, -1.116239  ],\n",
              "        [-3.0115192 ,  1.1926175 ,  1.6283818 ],\n",
              "        [-1.787509  ,  0.68357235,  1.057713  ],\n",
              "        [ 0.23178238,  0.8002026 , -0.72252333],\n",
              "        [-3.1254518 , -0.8184639 ,  3.48778   ],\n",
              "        [ 1.7838125 ,  1.3926495 , -2.6059918 ]], dtype=float32),\n",
              " array([[ 1.0084258 ,  1.5047251 , -2.1189027 ],\n",
              "        [-3.3209064 , -0.5467883 ,  3.4255662 ],\n",
              "        [-1.5267011 ,  1.6070431 , -0.06280587],\n",
              "        [ 3.543424  , -0.25642118, -2.8543096 ],\n",
              "        [ 1.534849  ,  0.82002413, -1.9086725 ],\n",
              "        [ 1.3249257 ,  1.3873731 , -2.2210402 ],\n",
              "        [-2.4754777 , -0.28967485,  2.384236  ],\n",
              "        [-3.233508  , -0.5944663 ,  3.3770056 ],\n",
              "        [ 0.94448525,  0.6539113 , -1.184823  ],\n",
              "        [ 2.7100394 , -0.12721542, -2.0487192 ],\n",
              "        [-1.5827953 ,  1.8855295 , -0.2004307 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 3.329693  ,  0.0853623 , -2.797791  ],\n",
              "        [-3.1684177 , -0.63464105,  3.3181477 ],\n",
              "        [-3.309722  , -0.12057838,  3.0443661 ],\n",
              "        [-1.4355141 ,  1.0204026 ,  0.37818915]], dtype=float32),\n",
              " array([[-0.3860335 ,  0.8674442 , -0.19617963],\n",
              "        [-0.2939825 ,  1.867055  , -1.2438185 ],\n",
              "        [ 3.4724424 , -0.18860789, -2.7641978 ],\n",
              "        [ 2.4023693 ,  1.1128963 , -2.8659003 ],\n",
              "        [-2.7761185 ,  0.70264435,  1.8468084 ],\n",
              "        [ 1.5729444 ,  1.3271486 , -2.3730721 ],\n",
              "        [-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [-3.312908  , -0.545068  ,  3.404638  ],\n",
              "        [-3.4072835 , -0.04778256,  3.0300796 ],\n",
              "        [-2.146092  ,  0.19184378,  1.7164116 ],\n",
              "        [-2.4707835 , -1.0505215 ,  3.1373296 ],\n",
              "        [ 0.3651413 ,  0.252512  , -0.57911134],\n",
              "        [-3.3515944 , -0.49837115,  3.4041243 ],\n",
              "        [ 0.5968136 , -1.3558875 ,  0.614043  ],\n",
              "        [-3.1898916 , -0.26603273,  3.019991  ],\n",
              "        [ 2.5205834 ,  0.9859171 , -2.9144735 ]], dtype=float32),\n",
              " array([[ 1.6389302 ,  1.2455356 , -2.353678  ],\n",
              "        [-3.356343  , -0.3816267 ,  3.2752645 ],\n",
              "        [-1.9551352 ,  1.5955559 ,  0.40944278],\n",
              "        [-1.9694786 ,  0.8858412 ,  1.0795718 ],\n",
              "        [-3.1963227 , -0.19647375,  3.1011395 ],\n",
              "        [-2.7367654 , -0.6615618 ,  3.0450537 ],\n",
              "        [ 3.5001261 , -0.18559816, -2.8110697 ],\n",
              "        [ 1.2294997 ,  1.0131111 , -1.789415  ],\n",
              "        [-0.4180415 ,  1.91641   , -1.3151351 ],\n",
              "        [ 1.0496881 ,  1.8141571 , -2.448263  ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-0.4055723 ,  1.0494395 , -0.3844177 ],\n",
              "        [-2.4493124 , -0.47683373,  2.70578   ],\n",
              "        [-1.281742  ,  1.6720294 , -0.30437094],\n",
              "        [-3.3623283 , -0.5641812 ,  3.4277654 ],\n",
              "        [-2.9143202 ,  0.6117534 ,  2.0591455 ]], dtype=float32),\n",
              " array([[-2.873382  , -0.29685456,  2.8683312 ],\n",
              "        [ 3.1497586 ,  0.10900626, -2.6969948 ],\n",
              "        [-0.32981554,  0.74567676, -0.0645652 ],\n",
              "        [-0.55522656,  1.8773804 , -0.85681033],\n",
              "        [-2.2357745 ,  1.1432625 ,  1.1182861 ],\n",
              "        [ 1.6151601 ,  1.3469721 , -2.378794  ],\n",
              "        [ 3.5300686 , -0.20767874, -2.866819  ],\n",
              "        [ 1.9747083 ,  1.0730644 , -2.4413433 ],\n",
              "        [-1.3764204 ,  2.0022135 , -0.47009423],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-3.3380053 , -0.43946788,  3.3353295 ],\n",
              "        [-0.34451526,  0.84094566, -0.35260123],\n",
              "        [-0.48174563,  1.7855083 , -0.98467886],\n",
              "        [-3.3424876 ,  0.14377463,  2.8042834 ],\n",
              "        [-1.4232491 ,  1.2961637 ,  0.26077193],\n",
              "        [ 2.8424735 ,  0.5858272 , -2.8426404 ]], dtype=float32),\n",
              " array([[-0.2649422 ,  1.5923212 , -0.8415109 ],\n",
              "        [-0.10788404,  0.17271179,  0.18074076],\n",
              "        [-3.1562383 , -0.7943666 ,  3.4636707 ],\n",
              "        [ 1.8030001 ,  1.2616771 , -2.4480321 ],\n",
              "        [-2.0124474 ,  1.6441641 ,  0.3435108 ],\n",
              "        [-3.3625488 , -0.15394798,  3.0812354 ],\n",
              "        [-3.2625644 , -0.7039253 ,  3.4620059 ],\n",
              "        [ 2.0107388 ,  1.1188006 , -2.5857296 ],\n",
              "        [ 0.56233007,  1.6672776 , -1.798981  ],\n",
              "        [-3.1177351 , -0.45941642,  3.1773763 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [ 2.5566237 , -0.07383692, -2.0861251 ],\n",
              "        [ 1.9190916 ,  0.9090935 , -2.260494  ],\n",
              "        [ 0.8945548 ,  0.8670652 , -1.3280153 ],\n",
              "        [-3.3818753 , -0.08961798,  2.9873073 ],\n",
              "        [-2.8748124 , -0.26629686,  2.7873065 ]], dtype=float32),\n",
              " array([[ 2.9086006 ,  0.20711917, -2.5423365 ],\n",
              "        [ 2.1678274 , -0.48121524, -1.4250025 ],\n",
              "        [-2.7886252 , -0.06267451,  2.5844853 ],\n",
              "        [-2.4473097 ,  1.5422583 ,  0.77605295],\n",
              "        [-1.1503042 ,  1.8356422 , -0.529078  ],\n",
              "        [ 0.7100325 ,  1.2767178 , -1.5814028 ],\n",
              "        [-3.3659666 ,  0.0747916 ,  2.8959098 ],\n",
              "        [-3.3019016 , -0.31099728,  3.1971893 ],\n",
              "        [-3.288787  , -0.18722376,  3.0426545 ],\n",
              "        [-3.38308   , -0.47350028,  3.343731  ],\n",
              "        [ 1.9516449 ,  1.2842047 , -2.5589635 ],\n",
              "        [ 1.0572556 ,  1.5205314 , -2.0764017 ],\n",
              "        [ 3.1009486 , -0.84199834, -1.974683  ],\n",
              "        [-3.2453625 , -0.69449514,  3.409318  ],\n",
              "        [-0.16049542,  1.5571066 , -1.2041262 ],\n",
              "        [ 2.2817886 ,  0.515668  , -2.1897764 ]], dtype=float32),\n",
              " array([[ 3.2196753 ,  0.36531344, -3.0341816 ],\n",
              "        [-2.6297462 , -0.3306683 ,  2.597237  ],\n",
              "        [ 1.8954121 ,  1.1854421 , -2.5334077 ],\n",
              "        [-1.4409767 ,  1.8757706 , -0.23183538],\n",
              "        [-1.3336159 ,  1.4315046 , -0.05486168],\n",
              "        [-1.5941365 ,  1.9599669 , -0.24832082],\n",
              "        [-3.352323  , -0.47420636,  3.379568  ],\n",
              "        [-3.058954  , -0.9271002 ,  3.4933712 ],\n",
              "        [ 2.525305  ,  0.95607543, -2.7984338 ],\n",
              "        [ 1.5464773 ,  1.4024243 , -2.3802543 ],\n",
              "        [ 3.4219387 , -0.1256401 , -2.789612  ],\n",
              "        [ 0.95577914,  1.3816645 , -1.7522964 ],\n",
              "        [-0.578972  ,  1.7607266 , -1.0230476 ],\n",
              "        [-3.4232538 ,  0.52717954,  2.5124626 ],\n",
              "        [-3.2971342 , -0.68354666,  3.4350095 ],\n",
              "        [ 1.9411594 ,  1.0381601 , -2.3651197 ]], dtype=float32),\n",
              " array([[-3.5627742 ,  0.41831645,  2.7499485 ],\n",
              "        [-3.1345782 , -0.7471342 ,  3.4078054 ],\n",
              "        [-0.14014167,  1.7769169 , -1.3216084 ],\n",
              "        [-0.34461272,  1.9195684 , -1.243147  ],\n",
              "        [-0.8020434 ,  0.8246658 ,  0.2630326 ],\n",
              "        [ 1.8093722 ,  1.399407  , -2.5960746 ],\n",
              "        [ 1.7447103 ,  1.584613  , -2.684113  ],\n",
              "        [ 0.36051217,  1.547497  , -1.4085438 ],\n",
              "        [ 2.249383  ,  1.1773189 , -2.8189003 ],\n",
              "        [-2.9527576 , -0.44415843,  3.0148475 ],\n",
              "        [ 1.1647359 ,  1.2208642 , -1.76632   ],\n",
              "        [-0.48350003,  0.5810833 ,  0.04979197],\n",
              "        [-1.3036405 , -1.3976903 ,  2.5146396 ],\n",
              "        [ 1.7807406 ,  1.141388  , -2.4289386 ],\n",
              "        [-1.9174275 , -0.82585907,  2.4186816 ],\n",
              "        [ 0.6000207 ,  0.95970297, -1.2795295 ]], dtype=float32),\n",
              " array([[ 1.4904915 ,  1.4102355 , -2.349124  ],\n",
              "        [ 3.2119238 , -0.03260585, -2.6391757 ],\n",
              "        [-3.3000512 , -0.5347236 ,  3.4103193 ],\n",
              "        [-3.2838838 , -0.51249605,  3.3473644 ],\n",
              "        [ 1.2210351 ,  0.06283187, -0.78093064],\n",
              "        [-3.482621  ,  0.72165495,  2.4340332 ],\n",
              "        [ 1.5772682 ,  1.3348981 , -2.3702154 ],\n",
              "        [ 3.000286  , -0.34014544, -2.1211212 ],\n",
              "        [-2.2644818 ,  1.7694279 ,  0.5029732 ],\n",
              "        [ 2.2042603 ,  1.1401192 , -2.7534766 ],\n",
              "        [-3.2515492 , -0.53965145,  3.3563323 ],\n",
              "        [ 0.46203947,  1.6438408 , -1.6636722 ],\n",
              "        [ 0.57006437,  1.7333798 , -1.9379094 ],\n",
              "        [ 2.3243968 ,  1.026567  , -2.7617118 ],\n",
              "        [-1.5727633 ,  1.3100392 ,  0.43320698],\n",
              "        [-2.8723228 , -0.25936916,  2.8323317 ]], dtype=float32),\n",
              " array([[ 1.8610064 ,  1.1886238 , -2.4265046 ],\n",
              "        [-2.8975904 ,  1.26708   ,  1.5362613 ],\n",
              "        [-3.2567484 , -0.71029556,  3.4643292 ],\n",
              "        [ 1.6848687 ,  1.3836559 , -2.5130372 ],\n",
              "        [-0.23585175, -0.5123539 ,  0.7979757 ],\n",
              "        [-2.977277  , -0.57725185,  3.106672  ],\n",
              "        [ 3.4206338 , -0.18705523, -2.7445893 ],\n",
              "        [ 3.621872  , -0.20290455, -2.9195452 ],\n",
              "        [-2.4572585 , -1.2976646 ,  3.2859886 ],\n",
              "        [ 1.4009899 ,  1.4510564 , -2.3141038 ],\n",
              "        [ 2.6573994 ,  0.8417249 , -2.907936  ],\n",
              "        [-3.270171  , -0.5387217 ,  3.3555982 ],\n",
              "        [ 3.2890487 , -0.3138838 , -2.4683793 ],\n",
              "        [-3.3389714 , -0.61936545,  3.3908005 ],\n",
              "        [-1.5041085 ,  1.3505462 ,  0.3277037 ],\n",
              "        [-1.3459538 ,  1.9677861 , -0.5908287 ]], dtype=float32),\n",
              " array([[ 0.28816196,  1.4403507 , -1.4987316 ],\n",
              "        [ 1.7356881 ,  1.1708175 , -2.3585622 ],\n",
              "        [ 2.7730663 ,  0.6802613 , -2.7435098 ],\n",
              "        [-0.6674101 , -0.3311499 ,  0.9770019 ],\n",
              "        [ 2.7084973 ,  0.56866574, -2.6042118 ],\n",
              "        [ 3.6609814 , -0.26327267, -2.8533025 ],\n",
              "        [-3.093843  , -0.7814672 ,  3.3918717 ],\n",
              "        [-2.5756528 ,  0.7843663 ,  1.6156851 ],\n",
              "        [-2.8796523 ,  1.4979291 ,  1.3478196 ],\n",
              "        [-3.2024941 ,  0.39175436,  2.5193477 ],\n",
              "        [-2.9106271 ,  0.8980716 ,  1.818485  ],\n",
              "        [ 3.609936  , -0.07288321, -2.9720752 ],\n",
              "        [-3.3434188 , -0.0607372 ,  3.0012062 ],\n",
              "        [ 1.1611533 ,  1.7170871 , -2.3072703 ],\n",
              "        [-3.223471  , -0.21055233,  3.0126634 ],\n",
              "        [-1.3706475 ,  1.8381966 , -0.24519044]], dtype=float32),\n",
              " array([[ 1.3670659 ,  1.4872499 , -2.3242702 ],\n",
              "        [-3.3785365 , -0.38678738,  3.3079433 ],\n",
              "        [ 1.3813512 ,  1.0147114 , -1.9227817 ],\n",
              "        [ 2.6328976 ,  0.8783779 , -2.9052334 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [ 2.5201943 ,  0.6818138 , -2.6386895 ],\n",
              "        [ 2.5614383 ,  0.76851106, -2.6456785 ],\n",
              "        [ 1.0739806 ,  1.437056  , -1.9256337 ],\n",
              "        [ 2.5337603 ,  0.11691725, -2.1861303 ],\n",
              "        [-2.3506281 , -0.4776964 ,  2.5469577 ],\n",
              "        [ 1.3775592 ,  0.76709265, -1.6999577 ],\n",
              "        [ 1.2295172 ,  0.555574  , -1.2787031 ],\n",
              "        [-1.5645683 ,  1.6204052 , -0.0925417 ],\n",
              "        [ 2.7451644 ,  0.15920952, -2.3090038 ],\n",
              "        [ 1.1670603 ,  1.1258899 , -1.7726095 ],\n",
              "        [-3.2151449 ,  0.18826917,  2.6407208 ]], dtype=float32),\n",
              " array([[-2.7430248 ,  0.09761204,  2.3816564 ],\n",
              "        [ 2.298613  ,  1.102624  , -2.772797  ],\n",
              "        [ 2.1572523 ,  0.5894778 , -2.1846848 ],\n",
              "        [ 1.2442628 ,  1.4691322 , -2.0830545 ],\n",
              "        [-1.0907472 ,  1.6600069 , -0.2472074 ],\n",
              "        [-0.23469809,  1.9757569 , -1.5364642 ],\n",
              "        [ 3.5841944 , -0.666273  , -2.536615  ],\n",
              "        [-2.0774581 ,  0.882552  ,  1.1017895 ],\n",
              "        [-2.1673872 ,  1.5159262 ,  0.6798035 ],\n",
              "        [ 0.31634882, -1.1490461 ,  0.7940464 ],\n",
              "        [-1.8957981 ,  1.966932  ,  0.01406176],\n",
              "        [ 2.042551  ,  1.1315211 , -2.6499052 ],\n",
              "        [ 1.8239428 ,  0.8896743 , -2.2368517 ],\n",
              "        [ 2.9125473 ,  0.51763225, -2.8068328 ],\n",
              "        [-1.2614918 ,  0.02352931,  1.1468427 ],\n",
              "        [ 0.5361307 ,  1.9312383 , -1.9300106 ]], dtype=float32),\n",
              " array([[-1.0001543 ,  1.5271319 , -0.43926194],\n",
              "        [-1.2521621 ,  1.9645444 , -0.5723648 ],\n",
              "        [ 0.07421087,  1.4527522 , -1.1292365 ],\n",
              "        [ 1.1169667 ,  1.4871354 , -2.1764145 ],\n",
              "        [-3.1477544 , -0.7727244 ,  3.4411554 ],\n",
              "        [ 1.3891065 ,  1.0974827 , -1.932138  ],\n",
              "        [-0.05453915,  1.2266415 , -0.80768305],\n",
              "        [ 1.8876814 , -0.5705737 , -1.0046935 ],\n",
              "        [-1.9003257 ,  1.7415999 ,  0.13452773],\n",
              "        [-3.3372896 , -0.26726326,  3.2025063 ],\n",
              "        [ 1.6368116 ,  1.2309932 , -2.3028321 ],\n",
              "        [ 2.397928  ,  0.76687557, -2.5652394 ],\n",
              "        [-0.35730782,  1.3260857 , -0.5676366 ],\n",
              "        [ 3.2143319 , -0.72368   , -2.0649252 ],\n",
              "        [ 0.16150874,  1.1159886 , -0.94812095],\n",
              "        [-0.02803978,  1.3529626 , -1.0559458 ]], dtype=float32),\n",
              " array([[ 1.537793  , -0.27373785, -1.0351436 ],\n",
              "        [-3.3593726 , -0.56906396,  3.424555  ],\n",
              "        [-3.3057013 , -0.6551424 ,  3.452095  ],\n",
              "        [ 2.694033  ,  0.6088135 , -2.63129   ],\n",
              "        [-3.3182268 , -0.5264156 ,  3.395451  ],\n",
              "        [-3.0251377 ,  0.78087914,  2.0150194 ],\n",
              "        [ 3.4109647 ,  0.15505147, -3.014084  ],\n",
              "        [-3.236388  , -0.4561669 ,  3.2397301 ],\n",
              "        [ 2.1340706 ,  1.3597401 , -2.9075208 ],\n",
              "        [-0.3506322 ,  1.8320624 , -1.1449624 ],\n",
              "        [ 0.7640986 ,  1.0651823 , -1.400156  ],\n",
              "        [ 1.0813524 , -0.91171205, -0.08412676],\n",
              "        [-0.9829413 , -0.5859721 ,  1.4280427 ],\n",
              "        [-0.20455948,  1.729571  , -1.2785623 ],\n",
              "        [ 2.9773326 ,  0.5623438 , -2.7895632 ],\n",
              "        [ 2.281134  ,  1.1081561 , -2.7845144 ]], dtype=float32),\n",
              " array([[ 1.175934  , -1.2100058 , -0.00977044],\n",
              "        [ 0.88301396,  1.592548  , -1.9495641 ],\n",
              "        [-3.298249  ,  0.6973181 ,  2.3183637 ],\n",
              "        [-3.0305917 , -0.8889934 ,  3.3939595 ],\n",
              "        [ 3.5762076 , -0.2141068 , -2.7627406 ],\n",
              "        [-0.18529199,  0.23250788, -0.05124877],\n",
              "        [ 3.1554425 , -0.33348426, -2.247732  ],\n",
              "        [-2.672271  , -0.82003856,  3.0297728 ],\n",
              "        [ 3.4642756 ,  0.07687125, -2.965836  ],\n",
              "        [ 1.6464652 ,  1.4840288 , -2.5496058 ],\n",
              "        [ 0.31077167,  1.802976  , -1.6452096 ],\n",
              "        [-1.6180254 , -0.79944557,  2.1905746 ],\n",
              "        [-0.6917096 ,  1.7947603 , -0.789456  ],\n",
              "        [ 1.8623178 ,  1.4560255 , -2.6549397 ],\n",
              "        [-1.305668  ,  1.7209681 , -0.34109542],\n",
              "        [-0.31533623,  1.1524655 , -0.50552964]], dtype=float32),\n",
              " array([[-0.30969372,  1.2781504 , -0.7173983 ],\n",
              "        [-1.8226103 ,  1.3664058 ,  0.583252  ],\n",
              "        [-1.7915831 ,  1.6000812 ,  0.32078677],\n",
              "        [-2.8841999 ,  0.8167788 ,  1.876309  ],\n",
              "        [-2.96843   , -0.31972566,  2.9319763 ],\n",
              "        [ 2.6034424 , -0.09699596, -2.000346  ],\n",
              "        [-1.6381878 ,  1.9767847 , -0.27514133],\n",
              "        [-3.431801  , -0.22615755,  3.217237  ],\n",
              "        [ 3.3329663 , -0.11851049, -2.5780993 ],\n",
              "        [ 2.8742774 ,  0.62621707, -2.94009   ],\n",
              "        [ 2.9805324 ,  0.6312356 , -2.9107957 ],\n",
              "        [ 3.2823398 ,  0.44149905, -3.0615764 ],\n",
              "        [-3.2246592 , -0.6450368 ,  3.425101  ],\n",
              "        [ 0.18453398,  1.0494426 , -0.84146893],\n",
              "        [-1.7329141 ,  1.8884329 , -0.0987369 ],\n",
              "        [-2.7169628 , -0.31677407,  2.6381311 ]], dtype=float32),\n",
              " array([[-3.2026074 , -0.6737026 ,  3.461563  ],\n",
              "        [-3.4243085 , -0.38026467,  3.3363523 ],\n",
              "        [-2.7285116 , -1.065557  ,  3.3441713 ],\n",
              "        [-1.2178116 ,  1.523184  , -0.06080478],\n",
              "        [ 0.63939434,  1.2037237 , -1.4154115 ],\n",
              "        [-1.2632703 ,  1.8608512 , -0.5617273 ],\n",
              "        [ 2.3917654 ,  0.75837487, -2.5714731 ],\n",
              "        [ 2.9837487 , -0.16139089, -2.2639391 ],\n",
              "        [-3.4080338 , -0.28931484,  3.2650857 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-3.2596664 , -0.5343001 ,  3.3312821 ],\n",
              "        [ 3.4625547 , -0.03383666, -2.8781238 ],\n",
              "        [-2.8271725 ,  1.3434538 ,  1.2277037 ],\n",
              "        [ 2.527493  ,  0.5330225 , -2.4894552 ],\n",
              "        [-2.0179665 ,  1.04184   ,  0.91350436],\n",
              "        [-3.246658  , -0.5513371 ,  3.374092  ]], dtype=float32),\n",
              " array([[-3.2883022 , -0.16988866,  3.0223086 ],\n",
              "        [-0.41976884,  1.9453679 , -1.312116  ],\n",
              "        [-0.8640403 ,  1.5908186 , -0.5885402 ],\n",
              "        [ 2.6775835 , -0.17569649, -1.9177349 ],\n",
              "        [-2.2784946 ,  1.440791  ,  0.76885885],\n",
              "        [-0.72977585,  1.4945256 , -0.68908095],\n",
              "        [-3.4629993 , -0.26381943,  3.153448  ],\n",
              "        [-3.3352525 , -0.5739744 ,  3.415269  ],\n",
              "        [ 1.0867214 ,  1.5220487 , -2.1492891 ],\n",
              "        [-0.3911951 ,  0.6098912 , -0.1444585 ],\n",
              "        [ 0.0492089 ,  1.7957112 , -1.5684068 ],\n",
              "        [-0.6245499 ,  0.6156866 ,  0.22477177],\n",
              "        [ 2.447288  ,  0.9894786 , -2.8902335 ],\n",
              "        [ 1.6802602 ,  1.0002185 , -2.1683166 ],\n",
              "        [-2.124295  ,  1.9123818 ,  0.26361996],\n",
              "        [-1.3182417 , -0.60763097,  1.7912731 ]], dtype=float32),\n",
              " array([[-0.03366335,  1.464925  , -1.0183101 ],\n",
              "        [-3.3995063 ,  0.28822184,  2.6368322 ],\n",
              "        [ 0.25613132,  1.7177237 , -1.5816255 ],\n",
              "        [-2.1735528 ,  1.2689434 ,  0.8078985 ],\n",
              "        [-1.8284656 , -1.4603804 ,  2.8447075 ],\n",
              "        [-1.8142186 ,  1.6282772 ,  0.17741159],\n",
              "        [-0.91387844,  1.7010722 , -0.36818328],\n",
              "        [-3.437526  , -0.340035  ,  3.29043   ],\n",
              "        [ 2.3801558 ,  0.5471542 , -2.4380496 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-1.3908216 ,  1.7996913 , -0.38796496],\n",
              "        [ 1.340469  ,  1.4160333 , -2.1847546 ],\n",
              "        [-1.0502782 ,  1.9800878 , -0.81361926],\n",
              "        [-3.3876154 , -0.03363295,  2.9736857 ],\n",
              "        [-3.2987187 , -0.6678972 ,  3.459665  ],\n",
              "        [-3.3869424 , -0.43546495,  3.3447547 ]], dtype=float32),\n",
              " array([[ 2.3154562 ,  0.5130583 , -2.2861407 ],\n",
              "        [ 1.0308317 ,  0.93751496, -1.5935856 ],\n",
              "        [ 2.2048752 ,  1.1406    , -2.6637712 ],\n",
              "        [-3.2480204 , -0.43563798,  3.2679791 ],\n",
              "        [-3.0820854 , -0.63061655,  3.2601466 ],\n",
              "        [-1.101654  , -0.08645489,  1.1494495 ],\n",
              "        [-2.3786948 ,  1.6034119 ,  0.6373308 ],\n",
              "        [-3.2734587 , -0.70145583,  3.472368  ],\n",
              "        [-2.7332203 , -0.28025207,  2.7147813 ],\n",
              "        [ 2.1248934 ,  1.3198178 , -2.7165463 ],\n",
              "        [ 2.7978203 , -0.38545004, -1.9734576 ],\n",
              "        [ 2.718345  ,  0.9005054 , -2.900493  ],\n",
              "        [-0.51540846,  1.7692274 , -0.93674713],\n",
              "        [ 0.80782807,  0.9109759 , -1.3859434 ],\n",
              "        [ 1.668033  ,  1.4503034 , -2.5622983 ],\n",
              "        [ 0.21219806,  1.442659  , -1.276892  ]], dtype=float32),\n",
              " array([[-0.96362275,  1.6233612 , -0.4549796 ],\n",
              "        [ 1.4502786 ,  1.6573087 , -2.5956154 ],\n",
              "        [-2.4777362 ,  0.7716813 ,  1.6064024 ],\n",
              "        [ 1.65982   ,  1.2435968 , -2.4199388 ],\n",
              "        [-0.28729343,  1.8373313 , -1.238723  ],\n",
              "        [ 1.6477376 ,  1.6261955 , -2.6884322 ],\n",
              "        [ 2.4870744 ,  0.7584401 , -2.5715468 ],\n",
              "        [ 3.3350635 , -0.05370113, -2.671468  ],\n",
              "        [-3.2086625 , -0.44646832,  3.2118974 ],\n",
              "        [ 0.63608474,  1.2355422 , -1.6100063 ],\n",
              "        [-1.4487956 ,  1.9240304 , -0.19346917],\n",
              "        [-2.6957703 , -1.1808646 ,  3.387546  ],\n",
              "        [-3.299939  , -0.36838117,  3.233578  ],\n",
              "        [-0.9865717 ,  0.77616894,  0.26826352],\n",
              "        [-1.9467944 , -0.44498882,  2.001059  ],\n",
              "        [-3.3576276 , -0.06287511,  2.999339  ]], dtype=float32),\n",
              " array([[-1.140895  ,  1.3881346 , -0.04248573],\n",
              "        [ 0.81659955,  0.4905919 , -1.0051827 ],\n",
              "        [-2.217517  ,  1.8010601 ,  0.43776935],\n",
              "        [-1.887983  ,  1.5968195 ,  0.3348648 ],\n",
              "        [-0.94939077,  1.7258813 , -0.61189467],\n",
              "        [-2.9703138 , -0.74375033,  3.3345091 ],\n",
              "        [-1.6975852 ,  1.4718012 ,  0.33844244],\n",
              "        [-3.1801465 , -0.813567  ,  3.4689083 ],\n",
              "        [ 2.8830779 , -0.61217093, -1.7658683 ],\n",
              "        [ 0.3112232 ,  1.3838719 , -1.3640137 ],\n",
              "        [ 3.667183  , -0.37899223, -2.8160734 ],\n",
              "        [ 1.5188617 ,  0.26182842, -1.381243  ],\n",
              "        [ 1.8398565 ,  1.0297202 , -2.1714623 ],\n",
              "        [-1.2932748 ,  0.98579645,  0.4263298 ],\n",
              "        [-3.1923537 , -0.72666824,  3.4850535 ],\n",
              "        [-3.2245255 , -0.64097023,  3.3814049 ]], dtype=float32),\n",
              " array([[-1.5916606 ,  0.7085761 ,  0.9011912 ],\n",
              "        [ 0.04482188,  1.6681209 , -1.3696784 ],\n",
              "        [-3.1323125 , -0.80212283,  3.491177  ],\n",
              "        [ 1.2613285 ,  0.9985909 , -1.7218499 ],\n",
              "        [-3.1656814 , -0.7469008 ,  3.4281483 ],\n",
              "        [-1.2592635 , -0.24798864,  1.4152974 ],\n",
              "        [-0.8849513 , -1.1659614 ,  1.801466  ],\n",
              "        [-1.8244404 , -0.45262176,  2.100916  ],\n",
              "        [ 2.8797395 ,  0.7029131 , -2.918302  ],\n",
              "        [-2.9144146 , -0.9857882 ,  3.3939533 ],\n",
              "        [ 0.15817401,  1.4885583 , -1.1467166 ],\n",
              "        [-3.236017  , -0.76056516,  3.4657776 ],\n",
              "        [ 0.27555445,  0.06535577, -0.12730148],\n",
              "        [ 2.6824086 ,  0.40101376, -2.491495  ],\n",
              "        [-1.4016762 ,  2.0519361 , -0.53917474],\n",
              "        [ 1.8596734 ,  0.94849396, -2.521151  ]], dtype=float32),\n",
              " array([[-0.24088974,  1.5639275 , -0.9961392 ],\n",
              "        [-2.888168  , -1.0062479 ,  3.3322606 ],\n",
              "        [ 1.138024  ,  0.4055566 , -1.1713338 ],\n",
              "        [-1.8531542 ,  0.96913177,  0.8612512 ],\n",
              "        [ 1.7214502 ,  1.1220437 , -2.2483518 ],\n",
              "        [-0.893492  ,  2.0151358 , -1.0002257 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 1.582625  , -0.58821404, -0.8528893 ],\n",
              "        [-1.58297   ,  1.8549808 , -0.322619  ],\n",
              "        [-3.402774  , -0.15217647,  3.0908408 ],\n",
              "        [ 1.611101  ,  1.1479335 , -2.1625898 ],\n",
              "        [ 0.17472512,  0.27983743, -0.44728616],\n",
              "        [ 0.82438177,  0.6978228 , -1.1327243 ],\n",
              "        [ 2.6625516 ,  0.76439285, -2.8520312 ],\n",
              "        [ 0.9832662 ,  1.094638  , -1.6314745 ],\n",
              "        [-3.25557   , -0.54117286,  3.356936  ]], dtype=float32),\n",
              " array([[ 0.08566659, -0.3926536 ,  0.3437817 ],\n",
              "        [-3.0895019 ,  0.6481832 ,  2.1010153 ],\n",
              "        [ 0.8064284 ,  1.7161585 , -2.0441716 ],\n",
              "        [ 1.85858   ,  1.0491599 , -2.2819164 ],\n",
              "        [-2.1194553 ,  1.7286023 ,  0.39584613],\n",
              "        [ 1.9428738 ,  0.9329182 , -2.2239964 ],\n",
              "        [-3.3105772 , -0.4981785 ,  3.3188305 ],\n",
              "        [-2.1386642 , -0.95870256,  2.5952048 ],\n",
              "        [-3.1470826 , -0.70432615,  3.380114  ],\n",
              "        [-3.304999  ,  0.01809698,  2.8472972 ],\n",
              "        [-3.4626057 , -0.34766445,  3.3585477 ],\n",
              "        [ 0.7985291 , -0.16601402, -0.48376837],\n",
              "        [ 2.7667313 ,  0.68339187, -2.824665  ],\n",
              "        [-3.3212297 , -0.54676735,  3.4102092 ],\n",
              "        [-0.34158224,  1.4269677 , -0.7392007 ],\n",
              "        [ 1.4361647 , -0.41900906, -0.9839436 ]], dtype=float32),\n",
              " array([[-1.7607096 ,  1.4700373 ,  0.16867252],\n",
              "        [-2.4698215 ,  1.6424628 ,  0.82471883],\n",
              "        [-3.3380125 , -0.21938726,  3.1557434 ],\n",
              "        [-3.4617558 , -0.3938296 ,  3.3530626 ],\n",
              "        [ 2.2879243 ,  1.0518923 , -2.7167435 ],\n",
              "        [-1.0241534 ,  1.8566829 , -0.6703551 ],\n",
              "        [ 2.9997509 ,  0.34336963, -2.8483388 ],\n",
              "        [-3.2432113 , -0.16392788,  3.0304408 ],\n",
              "        [-3.3728807 , -0.07881183,  2.9844227 ],\n",
              "        [ 2.3443923 ,  1.0764576 , -2.7771187 ],\n",
              "        [-2.3333962 ,  1.083877  ,  1.1231761 ],\n",
              "        [ 3.258558  ,  0.13694303, -2.7838511 ],\n",
              "        [ 1.5310489 ,  1.4839531 , -2.4171414 ],\n",
              "        [-1.5659257 ,  1.9490982 , -0.2909354 ],\n",
              "        [ 3.322165  ,  0.09303803, -2.7920504 ],\n",
              "        [ 1.2587324 ,  1.5549365 , -2.3289866 ]], dtype=float32),\n",
              " array([[-1.5847619 ,  0.9272538 ,  0.899426  ],\n",
              "        [ 0.8046724 ,  1.0672933 , -1.467698  ],\n",
              "        [-3.20347   , -0.7852533 ,  3.4787908 ],\n",
              "        [ 3.5931888 , -0.35513693, -2.7568204 ],\n",
              "        [ 3.634518  , -0.17897326, -2.933621  ],\n",
              "        [-3.4057755 ,  0.6497308 ,  2.4243927 ],\n",
              "        [-3.2217743 , -0.43586925,  3.208075  ],\n",
              "        [-3.2922432 , -0.40885213,  3.2839236 ],\n",
              "        [-2.5949414 ,  1.3380889 ,  1.1204126 ],\n",
              "        [ 0.01588424, -0.20823222,  0.23833674],\n",
              "        [-2.8381126 , -0.16120942,  2.644043  ],\n",
              "        [-2.736788  ,  0.75162864,  1.6473987 ],\n",
              "        [ 2.522701  ,  0.9572097 , -2.8383365 ],\n",
              "        [-3.267697  , -0.66723335,  3.4623566 ],\n",
              "        [ 2.8857515 ,  0.6277337 , -2.8776016 ],\n",
              "        [-3.2768593 , -0.203028  ,  3.001279  ]], dtype=float32),\n",
              " array([[ 1.5643665 ,  0.26981178, -1.4795957 ],\n",
              "        [-1.4138725 ,  0.9211885 ,  0.6163672 ],\n",
              "        [-0.41882753,  0.3835948 ,  0.03764307],\n",
              "        [-3.266754  , -0.670828  ,  3.4635656 ],\n",
              "        [ 2.0219    ,  1.119356  , -2.6064167 ],\n",
              "        [ 0.82942677,  1.0249434 , -1.3641251 ],\n",
              "        [ 1.1845175 ,  0.89439595, -1.7229204 ],\n",
              "        [ 2.222629  ,  0.9812504 , -2.5232184 ],\n",
              "        [-1.1720861 ,  1.0178894 ,  0.2849305 ],\n",
              "        [-0.99930745,  0.4106948 ,  0.67286813],\n",
              "        [-2.0854259 ,  1.8109459 ,  0.1969822 ],\n",
              "        [-2.6553032 ,  0.53845835,  1.8580883 ],\n",
              "        [ 2.377762  ,  0.98806196, -2.8230724 ],\n",
              "        [-2.9753006 ,  0.09921398,  2.4531677 ],\n",
              "        [ 3.002491  ,  0.02518047, -2.4517322 ],\n",
              "        [ 3.1417112 ,  0.16340102, -2.7131414 ]], dtype=float32),\n",
              " array([[ 1.9463333 ,  1.25273   , -2.5508938 ],\n",
              "        [-3.3776305 , -0.45303872,  3.3548698 ],\n",
              "        [ 2.489273  ,  0.6024417 , -2.532233  ],\n",
              "        [ 3.4941528 ,  0.06621628, -3.003106  ],\n",
              "        [ 1.9987625 ,  1.2781492 , -2.683644  ],\n",
              "        [-0.2611472 ,  1.4087571 , -0.84337187],\n",
              "        [-0.26574567,  0.41078147,  0.11272828],\n",
              "        [-3.384187  , -0.33357075,  3.2507503 ],\n",
              "        [-3.39163   , -0.17062056,  3.1585314 ],\n",
              "        [ 2.5085435 ,  0.23138466, -2.1340594 ],\n",
              "        [-3.3170357 , -0.20524329,  3.0403633 ],\n",
              "        [ 1.4180452 ,  0.7260088 , -1.775831  ],\n",
              "        [ 1.3001715 ,  1.6129318 , -2.3690145 ],\n",
              "        [ 3.5154107 , -0.00481189, -2.9462929 ],\n",
              "        [-3.100119  , -0.8971878 ,  3.4750414 ],\n",
              "        [ 3.5530708 , -0.74208   , -2.339935  ]], dtype=float32),\n",
              " array([[ 1.3394921 ,  1.0105478 , -1.8117895 ],\n",
              "        [ 1.2360901 ,  0.7870968 , -1.5690072 ],\n",
              "        [-2.7174275 , -0.73383343,  2.995964  ],\n",
              "        [-2.974099  ,  0.20763992,  2.4661713 ],\n",
              "        [ 1.4885181 ,  1.4779698 , -2.4563174 ],\n",
              "        [ 0.23362002, -1.0234286 ,  0.7846972 ],\n",
              "        [-3.4291563 ,  0.00587641,  3.0031676 ],\n",
              "        [-2.2743962 ,  1.3551124 ,  0.7691464 ],\n",
              "        [-3.1007903 , -0.62429905,  3.3587427 ],\n",
              "        [ 1.015336  ,  1.5930576 , -2.0439167 ],\n",
              "        [-0.57679504,  1.5595816 , -0.4660044 ],\n",
              "        [ 3.2865243 , -0.86876595, -2.0905519 ],\n",
              "        [-3.3096159 ,  0.85346234,  2.294836  ],\n",
              "        [ 2.858788  , -1.2104454 , -1.3631544 ],\n",
              "        [ 1.9685581 ,  1.3434917 , -2.624562  ],\n",
              "        [-3.28663   , -0.22226527,  3.1111937 ]], dtype=float32),\n",
              " array([[-0.4687207 ,  1.8133391 , -1.0480881 ],\n",
              "        [-0.27618262,  1.2328545 , -0.51584363],\n",
              "        [ 1.5238405 , -1.1583197 , -0.34114742],\n",
              "        [ 2.1903093 ,  1.0679744 , -2.693511  ],\n",
              "        [ 0.9369125 ,  0.79079914, -1.367384  ],\n",
              "        [-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [-0.37580758, -0.7085054 ,  1.1099758 ],\n",
              "        [ 0.39600137,  1.2827079 , -1.2968596 ],\n",
              "        [ 3.5151782 , -0.935028  , -2.229007  ],\n",
              "        [-3.182138  , -0.6850326 ,  3.4236128 ],\n",
              "        [ 3.6460564 , -0.6342429 , -2.5629969 ],\n",
              "        [ 1.3851746 ,  1.2476861 , -2.2131543 ],\n",
              "        [ 1.7894155 ,  0.1525648 , -1.5559162 ],\n",
              "        [-1.3414788 ,  1.972128  , -0.45045042],\n",
              "        [ 2.3892558 , -0.4089241 , -1.6664886 ],\n",
              "        [ 2.177136  ,  1.1036745 , -2.6388307 ]], dtype=float32),\n",
              " array([[ 0.6332478 , -0.2544944 , -0.2390646 ],\n",
              "        [-3.1313865 , -0.31074467,  3.0344462 ],\n",
              "        [ 3.05944   ,  0.3087363 , -2.6889367 ],\n",
              "        [ 3.3946912 , -0.7621031 , -2.297781  ],\n",
              "        [-0.658233  ,  0.7031541 ,  0.22111021],\n",
              "        [-3.3579834 , -0.4499038 ,  3.3638697 ],\n",
              "        [-1.0662204 ,  1.8827446 , -0.66447765],\n",
              "        [ 1.3304995 ,  1.4712878 , -2.3191712 ],\n",
              "        [ 2.7282777 ,  0.8659852 , -3.0080934 ],\n",
              "        [-2.9052997 , -0.48896143,  3.0197852 ],\n",
              "        [ 3.3983333 , -0.02916789, -2.8451672 ],\n",
              "        [-3.3440964 , -0.5056358 ,  3.3540392 ],\n",
              "        [-2.4410627 , -0.91566503,  3.003472  ],\n",
              "        [-3.2725952 , -0.66581607,  3.4429343 ],\n",
              "        [ 2.6364982 , -0.10758072, -2.0758705 ],\n",
              "        [-0.3396054 ,  0.104619  ,  0.24604633]], dtype=float32),\n",
              " array([[-1.4933563 , -1.2035444 ,  2.2211666 ],\n",
              "        [-3.303224  , -0.5908284 ,  3.3978949 ],\n",
              "        [ 0.07466431,  0.11793078,  0.01019143],\n",
              "        [-0.19685094,  1.1410843 , -0.64772075],\n",
              "        [ 0.93710274,  1.6639479 , -2.0259705 ],\n",
              "        [-1.1219476 ,  1.8936144 , -0.59033644],\n",
              "        [ 2.8050349 ,  0.24128892, -2.4662666 ],\n",
              "        [ 3.3214855 ,  0.1826839 , -2.887186  ],\n",
              "        [-1.4078494 ,  0.587028  ,  0.7705442 ],\n",
              "        [ 2.198446  ,  0.8724538 , -2.4104772 ],\n",
              "        [ 3.2298338 ,  0.25430253, -2.8517823 ],\n",
              "        [ 2.6265655 ,  0.95050603, -2.9517088 ],\n",
              "        [-2.1271462 ,  1.2068568 ,  0.7072247 ],\n",
              "        [ 1.6941355 ,  0.89311606, -2.136262  ],\n",
              "        [-0.61919683,  1.3260394 , -0.5922984 ],\n",
              "        [ 1.7602235 ,  1.4169211 , -2.568101  ]], dtype=float32),\n",
              " array([[ 1.015862  ,  1.4202482 , -1.929029  ],\n",
              "        [ 1.8728133 ,  1.3332702 , -2.5739424 ],\n",
              "        [ 0.8419954 ,  1.063391  , -1.4525477 ],\n",
              "        [-3.411812  , -0.20506227,  3.1553752 ],\n",
              "        [-0.2674478 ,  1.784065  , -1.1963253 ],\n",
              "        [ 0.5162376 ,  1.3773502 , -1.4926118 ],\n",
              "        [ 3.6473408 , -0.6784102 , -2.499579  ],\n",
              "        [-0.25791448,  1.1801776 , -0.7916755 ],\n",
              "        [-3.4124098 , -0.24434651,  3.17383   ],\n",
              "        [-3.3595164 , -0.47154763,  3.3598535 ],\n",
              "        [ 3.5980945 , -0.3366802 , -2.765523  ],\n",
              "        [-3.4186602 , -0.40901363,  3.338122  ],\n",
              "        [-1.9694661 , -0.13599318,  2.0113842 ],\n",
              "        [ 1.4996392 ,  1.6224998 , -2.6566558 ],\n",
              "        [-3.3489125 , -0.31426468,  3.2050366 ],\n",
              "        [-3.299713  , -0.5241133 ,  3.3410265 ]], dtype=float32),\n",
              " array([[-3.1191757 , -0.8301785 ,  3.46049   ],\n",
              "        [ 3.4699478 , -0.6948521 , -2.4404862 ],\n",
              "        [-0.03460298,  1.8777932 , -1.643415  ],\n",
              "        [ 2.431925  ,  1.1971616 , -2.9296963 ],\n",
              "        [ 0.9660199 , -0.5851289 , -0.3205294 ],\n",
              "        [-1.1354363 ,  1.857474  , -0.50177157],\n",
              "        [ 2.7565615 , -0.18846792, -2.0820165 ],\n",
              "        [-1.5151097 ,  1.8452507 , -0.25178364],\n",
              "        [-2.0501888 ,  1.6721021 ,  0.38689587],\n",
              "        [-3.2043889 , -0.7651994 ,  3.4738092 ],\n",
              "        [-2.8854332 ,  0.55650365,  2.1732295 ],\n",
              "        [ 2.20417   , -0.0168182 , -1.6918975 ],\n",
              "        [-3.3887713 , -0.48424494,  3.3971233 ],\n",
              "        [ 1.2251743 ,  1.340459  , -2.0464907 ],\n",
              "        [-3.311864  , -0.60106504,  3.4232216 ],\n",
              "        [ 2.0653808 ,  1.2118218 , -2.6179805 ]], dtype=float32),\n",
              " array([[ 0.23637217,  0.32345137, -0.3486141 ],\n",
              "        [-3.0245538 , -0.6073333 ,  3.2073727 ],\n",
              "        [-1.4535513 ,  1.1294223 ,  0.4457954 ],\n",
              "        [-1.6935393 ,  1.7250634 , -0.10186033],\n",
              "        [-3.1746461 , -0.7896141 ,  3.4807096 ],\n",
              "        [ 2.0546842 ,  1.2508029 , -2.6949382 ],\n",
              "        [-1.9975256 , -0.5871794 ,  2.3805223 ],\n",
              "        [-0.21919686,  1.6179916 , -1.1087402 ],\n",
              "        [ 2.4523149 ,  0.7957708 , -2.612749  ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [ 0.17645629,  0.9196787 , -0.75077844],\n",
              "        [ 0.5892548 ,  0.7031671 , -0.8996265 ],\n",
              "        [ 2.8906698 ,  0.04162408, -2.4547157 ],\n",
              "        [ 1.2340721 ,  1.2732798 , -2.0016265 ],\n",
              "        [-2.7577593 ,  1.2912655 ,  1.3703606 ],\n",
              "        [-0.33579388,  0.8196349 , -0.17243883]], dtype=float32),\n",
              " array([[-3.3931239 ,  0.731095  ,  2.4230607 ],\n",
              "        [-2.1102922 ,  1.5254982 ,  0.44730604],\n",
              "        [-1.3529121 ,  1.4319543 , -0.00936692],\n",
              "        [ 1.2989961 ,  0.7049237 , -1.5698686 ],\n",
              "        [ 2.453297  ,  0.665047  , -2.4704325 ],\n",
              "        [ 1.8669015 ,  1.2175927 , -2.4725513 ],\n",
              "        [ 2.0011451 ,  1.1094981 , -2.590136  ],\n",
              "        [ 0.9587037 ,  0.23100933, -0.8988223 ],\n",
              "        [ 0.30703068,  1.6915956 , -1.4038877 ],\n",
              "        [ 3.3449178 ,  0.03075031, -2.8822505 ],\n",
              "        [ 2.9210684 , -0.38297287, -1.955503  ],\n",
              "        [-1.9556249 ,  1.9667553 ,  0.01255524],\n",
              "        [-1.7604703 ,  0.02601715,  1.5249367 ],\n",
              "        [-0.3710133 ,  1.8210238 , -0.99266034],\n",
              "        [-3.2520163 , -0.68453413,  3.4579544 ],\n",
              "        [-1.2822667 ,  1.377494  ,  0.17996942]], dtype=float32),\n",
              " array([[ 2.0804415 ,  1.0702622 , -2.6208928 ],\n",
              "        [ 1.9327941 ,  1.4026575 , -2.707455  ],\n",
              "        [-1.6501576 ,  0.18547639,  1.3914582 ],\n",
              "        [ 1.2187446 ,  0.60998356, -1.5287216 ],\n",
              "        [ 2.9416764 ,  0.7642978 , -2.9982061 ],\n",
              "        [ 0.16464767,  1.8726345 , -1.7051538 ],\n",
              "        [ 2.6871464 ,  0.28600702, -2.4396067 ],\n",
              "        [ 3.592205  , -0.33608207, -2.7091131 ],\n",
              "        [ 1.647261  ,  1.366371  , -2.358385  ],\n",
              "        [-1.5074428 ,  1.1868863 ,  0.44224238],\n",
              "        [ 1.9040083 ,  1.0334345 , -2.3385043 ],\n",
              "        [ 1.8472809 ,  1.2373799 , -2.5760982 ],\n",
              "        [-1.4410095 ,  1.9377402 , -0.41157335],\n",
              "        [-3.1393356 , -0.8351147 ,  3.5043042 ],\n",
              "        [-3.273187  , -0.69638133,  3.4689553 ],\n",
              "        [ 1.9357797 ,  1.1159583 , -2.4376397 ]], dtype=float32),\n",
              " array([[-3.0242634 ,  1.0070535 ,  1.940887  ],\n",
              "        [ 0.2574678 ,  1.8965603 , -1.8151176 ],\n",
              "        [ 2.083103  , -0.36032417, -1.4676702 ],\n",
              "        [ 1.1169292 , -0.95958745, -0.23220018],\n",
              "        [ 1.9313728 ,  1.0753821 , -2.2790644 ],\n",
              "        [ 0.7753344 ,  1.7660481 , -1.9903083 ],\n",
              "        [ 1.4269756 ,  0.48279497, -1.5586778 ],\n",
              "        [-0.43449333,  1.4506518 , -0.87815166],\n",
              "        [ 1.614083  ,  1.0757153 , -2.1588478 ],\n",
              "        [ 3.1662123 ,  0.16623658, -2.837611  ],\n",
              "        [ 3.4698284 , -0.4120697 , -2.6056483 ],\n",
              "        [-2.9980109 ,  1.1635923 ,  1.6356388 ],\n",
              "        [-3.3346305 , -0.10881602,  2.99527   ],\n",
              "        [ 1.3796014 ,  1.1141994 , -1.9811478 ],\n",
              "        [-1.464287  ,  2.1268818 , -0.49536753],\n",
              "        [ 3.2336483 ,  0.20139489, -2.971307  ]], dtype=float32),\n",
              " array([[-2.8347325 , -0.77183044,  3.1853886 ],\n",
              "        [ 0.1337637 ,  0.8419366 , -0.6407824 ],\n",
              "        [ 3.563525  , -0.02738504, -3.0157988 ],\n",
              "        [-0.2091569 ,  1.8324262 , -1.4385138 ],\n",
              "        [ 2.7363403 ,  0.71006143, -2.738451  ],\n",
              "        [-3.2943923 , -0.62171316,  3.4168644 ],\n",
              "        [-2.2742915 ,  1.2391815 ,  0.9635199 ],\n",
              "        [-3.088537  , -0.87246126,  3.4967773 ],\n",
              "        [ 2.4156816 ,  1.0395705 , -2.8480241 ],\n",
              "        [-1.0386909 ,  1.4578658 , -0.46448517],\n",
              "        [ 1.9120194 ,  1.4147345 , -2.5957537 ],\n",
              "        [ 3.597246  , -0.70730686, -2.39601   ],\n",
              "        [ 1.4583675 , -0.8914179 , -0.3933637 ],\n",
              "        [-3.3727138 , -0.41764072,  3.3394637 ],\n",
              "        [-1.579932  ,  0.1800896 ,  1.1700034 ],\n",
              "        [-3.1878374 , -0.81000555,  3.4724822 ]], dtype=float32),\n",
              " array([[-1.5664834 , -0.18589838,  1.6561553 ],\n",
              "        [-2.9554236 , -0.97138965,  3.4620938 ],\n",
              "        [-3.1482093 , -0.79757553,  3.4756298 ],\n",
              "        [-0.7709576 ,  1.0930538 , -0.1202658 ],\n",
              "        [ 3.3323684 ,  0.35297775, -3.0929902 ],\n",
              "        [ 1.5361181 ,  1.3872215 , -2.513194  ],\n",
              "        [ 2.4820364 ,  0.3680219 , -2.313922  ],\n",
              "        [ 1.9906014 ,  1.3572423 , -2.8200688 ],\n",
              "        [-1.7467982 ,  1.4053155 ,  0.40814078],\n",
              "        [-1.3614439 , -0.1919078 ,  1.4107972 ],\n",
              "        [-2.8260653 ,  1.3665813 ,  1.2547467 ],\n",
              "        [ 1.9015037 ,  1.1810534 , -2.5662594 ],\n",
              "        [ 1.4209341 ,  1.3413409 , -2.1571238 ],\n",
              "        [-2.0045006 ,  1.889105  ,  0.11748725],\n",
              "        [-3.0049927 ,  0.86625654,  1.8840554 ],\n",
              "        [-3.4382021 , -0.4125775 ,  3.3362675 ]], dtype=float32),\n",
              " array([[-1.2054614 ,  1.2874702 ,  0.16388342],\n",
              "        [ 1.4024299 ,  1.402951  , -2.3293295 ],\n",
              "        [-1.8173405 ,  1.6337293 ,  0.37954485],\n",
              "        [-2.98587   ,  0.6188699 ,  2.2243686 ],\n",
              "        [-1.6275619 , -0.24841033,  1.7436328 ],\n",
              "        [ 3.1106622 , -0.85885066, -1.8140237 ],\n",
              "        [-1.0669318 ,  2.0284235 , -0.8513589 ],\n",
              "        [ 3.313011  ,  0.27537072, -2.9595742 ],\n",
              "        [-3.1187909 , -0.8334565 ,  3.474987  ],\n",
              "        [-3.2325244 , -0.21487686,  3.0283282 ],\n",
              "        [-3.144492  , -0.48068324,  3.196485  ],\n",
              "        [-2.6260674 ,  1.2545732 ,  1.1698892 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 0.9181111 ,  1.0727345 , -1.4960912 ],\n",
              "        [-3.187789  , -0.7169193 ,  3.4322047 ],\n",
              "        [ 1.1406398 ,  1.5151583 , -2.0893052 ]], dtype=float32),\n",
              " array([[-3.0958626 , -0.5276417 ,  3.138842  ],\n",
              "        [ 0.91466933,  0.12884514, -0.94528013],\n",
              "        [ 3.469813  ,  0.2282007 , -3.0514846 ],\n",
              "        [ 3.653805  , -0.07148741, -3.0188687 ],\n",
              "        [-3.1148293 ,  1.095539  ,  1.817937  ],\n",
              "        [-3.338795  , -0.548606  ,  3.3774254 ],\n",
              "        [-2.3820157 ,  1.5707763 ,  0.63602406],\n",
              "        [-3.2478735 , -0.5774878 ,  3.4160287 ],\n",
              "        [ 2.6363914 ,  0.40206736, -2.356576  ],\n",
              "        [-1.7766188 ,  1.7962435 , -0.1461571 ],\n",
              "        [-2.9615343 , -0.46779174,  3.0492792 ],\n",
              "        [-2.8105586 ,  1.0221335 ,  1.6412642 ],\n",
              "        [-1.5100502 ,  1.9044906 , -0.3277682 ],\n",
              "        [-3.1877282 , -0.5542524 ,  3.2841802 ],\n",
              "        [-0.20886481,  1.7014807 , -0.988351  ],\n",
              "        [-2.9086945 ,  1.1028477 ,  1.5480962 ]], dtype=float32),\n",
              " array([[ 3.5453503 ,  0.00754726, -2.9181013 ],\n",
              "        [ 2.5076861 ,  0.9883487 , -2.8324425 ],\n",
              "        [ 1.8136674 ,  1.4634143 , -2.701816  ],\n",
              "        [-2.2244422 ,  0.85379684,  1.3247335 ],\n",
              "        [-0.12354849,  1.2885095 , -0.83223146],\n",
              "        [-3.2154007 , -0.70258   ,  3.435929  ],\n",
              "        [-0.586436  , -0.78798395,  1.3320642 ],\n",
              "        [-2.2960947 , -0.6940368 ,  2.6857753 ],\n",
              "        [ 1.8278111 ,  1.330933  , -2.549183  ],\n",
              "        [ 0.47790423,  1.349899  , -1.3769276 ],\n",
              "        [-1.2425927 ,  1.8104349 , -0.49286112],\n",
              "        [ 0.22229177,  1.5614847 , -1.3959761 ],\n",
              "        [-3.322881  , -0.2747564 ,  3.1619668 ],\n",
              "        [ 1.7571992 ,  1.4230341 , -2.4557767 ],\n",
              "        [ 0.9028085 ,  1.602142  , -2.0893912 ],\n",
              "        [-3.4227746 , -0.4678574 ,  3.4043045 ]], dtype=float32),\n",
              " array([[-1.5115042 ,  1.6881567 ,  0.01678644],\n",
              "        [-2.5850935 ,  0.8680914 ,  1.5035579 ],\n",
              "        [-0.1728597 ,  0.8901278 , -0.39284086],\n",
              "        [ 3.4224474 , -0.26631048, -2.5548646 ],\n",
              "        [ 0.928703  ,  0.79261863, -1.3996136 ],\n",
              "        [ 0.8629009 ,  1.3987023 , -1.7176776 ],\n",
              "        [-1.3644538 ,  1.7630066 , -0.37446725],\n",
              "        [ 2.8862221 ,  0.8911493 , -3.0418813 ],\n",
              "        [ 2.9315438 ,  0.8597104 , -3.1395166 ],\n",
              "        [-3.253145  , -0.7622967 ,  3.479     ],\n",
              "        [ 2.4441226 ,  0.8166077 , -2.620251  ],\n",
              "        [ 3.1057134 ,  0.47985908, -2.9753833 ],\n",
              "        [ 1.0980132 ,  0.37260082, -1.0831212 ],\n",
              "        [-3.2359855 , -0.56641793,  3.3456447 ],\n",
              "        [-0.8721706 ,  2.0391603 , -0.89443403],\n",
              "        [-1.2935058 ,  1.7264394 , -0.34258622]], dtype=float32),\n",
              " array([[-1.0419189 ,  1.1292886 , -0.0838254 ],\n",
              "        [-3.3879008 , -0.53703165,  3.4189568 ],\n",
              "        [ 0.3044205 ,  0.87949395, -0.81756943],\n",
              "        [-3.263557  , -0.41828474,  3.2494442 ],\n",
              "        [-2.4578624 ,  0.9037839 ,  1.4395113 ],\n",
              "        [-3.3488295 , -0.18948688,  3.110242  ],\n",
              "        [-0.5296676 ,  0.6853157 , -0.25524065],\n",
              "        [ 0.6859998 ,  1.1487664 , -1.4780596 ],\n",
              "        [ 1.7344873 ,  1.2812406 , -2.4238675 ],\n",
              "        [-0.3785241 ,  1.84819   , -1.1445749 ],\n",
              "        [-2.6330922 ,  0.96071565,  1.4762249 ],\n",
              "        [ 2.8140864 , -0.15966852, -2.1020389 ],\n",
              "        [-1.7803904 ,  0.00559542,  1.5816798 ],\n",
              "        [-0.7129559 ,  1.2618943 , -0.29332426],\n",
              "        [ 3.5865707 , -0.7339213 , -2.4198112 ],\n",
              "        [-2.7664216 , -0.62118816,  2.9823472 ]], dtype=float32),\n",
              " array([[ 3.6832483 , -0.44974825, -2.7317672 ],\n",
              "        [ 2.2446442 ,  1.1825938 , -2.685532  ],\n",
              "        [-2.2902048 , -1.0694227 ,  2.8312972 ],\n",
              "        [-3.0152357 , -0.8436961 ,  3.4284396 ],\n",
              "        [ 3.4938629 , -0.18740183, -2.7969048 ],\n",
              "        [-3.1881392 , -0.75894785,  3.4383898 ],\n",
              "        [ 1.4416944 , -0.7558801 , -0.62887967],\n",
              "        [ 1.6476394 ,  0.20619267, -1.5186923 ],\n",
              "        [-3.261071  , -0.68876016,  3.426231  ],\n",
              "        [-2.8408344 ,  0.10263022,  2.4828181 ],\n",
              "        [ 1.8461331 ,  0.8038586 , -2.0899885 ],\n",
              "        [ 1.3732096 ,  0.4100313 , -1.419326  ],\n",
              "        [ 3.1186721 ,  0.3726997 , -2.820756  ],\n",
              "        [-1.3849651 , -1.1028496 ,  2.2760484 ],\n",
              "        [ 2.7988625 ,  0.70642185, -2.9776673 ],\n",
              "        [ 3.6170108 , -0.13743171, -2.9774163 ]], dtype=float32),\n",
              " array([[-3.3624375 , -0.53094214,  3.448895  ],\n",
              "        [-1.7840592 ,  1.6499077 ,  0.19251755],\n",
              "        [ 2.1005306 ,  0.8790109 , -2.4598567 ],\n",
              "        [ 3.465097  , -0.1778118 , -2.6469402 ],\n",
              "        [ 2.1750107 ,  1.3235258 , -2.8629596 ],\n",
              "        [-0.38362575,  1.7474935 , -0.9986622 ],\n",
              "        [ 1.2139708 ,  1.4265739 , -2.0283723 ],\n",
              "        [ 1.947724  ,  0.83945763, -2.3735633 ],\n",
              "        [ 1.2509202 ,  1.3232836 , -2.1445017 ],\n",
              "        [ 0.4372293 ,  1.6098678 , -1.6109979 ],\n",
              "        [ 0.39616382,  0.9821356 , -0.9564063 ],\n",
              "        [-3.3869424 , -0.43546495,  3.3447547 ],\n",
              "        [-2.6500804 ,  0.8103721 ,  1.6537025 ],\n",
              "        [ 1.8342601 ,  1.167885  , -2.3845878 ],\n",
              "        [ 0.01758912,  0.83706707, -0.6538966 ],\n",
              "        [ 3.0783877 , -0.02741865, -2.6076856 ]], dtype=float32),\n",
              " array([[-3.2946243 , -0.6030447 ,  3.4468465 ],\n",
              "        [-3.269665  , -0.6802584 ,  3.4392877 ],\n",
              "        [-2.6426957 ,  0.97422945,  1.4489286 ],\n",
              "        [-2.2737098 ,  0.51829934,  1.6975346 ],\n",
              "        [-3.2967002 , -0.06679782,  2.9525762 ],\n",
              "        [-0.43937752,  1.4121512 , -0.6929362 ],\n",
              "        [ 2.4061637 ,  0.34911528, -2.1240985 ],\n",
              "        [-2.6568553 ,  1.0856348 ,  1.534166  ],\n",
              "        [ 1.5283934 ,  0.5752337 , -1.7188036 ],\n",
              "        [ 0.1340841 ,  1.3326055 , -1.1431828 ],\n",
              "        [ 1.2524978 ,  0.07095877, -0.9760843 ],\n",
              "        [-3.2714107 , -0.7017435 ,  3.473677  ],\n",
              "        [-1.8000771 ,  1.3215357 ,  0.2845644 ],\n",
              "        [ 3.412435  ,  0.23021731, -2.9686055 ],\n",
              "        [ 2.3545423 , -0.37080163, -1.7294812 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ]], dtype=float32),\n",
              " array([[-3.272817  , -0.5949019 ,  3.3794975 ],\n",
              "        [-3.2437959 , -0.62740797,  3.3361962 ],\n",
              "        [-1.8388704 ,  1.5864589 ,  0.18917975],\n",
              "        [ 1.0435075 ,  1.5641421 , -2.1755452 ],\n",
              "        [-1.6563687 ,  1.8688356 , -0.20762303],\n",
              "        [-1.4858323 , -1.0589286 ,  2.4113746 ],\n",
              "        [-0.3140526 , -1.0511295 ,  1.1049608 ],\n",
              "        [-3.3231971 , -0.35755977,  3.1920207 ],\n",
              "        [-1.7195195 ,  1.2371138 ,  0.46307394],\n",
              "        [ 0.6116476 ,  0.28407022, -0.5178504 ],\n",
              "        [ 3.2514796 ,  0.16017601, -2.7506695 ],\n",
              "        [ 2.1112678 ,  1.1089629 , -2.538147  ],\n",
              "        [ 2.4876385 ,  0.7540463 , -2.5612116 ],\n",
              "        [ 0.5609177 ,  1.479504  , -1.578343  ],\n",
              "        [ 1.7314004 , -0.99408054, -0.5001527 ],\n",
              "        [ 3.5441916 , -0.3162642 , -2.716679  ]], dtype=float32),\n",
              " array([[ 1.8687376 ,  1.3633341 , -2.6665287 ],\n",
              "        [-3.277662  , -0.6963482 ,  3.4700623 ],\n",
              "        [-2.2115648 , -1.106692  ,  3.031816  ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 2.203199  ,  0.8090682 , -2.4938488 ],\n",
              "        [-3.4866378 ,  0.29786265,  2.8426483 ],\n",
              "        [ 3.2205632 , -1.2797925 , -1.604771  ],\n",
              "        [-2.312187  ,  0.66817117,  1.299013  ],\n",
              "        [ 3.5803993 , -0.10860851, -2.9413848 ],\n",
              "        [ 0.5695496 ,  1.3522809 , -1.4986014 ],\n",
              "        [-2.3889644 , -0.33922693,  2.5045757 ],\n",
              "        [-3.329871  , -0.4496306 ,  3.2890453 ],\n",
              "        [ 2.9647462 ,  0.11316172, -2.5063832 ],\n",
              "        [-3.2037659 , -0.10704167,  2.893351  ],\n",
              "        [ 0.64249784,  0.6938262 , -1.01522   ],\n",
              "        [ 3.0255358 ,  0.6806387 , -3.0448685 ]], dtype=float32),\n",
              " array([[-3.4202902 , -0.0822191 ,  3.0769334 ],\n",
              "        [ 1.8935298 ,  0.71994245, -2.0915937 ],\n",
              "        [-3.4473631 ,  0.4949285 ,  2.5716293 ],\n",
              "        [ 2.4105637 ,  0.50704527, -2.250238  ],\n",
              "        [-3.335714  , -0.5815184 ,  3.418843  ],\n",
              "        [-1.6708506 ,  0.7852614 ,  0.774694  ],\n",
              "        [ 3.3659008 , -0.47642675, -2.4265118 ],\n",
              "        [ 0.02233781,  1.6159245 , -1.2689323 ],\n",
              "        [-3.19851   , -0.7913296 ,  3.4721572 ],\n",
              "        [-2.563203  ,  0.07647982,  2.0149784 ],\n",
              "        [-1.8962334 ,  1.4677075 ,  0.45733613],\n",
              "        [-1.4086589 ,  1.906207  , -0.3380671 ],\n",
              "        [-3.291934  , -0.6761962 ,  3.456785  ],\n",
              "        [-2.9934628 , -1.0062969 ,  3.4796576 ],\n",
              "        [ 3.579371  , -0.5640366 , -2.6332965 ],\n",
              "        [-2.036631  , -0.5622046 ,  2.5006278 ]], dtype=float32),\n",
              " array([[-3.305042  , -0.34299484,  3.258967  ],\n",
              "        [-2.6469448 ,  0.38512728,  1.9989341 ],\n",
              "        [ 1.9035368 ,  1.4276887 , -2.71846   ],\n",
              "        [ 2.6636229 ,  0.45641556, -2.5683799 ],\n",
              "        [-0.604196  ,  1.913534  , -0.98649126],\n",
              "        [-1.865741  ,  1.2172456 ,  0.6375715 ],\n",
              "        [ 1.7598599 ,  0.74415153, -1.8998574 ],\n",
              "        [-0.8336866 ,  1.585076  , -0.50311404],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [-3.3027136 , -0.18755823,  3.1270542 ],\n",
              "        [-2.713122  , -1.0398419 ,  3.2924094 ],\n",
              "        [-3.2992427 , -0.66025704,  3.444414  ],\n",
              "        [-0.6853569 ,  0.373684  ,  0.386703  ],\n",
              "        [-3.1419868 ,  0.2236847 ,  2.649424  ],\n",
              "        [-1.5991247 ,  1.353793  ,  0.3542657 ],\n",
              "        [-0.00398506,  0.7094182 , -0.39721784]], dtype=float32),\n",
              " array([[ 0.67978984,  1.7272917 , -1.8773252 ],\n",
              "        [ 3.4253206 ,  0.17558154, -3.0301073 ],\n",
              "        [ 2.2876031 ,  0.9651444 , -2.7767744 ],\n",
              "        [-1.712968  , -1.2701372 ,  2.7477117 ],\n",
              "        [-3.3861554 ,  0.21992084,  2.7201118 ],\n",
              "        [ 3.4935029 ,  0.20627993, -3.1477137 ],\n",
              "        [-2.0713909 , -0.3527076 ,  2.211453  ],\n",
              "        [-1.1258911 ,  2.0085979 , -0.7234535 ],\n",
              "        [-2.0477438 , -0.63959634,  2.5023072 ],\n",
              "        [-0.38003477,  2.0372055 , -1.420181  ],\n",
              "        [-1.7209605 ,  0.9309198 ,  0.86391157],\n",
              "        [ 2.710757  ,  0.5640542 , -2.711176  ],\n",
              "        [ 0.01359517,  1.018138  , -0.77562076],\n",
              "        [-3.3633583 , -0.2856029 ,  3.1988606 ],\n",
              "        [-2.8176396 ,  1.1610552 ,  1.5746255 ],\n",
              "        [-3.287513  , -0.10763309,  3.007234  ]], dtype=float32),\n",
              " array([[ 3.2281768 ,  0.15062378, -2.709237  ],\n",
              "        [ 1.5417794 ,  0.77660924, -1.8820208 ],\n",
              "        [ 1.7262582 , -0.60675967, -0.8943219 ],\n",
              "        [ 1.9682046 ,  1.2989494 , -2.6606035 ],\n",
              "        [ 2.3213432 ,  1.1158081 , -2.8701026 ],\n",
              "        [ 2.0869985 ,  0.062045  , -1.7352055 ],\n",
              "        [-0.5216268 , -1.0291435 ,  1.3987991 ],\n",
              "        [ 2.47845   ,  0.5540742 , -2.4893205 ],\n",
              "        [-2.9055932 ,  0.7650647 ,  1.8956463 ],\n",
              "        [-3.0464423 ,  0.27598596,  2.4135418 ],\n",
              "        [ 1.3869661 ,  0.84379524, -1.7581234 ],\n",
              "        [-0.3447311 ,  1.7118918 , -0.9126651 ],\n",
              "        [ 1.6421844 ,  1.2402862 , -2.4636152 ],\n",
              "        [ 0.494395  ,  0.94137734, -1.1419038 ],\n",
              "        [-3.3338435 , -0.53235114,  3.402875  ],\n",
              "        [ 3.5275319 , -0.21482521, -2.798409  ]], dtype=float32),\n",
              " array([[-0.73231775,  1.4931097 , -0.5166149 ],\n",
              "        [ 3.550478  , -0.81863534, -2.2714944 ],\n",
              "        [ 0.29161146,  1.3691095 , -1.1018803 ],\n",
              "        [ 1.4295784 ,  1.2454373 , -2.1399968 ],\n",
              "        [ 2.8326654 , -0.7247811 , -1.7520032 ],\n",
              "        [ 2.000818  , -1.4569799 , -0.4561544 ],\n",
              "        [-2.9794877 , -1.0019798 ,  3.4689114 ],\n",
              "        [-2.80145   , -1.1555659 ,  3.4052482 ],\n",
              "        [ 2.098745  ,  1.1770432 , -2.6145513 ],\n",
              "        [ 0.53593904,  1.3466481 , -1.4603858 ],\n",
              "        [ 2.8249264 ,  0.813437  , -2.9667873 ],\n",
              "        [ 1.3932153 ,  1.5736398 , -2.3170173 ],\n",
              "        [-1.5200639 ,  1.8076447 , -0.10611764],\n",
              "        [-3.2734215 ,  0.63250643,  2.360245  ],\n",
              "        [-2.1754637 ,  1.4530753 ,  0.63082194],\n",
              "        [ 2.3036287 ,  0.80625534, -2.479329  ]], dtype=float32),\n",
              " array([[ 1.9947158 , -0.48725298, -1.2935259 ],\n",
              "        [ 2.4371846 ,  0.6945909 , -2.5810642 ],\n",
              "        [-1.356634  ,  1.8669332 , -0.25853568],\n",
              "        [ 1.7203847 ,  1.3199209 , -2.4573069 ],\n",
              "        [ 1.4275821 ,  1.1850401 , -2.0459805 ],\n",
              "        [-0.20162   ,  1.7811011 , -1.4171888 ],\n",
              "        [-3.22657   , -0.16824524,  3.0292535 ],\n",
              "        [-1.3958629 ,  1.0407603 ,  0.40999213],\n",
              "        [ 1.9473399 ,  1.2796055 , -2.585511  ],\n",
              "        [ 0.8981516 ,  1.2084874 , -1.573484  ],\n",
              "        [-3.3886082 , -0.40327096,  3.3296719 ],\n",
              "        [-1.6874394 ,  0.17865759,  1.3700634 ],\n",
              "        [-1.6712317 ,  1.8485017 , -0.06029093],\n",
              "        [ 0.7532589 ,  1.3743881 , -1.6567907 ],\n",
              "        [ 0.495919  ,  0.50134283, -0.7631507 ],\n",
              "        [ 2.4239275 ,  0.66311467, -2.56382   ]], dtype=float32),\n",
              " array([[-2.2755618 ,  1.5628624 ,  0.63250333],\n",
              "        [-0.6548367 ,  0.29776597,  0.33617648],\n",
              "        [ 2.851374  ,  0.6448965 , -2.838735  ],\n",
              "        [-2.8178685 , -0.07662524,  2.5709412 ],\n",
              "        [ 1.7299589 ,  1.3773502 , -2.5838687 ],\n",
              "        [-0.07618609,  1.1054428 , -0.7149001 ],\n",
              "        [ 1.6506637 ,  1.343718  , -2.5017054 ],\n",
              "        [-1.1717327 , -1.3287436 ,  2.3334703 ],\n",
              "        [ 3.007511  ,  0.49220252, -2.8415074 ],\n",
              "        [-2.8469574 ,  0.1121148 ,  2.2986827 ],\n",
              "        [ 3.2098024 ,  0.45592993, -3.04705   ],\n",
              "        [ 1.7785044 ,  0.86600167, -2.0454087 ],\n",
              "        [-3.242524  , -0.6182637 ,  3.4267428 ],\n",
              "        [ 0.79919136,  0.8440995 , -1.3174996 ],\n",
              "        [-3.2920291 , -0.6735998 ,  3.4473279 ],\n",
              "        [ 1.2297231 ,  1.708321  , -2.3180406 ]], dtype=float32),\n",
              " array([[-1.9144126 ,  1.7963735 ,  0.23890603],\n",
              "        [-1.4486777 , -0.4772048 ,  1.6708846 ],\n",
              "        [-1.225764  ,  1.9497938 , -0.6089853 ],\n",
              "        [-2.9991312 ,  0.6403991 ,  2.0670137 ],\n",
              "        [-1.1008147 ,  1.798193  , -0.52420795],\n",
              "        [ 1.9431834 ,  1.355034  , -2.7048516 ],\n",
              "        [ 2.3691845 ,  0.90188277, -2.7394867 ],\n",
              "        [ 0.87577826,  1.2235204 , -1.7038321 ],\n",
              "        [-2.3856637 ,  0.4532671 ,  1.4257989 ],\n",
              "        [-3.1538208 , -0.7559993 ,  3.4276638 ],\n",
              "        [-3.1027963 ,  0.02518848,  2.7123284 ],\n",
              "        [-2.6417897 ,  0.3416206 ,  2.019692  ],\n",
              "        [-3.0185308 , -0.16047606,  2.8069453 ],\n",
              "        [-1.929037  ,  1.7275298 ,  0.23191743],\n",
              "        [-3.3176513 , -0.624882  ,  3.4504046 ],\n",
              "        [-0.35054657, -0.93034583,  0.98260653]], dtype=float32),\n",
              " array([[-0.26498297,  0.55293655, -0.06910469],\n",
              "        [ 1.6470655 ,  0.9955226 , -2.0688002 ],\n",
              "        [ 3.3973048 , -0.4777952 , -2.4768214 ],\n",
              "        [-2.0610058 , -1.3001486 ,  2.975646  ],\n",
              "        [ 2.4385283 ,  0.990139  , -2.8233938 ],\n",
              "        [-1.5737054 ,  2.1407897 , -0.3793661 ],\n",
              "        [-2.9664116 ,  0.19446233,  2.4875398 ],\n",
              "        [ 1.1440486 ,  0.7867526 , -1.5708578 ],\n",
              "        [-2.6984675 ,  0.40893367,  1.8587369 ],\n",
              "        [ 2.1696928 ,  0.84882146, -2.454493  ],\n",
              "        [ 0.50010794,  1.3181826 , -1.5121621 ],\n",
              "        [ 3.510089  , -0.6019393 , -2.5567389 ],\n",
              "        [ 2.4056203 ,  0.8824162 , -2.681223  ],\n",
              "        [ 2.4610174 ,  0.8973078 , -2.7365336 ],\n",
              "        [-3.1468284 , -0.8352672 ,  3.4837165 ],\n",
              "        [-3.3918154 , -0.33178708,  3.2502985 ]], dtype=float32),\n",
              " array([[ 1.723846  ,  0.7249243 , -1.9460872 ],\n",
              "        [-1.1516285 ,  1.3093001 , -0.07118582],\n",
              "        [ 0.85552955, -0.5805477 , -0.21595919],\n",
              "        [-3.12696   ,  0.7382083 ,  2.2288566 ],\n",
              "        [-3.216362  , -0.79748833,  3.4858122 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-0.54127365, -0.62775433,  1.1026796 ],\n",
              "        [ 3.166521  , -0.49427715, -2.244238  ],\n",
              "        [ 2.9655833 ,  0.617091  , -2.9701393 ],\n",
              "        [ 3.0228894 ,  0.30982348, -2.6545937 ],\n",
              "        [-0.00452912,  1.0429031 , -0.55824625],\n",
              "        [ 2.2820632 ,  0.9273666 , -2.51639   ],\n",
              "        [-3.375611  , -0.5619262 ,  3.4370503 ],\n",
              "        [ 1.4062642 ,  1.3745369 , -2.223033  ],\n",
              "        [-3.3346171 , -0.57137275,  3.4212084 ],\n",
              "        [-1.9841942 , -1.0379227 ,  2.7023215 ]], dtype=float32),\n",
              " array([[-1.8625911 ,  1.4692606 ,  0.3037913 ],\n",
              "        [ 0.1888742 ,  1.3202783 , -1.0681189 ],\n",
              "        [ 3.5832756 , -0.625092  , -2.4383101 ],\n",
              "        [-2.9023297 , -0.0361644 ,  2.6816483 ],\n",
              "        [ 1.3657573 ,  1.1415676 , -1.9591115 ],\n",
              "        [ 1.0210305 ,  1.3207127 , -1.9268917 ],\n",
              "        [ 2.6179092 ,  0.33301035, -2.4301815 ],\n",
              "        [ 2.4753385 ,  0.15021946, -2.0909688 ],\n",
              "        [-0.8227406 ,  1.587659  , -0.54187775],\n",
              "        [-3.247478  , -0.48515746,  3.265895  ],\n",
              "        [-1.1729544 ,  1.4536576 , -0.07162748],\n",
              "        [ 3.6338224 , -0.4841369 , -2.6871767 ],\n",
              "        [-2.8271945 ,  1.4076716 ,  1.2041452 ],\n",
              "        [-2.0040898 ,  0.9783639 ,  1.1006954 ],\n",
              "        [ 2.1328619 ,  1.1895818 , -2.6628604 ],\n",
              "        [-3.0872118 , -0.26866883,  2.9748635 ]], dtype=float32),\n",
              " array([[-3.3641505 , -0.52450216,  3.4271877 ],\n",
              "        [-0.6424294 , -1.0887023 ,  1.495532  ],\n",
              "        [-1.7097346 , -0.8842148 ,  2.4165306 ],\n",
              "        [-1.0461286 ,  1.5495306 , -0.30827707],\n",
              "        [-2.6046245 , -0.46818858,  2.756468  ],\n",
              "        [ 3.109578  ,  0.25893322, -2.765615  ],\n",
              "        [ 0.8782665 ,  1.2488053 , -1.7339256 ],\n",
              "        [ 0.8418226 ,  1.5103277 , -1.951693  ],\n",
              "        [-3.0894325 , -0.83533484,  3.4461055 ],\n",
              "        [-3.392556  , -0.29349467,  3.1990004 ],\n",
              "        [ 1.9989356 ,  1.0097044 , -2.3211594 ],\n",
              "        [-3.1657393 ,  0.11501057,  2.693244  ],\n",
              "        [ 2.7261155 ,  0.54623425, -2.6686954 ],\n",
              "        [-3.112787  , -0.82582223,  3.4700603 ],\n",
              "        [ 1.7352736 ,  1.273887  , -2.4120078 ],\n",
              "        [ 2.4726799 ,  0.6795687 , -2.465085  ]], dtype=float32),\n",
              " array([[ 2.3310041 ,  0.8726372 , -2.662619  ],\n",
              "        [ 1.1996943 ,  0.9533185 , -1.6576098 ],\n",
              "        [ 3.584501  ,  0.08147833, -3.0632832 ],\n",
              "        [-1.9670546 ,  0.9036919 ,  1.0453659 ],\n",
              "        [-0.6953532 ,  1.4257787 , -0.52577394],\n",
              "        [ 3.5951118 , -0.16011623, -2.8606753 ],\n",
              "        [ 3.6426628 , -0.1852597 , -2.9352825 ],\n",
              "        [ 1.9292392 ,  1.2386068 , -2.5366802 ],\n",
              "        [-2.9246569 ,  0.57695746,  2.3441575 ],\n",
              "        [-0.49195275,  2.1305814 , -1.2622143 ],\n",
              "        [-3.3673275 , -0.30083904,  3.2547657 ],\n",
              "        [-1.2885989 ,  2.099111  , -0.5982546 ],\n",
              "        [ 1.6847813 ,  1.4203202 , -2.4948916 ],\n",
              "        [-3.116449  , -0.6491734 ,  3.3071823 ],\n",
              "        [ 2.272021  ,  1.1811316 , -2.8843384 ],\n",
              "        [ 1.4657003 ,  1.4119518 , -2.3330994 ]], dtype=float32),\n",
              " array([[-3.240887  , -0.7302232 ,  3.4753604 ],\n",
              "        [ 3.4436958 ,  0.2603668 , -3.0439706 ],\n",
              "        [ 1.0715772 ,  1.4092232 , -2.0037162 ],\n",
              "        [ 1.8648317 ,  1.4552834 , -2.7099783 ],\n",
              "        [ 3.0602906 , -0.45784608, -2.2730532 ],\n",
              "        [-0.10720154, -0.73857474,  0.78935707],\n",
              "        [ 3.2258456 , -0.6820812 , -2.1684763 ],\n",
              "        [ 3.454644  , -0.77430695, -2.3958893 ],\n",
              "        [ 3.47978   , -0.8521942 , -2.2061033 ],\n",
              "        [ 2.081808  ,  0.34068862, -2.0799305 ],\n",
              "        [ 2.4324315 ,  0.00746072, -1.9464556 ],\n",
              "        [ 1.286654  , -0.38881055, -0.71954334],\n",
              "        [-3.065798  , -0.8673366 ,  3.4833395 ],\n",
              "        [-3.069522  , -0.85319424,  3.4701743 ],\n",
              "        [-3.300245  , -0.63043094,  3.4187646 ],\n",
              "        [-3.462352  , -0.3951147 ,  3.3220134 ]], dtype=float32),\n",
              " array([[-2.4152277 ,  1.2636976 ,  0.976261  ],\n",
              "        [-3.1224153 , -0.81701666,  3.4534996 ],\n",
              "        [-3.0018322 , -0.90309787,  3.4505796 ],\n",
              "        [ 3.223169  ,  0.19671851, -2.8303227 ],\n",
              "        [-3.3043728 , -0.60634863,  3.4327474 ],\n",
              "        [ 1.91461   ,  1.3216034 , -2.659594  ],\n",
              "        [-3.3634748 , -0.3948333 ,  3.2775836 ],\n",
              "        [ 2.3036861 ,  0.98772466, -2.6521492 ],\n",
              "        [ 1.8197998 ,  1.4564663 , -2.6739845 ],\n",
              "        [-0.4362079 ,  1.9866873 , -1.1046107 ],\n",
              "        [ 3.1533463 ,  0.4844843 , -3.0070233 ],\n",
              "        [-3.2203252 , -0.759745  ,  3.4780602 ],\n",
              "        [-3.2730215 , -0.29370454,  3.1635666 ],\n",
              "        [-3.1265974 , -0.6186424 ,  3.2789516 ],\n",
              "        [-0.2441578 ,  0.72841084, -0.41623077],\n",
              "        [ 1.8711892 ,  0.8833126 , -2.1740084 ]], dtype=float32),\n",
              " array([[-0.8887632 ,  1.6125478 , -0.44108325],\n",
              "        [ 3.5532706 , -1.040706  , -2.2006006 ],\n",
              "        [-3.0900326 , -0.8353866 ,  3.4216437 ],\n",
              "        [-3.4186075 , -0.4360396 ,  3.376567  ],\n",
              "        [ 1.3839482 ,  1.3502585 , -2.2064195 ],\n",
              "        [-2.973325  , -0.99340475,  3.478079  ],\n",
              "        [-1.5040545 , -0.20101951,  1.4689018 ],\n",
              "        [-3.40047   , -0.46705267,  3.3842897 ],\n",
              "        [-3.199093  ,  0.3163885 ,  2.528182  ],\n",
              "        [-2.5036292 ,  1.400453  ,  1.0226455 ],\n",
              "        [ 3.2879155 , -0.17621969, -2.635085  ],\n",
              "        [ 3.004761  ,  0.59284306, -2.9436088 ],\n",
              "        [-2.585718  , -0.14385317,  2.3862507 ],\n",
              "        [ 1.8071436 ,  1.1177143 , -2.324197  ],\n",
              "        [ 2.148842  ,  0.73257834, -2.2668695 ],\n",
              "        [-2.1669698 ,  1.4750084 ,  0.47359508]], dtype=float32),\n",
              " array([[-3.1406765 , -0.8472991 ,  3.465199  ],\n",
              "        [ 2.6138968 ,  0.7940799 , -2.7870955 ],\n",
              "        [ 3.0232747 ,  0.11087179, -2.5611553 ],\n",
              "        [ 3.5168643 ,  0.00724655, -2.9240208 ],\n",
              "        [-1.5945004 ,  0.543388  ,  1.0515077 ],\n",
              "        [-3.3085768 , -0.6057585 ,  3.4270835 ],\n",
              "        [ 0.6643498 ,  0.501238  , -0.877337  ],\n",
              "        [ 2.8802397 ,  0.57293284, -2.7436626 ],\n",
              "        [ 0.32598934,  0.94418246, -0.8817458 ],\n",
              "        [ 1.8365506 ,  1.2720534 , -2.5383496 ],\n",
              "        [ 0.6846333 ,  0.3050763 , -0.73522997],\n",
              "        [-3.0641778 , -0.56859875,  3.2253299 ],\n",
              "        [ 2.4075425 ,  0.6157911 , -2.4070582 ],\n",
              "        [ 3.1114552 ,  0.6203923 , -3.069294  ],\n",
              "        [ 3.5164418 ,  0.14706399, -3.0789108 ],\n",
              "        [-3.3279011 , -0.39118746,  3.2454817 ]], dtype=float32),\n",
              " array([[-1.9071418 ,  1.5901977 ,  0.34923017],\n",
              "        [-1.0193814 ,  1.6327447 , -0.25848687],\n",
              "        [ 1.0754905 ,  1.2852454 , -1.9111874 ],\n",
              "        [-1.6337245 ,  1.7327828 ,  0.07543918],\n",
              "        [-0.52374244,  0.01837887,  0.69634765],\n",
              "        [ 0.5866503 ,  1.6409646 , -1.8178942 ],\n",
              "        [-3.0752547 , -0.79614544,  3.4105048 ],\n",
              "        [ 3.3916442 , -0.6661336 , -2.2977662 ],\n",
              "        [ 0.36806634,  1.0607852 , -1.068044  ],\n",
              "        [ 3.2567875 , -0.20783211, -2.5019286 ],\n",
              "        [ 2.563162  ,  0.7602978 , -2.6505933 ],\n",
              "        [-3.0299637 , -0.79366386,  3.3988566 ],\n",
              "        [ 1.4026461 ,  1.5369605 , -2.3341992 ],\n",
              "        [ 1.1577736 ,  1.4225581 , -2.031856  ],\n",
              "        [ 1.7895471 ,  0.8800105 , -2.0769253 ],\n",
              "        [ 2.476801  ,  0.8147164 , -2.6861186 ]], dtype=float32),\n",
              " array([[-2.9372978e+00,  1.0664752e+00,  1.6871270e+00],\n",
              "        [ 1.7658885e-01,  2.4464676e-01, -1.6749543e-01],\n",
              "        [-1.5425283e+00,  4.1330835e-01,  1.3121827e+00],\n",
              "        [ 2.9497144e+00,  4.2258665e-01, -2.8484144e+00],\n",
              "        [-1.6931413e-01,  9.0251404e-01, -3.9933255e-01],\n",
              "        [-2.5173585e+00,  1.7292352e-01,  2.1376877e+00],\n",
              "        [ 1.0874355e+00,  1.5975696e+00, -2.1951051e+00],\n",
              "        [-6.0250815e-02,  1.1418073e+00, -8.4043765e-01],\n",
              "        [-2.6493156e+00,  1.7913204e-01,  2.1452672e+00],\n",
              "        [ 3.7107332e+00, -4.9184698e-01, -2.7497740e+00],\n",
              "        [ 1.1409787e+00,  1.6782969e+00, -2.2622123e+00],\n",
              "        [-2.9037309e+00,  7.2376192e-01,  1.9399114e+00],\n",
              "        [-6.1763984e-01,  1.8022588e+00, -9.3280894e-01],\n",
              "        [ 1.9270366e+00,  1.4155387e+00, -2.6859422e+00],\n",
              "        [ 2.1765010e+00,  1.1562782e-03, -1.7550122e+00],\n",
              "        [ 2.2200027e+00,  9.7215009e-01, -2.6641247e+00]], dtype=float32),\n",
              " array([[ 2.5406258 ,  1.0934373 , -2.9775245 ],\n",
              "        [ 1.7194511 ,  1.0813783 , -2.2266393 ],\n",
              "        [ 3.4093678 ,  0.20465556, -2.9974666 ],\n",
              "        [-3.2355814 ,  0.42195913,  2.4709606 ],\n",
              "        [ 3.331982  , -0.8817533 , -2.196909  ],\n",
              "        [-3.2496526 , -0.24323297,  3.063623  ],\n",
              "        [ 3.1985543 , -0.13745174, -2.5531821 ],\n",
              "        [ 3.188031  , -0.98534536, -1.9357919 ],\n",
              "        [-1.1275619 ,  0.81899667,  0.5617973 ],\n",
              "        [ 1.6338092 ,  1.1493922 , -2.226894  ],\n",
              "        [ 3.2522533 ,  0.20636368, -2.8873372 ],\n",
              "        [-2.950837  , -0.27850935,  2.9169092 ],\n",
              "        [ 1.5725106 ,  1.0432137 , -2.099982  ],\n",
              "        [ 1.4257809 ,  0.98321295, -2.0073776 ],\n",
              "        [ 2.2045515 ,  0.8884628 , -2.5161874 ],\n",
              "        [ 1.8611745 ,  0.944371  , -2.2640111 ]], dtype=float32),\n",
              " array([[ 0.9163809 ,  0.76089436, -1.3243579 ],\n",
              "        [ 3.2069683 ,  0.07063154, -2.616528  ],\n",
              "        [-3.2739623 , -0.19520506,  3.086923  ],\n",
              "        [ 2.659904  ,  0.6047132 , -2.644434  ],\n",
              "        [-3.3428533 , -0.29327616,  3.184216  ],\n",
              "        [ 2.0010562 , -0.39086136, -1.2235848 ],\n",
              "        [ 2.2491484 , -0.49338517, -1.5209981 ],\n",
              "        [-2.865358  , -0.56405354,  3.0958686 ],\n",
              "        [-3.0744796 ,  0.9915408 ,  1.8454182 ],\n",
              "        [ 0.6803044 ,  1.4940034 , -1.5935186 ],\n",
              "        [ 1.4899099 ,  1.6330947 , -2.584674  ],\n",
              "        [-0.03940907,  0.5109813 , -0.22391431],\n",
              "        [ 3.0246603 ,  0.7302836 , -3.033554  ],\n",
              "        [ 0.86398   ,  0.9091679 , -1.4551144 ],\n",
              "        [ 1.8746709 ,  0.19085468, -1.5464324 ],\n",
              "        [ 0.8238149 , -0.32586268, -0.23460977]], dtype=float32),\n",
              " array([[ 0.8684612 ,  1.7006596 , -2.0174727 ],\n",
              "        [ 0.06285403,  1.3949922 , -1.080449  ],\n",
              "        [ 0.63352567,  1.8448371 , -2.036135  ],\n",
              "        [ 1.9232811 ,  0.4881447 , -1.8717663 ],\n",
              "        [ 2.3524768 ,  1.1666237 , -2.808271  ],\n",
              "        [ 1.4651922 ,  1.6536012 , -2.5409794 ],\n",
              "        [-3.0370698 , -0.9299911 ,  3.4705548 ],\n",
              "        [-1.5594269 ,  0.22869177,  1.2619684 ],\n",
              "        [-0.67486906,  1.1683019 , -0.21390371],\n",
              "        [-3.3227048 ,  0.35392162,  2.5992258 ],\n",
              "        [-0.7445724 ,  1.6400607 , -0.69491076],\n",
              "        [ 3.3302517 ,  0.4419412 , -3.1831446 ],\n",
              "        [ 2.2418873 ,  1.1584195 , -2.7009654 ],\n",
              "        [-2.8357928 , -0.3600881 ,  2.8306565 ],\n",
              "        [-3.2064793 , -0.7822366 ,  3.493204  ],\n",
              "        [-2.932363  ,  0.65902686,  1.9839218 ]], dtype=float32),\n",
              " array([[-3.3463783 , -0.53552854,  3.3933952 ],\n",
              "        [ 2.3628528 ,  0.7556537 , -2.4684463 ],\n",
              "        [-2.8817787 , -0.97396654,  3.3730981 ],\n",
              "        [ 0.06812377,  1.7372509 , -1.368988  ],\n",
              "        [ 3.0424445 , -0.5604628 , -1.9852347 ],\n",
              "        [ 2.3486526 ,  1.1328443 , -2.8283587 ],\n",
              "        [ 1.3378168 ,  0.6575644 , -1.4621291 ],\n",
              "        [-3.2523687 , -0.728874  ,  3.4648342 ],\n",
              "        [-2.9329221 ,  0.3850033 ,  2.2048721 ],\n",
              "        [ 1.2393113 ,  1.59263   , -2.2785442 ],\n",
              "        [ 0.9236228 ,  1.505199  , -1.9461864 ],\n",
              "        [ 1.7741212 ,  1.1159482 , -2.3539114 ],\n",
              "        [-0.04322132,  1.1331486 , -0.66788054],\n",
              "        [ 1.5493933 ,  1.2970985 , -2.2956    ],\n",
              "        [ 2.363063  ,  0.7421016 , -2.4085827 ],\n",
              "        [-0.4391871 , -0.08542012,  0.548039  ]], dtype=float32),\n",
              " array([[-3.1057253 , -0.7273408 ,  3.3854227 ],\n",
              "        [-3.4511483 ,  0.25143558,  2.776575  ],\n",
              "        [ 2.559274  , -0.00380534, -2.0512729 ],\n",
              "        [-3.449754  , -0.41526324,  3.3182344 ],\n",
              "        [-3.2702606 ,  0.21198785,  2.5603147 ],\n",
              "        [-3.293526  , -0.63300097,  3.4216442 ],\n",
              "        [-3.2744648 , -0.6148007 ,  3.4409277 ],\n",
              "        [-1.582367  ,  1.1360592 ,  0.40329516],\n",
              "        [-3.210011  , -0.509457  ,  3.3055878 ],\n",
              "        [ 2.6770616 ,  0.863827  , -2.9164228 ],\n",
              "        [ 1.0650209 ,  1.6567166 , -2.2502115 ],\n",
              "        [-1.4121069 ,  1.5990771 , -0.05786223],\n",
              "        [ 0.4722487 ,  1.8637675 , -1.9225993 ],\n",
              "        [ 2.9420798 ,  0.76020575, -3.0516586 ],\n",
              "        [-3.2462802 , -0.7388014 ,  3.4665415 ],\n",
              "        [-0.4977989 ,  1.5703931 , -0.8287859 ]], dtype=float32),\n",
              " array([[-2.5138714 ,  0.781032  ,  1.5010302 ],\n",
              "        [-0.5304558 ,  1.1379366 , -0.45926303],\n",
              "        [ 1.5494118 ,  1.2229666 , -2.2190874 ],\n",
              "        [-3.30047   , -0.6061652 ,  3.4169357 ],\n",
              "        [-3.5381646 , -0.13248235,  3.1798863 ],\n",
              "        [-2.907558  ,  0.3391141 ,  2.2722433 ],\n",
              "        [ 1.3218855 ,  0.34644005, -1.2858114 ],\n",
              "        [-3.2708867 , -0.69161785,  3.4766412 ],\n",
              "        [ 0.8245277 ,  1.7952427 , -2.1488109 ],\n",
              "        [ 2.9261463 ,  0.7208468 , -2.9661329 ],\n",
              "        [ 0.48638105,  0.43033734, -0.597165  ],\n",
              "        [-0.48848054,  1.4180926 , -0.53646636],\n",
              "        [ 0.8281992 , -1.4523546 ,  0.5206964 ],\n",
              "        [ 0.36721545,  0.80502915, -0.93009794],\n",
              "        [-1.9912359 ,  1.1039544 ,  0.9417619 ],\n",
              "        [ 3.5525224 , -0.18909027, -2.8188987 ]], dtype=float32),\n",
              " array([[ 2.800138  , -0.1950233 , -1.9809802 ],\n",
              "        [-1.0996953 ,  1.7298578 , -0.4229824 ],\n",
              "        [ 0.2821701 ,  1.2536975 , -1.0541935 ],\n",
              "        [-2.9921732 , -0.20605437,  2.8812475 ],\n",
              "        [ 3.1108682 ,  0.6951456 , -3.095889  ],\n",
              "        [-3.2094884 ,  0.72462916,  2.2236943 ],\n",
              "        [-2.9445717 , -0.41717196,  3.0508595 ],\n",
              "        [ 1.4189309 ,  1.558127  , -2.5089452 ],\n",
              "        [-1.2178787 ,  0.5693289 ,  0.79085076],\n",
              "        [ 1.5744514 ,  1.3964481 , -2.394213  ],\n",
              "        [-1.9569063 ,  1.9206249 ,  0.0785941 ],\n",
              "        [ 3.0753233 ,  0.5110773 , -2.9620073 ],\n",
              "        [ 1.2595611 ,  1.3127683 , -2.086295  ],\n",
              "        [-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [-0.195942  , -0.30861244,  0.6012938 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ]], dtype=float32),\n",
              " array([[ 3.182874  , -1.166619  , -1.835046  ],\n",
              "        [ 1.5338243 ,  0.7152904 , -1.6824889 ],\n",
              "        [-3.3954399 , -0.10051245,  3.0943484 ],\n",
              "        [ 2.0350385 ,  1.463663  , -2.8728423 ],\n",
              "        [-2.5567558 ,  1.1586121 ,  1.3629186 ],\n",
              "        [ 0.89938253,  1.4741837 , -1.8676811 ],\n",
              "        [-2.1359856 , -0.44873437,  2.3526657 ],\n",
              "        [ 1.4692837 ,  0.30127725, -1.5657897 ],\n",
              "        [-0.23822811,  0.22436255,  0.10717561],\n",
              "        [ 0.7048064 , -0.40838623, -0.20130602],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 1.3497256 ,  1.3138276 , -2.1492698 ],\n",
              "        [ 1.9742644 ,  1.3562769 , -2.7144477 ],\n",
              "        [-1.7284622 , -0.91685414,  2.4438765 ],\n",
              "        [-3.2580287 , -0.72446096,  3.4684715 ],\n",
              "        [-3.1999142 , -0.36778   ,  3.1658812 ]], dtype=float32),\n",
              " array([[-1.452688  ,  1.794808  , -0.11288569],\n",
              "        [-1.2199689 ,  1.9648081 , -0.53853804],\n",
              "        [ 1.9325614 ,  1.2466222 , -2.5328202 ],\n",
              "        [-0.6223162 ,  1.1755843 , -0.33356708],\n",
              "        [-0.23980129,  1.9920498 , -1.521533  ],\n",
              "        [ 1.131689  ,  1.4800481 , -2.07843   ],\n",
              "        [-2.551698  ,  0.38660243,  2.0024278 ],\n",
              "        [-0.7616895 ,  1.4280623 , -0.35272515],\n",
              "        [-3.1168935 ,  0.6648977 ,  2.1272883 ],\n",
              "        [-3.530687  ,  0.40432626,  2.727783  ],\n",
              "        [ 2.870947  ,  0.9269645 , -3.0777335 ],\n",
              "        [-2.2971468 ,  1.3307326 ,  0.84794295],\n",
              "        [-2.736041  ,  1.3105371 ,  1.3082125 ],\n",
              "        [ 0.6508154 ,  1.4715122 , -1.7526402 ],\n",
              "        [-2.998762  ,  1.083143  ,  1.7505413 ],\n",
              "        [-0.44922537, -1.2352093 ,  1.6720212 ]], dtype=float32),\n",
              " array([[ 2.145139  ,  1.3934551 , -2.8448555 ],\n",
              "        [ 0.37171745,  1.4844491 , -1.4629583 ],\n",
              "        [-0.4504893 ,  1.8786545 , -1.2526629 ],\n",
              "        [-3.4563658 , -0.20756721,  3.205817  ],\n",
              "        [-0.21808204,  1.6556125 , -1.0606518 ],\n",
              "        [-1.272779  ,  1.5890025 , -0.01430425],\n",
              "        [ 2.0029278 ,  1.0649303 , -2.407357  ],\n",
              "        [-0.8172808 ,  0.4337283 ,  0.4218719 ],\n",
              "        [-0.33135518,  1.8945752 , -1.1285886 ],\n",
              "        [ 2.598076  ,  0.7065165 , -2.6551094 ],\n",
              "        [ 0.18898314,  1.2959453 , -1.2058042 ],\n",
              "        [ 3.182874  , -1.166619  , -1.835046  ],\n",
              "        [-0.4499258 ,  1.4317209 , -0.6505972 ],\n",
              "        [ 1.6430305 , -0.2029284 , -1.2665869 ],\n",
              "        [-3.326409  , -0.52097774,  3.3540316 ],\n",
              "        [ 2.1095226 ,  0.78130615, -2.2732592 ]], dtype=float32),\n",
              " array([[-0.609006  ,  1.3198956 , -0.6449043 ],\n",
              "        [ 3.0993624 , -0.4030824 , -2.1715338 ],\n",
              "        [ 2.0442965 ,  0.7286745 , -2.199967  ],\n",
              "        [ 1.9689977 ,  1.3739818 , -2.6573162 ],\n",
              "        [ 2.787235  ,  0.74960047, -2.9648716 ],\n",
              "        [-2.946155  ,  0.6616547 ,  1.9714681 ],\n",
              "        [ 0.47946978,  1.0093085 , -0.9273457 ],\n",
              "        [-0.97940576,  1.3768002 , -0.31287634],\n",
              "        [ 2.562421  ,  0.92554814, -2.8249745 ],\n",
              "        [ 2.1593416 ,  0.47174808, -2.067658  ],\n",
              "        [-3.0770383 , -0.8681476 ,  3.4467602 ],\n",
              "        [-3.4219296 , -0.3079721 ,  3.2912767 ],\n",
              "        [-3.2842596 , -0.19001079,  3.0739064 ],\n",
              "        [ 0.5146747 ,  1.5416316 , -1.6192676 ],\n",
              "        [-2.2987146 , -0.70329523,  2.652535  ],\n",
              "        [ 1.4884552 ,  0.597209  , -1.6083881 ]], dtype=float32),\n",
              " array([[ 1.5306412 ,  0.28532895, -1.3994747 ],\n",
              "        [ 2.9227197 ,  0.28726333, -2.6771579 ],\n",
              "        [-2.8408344 ,  0.10263022,  2.4828181 ],\n",
              "        [ 0.22454096, -1.3049465 ,  1.0244652 ],\n",
              "        [ 1.592226  , -0.18477742, -1.2947493 ],\n",
              "        [ 2.5363362 ,  1.0474936 , -2.8730996 ],\n",
              "        [-0.19813   ,  0.93468297, -0.50044686],\n",
              "        [-3.22272   , -0.48179227,  3.2648964 ],\n",
              "        [ 3.312084  ,  0.09269085, -2.8302581 ],\n",
              "        [ 0.8294385 ,  1.0174001 , -1.4412735 ],\n",
              "        [ 2.1413743 ,  0.7457957 , -2.2863545 ],\n",
              "        [-0.5615021 ,  2.075492  , -1.2418427 ],\n",
              "        [ 1.2398089 ,  0.7159205 , -1.5099144 ],\n",
              "        [-0.91919094,  2.0166512 , -0.8708091 ],\n",
              "        [ 2.2157676 ,  0.9988135 , -2.5706806 ],\n",
              "        [-0.03287437,  0.5789031 , -0.30579102]], dtype=float32),\n",
              " array([[-3.1064756 , -0.32956693,  3.0737336 ],\n",
              "        [ 2.4556081 ,  1.1643205 , -2.9432583 ],\n",
              "        [-2.8452978 ,  1.4173373 ,  1.3807323 ],\n",
              "        [-2.994952  , -0.84839916,  3.3394794 ],\n",
              "        [-2.7213476 ,  1.5196717 ,  1.1190625 ],\n",
              "        [-3.2613928 , -0.7104443 ,  3.4624934 ],\n",
              "        [ 0.87777627,  1.5629861 , -1.8819689 ],\n",
              "        [-3.120704  , -0.39769223,  3.1276045 ],\n",
              "        [-3.2743337 , -0.4967459 ,  3.3241148 ],\n",
              "        [ 1.5191747 , -0.19801962, -0.9228174 ],\n",
              "        [-0.7712044 ,  1.7180148 , -0.74373764],\n",
              "        [-1.6181924 ,  1.9144536 , -0.26793537],\n",
              "        [ 2.6686106 , -0.60877895, -1.6259898 ],\n",
              "        [-3.000634  , -0.42655596,  3.0512018 ],\n",
              "        [-3.3111951 , -0.5495337 ,  3.400117  ],\n",
              "        [ 0.14502469,  1.5266773 , -1.271434  ]], dtype=float32),\n",
              " array([[-1.2623814 ,  2.154112  , -0.57823133],\n",
              "        [ 1.4636531 ,  1.4843928 , -2.4603693 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 3.6175478 , -0.58380353, -2.6234198 ],\n",
              "        [ 0.5560891 ,  1.2867752 , -1.454709  ],\n",
              "        [ 2.587276  ,  0.95980716, -3.0463715 ],\n",
              "        [ 0.20817436,  1.1072598 , -0.99835855],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 0.8389651 ,  1.7749524 , -2.2369337 ],\n",
              "        [ 0.07312306,  1.9443628 , -1.5864344 ],\n",
              "        [-3.4752288 , -0.26740947,  3.2557697 ],\n",
              "        [ 1.0202426 ,  1.6001109 , -2.1112661 ],\n",
              "        [ 3.1379797 , -0.4473906 , -2.14913   ],\n",
              "        [ 3.4068556 , -0.25516388, -2.6587167 ],\n",
              "        [ 1.7065011 ,  0.90289104, -1.9917089 ],\n",
              "        [-1.59508   ,  1.4276136 ,  0.32788616]], dtype=float32),\n",
              " array([[-3.0752478 , -0.83694816,  3.4101555 ],\n",
              "        [-3.3726277 ,  0.6655292 ,  2.4808502 ],\n",
              "        [ 3.59899   , -0.32039174, -2.800229  ],\n",
              "        [ 0.6437647 ,  0.3115122 , -0.6872397 ],\n",
              "        [ 2.8391492 ,  0.22853592, -2.5102098 ],\n",
              "        [-3.0824475 ,  0.6875822 ,  2.109553  ],\n",
              "        [-2.111832  , -1.2271794 ,  2.989637  ],\n",
              "        [ 3.0984685 ,  0.510192  , -3.0044289 ],\n",
              "        [-3.1789653 , -0.7320328 ,  3.4521575 ],\n",
              "        [-1.048298  ,  2.1317127 , -0.8520024 ],\n",
              "        [-3.555806  ,  0.4269931 ,  2.7323458 ],\n",
              "        [-3.338244  , -0.18428743,  3.0886326 ],\n",
              "        [ 1.0405718 ,  1.5995678 , -2.1690733 ],\n",
              "        [-3.3140433 , -0.6386613 ,  3.4444385 ],\n",
              "        [-2.8268974 ,  1.3015715 ,  1.404187  ],\n",
              "        [-2.0503452 ,  1.3906778 ,  0.8936688 ]], dtype=float32),\n",
              " array([[-7.2473460e-01,  1.4728638e+00, -4.7158173e-01],\n",
              "        [ 8.4203988e-01,  1.1830806e+00, -1.6483094e+00],\n",
              "        [-3.2655361e+00, -3.9388895e-01,  3.2526464e+00],\n",
              "        [ 1.9862396e+00,  5.5693299e-01, -1.9731877e+00],\n",
              "        [-3.1798689e+00, -6.4036489e-01,  3.3633575e+00],\n",
              "        [ 2.5783479e+00, -2.3934206e-01, -1.9284817e+00],\n",
              "        [ 3.3077025e-03, -9.9771075e-02,  2.7523792e-01],\n",
              "        [ 1.5406440e+00, -7.6264369e-01, -5.6006336e-01],\n",
              "        [ 3.0522447e+00,  7.3106879e-01, -3.1627662e+00],\n",
              "        [ 1.9216067e+00,  7.9051673e-01, -2.0851951e+00],\n",
              "        [ 1.5710114e+00,  1.3554243e+00, -2.3069544e+00],\n",
              "        [ 2.7721303e+00,  5.7363492e-01, -2.7379820e+00],\n",
              "        [-1.3330555e+00,  4.9763486e-01,  9.2609704e-01],\n",
              "        [ 1.3488938e+00,  1.4672180e+00, -2.3240595e+00],\n",
              "        [ 2.3771927e+00,  9.7442412e-01, -2.7406847e+00],\n",
              "        [-3.1432729e+00, -8.3993495e-01,  3.4826140e+00]], dtype=float32),\n",
              " array([[ 2.0140984 ,  1.0213248 , -2.3788037 ],\n",
              "        [ 1.5137674 ,  0.23722878, -1.3619779 ],\n",
              "        [ 1.928417  ,  1.2734723 , -2.6785202 ],\n",
              "        [-2.6711154 ,  1.2915752 ,  1.1981347 ],\n",
              "        [ 1.1890904 ,  1.2391297 , -1.9408454 ],\n",
              "        [ 3.2085364 ,  0.37399623, -2.9375987 ],\n",
              "        [-2.2958734 ,  0.549501  ,  1.5463009 ],\n",
              "        [-1.8399587 ,  2.039688  , -0.15291661],\n",
              "        [ 0.650773  ,  0.7069838 , -1.0015786 ],\n",
              "        [ 0.33787104,  1.4103626 , -1.3136431 ],\n",
              "        [-1.6498781 , -0.20703341,  1.7100598 ],\n",
              "        [ 2.1083877 ,  0.5468812 , -2.128312  ],\n",
              "        [-1.9687304 , -0.31790307,  2.1723971 ],\n",
              "        [ 1.4596246 , -0.26666817, -0.9279083 ],\n",
              "        [ 3.5996473 , -0.32405457, -2.7925775 ],\n",
              "        [ 0.74516803,  1.6667594 , -2.041082  ]], dtype=float32),\n",
              " array([[ 0.5308859 ,  0.9649005 , -1.2103751 ],\n",
              "        [-3.2297714 , -0.72846425,  3.4780092 ],\n",
              "        [ 1.6722744 ,  1.3957382 , -2.4115958 ],\n",
              "        [-1.0459409 ,  1.7509036 , -0.65754056],\n",
              "        [ 0.1464469 ,  1.6675912 , -1.3132668 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [ 1.7505549 ,  0.7677792 , -2.058206  ],\n",
              "        [ 3.5925562 , -0.6476804 , -2.591859  ],\n",
              "        [ 1.1711088 ,  1.4163867 , -2.0809674 ],\n",
              "        [-3.22272   , -0.48179227,  3.2648964 ],\n",
              "        [ 3.630879  , -0.4598933 , -2.6790168 ],\n",
              "        [-0.6714918 ,  0.62402177,  0.11293592],\n",
              "        [-0.4454368 ,  1.8699915 , -1.146253  ],\n",
              "        [-3.099511  ,  0.12589633,  2.6516228 ],\n",
              "        [ 3.5892458 , -0.18237525, -2.920257  ],\n",
              "        [ 2.033027  ,  0.870605  , -2.365559  ]], dtype=float32),\n",
              " array([[ 2.5886495 ,  0.5456109 , -2.4794967 ],\n",
              "        [ 1.925902  ,  1.2219958 , -2.602943  ],\n",
              "        [ 3.5448477 , -0.5917469 , -2.616694  ],\n",
              "        [-1.8177801 ,  1.9126902 , -0.03743966],\n",
              "        [-0.43845072,  1.7717879 , -1.0735877 ],\n",
              "        [ 3.3657858 ,  0.0926969 , -2.8809586 ],\n",
              "        [ 0.2246384 ,  0.8295717 , -0.81795007],\n",
              "        [ 0.9315422 ,  1.7206075 , -2.243318  ],\n",
              "        [ 1.6532584 ,  0.5885869 , -1.8883768 ],\n",
              "        [ 2.6901066 ,  0.55604506, -2.5650523 ],\n",
              "        [ 3.4049027 , -0.7739867 , -2.325591  ],\n",
              "        [ 1.8281335 ,  0.985744  , -2.4039214 ],\n",
              "        [-1.6246773 ,  0.75487983,  0.9349817 ],\n",
              "        [-3.1190264 , -0.70681685,  3.4036417 ],\n",
              "        [-3.435939  , -0.17752074,  3.1720781 ],\n",
              "        [-0.51711756,  1.4363309 , -0.66616327]], dtype=float32),\n",
              " array([[ 1.7869078 ,  1.244007  , -2.367114  ],\n",
              "        [-1.266641  ,  0.9663565 ,  0.35537952],\n",
              "        [-3.005422  ,  0.56876683,  2.2352142 ],\n",
              "        [ 2.8096263 , -0.24483106, -1.9857275 ],\n",
              "        [ 3.223614  ,  0.05333888, -2.6582456 ],\n",
              "        [-0.31245753,  0.95109105, -0.4420337 ],\n",
              "        [ 2.2253294 ,  0.392121  , -2.074614  ],\n",
              "        [-0.670899  ,  1.4775666 , -0.51927197],\n",
              "        [ 2.1123137 ,  0.5890219 , -2.3372035 ],\n",
              "        [ 3.4366832 , -0.05799088, -2.834149  ],\n",
              "        [ 0.48405913,  1.1447376 , -1.2337986 ],\n",
              "        [-3.2808065 , -0.6465354 ,  3.4369261 ],\n",
              "        [ 3.4260118 , -0.8554375 , -2.1325247 ],\n",
              "        [-3.437891  , -0.26108542,  3.2559152 ],\n",
              "        [-3.1741133 , -0.79938126,  3.4798694 ],\n",
              "        [-2.5346437 ,  0.663826  ,  1.7981935 ]], dtype=float32),\n",
              " array([[-1.193134  , -0.4222127 ,  1.4565649 ],\n",
              "        [ 2.9571908 , -0.5767169 , -1.93855   ],\n",
              "        [-1.7537946 ,  1.5760623 ,  0.09185105],\n",
              "        [-3.1802056 , -0.7715715 ,  3.4670937 ],\n",
              "        [-3.2663224 , -0.3106602 ,  3.1239734 ],\n",
              "        [-0.5414944 ,  1.3167454 , -0.5078571 ],\n",
              "        [-3.1331623 ,  0.7375697 ,  2.0701172 ],\n",
              "        [-2.717309  , -0.4954323 ,  2.8057086 ],\n",
              "        [ 1.8931103 ,  1.4810389 , -2.827299  ],\n",
              "        [ 1.6989794 ,  0.9432971 , -2.0140026 ],\n",
              "        [-3.2734125 , -0.6437824 ,  3.4321017 ],\n",
              "        [-2.4806478 ,  0.20105037,  2.0776138 ],\n",
              "        [ 2.0526931 ,  1.3183764 , -2.734776  ],\n",
              "        [-2.6510408 ,  1.0217595 ,  1.435696  ],\n",
              "        [-2.7547967 ,  0.5627283 ,  1.9417095 ],\n",
              "        [ 3.6467664 , -0.5062592 , -2.7005463 ]], dtype=float32),\n",
              " array([[ 0.7995699 ,  1.3575958 , -1.651538  ],\n",
              "        [ 2.410131  ,  1.170286  , -2.9302378 ],\n",
              "        [-2.8641145 ,  0.15408443,  2.2601814 ],\n",
              "        [-2.254686  , -0.26105765,  2.342108  ],\n",
              "        [ 2.398972  ,  0.8927527 , -2.6964378 ],\n",
              "        [ 1.0671608 ,  1.4225743 , -1.9571342 ],\n",
              "        [ 3.097758  ,  0.6177357 , -3.054664  ],\n",
              "        [ 1.7108532 ,  1.0254554 , -2.2362294 ],\n",
              "        [-3.2786765 , -0.4775933 ,  3.314195  ],\n",
              "        [ 3.6137    , -0.37407446, -2.7705479 ],\n",
              "        [ 0.98551947,  1.45357   , -1.9839716 ],\n",
              "        [ 0.9102119 ,  1.7970122 , -2.1964984 ],\n",
              "        [-0.9474878 ,  1.7165855 , -0.6148101 ],\n",
              "        [ 0.7914772 ,  0.53811604, -0.9934947 ],\n",
              "        [-2.056489  , -0.33604512,  2.235229  ],\n",
              "        [ 1.6865538 ,  0.55276054, -1.8079746 ]], dtype=float32),\n",
              " array([[-2.6630743 , -0.13022627,  2.500445  ],\n",
              "        [ 2.9838006 ,  0.665064  , -3.01225   ],\n",
              "        [-1.2549225 ,  0.6465084 ,  0.45652035],\n",
              "        [-2.864226  , -0.749414  ,  3.177739  ],\n",
              "        [-3.4296246 , -0.25218645,  3.2237391 ],\n",
              "        [ 3.4874365 , -0.20149663, -2.7020226 ],\n",
              "        [ 1.5072124 ,  1.7083641 , -2.6155283 ],\n",
              "        [ 2.802018  ,  0.6795851 , -2.8308456 ],\n",
              "        [-2.0471919 ,  0.23815441,  1.6556722 ],\n",
              "        [ 0.9703788 ,  1.3672065 , -1.8625828 ],\n",
              "        [ 2.7176902 ,  0.7088419 , -2.7548332 ],\n",
              "        [-3.3644679 , -0.38108337,  3.2338872 ],\n",
              "        [-3.3209007 , -0.5102222 ,  3.3879113 ],\n",
              "        [-1.0481772 , -0.5414865 ,  1.500693  ],\n",
              "        [-3.290521  , -0.25637272,  3.0917227 ],\n",
              "        [-3.431801  , -0.22615755,  3.217237  ]], dtype=float32),\n",
              " array([[-2.9715130e+00, -7.0655203e-01,  3.2113986e+00],\n",
              "        [ 2.9997203e+00,  6.9933873e-01, -2.9731536e+00],\n",
              "        [ 3.0109036e+00,  5.4925007e-01, -2.9455423e+00],\n",
              "        [ 2.5218413e+00,  6.7484355e-01, -2.5786600e+00],\n",
              "        [-6.4457756e-01,  1.4152255e+00, -4.6556470e-01],\n",
              "        [ 2.7390912e+00, -2.4133850e-02, -2.2151880e+00],\n",
              "        [-3.1423922e+00, -7.9813021e-01,  3.4739816e+00],\n",
              "        [ 3.5598950e+00, -4.4969451e-02, -2.9762964e+00],\n",
              "        [ 7.3411638e-01,  1.4245502e+00, -1.6444834e+00],\n",
              "        [-3.2089329e-03,  1.3967282e+00, -1.0303781e+00],\n",
              "        [ 2.2343323e+00,  1.0652713e+00, -2.7052333e+00],\n",
              "        [ 2.8250477e+00,  8.4756464e-01, -3.0010068e+00],\n",
              "        [ 1.3584334e-01,  1.5787498e+00, -1.3826284e+00],\n",
              "        [ 2.1755738e+00,  9.2354965e-01, -2.5215135e+00],\n",
              "        [-3.2114458e+00, -2.0092824e-01,  3.0174069e+00],\n",
              "        [ 1.6804698e+00,  1.5369422e+00, -2.6083043e+00]], dtype=float32),\n",
              " array([[ 1.26848   ,  1.4055248 , -2.2179081 ],\n",
              "        [-2.9573746 , -0.4746898 ,  3.077566  ],\n",
              "        [-0.67970514,  1.9347159 , -1.0458158 ],\n",
              "        [ 2.767269  , -1.1602713 , -1.2966425 ],\n",
              "        [-0.44292042,  1.8650693 , -1.1872729 ],\n",
              "        [-3.2915363 , -0.6067215 ,  3.4242797 ],\n",
              "        [-3.2753708 , -0.08729034,  2.9229517 ],\n",
              "        [ 2.05486   ,  1.1735927 , -2.6336396 ],\n",
              "        [-3.346992  , -0.400099  ,  3.3007112 ],\n",
              "        [ 3.1162546 ,  0.62251127, -3.1084297 ],\n",
              "        [ 2.2382593 ,  0.53784263, -2.2823725 ],\n",
              "        [-3.3207445 , -0.6326098 ,  3.4397962 ],\n",
              "        [-3.457618  , -0.3786752 ,  3.3290064 ],\n",
              "        [-3.3681123 , -0.34062517,  3.21215   ],\n",
              "        [ 0.8842625 ,  1.12313   , -1.4819698 ],\n",
              "        [-2.6844647 , -0.9804914 ,  3.1912072 ]], dtype=float32),\n",
              " array([[ 2.0818188 ,  1.0556157 , -2.4925818 ],\n",
              "        [-3.1497352 , -0.8743147 ,  3.5041733 ],\n",
              "        [-0.45800778,  1.850702  , -1.148262  ],\n",
              "        [-0.04974267,  1.819862  , -1.329181  ],\n",
              "        [ 1.8454674 ,  0.8581686 , -2.0784235 ],\n",
              "        [ 3.6694806 , -0.2553393 , -2.8458772 ],\n",
              "        [-3.097246  , -0.65543044,  3.2264512 ],\n",
              "        [-3.3748658 , -0.01112474,  2.9729319 ],\n",
              "        [ 1.1804963 ,  1.3608562 , -2.0527902 ],\n",
              "        [-3.2476103 , -0.4538625 ,  3.2690737 ],\n",
              "        [ 2.8454986 ,  0.81301177, -2.9585729 ],\n",
              "        [-3.1627324 , -0.38490084,  3.1622858 ],\n",
              "        [-3.3720038 , -0.59074026,  3.4387543 ],\n",
              "        [ 2.5078466 ,  0.9931873 , -2.8600821 ],\n",
              "        [-3.4900982 , -0.08197688,  3.1127315 ],\n",
              "        [ 1.045427  ,  0.3485176 , -1.0146916 ]], dtype=float32),\n",
              " array([[ 1.1987704 ,  1.5829734 , -2.1322746 ],\n",
              "        [ 1.6272329 ,  1.6366062 , -2.6265893 ],\n",
              "        [ 2.3988478 ,  1.1541127 , -2.8605072 ],\n",
              "        [-1.3055025 ,  2.0451655 , -0.519688  ],\n",
              "        [-0.6151971 ,  1.4439448 , -0.601406  ],\n",
              "        [-0.28459105,  1.7968137 , -1.1625789 ],\n",
              "        [ 2.803003  ,  0.7907147 , -2.9468987 ],\n",
              "        [ 0.00402305,  1.7834715 , -1.3858736 ],\n",
              "        [ 2.4304974 ,  0.75679874, -2.5717344 ],\n",
              "        [-0.5510917 , -0.78674424,  1.3443466 ],\n",
              "        [ 2.184574  ,  0.99211484, -2.5797806 ],\n",
              "        [-3.3003762 , -0.59201497,  3.4224925 ],\n",
              "        [ 3.3536434 , -0.5724487 , -2.315602  ],\n",
              "        [ 1.4132036 ,  1.5032932 , -2.4000106 ],\n",
              "        [-3.257374  , -0.43710572,  3.1953764 ],\n",
              "        [ 0.43939915,  1.3284963 , -1.4771502 ]], dtype=float32),\n",
              " array([[-2.2564552 ,  1.37034   ,  1.0118163 ],\n",
              "        [-3.1113055 , -0.1853407 ,  2.838903  ],\n",
              "        [-3.1577928 , -0.8153453 ,  3.4754214 ],\n",
              "        [ 1.0738457 ,  0.6740352 , -1.1242383 ],\n",
              "        [ 1.7141751 ,  1.103674  , -2.2423375 ],\n",
              "        [ 1.3505512 ,  0.7962397 , -1.6164247 ],\n",
              "        [-1.9801133 ,  1.0344726 ,  0.66878784],\n",
              "        [-3.0915775 ,  0.49784967,  2.2840705 ],\n",
              "        [-1.6955627 ,  1.5196849 ,  0.22788629],\n",
              "        [-0.70315677,  1.7477926 , -0.8673522 ],\n",
              "        [-3.1849172 , -0.54358596,  3.3098285 ],\n",
              "        [ 0.72450614,  0.38253734, -0.7361796 ],\n",
              "        [ 3.2212188 ,  0.20784813, -2.8131924 ],\n",
              "        [ 1.9956206 , -0.8246474 , -0.92608756],\n",
              "        [ 3.0076613 ,  0.58582044, -2.9639287 ],\n",
              "        [-2.6918447 ,  0.59857994,  1.9050682 ]], dtype=float32),\n",
              " array([[ 2.229193  ,  0.4226681 , -2.0653875 ],\n",
              "        [-2.1071095 , -0.8674395 ,  2.630266  ],\n",
              "        [ 3.028165  ,  0.45674768, -2.829816  ],\n",
              "        [ 1.3713827 ,  1.5139295 , -2.3259373 ],\n",
              "        [-0.9027142 ,  1.8554527 , -0.7064698 ],\n",
              "        [ 2.8599904 ,  0.8100802 , -3.010506  ],\n",
              "        [-3.3022451 , -0.26254302,  3.1640358 ],\n",
              "        [-2.9958441 , -0.2944323 ,  2.8687313 ],\n",
              "        [-2.37535   , -1.0673698 ,  3.0131137 ],\n",
              "        [-1.6645445 ,  1.9047741 , -0.26445487],\n",
              "        [-2.3835282 ,  1.5255489 ,  0.716281  ],\n",
              "        [-1.675748  , -1.4177293 ,  2.6161854 ],\n",
              "        [-3.3733885 , -0.09145955,  3.06622   ],\n",
              "        [-3.0371945 ,  0.9205668 ,  1.8559868 ],\n",
              "        [-1.2716979 ,  0.94892406,  0.3412346 ],\n",
              "        [ 3.026116  ,  0.6725108 , -2.9835377 ]], dtype=float32),\n",
              " array([[ 0.77050716,  1.5919398 , -1.8362812 ],\n",
              "        [ 0.79589504,  1.5991226 , -1.9759665 ],\n",
              "        [-2.080364  ,  1.7691063 ,  0.24098767],\n",
              "        [-1.8019522 , -0.80528796,  2.4713912 ],\n",
              "        [ 1.8695568 , -0.726324  , -0.916435  ],\n",
              "        [ 3.6026714 , -0.34713045, -2.6938078 ],\n",
              "        [ 1.1840996 ,  1.2535105 , -2.0508204 ],\n",
              "        [ 3.067121  ,  0.53396475, -2.9568028 ],\n",
              "        [-3.3601437 ,  0.3002503 ,  2.6573465 ],\n",
              "        [-3.243354  , -0.4585792 ,  3.2695954 ],\n",
              "        [-3.3882415 , -0.5081408 ,  3.3915288 ],\n",
              "        [-2.9038815 , -0.6158634 ,  3.137206  ],\n",
              "        [-0.54818016,  1.4976016 , -0.80027556],\n",
              "        [-0.24070284,  1.6926816 , -1.0978847 ],\n",
              "        [-3.2994578 , -0.48714676,  3.3600938 ],\n",
              "        [-1.0703443 ,  1.7337598 , -0.51074064]], dtype=float32),\n",
              " array([[-0.5994574 ,  1.8072952 , -0.95861804],\n",
              "        [-1.9335772 , -0.21516424,  1.9913906 ],\n",
              "        [-2.5793362 , -0.02786525,  2.396899  ],\n",
              "        [-0.9586455 ,  1.5064489 , -0.3830012 ],\n",
              "        [-2.9818711 ,  1.3551837 ,  1.5774169 ],\n",
              "        [ 0.01538016, -0.16164179,  0.19118974],\n",
              "        [ 2.150322  ,  0.8675586 , -2.4402978 ],\n",
              "        [ 2.93405   ,  0.5170437 , -2.8936925 ],\n",
              "        [-3.303921  , -0.6306137 ,  3.4622197 ],\n",
              "        [ 0.04851304,  1.0911947 , -0.79010487],\n",
              "        [ 1.2119856 ,  1.6775914 , -2.2755754 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 2.4399803 ,  0.83999   , -2.7314663 ],\n",
              "        [-3.0608087 , -0.88358414,  3.4518735 ],\n",
              "        [-1.1096987 ,  0.9360904 ,  0.24636166],\n",
              "        [-3.3785365 , -0.38678738,  3.3079433 ]], dtype=float32),\n",
              " array([[-3.3166764 , -0.41126505,  3.315364  ],\n",
              "        [ 0.9890518 ,  1.6095299 , -2.0390654 ],\n",
              "        [-1.2940054 ,  1.1872523 ,  0.1304716 ],\n",
              "        [-1.1758856 ,  1.6254689 , -0.3695009 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [-2.2425172 ,  1.6015915 ,  0.74564004],\n",
              "        [-0.94878584,  1.8715435 , -0.7222537 ],\n",
              "        [-2.5531023 ,  1.4142402 ,  1.1693027 ],\n",
              "        [-2.0697455 ,  1.6613474 ,  0.43423408],\n",
              "        [ 2.5733802 ,  0.9465909 , -2.854024  ],\n",
              "        [ 0.312182  ,  1.8298336 , -1.8375103 ],\n",
              "        [ 1.7490014 ,  1.2776088 , -2.554051  ],\n",
              "        [ 1.6473672 , -0.42398605, -0.9354079 ],\n",
              "        [-3.2190409 , -0.48454955,  3.2716265 ],\n",
              "        [-3.2011926 , -0.711646  ,  3.4278445 ],\n",
              "        [ 1.6642197 ,  0.17431131, -1.4155506 ]], dtype=float32),\n",
              " array([[ 1.8953317 ,  0.9961096 , -2.3869853 ],\n",
              "        [-0.40638456,  1.4881299 , -0.8032299 ],\n",
              "        [ 1.1302022 ,  1.3788797 , -1.9045408 ],\n",
              "        [-1.8915704 ,  1.0913966 ,  0.7808376 ],\n",
              "        [ 1.0496687 ,  1.5229865 , -2.1028004 ],\n",
              "        [-0.55847335,  1.1684109 , -0.28488293],\n",
              "        [ 3.3624647 , -0.9521829 , -2.0448015 ],\n",
              "        [-1.4438802 ,  1.930378  , -0.42223307],\n",
              "        [-3.2717874 , -0.59914625,  3.3545797 ],\n",
              "        [ 3.476494  , -0.67082226, -2.419267  ],\n",
              "        [-3.3116653 , -0.19500336,  3.1231332 ],\n",
              "        [-3.1946526 , -0.7806572 ,  3.497491  ],\n",
              "        [-0.49757642,  1.9265567 , -1.1592892 ],\n",
              "        [-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [-3.2213337 , -0.7677628 ,  3.4904308 ],\n",
              "        [ 2.4038513 , -0.20844088, -1.7564731 ]], dtype=float32),\n",
              " array([[-0.7469213 ,  2.1210418 , -1.2489312 ],\n",
              "        [ 1.2258636 ,  0.94203496, -1.7340496 ],\n",
              "        [-0.6999162 ,  0.8873887 , -0.06160673],\n",
              "        [ 3.3417242 ,  0.4414995 , -3.1395957 ],\n",
              "        [-3.3673275 , -0.30083904,  3.2547657 ],\n",
              "        [-1.7508262 ,  0.1596595 ,  1.492913  ],\n",
              "        [-3.1105227 , -0.9041997 ,  3.4729824 ],\n",
              "        [-2.8408344 ,  0.10263022,  2.4828181 ],\n",
              "        [ 3.0034459 , -0.17981273, -2.237286  ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [-2.9919207 , -0.94771236,  3.4494863 ],\n",
              "        [ 1.4610206 ,  1.2782086 , -2.1912184 ],\n",
              "        [-3.2021668 ,  0.8941113 ,  2.0479069 ],\n",
              "        [-3.3022451 , -0.26254302,  3.1640358 ],\n",
              "        [ 2.8683667 ,  0.45824274, -2.6617634 ],\n",
              "        [ 3.1366308 ,  0.1930882 , -2.7581165 ]], dtype=float32),\n",
              " array([[-1.7156106 ,  1.0013925 ,  0.69665444],\n",
              "        [-3.3275723 , -0.48379198,  3.3816068 ],\n",
              "        [-2.5515645 ,  1.6138743 ,  0.9311503 ],\n",
              "        [ 1.8500987 ,  0.57311475, -1.9978712 ],\n",
              "        [ 1.7272795 ,  1.4471525 , -2.5380397 ],\n",
              "        [-3.2551873 , -0.60084885,  3.3991075 ],\n",
              "        [-0.8218994 ,  1.1360168 , -0.03885772],\n",
              "        [-0.15763491,  1.6922747 , -1.0958755 ],\n",
              "        [-0.4194941 ,  1.9818022 , -1.3286754 ],\n",
              "        [ 2.430875  ,  1.1251339 , -2.9785798 ],\n",
              "        [-2.8401089 , -0.6148921 ,  3.1495776 ],\n",
              "        [ 3.4872377 , -0.5765139 , -2.4654353 ],\n",
              "        [-3.2691553 , -0.44310644,  3.3516893 ],\n",
              "        [ 1.3291343 ,  1.4443618 , -2.322442  ],\n",
              "        [-3.3648303 , -0.5226464 ,  3.4205785 ],\n",
              "        [ 2.8652995 ,  0.7427366 , -2.9770684 ]], dtype=float32),\n",
              " array([[-3.1931655 , -0.7103954 ,  3.3885708 ],\n",
              "        [ 0.7065944 ,  1.4473717 , -1.6423484 ],\n",
              "        [-2.9044526 ,  0.69032645,  1.9038427 ],\n",
              "        [-3.038671  ,  0.86612934,  1.9833493 ],\n",
              "        [-2.1020858 ,  0.21039237,  1.8981705 ],\n",
              "        [ 0.44494963,  1.2551694 , -1.3771122 ],\n",
              "        [-3.215874  , -0.7790973 ,  3.474588  ],\n",
              "        [-3.4504287 , -0.42056602,  3.3692222 ],\n",
              "        [-3.2962043 , -0.62556064,  3.4494643 ],\n",
              "        [-3.067672  , -0.77958655,  3.3727684 ],\n",
              "        [-3.2823398 , -0.6148474 ,  3.404313  ],\n",
              "        [ 0.76027054, -0.06246614, -0.4797401 ],\n",
              "        [ 2.271761  ,  0.80684805, -2.5458632 ],\n",
              "        [-1.6062998 ,  1.3503145 ,  0.36467993],\n",
              "        [-1.7482293 , -0.37930498,  2.0357707 ],\n",
              "        [ 2.1189706 ,  0.2794572 , -1.8729831 ]], dtype=float32),\n",
              " array([[-2.7416086 ,  1.5707194 ,  1.0918071 ],\n",
              "        [-2.9932845 ,  0.8249003 ,  1.931351  ],\n",
              "        [-3.3272555 , -0.20218264,  3.1029472 ],\n",
              "        [-1.934916  ,  1.7950876 ,  0.34986627],\n",
              "        [-3.4256415 , -0.30127972,  3.3027506 ],\n",
              "        [ 2.6375039 ,  0.7056787 , -2.7788165 ],\n",
              "        [ 1.5422053 ,  0.8315297 , -1.8159511 ],\n",
              "        [-2.971515  , -0.6497071 ,  3.1531453 ],\n",
              "        [ 0.02059762,  1.3423132 , -0.99691606],\n",
              "        [ 0.48998055,  0.8169795 , -0.7923914 ],\n",
              "        [-3.246647  , -0.6531596 ,  3.4526973 ],\n",
              "        [ 1.1037692 ,  1.2073154 , -1.9122372 ],\n",
              "        [-3.274347  , -0.62203836,  3.4162154 ],\n",
              "        [-0.1749174 ,  1.9180621 , -1.3995302 ],\n",
              "        [ 0.973298  ,  0.37674293, -1.1211977 ],\n",
              "        [-1.4575632 ,  1.0070739 ,  0.58019966]], dtype=float32),\n",
              " array([[ 2.5779862 ,  0.56485295, -2.4717903 ],\n",
              "        [ 1.7561619 ,  1.212927  , -2.3917916 ],\n",
              "        [ 2.9297318 ,  0.90850574, -3.1297557 ],\n",
              "        [ 0.26491863,  0.81411564, -0.6872591 ],\n",
              "        [ 2.4982777 ,  0.8098482 , -2.7047238 ],\n",
              "        [-3.3147743 ,  0.32378322,  2.6175165 ],\n",
              "        [ 2.6640308 , -0.19971794, -1.9621148 ],\n",
              "        [-3.3025048 , -0.66322654,  3.4566789 ],\n",
              "        [ 2.2654145 ,  1.2285348 , -2.7821054 ],\n",
              "        [ 1.8773117 ,  0.83230454, -2.2015495 ],\n",
              "        [ 3.0415103 ,  0.4056295 , -2.828669  ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 3.0076208 ,  0.45257765, -2.8586009 ],\n",
              "        [ 2.3759809 ,  0.93607414, -2.7108536 ],\n",
              "        [ 1.6048838 ,  1.3123115 , -2.3288014 ],\n",
              "        [-3.0930395 ,  0.26789606,  2.486962  ]], dtype=float32),\n",
              " array([[ 0.78351015,  1.3393538 , -1.6760054 ],\n",
              "        [ 2.8079975 ,  0.67338884, -2.8078825 ],\n",
              "        [-1.4891423 ,  1.9984754 , -0.46695933],\n",
              "        [ 0.10035786,  2.0253336 , -1.8775103 ],\n",
              "        [ 1.4149388 ,  0.93980324, -1.9302859 ],\n",
              "        [ 1.5001855 ,  1.3014165 , -2.2693522 ],\n",
              "        [-3.1550457 , -0.82493013,  3.4987035 ],\n",
              "        [ 2.4478977 ,  1.1082728 , -2.936147  ],\n",
              "        [-3.0974872 , -0.86110324,  3.4830966 ],\n",
              "        [-3.3433964 , -0.5013573 ,  3.3418252 ],\n",
              "        [-3.3395672 , -0.47452602,  3.3444123 ],\n",
              "        [-2.9599733 , -0.99037796,  3.464099  ],\n",
              "        [ 2.7727053 ,  0.7373723 , -2.8117063 ],\n",
              "        [ 1.4732047 ,  0.09770505, -1.3148295 ],\n",
              "        [-0.72137564,  0.5601196 ,  0.23396027],\n",
              "        [ 3.5007977 ,  0.20469144, -3.0290327 ]], dtype=float32),\n",
              " array([[ 1.8487518e+00, -2.2035947e-03, -1.4869204e+00],\n",
              "        [ 2.9737725e+00,  7.3176503e-01, -3.1037381e+00],\n",
              "        [-3.1756530e+00, -7.4977577e-01,  3.3771639e+00],\n",
              "        [ 1.3228098e+00,  1.5261341e+00, -2.2324855e+00],\n",
              "        [-3.1394079e+00, -6.3169301e-01,  3.3305850e+00],\n",
              "        [-2.7465568e+00, -8.8875353e-01,  3.2346287e+00],\n",
              "        [ 1.8820430e+00,  9.7557873e-01, -2.3391709e+00],\n",
              "        [ 2.2497339e+00,  8.9097154e-01, -2.5283165e+00],\n",
              "        [-3.2505219e+00, -7.0726776e-01,  3.4352891e+00],\n",
              "        [-2.7606800e+00,  6.5284163e-01,  1.7936633e+00],\n",
              "        [-3.2824209e+00, -7.0458162e-01,  3.4626245e+00],\n",
              "        [-3.4515874e+00, -1.7408773e-01,  3.1632323e+00],\n",
              "        [ 3.1908710e+00, -1.2618759e-01, -2.4510882e+00],\n",
              "        [-3.2308109e+00, -6.8087196e-01,  3.4535041e+00],\n",
              "        [-3.1534247e+00, -5.4664052e-01,  3.2617161e+00],\n",
              "        [-1.9530112e+00,  1.4217218e+00,  4.9658394e-01]], dtype=float32),\n",
              " array([[-0.8852043 , -0.7830477 ,  1.5881152 ],\n",
              "        [ 0.7980392 ,  1.4963448 , -1.8747113 ],\n",
              "        [ 2.9730475 ,  0.6033616 , -2.9744358 ],\n",
              "        [-1.9646544 ,  1.4424793 ,  0.5635952 ],\n",
              "        [-3.2717874 , -0.59914625,  3.3545797 ],\n",
              "        [ 1.5873833 ,  1.4152461 , -2.4396183 ],\n",
              "        [-3.379992  , -0.07632657,  3.0808082 ],\n",
              "        [ 0.06751361,  1.771073  , -1.4050323 ],\n",
              "        [ 2.0594718 ,  0.5021404 , -2.0816689 ],\n",
              "        [-2.1562335 ,  1.3398126 ,  0.8224361 ],\n",
              "        [-3.389953  ,  0.14668499,  2.8303456 ],\n",
              "        [ 0.49935862,  1.5966116 , -1.7197275 ],\n",
              "        [ 0.4566053 ,  1.4774452 , -1.391431  ],\n",
              "        [ 1.1300246 ,  1.2820395 , -1.9185829 ],\n",
              "        [ 0.18038298,  1.0307659 , -0.9076835 ],\n",
              "        [ 1.6422375 ,  1.2930394 , -2.174596  ]], dtype=float32),\n",
              " array([[ 2.117069  ,  1.1034609 , -2.5688457 ],\n",
              "        [-1.3125166 ,  2.0518022 , -0.570834  ],\n",
              "        [-1.8826647 ,  1.757569  ,  0.12884484],\n",
              "        [ 0.31750074,  1.5688283 , -1.4851286 ],\n",
              "        [ 1.7118233 , -0.02731716, -1.3720732 ],\n",
              "        [ 0.28642717,  1.1466076 , -0.98823583],\n",
              "        [-1.0234919 , -0.28093588,  1.2342728 ],\n",
              "        [-0.9805269 ,  1.0083281 ,  0.03519722],\n",
              "        [ 2.1403317 ,  1.3252412 , -2.829084  ],\n",
              "        [ 3.0124934 ,  0.26655462, -2.688337  ],\n",
              "        [-1.0390705 ,  0.7308694 ,  0.33083415],\n",
              "        [ 2.1596212 ,  0.983755  , -2.5134666 ],\n",
              "        [-2.0313694 ,  1.8440758 ,  0.14809404],\n",
              "        [ 0.23866346, -0.0191426 , -0.0033402 ],\n",
              "        [-3.0003319 , -0.5231806 ,  3.1650863 ],\n",
              "        [-2.3304093 ,  1.5251523 ,  0.6781077 ]], dtype=float32),\n",
              " array([[-3.2995992 ,  0.0329764 ,  2.9198303 ],\n",
              "        [ 2.3334973 ,  0.47154847, -2.2739189 ],\n",
              "        [ 0.30191326,  0.40270546, -0.21396473],\n",
              "        [-2.549724  ,  1.5710309 ,  0.9894731 ],\n",
              "        [ 0.06972327,  1.6333152 , -1.1895549 ],\n",
              "        [ 2.9489088 ,  0.05975045, -2.5358753 ],\n",
              "        [ 1.1019623 ,  1.422435  , -2.0118616 ],\n",
              "        [-2.3733642 ,  1.5144197 ,  0.69992125],\n",
              "        [ 0.01081382,  1.5642661 , -1.1208158 ],\n",
              "        [ 3.353335  ,  0.3106575 , -3.0107937 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-1.3533362 ,  1.8300784 , -0.5687024 ],\n",
              "        [ 2.7064474 ,  0.68578404, -2.7441978 ],\n",
              "        [-3.4046533 , -0.44652277,  3.3582797 ],\n",
              "        [ 1.3688412 ,  0.46293145, -1.4268627 ],\n",
              "        [-0.7923229 ,  1.7619287 , -0.5825964 ]], dtype=float32),\n",
              " array([[-2.1795578 , -0.38750535,  2.2551665 ],\n",
              "        [ 1.2142249 ,  1.6246992 , -2.2138357 ],\n",
              "        [-2.426793  ,  1.315342  ,  0.9517286 ],\n",
              "        [ 2.230718  ,  1.1535437 , -2.836244  ],\n",
              "        [-3.2079732 , -0.79199076,  3.4796546 ],\n",
              "        [-0.30381843,  1.8051164 , -1.144367  ],\n",
              "        [-3.172684  , -0.04401593,  2.878602  ],\n",
              "        [ 0.87412864,  1.6662282 , -2.0584059 ],\n",
              "        [-3.2756798 , -0.11612479,  3.0326858 ],\n",
              "        [ 0.21086216,  1.0289646 , -0.9210197 ],\n",
              "        [-1.6359669 ,  1.4479166 ,  0.15762377],\n",
              "        [ 1.4877266 ,  1.3811749 , -2.3902237 ],\n",
              "        [ 3.375499  ,  0.16500956, -2.9798698 ],\n",
              "        [ 3.0539544 ,  0.42962214, -2.7175062 ],\n",
              "        [-2.7221334 ,  0.98108006,  1.518703  ],\n",
              "        [ 2.74065   ,  0.65493906, -2.7609866 ]], dtype=float32),\n",
              " array([[ 1.4495329 ,  1.7406584 , -2.6129935 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-1.7990144 ,  0.43758956,  1.164864  ],\n",
              "        [ 3.1832342 ,  0.5109941 , -3.0100946 ],\n",
              "        [ 2.8175638 ,  0.71139926, -2.9695108 ],\n",
              "        [-1.696587  ,  1.1078141 ,  0.4349841 ],\n",
              "        [ 1.406526  ,  1.16088   , -2.0220451 ],\n",
              "        [-0.8508093 ,  0.1663852 ,  0.6090751 ],\n",
              "        [ 2.6184502 ,  0.6775011 , -2.777185  ],\n",
              "        [ 2.0546682 ,  1.0422541 , -2.5297642 ],\n",
              "        [ 3.2704778 ,  0.36742827, -2.9509585 ],\n",
              "        [ 3.576756  ,  0.00381628, -2.9528074 ],\n",
              "        [-0.5968611 ,  1.1862658 , -0.46343744],\n",
              "        [ 0.19551033,  0.17781141, -0.12043739],\n",
              "        [-3.3376064 , -0.5403561 ,  3.399424  ],\n",
              "        [ 2.376249  ,  0.568469  , -2.3585746 ]], dtype=float32),\n",
              " array([[-1.9997786 ,  0.7332027 ,  1.1348686 ],\n",
              "        [-3.2223973 , -0.72905076,  3.4524798 ],\n",
              "        [-1.1233482 , -0.3674498 ,  1.2662554 ],\n",
              "        [-3.239937  , -0.63029295,  3.3685603 ],\n",
              "        [-1.2494913 ,  1.2359885 , -0.13835171],\n",
              "        [-2.8408344 ,  0.10263022,  2.4828181 ],\n",
              "        [ 0.7203442 ,  1.5860705 , -1.8794489 ],\n",
              "        [ 0.29842862,  0.52533555, -0.54427874],\n",
              "        [ 3.2949648 ,  0.06092944, -2.7872806 ],\n",
              "        [-2.302185  ,  1.31488   ,  0.88369024],\n",
              "        [-3.301927  , -0.5915078 ,  3.427322  ],\n",
              "        [-3.1823306 , -0.5600476 ,  3.302242  ],\n",
              "        [-0.05189961,  2.0788996 , -1.7053294 ],\n",
              "        [ 2.9681966 , -0.6900836 , -1.8835639 ],\n",
              "        [-3.0226495 , -0.6968299 ,  3.3045228 ],\n",
              "        [ 1.5198399 ,  1.1372675 , -2.176545  ]], dtype=float32),\n",
              " array([[ 0.27154127,  1.8750159 , -1.8192534 ],\n",
              "        [-3.2648351 , -0.58538616,  3.403153  ],\n",
              "        [-0.02608579,  1.5249583 , -1.2269019 ],\n",
              "        [ 3.2135427 ,  0.5060798 , -3.0849962 ],\n",
              "        [ 2.6820457 ,  0.8925538 , -2.9612482 ],\n",
              "        [-3.3250835 , -0.61165285,  3.4491005 ],\n",
              "        [-3.330823  , -0.10481875,  3.0136504 ],\n",
              "        [-0.7444256 , -0.43737248,  1.2109225 ],\n",
              "        [-3.370074  , -0.48514855,  3.3798513 ],\n",
              "        [ 2.7367134 , -0.36595756, -1.9506774 ],\n",
              "        [-2.5631344 , -0.5688183 ,  2.7791839 ],\n",
              "        [ 2.0229895 ,  1.1310695 , -2.560742  ],\n",
              "        [ 1.1774853 ,  1.0223788 , -1.7108098 ],\n",
              "        [ 2.6834624 ,  0.6085756 , -2.7032983 ],\n",
              "        [-3.304265  , -0.41800603,  3.2470958 ],\n",
              "        [-1.8495369 ,  1.4285647 ,  0.51864314]], dtype=float32),\n",
              " array([[-1.0975388 ,  1.7559189 , -0.2944814 ],\n",
              "        [-0.05148628,  1.1105539 , -0.7286678 ],\n",
              "        [ 0.7052838 ,  1.7493433 , -1.8344374 ],\n",
              "        [ 1.7235922 ,  1.4788862 , -2.5738013 ],\n",
              "        [-1.889374  ,  1.7794307 ,  0.17541821],\n",
              "        [-2.4091647 , -0.49307278,  2.6352267 ],\n",
              "        [ 1.8432535 ,  1.3560115 , -2.608605  ],\n",
              "        [ 3.322165  ,  0.09303803, -2.7920504 ],\n",
              "        [ 2.4738436 ,  0.7707419 , -2.6808987 ],\n",
              "        [ 2.9155664 ,  0.47388124, -2.7706409 ],\n",
              "        [ 1.5370926 ,  0.95742965, -2.0615067 ],\n",
              "        [ 2.753566  ,  0.68803084, -2.7511437 ],\n",
              "        [ 0.7201182 ,  0.83700895, -1.2419884 ],\n",
              "        [ 3.051354  ,  0.52964056, -2.9278388 ],\n",
              "        [ 1.6932442 ,  1.4367915 , -2.5103965 ],\n",
              "        [ 3.5605738 , -0.47673032, -2.6439137 ]], dtype=float32),\n",
              " array([[ 1.3147374 ,  1.1433303 , -1.9648951 ],\n",
              "        [ 3.0633805 ,  0.8190365 , -3.1744986 ],\n",
              "        [ 2.292314  ,  1.3266839 , -2.9762464 ],\n",
              "        [-0.69155097,  1.4309393 , -0.54566777],\n",
              "        [-2.0722008 ,  1.7138631 ,  0.34300613],\n",
              "        [-3.0380042 , -0.9592838 ,  3.4765632 ],\n",
              "        [ 1.0676423 ,  0.89398825, -1.5579246 ],\n",
              "        [ 3.5950935 , -0.28764668, -2.7588096 ],\n",
              "        [-2.5954907 ,  1.4574777 ,  0.91267705],\n",
              "        [-2.4357095 , -0.35882446,  2.5143895 ],\n",
              "        [ 1.3819005 , -0.20686534, -0.9589707 ],\n",
              "        [ 2.1688576 ,  0.7940456 , -2.405169  ],\n",
              "        [ 3.054166  ,  0.7449055 , -3.0830312 ],\n",
              "        [ 3.3719428 ,  0.31764457, -3.01027   ],\n",
              "        [-1.4337325 ,  1.9164732 , -0.39708817],\n",
              "        [-3.186653  , -0.42864534,  3.1634517 ]], dtype=float32),\n",
              " array([[-0.03225282,  0.85179317, -0.5390342 ],\n",
              "        [-2.4779942 ,  0.85139763,  1.5112623 ],\n",
              "        [ 1.9237324 ,  0.9042406 , -2.2097175 ],\n",
              "        [-3.3967683 ,  0.38853952,  2.6653812 ],\n",
              "        [ 1.6935707 ,  0.9580029 , -2.190677  ],\n",
              "        [ 0.2418154 ,  1.8674694 , -1.6732137 ],\n",
              "        [-2.3856637 ,  0.4532671 ,  1.4257989 ],\n",
              "        [ 3.5878952 , -0.0632163 , -3.0082295 ],\n",
              "        [-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [-1.2896715 ,  0.58372104,  0.6610271 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [ 3.3127036 , -0.00993234, -2.735178  ],\n",
              "        [-3.2522838 , -0.04534954,  2.8587728 ],\n",
              "        [-3.1187909 , -0.8334565 ,  3.474987  ],\n",
              "        [ 1.5485908 ,  1.5533878 , -2.5024009 ]], dtype=float32),\n",
              " array([[-3.493287  , -0.1563249 ,  3.1584191 ],\n",
              "        [ 0.87245077,  1.3531997 , -1.934849  ],\n",
              "        [-0.6726659 ,  1.22296   , -0.07275943],\n",
              "        [ 0.42179698,  1.5972564 , -1.5968804 ],\n",
              "        [-1.4088403 ,  1.7802359 , -0.21735023],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [-3.012892  , -0.9665831 ,  3.503847  ],\n",
              "        [-2.9396544 , -0.7616965 ,  3.2804482 ],\n",
              "        [ 0.8683421 ,  1.4459487 , -1.7763791 ],\n",
              "        [ 0.3480747 ,  0.38378617, -0.61794066],\n",
              "        [-3.082935  , -0.8542228 ,  3.4606023 ],\n",
              "        [ 0.09723416,  1.9253764 , -1.6096463 ],\n",
              "        [ 2.0562053 ,  0.53247994, -2.1066315 ],\n",
              "        [-3.2792823 , -0.5211841 ,  3.3443024 ],\n",
              "        [ 1.4351363 ,  1.446598  , -2.19297   ],\n",
              "        [-1.917869  ,  1.7629254 ,  0.02130496]], dtype=float32),\n",
              " array([[ 2.665571  ,  0.8895799 , -2.8936996 ],\n",
              "        [-2.9990237 , -0.23051935,  2.8589983 ],\n",
              "        [-2.677688  ,  1.4282836 ,  1.1200138 ],\n",
              "        [-3.1187909 , -0.8334565 ,  3.474987  ],\n",
              "        [-3.1196449 , -0.672264  ,  3.3007722 ],\n",
              "        [ 1.5169402 ,  1.557516  , -2.506058  ],\n",
              "        [ 2.926561  ,  0.693266  , -3.0030897 ],\n",
              "        [ 3.151541  , -0.08095119, -2.3557215 ],\n",
              "        [-0.6038576 ,  1.8030682 , -0.8503591 ],\n",
              "        [-3.260082  ,  0.12063414,  2.8291202 ],\n",
              "        [ 2.9633782 ,  0.5190084 , -2.8440084 ],\n",
              "        [ 1.7973367 , -0.43380222, -1.0996462 ],\n",
              "        [ 0.2919013 ,  1.5927774 , -1.3867515 ],\n",
              "        [ 0.54890376,  1.684046  , -1.5996424 ],\n",
              "        [ 1.0911685 ,  1.4393554 , -2.024879  ],\n",
              "        [ 1.1474639 ,  1.0956343 , -1.78403   ]], dtype=float32),\n",
              " array([[-2.8874476 , -0.7262751 ,  3.1930108 ],\n",
              "        [ 0.0979779 ,  1.3928931 , -1.3749124 ],\n",
              "        [ 3.6690595 , -0.15341282, -2.945808  ],\n",
              "        [-3.2213004 , -0.767529  ,  3.4757922 ],\n",
              "        [ 2.801567  ,  0.73295385, -2.8982005 ],\n",
              "        [-2.6414    ,  0.5265606 ,  1.7720444 ],\n",
              "        [ 1.3009459 ,  1.6128128 , -2.4149392 ],\n",
              "        [ 0.69185877,  1.1019557 , -1.3471057 ],\n",
              "        [-2.72347   , -1.1069497 ,  3.397128  ],\n",
              "        [ 2.715124  ,  0.58040345, -2.8154092 ],\n",
              "        [-1.3967162 ,  2.027864  , -0.57198685],\n",
              "        [ 3.5634568 , -0.73913085, -2.5408354 ],\n",
              "        [-2.8876283 ,  0.63515633,  2.053813  ],\n",
              "        [ 2.8639662 ,  0.35855108, -2.5786774 ],\n",
              "        [-2.7776446 , -0.47885957,  2.7925339 ],\n",
              "        [-1.6121736 ,  2.0774543 , -0.31181493]], dtype=float32),\n",
              " array([[-0.51570004,  0.99904513, -0.20409146],\n",
              "        [-3.2328017 ,  0.7677809 ,  2.2458591 ],\n",
              "        [ 2.3320296 ,  0.48914403, -2.3671966 ],\n",
              "        [-3.3524263 , -0.63580024,  3.4261675 ],\n",
              "        [-0.3751725 ,  1.205129  , -0.50735456],\n",
              "        [ 1.1888014 ,  0.8691058 , -1.6402178 ],\n",
              "        [-3.235018  , -0.39573786,  3.2654746 ],\n",
              "        [ 2.679945  ,  0.6920141 , -2.7296958 ],\n",
              "        [ 2.1539822 ,  1.331371  , -2.8596187 ],\n",
              "        [ 3.27227   ,  0.0430887 , -2.7207475 ],\n",
              "        [-0.6388463 ,  0.60919523,  0.21423542],\n",
              "        [ 2.0521598 ,  1.0943128 , -2.5448308 ],\n",
              "        [-3.0596461 , -0.69387615,  3.3137982 ],\n",
              "        [-3.4092453 , -0.2695224 ,  3.1956701 ],\n",
              "        [ 2.510916  ,  1.1685206 , -2.98812   ],\n",
              "        [ 2.266372  ,  0.35281986, -2.1902666 ]], dtype=float32),\n",
              " array([[ 2.337677  , -0.31488916, -1.6276586 ],\n",
              "        [-2.2236938 ,  1.7469174 ,  0.4500797 ],\n",
              "        [-3.230718  , -0.5491271 ,  3.3158574 ],\n",
              "        [ 1.7834424 ,  1.3517295 , -2.475903  ],\n",
              "        [-2.9466522 ,  0.8641151 ,  1.7422228 ],\n",
              "        [-3.2042458 , -0.7965151 ,  3.4845495 ],\n",
              "        [-3.1303914 , -0.18017563,  2.9437099 ],\n",
              "        [ 2.6400309 , -0.60219306, -1.6879613 ],\n",
              "        [-2.2046256 ,  0.07150211,  1.9660765 ],\n",
              "        [ 2.6854255 ,  0.6790199 , -2.7458565 ],\n",
              "        [ 3.4927454 , -0.16539747, -2.7921417 ],\n",
              "        [-0.4749279 ,  0.11949961,  0.38394138],\n",
              "        [ 1.9297262 ,  1.0372409 , -2.2871685 ],\n",
              "        [-3.2717874 , -0.59914625,  3.3545797 ],\n",
              "        [-3.2194607 , -0.7453772 ,  3.4573348 ],\n",
              "        [-3.2436287 , -0.75185835,  3.4325109 ]], dtype=float32),\n",
              " array([[ 2.5783243 ,  1.0032355 , -2.9374025 ],\n",
              "        [ 2.2235572 ,  1.222767  , -2.7651494 ],\n",
              "        [ 2.9456255 ,  0.3018876 , -2.5783677 ],\n",
              "        [-0.541566  ,  1.4602178 , -0.6786791 ],\n",
              "        [ 2.3425803 , -0.00426025, -1.8055394 ],\n",
              "        [-2.6801336 , -0.49425134,  2.9147174 ],\n",
              "        [-1.5752856 ,  1.8778425 , -0.23877716],\n",
              "        [-3.0345824 , -0.958904  ,  3.487545  ],\n",
              "        [-0.646757  ,  1.2250937 , -0.35464534],\n",
              "        [ 2.2834795 ,  1.1782281 , -2.8909845 ],\n",
              "        [-1.0712055 ,  1.9733047 , -0.8709357 ],\n",
              "        [-3.3651175 , -0.57593846,  3.4193306 ],\n",
              "        [-3.3391488 ,  0.7708036 ,  2.3476992 ],\n",
              "        [-3.272164  , -0.19224231,  3.0942593 ],\n",
              "        [-0.61038226,  0.74927664,  0.02043789],\n",
              "        [-2.2494922 ,  1.5155866 ,  0.71044374]], dtype=float32),\n",
              " array([[ 1.4363042 ,  1.5112308 , -2.4236999 ],\n",
              "        [-3.3776305 , -0.45303872,  3.3548698 ],\n",
              "        [ 0.01901178,  1.6416945 , -1.2508838 ],\n",
              "        [-0.43744013,  1.5545086 , -0.7021959 ],\n",
              "        [-1.7825652 ,  1.1783234 ,  0.5413008 ],\n",
              "        [ 3.480522  , -0.56155646, -2.4199347 ],\n",
              "        [ 3.2083948 ,  0.10198411, -2.750931  ],\n",
              "        [ 0.5815174 ,  0.9263159 , -1.1933999 ],\n",
              "        [ 2.9998071 ,  0.32229403, -2.798706  ],\n",
              "        [-0.18828629,  1.8187922 , -1.2969784 ],\n",
              "        [-3.4181528 , -0.30468664,  3.260875  ],\n",
              "        [ 1.2104439 ,  1.5029024 , -2.2197106 ],\n",
              "        [ 2.7860343 ,  0.5678847 , -2.7488236 ],\n",
              "        [ 2.5981896 ,  0.17262264, -2.2409391 ],\n",
              "        [-0.3534836 ,  1.1907519 , -0.6786766 ],\n",
              "        [-3.0885427 , -0.7571038 ,  3.4061468 ]], dtype=float32),\n",
              " array([[-1.8250228 , -0.36493054,  2.0515974 ],\n",
              "        [ 3.5714304 , -0.6809234 , -2.543674  ],\n",
              "        [ 0.5396387 ,  1.2135919 , -1.3995423 ],\n",
              "        [-0.39893582,  1.4675483 , -0.7300529 ],\n",
              "        [ 0.31643444,  1.4392751 , -1.2599978 ],\n",
              "        [ 2.2002504 ,  1.136995  , -2.6311913 ],\n",
              "        [-1.373401  ,  1.9827706 , -0.387479  ],\n",
              "        [-2.6361802 ,  0.27845648,  2.064392  ],\n",
              "        [-2.8790586 , -0.46794066,  2.9845188 ],\n",
              "        [-3.327574  , -0.36570677,  3.29313   ],\n",
              "        [-1.6794442 ,  0.62400484,  1.1438293 ],\n",
              "        [ 1.7466382 ,  0.8264801 , -2.0295267 ],\n",
              "        [ 1.9447924 ,  1.2194263 , -2.4795318 ],\n",
              "        [ 3.2078965 ,  0.4331706 , -3.0851882 ],\n",
              "        [-0.42084047,  1.7298996 , -1.1014268 ],\n",
              "        [ 2.1719825 ,  1.1280738 , -2.7497077 ]], dtype=float32),\n",
              " array([[-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 1.0308515 ,  1.6843679 , -2.1474898 ],\n",
              "        [ 0.7162741 ,  1.7069591 , -1.8265907 ],\n",
              "        [ 1.0424148 , -0.2786756 , -0.69329727],\n",
              "        [-0.5771543 ,  1.8871213 , -1.0467297 ],\n",
              "        [-3.1631587 , -0.8286985 ,  3.4813828 ],\n",
              "        [-2.454725  ,  0.6149461 ,  1.6127855 ],\n",
              "        [ 3.0892787 ,  0.55387974, -3.0426998 ],\n",
              "        [-2.7748218 ,  0.66037345,  1.858186  ],\n",
              "        [-1.2562352 ,  1.4010295 , -0.08184467],\n",
              "        [ 3.3985555 , -1.0661811 , -1.9729118 ],\n",
              "        [ 2.5686567 ,  0.8984985 , -2.771657  ],\n",
              "        [ 3.5714304 , -0.6809234 , -2.543674  ],\n",
              "        [ 2.6305833 ,  0.65369976, -2.6206841 ],\n",
              "        [-3.335656  , -0.37973472,  3.2515903 ],\n",
              "        [ 2.3337138 , -0.40222016, -1.473594  ]], dtype=float32),\n",
              " array([[ 1.9832062 , -1.0733687 , -0.7562363 ],\n",
              "        [-2.8664343 ,  0.6258493 ,  1.9062731 ],\n",
              "        [ 1.6546142 ,  0.9702642 , -2.0738819 ],\n",
              "        [ 2.9025867 ,  0.6385317 , -2.9032261 ],\n",
              "        [-0.5452146 ,  2.0003946 , -1.2096722 ],\n",
              "        [-3.0599778 ,  1.008833  ,  1.7857571 ],\n",
              "        [ 2.7308898 ,  0.43844643, -2.592795  ],\n",
              "        [-3.0729434 , -0.3675951 ,  3.0872984 ],\n",
              "        [ 1.4198695 ,  1.3281204 , -2.286448  ],\n",
              "        [ 1.6778225 ,  1.0840743 , -2.1731746 ],\n",
              "        [ 1.6543497 , -0.89897245, -0.5375374 ],\n",
              "        [-1.1094276 ,  1.8268603 , -0.5229067 ],\n",
              "        [ 2.4985635 ,  0.7112841 , -2.6239157 ],\n",
              "        [ 3.070475  , -0.3133377 , -2.1845374 ],\n",
              "        [ 1.614219  ,  1.5834583 , -2.6312103 ],\n",
              "        [ 0.56988937,  1.2531888 , -1.3465296 ]], dtype=float32),\n",
              " array([[-3.1403315 , -0.8297913 ,  3.4673617 ],\n",
              "        [ 1.9027053 ,  1.284074  , -2.661898  ],\n",
              "        [-3.225234  , -0.7893046 ,  3.484138  ],\n",
              "        [-3.0125663 ,  0.9362895 ,  1.903595  ],\n",
              "        [-0.22000942,  1.4633697 , -1.0426204 ],\n",
              "        [-1.3748693 ,  1.9610964 , -0.3940599 ],\n",
              "        [-1.3355361 ,  2.0122557 , -0.58822465],\n",
              "        [ 1.6288822 ,  1.6146251 , -2.6060681 ],\n",
              "        [ 3.5836318 , -0.3381301 , -2.708261  ],\n",
              "        [ 0.06864266,  1.9686036 , -1.7109357 ],\n",
              "        [ 3.6471117 , -0.34652254, -2.804922  ],\n",
              "        [ 0.77303   ,  1.0001739 , -1.2717919 ],\n",
              "        [ 2.8429677 ,  0.2650063 , -2.5515509 ],\n",
              "        [ 3.2094047 ,  0.40395615, -3.0432522 ],\n",
              "        [-3.1456666 , -0.6371571 ,  3.3071327 ],\n",
              "        [ 2.7487278 ,  0.7834945 , -2.9108071 ]], dtype=float32),\n",
              " array([[ 2.430792  ,  1.071426  , -2.8845868 ],\n",
              "        [ 1.7123615 ,  1.3545444 , -2.5104384 ],\n",
              "        [ 3.0062196 ,  0.54122794, -2.95214   ],\n",
              "        [ 0.13024974,  1.2378026 , -1.0630339 ],\n",
              "        [-3.0047042 , -0.93643856,  3.393585  ],\n",
              "        [ 0.83597153,  1.7877394 , -2.123486  ],\n",
              "        [ 0.8757391 , -0.928844  ,  0.02292673],\n",
              "        [ 0.9518081 ,  0.8030096 , -1.2036215 ],\n",
              "        [-3.1483915 , -0.75228345,  3.3918498 ],\n",
              "        [-1.6570446 , -0.31523082,  1.9741427 ],\n",
              "        [-3.5173926 , -0.03486371,  3.0568469 ],\n",
              "        [-3.0368388 , -0.5637661 ,  3.2640367 ],\n",
              "        [ 2.2366872 ,  1.0440685 , -2.61446   ],\n",
              "        [ 2.5247853 ,  1.0795051 , -2.9153812 ],\n",
              "        [ 1.5712253 , -1.1709882 , -0.497085  ],\n",
              "        [ 3.387883  ,  0.09763679, -2.890503  ]], dtype=float32),\n",
              " array([[-2.8509603 , -0.11858407,  2.6476533 ],\n",
              "        [-0.9521059 ,  1.9832617 , -0.7687415 ],\n",
              "        [ 3.67561   , -0.21419087, -2.911487  ],\n",
              "        [-3.0974872 , -0.86110324,  3.4830966 ],\n",
              "        [ 2.341572  ,  0.9551834 , -2.6347356 ],\n",
              "        [-1.9994513 ,  1.6123371 ,  0.5070873 ],\n",
              "        [ 1.398677  ,  0.47212374, -1.503903  ],\n",
              "        [ 0.614185  ,  1.2620772 , -1.486001  ],\n",
              "        [ 2.465193  ,  1.1005963 , -2.896029  ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-3.458576  , -0.07082129,  3.0566552 ],\n",
              "        [-3.0978029 , -0.6592165 ,  3.3249338 ],\n",
              "        [-3.2635744 ,  0.26604974,  2.6462364 ],\n",
              "        [ 2.587165  , -0.20513064, -1.8875656 ],\n",
              "        [-3.298616  ,  0.86728406,  2.159111  ],\n",
              "        [-3.1606348 , -0.2752986 ,  3.0808978 ]], dtype=float32),\n",
              " array([[-3.436526  , -0.33300838,  3.2749245 ],\n",
              "        [ 2.3114038 ,  0.7263255 , -2.4530182 ],\n",
              "        [ 3.2611072 , -0.38553014, -2.3943038 ],\n",
              "        [-3.029059  , -1.0079106 ,  3.5013382 ],\n",
              "        [-1.9457618 ,  0.97411644,  0.91729766],\n",
              "        [-0.78371626,  1.7164453 , -0.5538262 ],\n",
              "        [ 1.648764  ,  0.6065383 , -1.8155825 ],\n",
              "        [ 3.3482835 , -0.87244874, -2.044837  ],\n",
              "        [ 0.07148114,  0.27800053, -0.25780767],\n",
              "        [ 0.1556738 ,  1.5578308 , -1.1650304 ],\n",
              "        [-3.0507321 , -0.763034  ,  3.3979359 ],\n",
              "        [-1.591725  ,  1.9350911 , -0.26487792],\n",
              "        [ 2.7669547 ,  0.7825858 , -2.8398433 ],\n",
              "        [-3.3309362 , -0.5933684 ,  3.4355311 ],\n",
              "        [-1.8926607 ,  1.3561044 ,  0.3956238 ],\n",
              "        [ 1.9266716 ,  1.2795568 , -2.6430488 ]], dtype=float32),\n",
              " array([[-0.99292475,  0.3249109 ,  0.6784784 ],\n",
              "        [-3.2152822 , -0.6282159 ,  3.3405771 ],\n",
              "        [-3.2593849 , -0.6541332 ,  3.443414  ],\n",
              "        [ 2.4975305 ,  0.36453405, -2.3177621 ],\n",
              "        [-3.2597706 , -0.25963253,  3.167055  ],\n",
              "        [-3.0016768 , -0.3739901 ,  3.0026655 ],\n",
              "        [-2.4319959 , -0.88011   ,  2.8662019 ],\n",
              "        [-3.4891818 , -0.2075521 ,  3.1964962 ],\n",
              "        [ 3.4749463 , -0.12429941, -2.7783937 ],\n",
              "        [ 1.4916488 ,  1.1168526 , -2.0277457 ],\n",
              "        [ 2.0460987 ,  1.4103388 , -2.835894  ],\n",
              "        [ 1.3722461 , -0.4124189 , -0.73794824],\n",
              "        [-3.4114327 , -0.4732969 ,  3.3687558 ],\n",
              "        [ 1.1786376 ,  1.3127837 , -2.0757823 ],\n",
              "        [ 0.22337934,  1.7164192 , -1.5963819 ],\n",
              "        [-3.3071063 , -0.22767475,  3.0955348 ]], dtype=float32),\n",
              " array([[ 2.5298207 ,  0.7599984 , -2.6232693 ],\n",
              "        [ 2.029889  ,  0.99222803, -2.4659004 ],\n",
              "        [ 1.3306254 ,  0.35432488, -1.4085026 ],\n",
              "        [-3.1489067 ,  0.25793964,  2.5611863 ],\n",
              "        [-3.3738654 , -0.48171565,  3.3666158 ],\n",
              "        [ 0.7496579 ,  0.97680587, -1.3538746 ],\n",
              "        [-0.25705972,  1.3125719 , -0.87993884],\n",
              "        [-2.7082593 ,  0.56873   ,  1.9615936 ],\n",
              "        [-2.9307756 ,  0.07263123,  2.3970637 ],\n",
              "        [-0.4063653 , -0.6667861 ,  0.99831915],\n",
              "        [-3.2535114 , -0.5479289 ,  3.3681276 ],\n",
              "        [-3.1001155 ,  0.5713836 ,  2.2175965 ],\n",
              "        [-3.3304546 , -0.41445997,  3.2455006 ],\n",
              "        [-3.4545417 , -0.2335316 ,  3.173644  ],\n",
              "        [-2.3255768 , -0.88516694,  2.8243747 ],\n",
              "        [-1.6699349 ,  1.9666337 , -0.19701579]], dtype=float32),\n",
              " array([[-3.3218067 ,  0.54873437,  2.422439  ],\n",
              "        [ 0.22911982,  1.3660626 , -1.3931103 ],\n",
              "        [ 2.7277713 ,  0.9400733 , -3.0247865 ],\n",
              "        [ 2.5834918 ,  0.2257338 , -2.2212517 ],\n",
              "        [-3.2248695 , -0.34126034,  3.2043345 ],\n",
              "        [ 0.5161837 , -0.61401296,  0.17071871],\n",
              "        [ 0.0735006 ,  1.015412  , -0.6931399 ],\n",
              "        [ 2.1721437 ,  0.63118875, -2.169126  ],\n",
              "        [ 1.7214996 ,  1.2278596 , -2.4674904 ],\n",
              "        [-0.8364338 ,  1.1888245 , -0.01836882],\n",
              "        [ 1.6313074 ,  0.49356642, -1.5992472 ],\n",
              "        [-3.149752  ,  0.63956296,  2.3607163 ],\n",
              "        [-3.1210718 , -0.44528678,  3.0974917 ],\n",
              "        [ 3.496888  ,  0.1223231 , -3.0600839 ],\n",
              "        [-0.0691668 ,  1.4766005 , -0.9992959 ],\n",
              "        [ 1.3489057 ,  1.5378417 , -2.2929935 ]], dtype=float32),\n",
              " array([[ 0.6665904 ,  1.3954684 , -1.5426437 ],\n",
              "        [-0.5308632 ,  1.7645243 , -0.97659314],\n",
              "        [-0.93090713,  1.3174514 , -0.15135291],\n",
              "        [-3.1525369 , -0.654097  ,  3.2974648 ],\n",
              "        [ 2.105623  ,  1.2886904 , -2.7324133 ],\n",
              "        [ 3.5397384 , -0.11060534, -2.8364403 ],\n",
              "        [-1.3674616 ,  1.5955237 , -0.18822013],\n",
              "        [ 3.563982  , -0.5627255 , -2.6491055 ],\n",
              "        [-3.208542  , -0.65631163,  3.382925  ],\n",
              "        [-3.3986628 , -0.24799466,  3.1356084 ],\n",
              "        [ 1.3204097 ,  1.4389799 , -2.1811385 ],\n",
              "        [-3.2685573 , -0.4495429 ,  3.2636476 ],\n",
              "        [ 0.94778717,  1.3135    , -1.7948303 ],\n",
              "        [ 0.7137005 ,  1.08947   , -1.3293561 ],\n",
              "        [-1.5712106 , -0.5726037 ,  1.9964392 ],\n",
              "        [ 1.8629093 ,  1.2160327 , -2.435317  ]], dtype=float32),\n",
              " array([[ 2.3394885 ,  1.1383647 , -2.8894663 ],\n",
              "        [ 2.1297474 ,  0.7968149 , -2.234665  ],\n",
              "        [ 2.0766733 ,  1.0177671 , -2.5244486 ],\n",
              "        [-3.4309394 , -0.2859365 ,  3.2626715 ],\n",
              "        [ 3.624394  , -0.6521215 , -2.4845376 ],\n",
              "        [-3.0449417 ,  0.6729749 ,  2.2102182 ],\n",
              "        [-2.9262385 , -0.97953176,  3.4181042 ],\n",
              "        [ 0.85544604,  1.4678835 , -1.7716789 ],\n",
              "        [ 3.3251934 ,  0.41760284, -3.1189687 ],\n",
              "        [ 1.1200162 ,  1.7002531 , -2.278384  ],\n",
              "        [-3.3336575 , -0.54967856,  3.3798816 ],\n",
              "        [-3.119634  , -0.7624526 ,  3.3967285 ],\n",
              "        [ 1.0202895 ,  1.1392967 , -1.8035591 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [ 1.6247617 ,  0.88097155, -1.8691143 ],\n",
              "        [ 1.0864272 ,  0.52140224, -1.2470765 ]], dtype=float32),\n",
              " array([[-2.1299438 ,  1.6223496 ,  0.4928537 ],\n",
              "        [-0.24085483,  1.7916088 , -1.2883834 ],\n",
              "        [ 0.31812248,  1.8606073 , -1.7990149 ],\n",
              "        [ 3.2492957 ,  0.5972159 , -3.1679878 ],\n",
              "        [ 2.1054645 ,  0.7131457 , -2.1606338 ],\n",
              "        [-2.2147856 , -0.8667457 ,  2.876633  ],\n",
              "        [ 0.8186239 , -0.12573291, -0.44542268],\n",
              "        [ 3.6491106 , -0.8517245 , -2.3457224 ],\n",
              "        [-3.2555509 , -0.63847005,  3.4371698 ],\n",
              "        [ 0.6613812 ,  1.3397759 , -1.5833514 ],\n",
              "        [-0.93301374, -1.1333195 ,  1.7796123 ],\n",
              "        [ 0.18266807,  1.0710503 , -0.9680347 ],\n",
              "        [-2.8409426 ,  0.1122358 ,  2.5734463 ],\n",
              "        [ 1.4566892 ,  1.1130468 , -1.9331827 ],\n",
              "        [-1.2283903 ,  2.0622017 , -0.68697304],\n",
              "        [ 0.45604458,  1.7528254 , -1.9103181 ]], dtype=float32),\n",
              " array([[-3.2744305 , -0.56207037,  3.336709  ],\n",
              "        [ 2.1158886 , -0.21866433, -1.5282229 ],\n",
              "        [-1.6981372 ,  1.9255873 , -0.11284968],\n",
              "        [-0.07685706,  0.26612148, -0.11029283],\n",
              "        [-3.186672  , -0.67557883,  3.3731625 ],\n",
              "        [-3.0945628 ,  0.25815293,  2.526066  ],\n",
              "        [ 0.8821725 ,  1.9914201 , -2.2669907 ],\n",
              "        [-3.4757526 ,  0.45024008,  2.637669  ],\n",
              "        [-2.9707406 , -0.9302137 ,  3.43164   ],\n",
              "        [-3.3795264 , -0.0640398 ,  2.95289   ],\n",
              "        [-2.086304  , -0.8787739 ,  2.6136844 ],\n",
              "        [ 0.44037923,  1.2895411 , -1.4023359 ],\n",
              "        [-3.2517586 , -0.48119643,  3.258561  ],\n",
              "        [ 2.9411423 ,  0.8120489 , -3.0862026 ],\n",
              "        [ 3.595257  , -0.36820143, -2.818008  ],\n",
              "        [-2.3737607 ,  1.5627183 ,  0.671268  ]], dtype=float32),\n",
              " array([[-2.939901  ,  0.352371  ,  2.2390904 ],\n",
              "        [-3.2796264 , -0.55010444,  3.34061   ],\n",
              "        [ 1.7145447 ,  1.1014427 , -2.1725917 ],\n",
              "        [ 0.78936636,  1.7872944 , -2.1783972 ],\n",
              "        [-3.1862667 ,  0.32964978,  2.4825938 ],\n",
              "        [-1.7302244 ,  2.0321982 , -0.24226338],\n",
              "        [ 2.4719737 ,  1.073836  , -2.9137728 ],\n",
              "        [-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [ 2.0930018 ,  1.3758566 , -2.7906291 ],\n",
              "        [-0.8670916 ,  1.7859188 , -0.77075136],\n",
              "        [-2.0526605 , -0.7891252 ,  2.534872  ],\n",
              "        [ 0.0351211 ,  1.486035  , -1.1538911 ],\n",
              "        [-0.69658697,  1.0966212 , -0.3616296 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 0.7301227 ,  1.3114582 , -1.5566901 ],\n",
              "        [ 2.6647532 ,  0.7450887 , -2.7772799 ]], dtype=float32),\n",
              " array([[-3.4340074 ,  0.2498374 ,  2.773416  ],\n",
              "        [ 0.39365056,  1.1593499 , -1.2485814 ],\n",
              "        [ 0.4184915 ,  1.7460412 , -1.7142388 ],\n",
              "        [ 3.3135602 , -0.01561005, -2.764239  ],\n",
              "        [-3.299433  , -0.59810126,  3.4322152 ],\n",
              "        [ 0.5165069 ,  1.3527743 , -1.3277837 ],\n",
              "        [ 0.35999218,  1.5532005 , -1.3884859 ],\n",
              "        [-2.4685218 ,  0.5041721 ,  1.6988454 ],\n",
              "        [-2.9885695 , -0.5848946 ,  3.1834888 ],\n",
              "        [-2.518542  ,  0.84917843,  1.5249946 ],\n",
              "        [ 2.9885554 ,  0.2539939 , -2.5437799 ],\n",
              "        [ 2.4666595 ,  0.904157  , -2.805593  ],\n",
              "        [-2.914851  , -0.37384588,  2.898871  ],\n",
              "        [ 0.81141776,  1.4984996 , -1.7679007 ],\n",
              "        [ 1.7662215 ,  0.9809731 , -2.1660237 ],\n",
              "        [-3.1304471 , -0.2525647 ,  2.972145  ]], dtype=float32),\n",
              " array([[-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-3.3707845 , -0.5273107 ,  3.4067788 ],\n",
              "        [-3.0375073 ,  0.85278076,  1.9534281 ],\n",
              "        [-3.2448716 , -0.37733576,  3.1489506 ],\n",
              "        [ 1.1957705 ,  1.2838057 , -1.8879681 ],\n",
              "        [-3.34929   , -0.577166  ,  3.418676  ],\n",
              "        [-3.538531  ,  0.10601368,  2.9880004 ],\n",
              "        [-0.9959952 ,  1.8654766 , -0.78312516],\n",
              "        [ 3.451863  , -0.0834928 , -2.8758633 ],\n",
              "        [-0.12876923,  1.6227597 , -0.9959706 ],\n",
              "        [ 2.3625772 , -0.23906192, -1.627332  ],\n",
              "        [-3.5149953 ,  0.47821143,  2.6534362 ],\n",
              "        [ 1.8243545 ,  0.6633547 , -1.9977193 ],\n",
              "        [-0.45261216,  1.4065753 , -0.7509719 ],\n",
              "        [ 0.40019855,  1.0741987 , -1.1077657 ],\n",
              "        [-2.5992098 , -0.9107454 ,  3.1175902 ]], dtype=float32),\n",
              " array([[ 3.3911884 ,  0.21866475, -3.008535  ],\n",
              "        [ 2.185248  ,  1.3035301 , -2.8609478 ],\n",
              "        [ 0.41715708,  1.8216741 , -1.7936088 ],\n",
              "        [ 0.12752546,  0.15517493, -0.21605925],\n",
              "        [-1.3982203 ,  1.0294605 ,  0.3444898 ],\n",
              "        [-3.401123  , -0.32007158,  3.2819533 ],\n",
              "        [-3.462352  , -0.3951147 ,  3.3220134 ],\n",
              "        [ 1.8479635 ,  1.4624295 , -2.6083832 ],\n",
              "        [ 3.3838665 ,  0.18220274, -2.9593015 ],\n",
              "        [ 2.7079763 ,  0.5454251 , -2.6418197 ],\n",
              "        [-3.3935592 , -0.11451797,  3.0350273 ],\n",
              "        [-3.2290666 , -0.74007356,  3.4648857 ],\n",
              "        [ 1.7015547 ,  1.2079896 , -2.360549  ],\n",
              "        [-3.0993454 , -0.84838724,  3.453292  ],\n",
              "        [ 0.70582557, -1.0467207 ,  0.39009413],\n",
              "        [ 3.1448405 ,  0.29179087, -2.8118606 ]], dtype=float32),\n",
              " array([[-1.5555345e+00,  1.7613152e+00, -1.0882252e-01],\n",
              "        [ 2.6081593e+00,  8.8834333e-01, -2.7694016e+00],\n",
              "        [-1.3827754e+00,  1.3897586e+00,  1.0277653e-02],\n",
              "        [ 2.1296623e+00,  5.8662879e-01, -2.1431026e+00],\n",
              "        [-3.0554619e+00, -9.4284707e-01,  3.5054302e+00],\n",
              "        [-3.2706261e+00, -2.1928772e-01,  3.0876188e+00],\n",
              "        [ 3.5869081e+00, -1.0748555e-04, -3.0129685e+00],\n",
              "        [ 1.2033423e+00,  3.1172040e-01, -1.1494017e+00],\n",
              "        [ 8.6199880e-01,  1.0037866e+00, -1.3545015e+00],\n",
              "        [-2.9251459e-01,  6.4581090e-01, -2.3072711e-03],\n",
              "        [ 1.9682753e+00,  1.1480172e+00, -2.4052591e+00],\n",
              "        [ 6.9491798e-01,  1.7404675e+00, -1.9458058e+00],\n",
              "        [ 2.1080189e+00,  9.0884942e-01, -2.5140316e+00],\n",
              "        [-3.4505155e+00, -6.9554649e-02,  3.0962906e+00],\n",
              "        [ 3.0942011e+00,  2.1970022e-01, -2.8458459e+00],\n",
              "        [-4.0663210e-01,  1.7543045e+00, -1.0380094e+00]], dtype=float32),\n",
              " array([[-2.0077083 ,  0.56805134,  1.4794403 ],\n",
              "        [-3.2709243 ,  0.10106859,  2.7825649 ],\n",
              "        [-2.4712617 ,  1.2067208 ,  1.1248181 ],\n",
              "        [ 2.872554  ,  0.639343  , -2.9013782 ],\n",
              "        [-3.091211  , -0.82218254,  3.4195857 ],\n",
              "        [-3.192856  , -0.66354877,  3.3854036 ],\n",
              "        [-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [-3.1482093 , -0.79757553,  3.4756298 ],\n",
              "        [ 2.0231326 , -0.09629493, -1.5160271 ],\n",
              "        [-3.2550452 , -0.3180857 ,  3.158913  ],\n",
              "        [-3.0700338 ,  0.6983619 ,  2.168787  ],\n",
              "        [-3.4603682 , -0.00373891,  3.0114145 ],\n",
              "        [-0.3973936 ,  1.7432727 , -0.9873376 ],\n",
              "        [ 1.9551893 ,  0.6474565 , -2.13696   ],\n",
              "        [ 3.439843  ,  0.16566008, -3.0242963 ],\n",
              "        [ 3.182874  , -1.166619  , -1.835046  ]], dtype=float32),\n",
              " array([[-3.0254097 , -0.59788144,  3.2088404 ],\n",
              "        [ 2.5028799 ,  0.8706768 , -2.6323767 ],\n",
              "        [ 1.6268963 ,  0.95367384, -2.093801  ],\n",
              "        [ 1.3332907 ,  1.5113809 , -2.291148  ],\n",
              "        [-3.0813382 , -0.8802294 ,  3.4397    ],\n",
              "        [-2.5925767 , -0.35315177,  2.5534005 ],\n",
              "        [ 3.2322824 ,  0.46826765, -3.088285  ],\n",
              "        [-3.22085   , -0.79252577,  3.4913907 ],\n",
              "        [ 3.652032  , -0.30613583, -2.891263  ],\n",
              "        [ 3.207686  , -0.07245227, -2.5480213 ],\n",
              "        [-3.3801157 , -0.03890083,  2.9776802 ],\n",
              "        [ 3.325979  , -0.16619468, -2.6022892 ],\n",
              "        [-0.09566376,  1.7749388 , -1.3852763 ],\n",
              "        [-1.235159  ,  0.98550653,  0.40171978],\n",
              "        [-3.373521  , -0.1409849 ,  3.1009467 ],\n",
              "        [-3.1311655 , -0.15858434,  2.881824  ]], dtype=float32),\n",
              " array([[ 1.4661613 ,  1.5799878 , -2.512579  ],\n",
              "        [-2.2386596 , -0.70478237,  2.6589622 ],\n",
              "        [-2.8486204 , -0.3843578 ,  2.867726  ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [-3.3414567 , -0.47291523,  3.36838   ],\n",
              "        [ 0.575914  ,  2.1203218 , -2.1640007 ],\n",
              "        [ 2.3082142 ,  1.2904271 , -2.9758706 ],\n",
              "        [-3.1628208 , -0.7183628 ,  3.404656  ],\n",
              "        [ 0.35458022,  1.8469193 , -1.8647482 ],\n",
              "        [-0.39651486,  0.86434567, -0.30545902],\n",
              "        [ 0.1643205 , -0.73510253,  0.48012084],\n",
              "        [-3.4215984 , -0.19498913,  3.139827  ],\n",
              "        [-2.9987051 , -0.7816087 ,  3.3595028 ],\n",
              "        [-3.3583682 ,  0.08579519,  2.8236651 ],\n",
              "        [ 1.8204154 ,  1.0919302 , -2.3241498 ],\n",
              "        [-0.16240291,  1.6664748 , -1.2693822 ]], dtype=float32),\n",
              " array([[ 0.7603636 ,  1.5993149 , -1.8574266 ],\n",
              "        [-1.8993989 ,  1.5122063 ,  0.26394987],\n",
              "        [-3.359141  , -0.6012017 ,  3.4536355 ],\n",
              "        [ 0.92225105,  1.5361766 , -2.0215354 ],\n",
              "        [ 1.5789164 ,  1.5162653 , -2.5092382 ],\n",
              "        [-3.1362674 , -0.5810729 ,  3.293333  ],\n",
              "        [ 3.5967472 , -0.57118005, -2.604997  ],\n",
              "        [-0.06854264,  1.7270526 , -1.2745543 ],\n",
              "        [ 1.3443571 ,  1.2594486 , -2.0177112 ],\n",
              "        [-2.7617085 ,  0.88770664,  1.7609818 ],\n",
              "        [-3.4115393 , -0.37304696,  3.3701677 ],\n",
              "        [-3.2398784 ,  0.4046122 ,  2.4454155 ],\n",
              "        [-3.1663325 , -0.13450705,  2.8857708 ],\n",
              "        [-2.5537755 , -0.22712491,  2.458593  ],\n",
              "        [ 3.3977287 ,  0.0139192 , -2.863317  ],\n",
              "        [-3.2038157 , -0.77376115,  3.489464  ]], dtype=float32),\n",
              " array([[-0.9344809 ,  1.782749  , -0.72575605],\n",
              "        [-1.8171811 ,  1.3515724 ,  0.43812495],\n",
              "        [-3.268367  , -0.50326735,  3.3243728 ],\n",
              "        [-3.48425   , -0.20929283,  3.2106564 ],\n",
              "        [ 2.3757784 ,  1.1152767 , -2.7750735 ],\n",
              "        [ 1.4831252 ,  1.1332598 , -2.0823536 ],\n",
              "        [-3.3269994 , -0.50742   ,  3.3964539 ],\n",
              "        [-3.059867  ,  0.3126014 ,  2.3408923 ],\n",
              "        [-1.3329617 ,  0.71109176,  0.8052756 ],\n",
              "        [-2.967032  , -0.5654509 ,  3.1549642 ],\n",
              "        [ 2.8451865 ,  0.9021421 , -3.1083906 ],\n",
              "        [-3.1046746 ,  0.66470915,  2.0738764 ],\n",
              "        [-0.6216737 ,  1.2058686 , -0.4027601 ],\n",
              "        [ 1.9102445 ,  0.8124342 , -2.0593133 ],\n",
              "        [ 2.3628478 ,  1.2189225 , -2.9177513 ],\n",
              "        [-3.2169006 , -0.65025824,  3.3652065 ]], dtype=float32),\n",
              " array([[ 1.9879167 ,  0.36055607, -1.9255781 ],\n",
              "        [ 0.81720585,  1.2618656 , -1.5059912 ],\n",
              "        [ 2.8647304 , -0.89523613, -1.6007535 ],\n",
              "        [ 1.338674  ,  1.5119472 , -2.2112467 ],\n",
              "        [ 1.6367985 ,  1.4676169 , -2.517673  ],\n",
              "        [-2.5724509 ,  1.2751993 ,  1.1819845 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 2.492911  ,  0.88815963, -2.7937815 ],\n",
              "        [ 2.853244  ,  0.737069  , -3.0137205 ],\n",
              "        [-3.3775737 , -0.5287077 ,  3.3890584 ],\n",
              "        [-0.2903141 ,  1.3020718 , -0.8107487 ],\n",
              "        [ 0.35913083,  1.3745905 , -1.3229481 ],\n",
              "        [-0.38566974,  1.9697484 , -1.2159266 ],\n",
              "        [ 3.5294092 , -0.2533951 , -2.703012  ],\n",
              "        [-3.3722866 , -0.4502274 ,  3.3421266 ],\n",
              "        [ 1.2454618 , -1.1141126 , -0.08415944]], dtype=float32),\n",
              " array([[-1.1882871 ,  1.5365894 , -0.31809413],\n",
              "        [-0.2025937 ,  1.7566851 , -1.1965098 ],\n",
              "        [-3.0376465 , -0.37581262,  3.0245302 ],\n",
              "        [ 3.6114686 , -0.43624464, -2.7387705 ],\n",
              "        [-3.1313097 , -0.78507423,  3.4915953 ],\n",
              "        [ 2.0874512 , -1.2345012 , -0.7789579 ],\n",
              "        [ 1.1149825 ,  1.1917161 , -1.8555771 ],\n",
              "        [ 1.1412343 ,  1.2308089 , -1.9239475 ],\n",
              "        [ 2.4602911 ,  0.90796834, -2.7829092 ],\n",
              "        [-3.3285542 , -0.5839654 ,  3.4275386 ],\n",
              "        [ 0.3060478 ,  1.9474167 , -1.6654975 ],\n",
              "        [-3.3102865 , -0.5564617 ,  3.4064116 ],\n",
              "        [ 2.2658513 ,  0.25435618, -2.024495  ],\n",
              "        [-3.1109123 , -0.7335254 ,  3.3980916 ],\n",
              "        [-3.2993538 ,  0.47461548,  2.4201243 ],\n",
              "        [ 2.6033828 ,  0.874413  , -2.838522  ]], dtype=float32),\n",
              " array([[-0.7720888 ,  1.2401143 , -0.34868696],\n",
              "        [-3.1698275 , -0.398491  ,  3.1722038 ],\n",
              "        [ 0.8727334 ,  1.1909969 , -1.6073302 ],\n",
              "        [-1.6749169 ,  1.7773925 , -0.06007991],\n",
              "        [ 0.58817774,  1.7938071 , -1.9234995 ],\n",
              "        [ 2.6586545 ,  0.42489353, -2.4523392 ],\n",
              "        [-1.8666675 ,  1.5607523 ,  0.32339165],\n",
              "        [-0.45632583,  1.4109089 , -0.69303626],\n",
              "        [ 2.5516775 ,  0.8478711 , -2.7155156 ],\n",
              "        [-0.26279405,  0.22744623,  0.05644635],\n",
              "        [ 3.507319  ,  0.1737527 , -3.080089  ],\n",
              "        [ 1.7067521 , -0.9536133 , -0.69966745],\n",
              "        [-3.3212297 , -0.54676735,  3.4102092 ],\n",
              "        [-1.4540988 ,  0.9252264 ,  0.5126343 ],\n",
              "        [-3.0304434 , -0.766072  ,  3.385806  ],\n",
              "        [ 3.5972488 , -0.13664693, -2.961875  ]], dtype=float32),\n",
              " array([[-1.7586374 ,  0.03978401,  1.4684551 ],\n",
              "        [ 3.2975962 , -0.20058894, -2.5268774 ],\n",
              "        [ 2.217543  ,  1.104509  , -2.6303263 ],\n",
              "        [-0.54407775,  1.6035669 , -0.8856486 ],\n",
              "        [-1.59412   ,  1.7401599 , -0.10716536],\n",
              "        [-2.2339604 ,  1.6067443 ,  0.6034738 ],\n",
              "        [ 1.8420199 ,  1.3279122 , -2.6054242 ],\n",
              "        [ 2.478474  ,  1.1795232 , -2.991289  ],\n",
              "        [ 1.2304119 ,  1.6266602 , -2.3241844 ],\n",
              "        [-3.3116486 , -0.30597106,  3.1706955 ],\n",
              "        [-0.16427566,  1.1593665 , -0.7212161 ],\n",
              "        [ 1.1212801 ,  0.924029  , -1.6102165 ],\n",
              "        [ 1.8306048 ,  1.077105  , -2.409433  ],\n",
              "        [-3.2761333 , -0.51707906,  3.3215015 ],\n",
              "        [ 2.053577  ,  1.12347   , -2.6032913 ],\n",
              "        [-0.91966414,  1.8195934 , -0.71808237]], dtype=float32),\n",
              " array([[ 1.5112482 ,  1.2583115 , -2.1936193 ],\n",
              "        [ 2.8767412 ,  0.81675917, -3.0330195 ],\n",
              "        [ 0.25710985,  1.7799996 , -1.7929964 ],\n",
              "        [ 2.2002432 ,  0.9680227 , -2.5022376 ],\n",
              "        [ 3.1857526 ,  0.47943723, -2.9996867 ],\n",
              "        [-3.1393983 , -0.45489767,  3.1874945 ],\n",
              "        [ 0.2273709 ,  1.2884688 , -1.1888117 ],\n",
              "        [ 2.8107722 ,  0.8046733 , -2.9637845 ],\n",
              "        [-1.0437709 ,  1.6597724 , -0.34330568],\n",
              "        [-2.6100295 ,  1.5355865 ,  0.9373716 ],\n",
              "        [ 1.1402403 ,  1.2457343 , -1.9100758 ],\n",
              "        [ 1.5271598 ,  1.222626  , -2.304949  ],\n",
              "        [ 0.6987052 ,  0.6396238 , -0.8644856 ],\n",
              "        [-0.42053148,  0.45988122,  0.16692692],\n",
              "        [ 0.02765609,  1.1127169 , -0.8226214 ],\n",
              "        [-3.3489687 , -0.5087391 ,  3.4125867 ]], dtype=float32),\n",
              " array([[-3.175726  ,  0.3215234 ,  2.4914587 ],\n",
              "        [ 0.65306526,  0.9335544 , -1.1956894 ],\n",
              "        [ 0.68137425,  1.8080837 , -2.010015  ],\n",
              "        [ 3.6481245 , -0.54892236, -2.7161183 ],\n",
              "        [ 0.80142546, -0.5445217 , -0.13047868],\n",
              "        [ 3.285861  , -1.2191474 , -1.8354149 ],\n",
              "        [ 1.0143172 ,  0.5763216 , -1.1301482 ],\n",
              "        [-3.4133625 , -0.41799614,  3.3561583 ],\n",
              "        [-3.1401336 ,  0.05765416,  2.6503758 ],\n",
              "        [-1.3361596 ,  2.0892801 , -0.6756599 ],\n",
              "        [ 3.4619954 , -1.0411744 , -2.0774844 ],\n",
              "        [ 1.9136323 ,  0.7723482 , -2.118913  ],\n",
              "        [-0.92390144,  1.2871045 , -0.09134147],\n",
              "        [-3.2949317 , -0.29922524,  3.1621554 ],\n",
              "        [-2.7884057 , -0.28289995,  2.8092947 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ]], dtype=float32),\n",
              " array([[ 2.8236845 ,  0.83085775, -2.9524121 ],\n",
              "        [ 0.31618556,  1.2068473 , -1.1579902 ],\n",
              "        [-2.489917  ,  1.3388065 ,  1.0873172 ],\n",
              "        [ 3.1342695 ,  0.4877569 , -2.9756749 ],\n",
              "        [-1.4421018 ,  0.8829001 ,  0.8087018 ],\n",
              "        [ 1.4276289 ,  1.1123991 , -2.0896058 ],\n",
              "        [ 1.30001   ,  1.274227  , -2.0503058 ],\n",
              "        [ 0.7755191 ,  1.5738021 , -1.9319043 ],\n",
              "        [-3.3326986 , -0.17828749,  3.1050184 ],\n",
              "        [-3.3498704 , -0.312102  ,  3.2484078 ],\n",
              "        [-3.3380053 , -0.43946788,  3.3353295 ],\n",
              "        [-0.098683  ,  1.5386387 , -1.057987  ],\n",
              "        [ 3.6108086 ,  0.06197652, -3.0746267 ],\n",
              "        [-0.44650373,  0.91443586, -0.40551466],\n",
              "        [-2.5509326 ,  0.23409548,  2.2087235 ],\n",
              "        [-2.9819973 ,  1.238724  ,  1.5838964 ]], dtype=float32),\n",
              " array([[ 1.7153217 ,  1.2926011 , -2.3680959 ],\n",
              "        [-0.62659425,  1.3447832 , -0.4896225 ],\n",
              "        [-0.4428604 ,  1.8998331 , -1.1924193 ],\n",
              "        [-0.49839267,  2.1041322 , -1.2971897 ],\n",
              "        [ 2.027401  ,  0.12323798, -1.7311169 ],\n",
              "        [-3.3447227 , -0.56927395,  3.4348507 ],\n",
              "        [-2.727033  , -0.921714  ,  3.2036688 ],\n",
              "        [-1.3637627 ,  1.3328425 ,  0.09544814],\n",
              "        [-0.07596559,  1.0946013 , -0.72983134],\n",
              "        [-3.08443   , -0.6238444 ,  3.2819138 ],\n",
              "        [-2.9752195 , -0.2647974 ,  2.9551275 ],\n",
              "        [ 1.7015787 ,  1.4893075 , -2.601279  ],\n",
              "        [-3.2486982 , -0.39484298,  3.1966448 ],\n",
              "        [-1.0246319 , -1.1696652 ,  2.0136662 ],\n",
              "        [-2.9399364 ,  0.85912776,  1.9666898 ],\n",
              "        [-0.20928316,  0.32073376,  0.00742418]], dtype=float32),\n",
              " array([[ 2.1976206 ,  0.837779  , -2.3892627 ],\n",
              "        [-3.3167746 , -0.1115149 ,  2.984375  ],\n",
              "        [ 3.3943505 , -0.882712  , -2.1229205 ],\n",
              "        [ 3.3300853 ,  0.37351516, -3.0740995 ],\n",
              "        [ 3.5062082 , -0.96973646, -2.2154503 ],\n",
              "        [-3.0098605 ,  0.46352175,  2.2329473 ],\n",
              "        [-2.7959912 , -0.58573645,  3.0074954 ],\n",
              "        [ 3.1957638 ,  0.64542496, -3.1085029 ],\n",
              "        [-3.0474231 , -0.80628204,  3.4185004 ],\n",
              "        [ 2.9166143 ,  0.45719057, -2.8026614 ],\n",
              "        [ 1.9532255 ,  0.9591443 , -2.2386084 ],\n",
              "        [ 1.7543715 ,  1.0991911 , -2.2922351 ],\n",
              "        [-1.9798294 ,  0.70769256,  1.1181971 ],\n",
              "        [-1.2848392 ,  1.7161211 , -0.34970155],\n",
              "        [ 3.472425  ,  0.01740896, -2.838448  ],\n",
              "        [-3.13022   ,  0.12140624,  2.6101034 ]], dtype=float32),\n",
              " array([[-0.37251234,  0.7036307 , -0.15224874],\n",
              "        [ 3.3029404 ,  0.22827667, -2.9690266 ],\n",
              "        [ 3.64741   , -0.34316754, -2.763938  ],\n",
              "        [-3.349569  , -0.5498156 ,  3.4259539 ],\n",
              "        [ 0.51600534,  1.0412956 , -1.075127  ],\n",
              "        [ 0.55264556, -0.5684871 ,  0.14022388],\n",
              "        [ 1.6813008 ,  1.196066  , -2.2543302 ],\n",
              "        [-3.1502292 , -0.54066265,  3.2025928 ],\n",
              "        [ 0.66501874,  1.8239154 , -1.9826174 ],\n",
              "        [-3.3612022 , -0.57582915,  3.411831  ],\n",
              "        [ 0.73060584,  1.8961568 , -2.0967658 ],\n",
              "        [-0.10477553,  1.3725976 , -0.86876494],\n",
              "        [ 2.22767   ,  0.7372928 , -2.4538345 ],\n",
              "        [-3.3134496 ,  0.19413641,  2.6563554 ],\n",
              "        [ 1.2359716 ,  1.5994629 , -2.4114954 ],\n",
              "        [-0.9130486 ,  2.079537  , -0.9923116 ]], dtype=float32),\n",
              " array([[ 0.6451757 ,  1.2243937 , -1.4445539 ],\n",
              "        [-3.246402  , -0.24487263,  3.0552897 ],\n",
              "        [-3.1187909 , -0.8334565 ,  3.474987  ],\n",
              "        [ 3.5025437 , -0.0770943 , -2.8578959 ],\n",
              "        [ 1.918753  ,  1.3760017 , -2.675551  ],\n",
              "        [ 1.4669474 ,  1.1896516 , -2.1021142 ],\n",
              "        [ 0.4784225 ,  1.7716118 , -1.8606935 ],\n",
              "        [ 1.9117595 ,  0.9686835 , -2.480436  ],\n",
              "        [-3.372024  , -0.4358324 ,  3.3047738 ],\n",
              "        [ 0.2836666 ,  1.6962903 , -1.3887097 ],\n",
              "        [-2.936714  ,  1.10208   ,  1.7981919 ],\n",
              "        [ 2.4985254 , -0.94400114, -1.3632066 ],\n",
              "        [-0.6617042 ,  1.1744298 , -0.30949983],\n",
              "        [-2.9744132 , -1.0029508 ,  3.4601116 ],\n",
              "        [-3.216416  , -0.69243145,  3.3950605 ],\n",
              "        [-3.1634595 ,  0.12811552,  2.655254  ]], dtype=float32),\n",
              " array([[-2.726821  ,  1.1959053 ,  1.3328637 ],\n",
              "        [ 3.1230807 , -0.04258864, -2.433372  ],\n",
              "        [-0.10849486,  1.8336047 , -1.2425953 ],\n",
              "        [-3.1845613 , -0.8410942 ,  3.4883137 ],\n",
              "        [-0.3071501 ,  1.7408186 , -1.1708158 ],\n",
              "        [ 2.5929298 ,  0.38623777, -2.4671707 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [-3.3931003 , -0.40257332,  3.315787  ],\n",
              "        [ 1.1486768 ,  1.1264658 , -1.7188534 ],\n",
              "        [ 2.135587  ,  0.42316172, -2.0660913 ],\n",
              "        [-3.4325817 , -0.43094856,  3.3308878 ],\n",
              "        [-1.0491841 ,  1.3319238 , -0.07234546],\n",
              "        [-3.1584446 ,  0.24557261,  2.4740791 ],\n",
              "        [-3.1879685 , -0.70450836,  3.4370189 ],\n",
              "        [ 1.4294866 ,  1.2887578 , -2.2253988 ],\n",
              "        [ 0.14768557, -0.09619112,  0.08507007]], dtype=float32),\n",
              " array([[-1.1050645 ,  1.8469785 , -0.55155575],\n",
              "        [-0.30818734,  1.7852622 , -1.1954644 ],\n",
              "        [-1.4908625 ,  1.836013  , -0.26947716],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [ 2.2705455 ,  1.1974472 , -2.8777394 ],\n",
              "        [-0.6859742 ,  1.9683877 , -1.0005395 ],\n",
              "        [-0.99292475,  0.3249109 ,  0.6784784 ],\n",
              "        [ 1.8666314 ,  1.0607797 , -2.3313832 ],\n",
              "        [-3.4020736 , -0.3445769 ,  3.28757   ],\n",
              "        [ 1.0949957 ,  1.3731207 , -1.9896294 ],\n",
              "        [-3.0650852 ,  0.859825  ,  1.9841965 ],\n",
              "        [-1.536456  ,  0.63361096,  1.0088906 ],\n",
              "        [ 1.1507295 ,  1.3567835 , -1.9123489 ],\n",
              "        [ 1.2445357 ,  1.5433763 , -2.1911852 ],\n",
              "        [ 1.6391176 ,  1.0293548 , -2.2350802 ],\n",
              "        [-3.4143398 ,  0.2174404 ,  2.7629657 ]], dtype=float32),\n",
              " array([[-0.26212338,  1.7421843 , -1.0981127 ],\n",
              "        [ 3.6657932 , -0.17254883, -2.941279  ],\n",
              "        [-3.3241885 , -0.3846796 ,  3.2728844 ],\n",
              "        [ 0.21789125, -0.02480499, -0.06542309],\n",
              "        [ 1.2643262 , -0.4805822 , -0.5819413 ],\n",
              "        [-3.1831706 , -0.633886  ,  3.3017712 ],\n",
              "        [ 0.6888402 ,  0.4477888 , -0.7220473 ],\n",
              "        [-3.5086186 ,  0.34462816,  2.7731133 ],\n",
              "        [-3.1763985 , -0.2753881 ,  3.067078  ],\n",
              "        [-3.187789  , -0.7169193 ,  3.4322047 ],\n",
              "        [ 2.2813456 ,  1.0351306 , -2.7469385 ],\n",
              "        [-2.9390023 ,  0.6828835 ,  2.0176568 ],\n",
              "        [ 2.4653213 ,  0.8550341 , -2.6546764 ],\n",
              "        [ 1.7542202 ,  0.435617  , -1.9014561 ],\n",
              "        [ 0.24915513,  1.2972205 , -1.1342402 ],\n",
              "        [-3.3481262 , -0.23542258,  3.1779659 ]], dtype=float32),\n",
              " array([[-2.2843945 , -0.23930725,  2.286643  ],\n",
              "        [-3.3780317 ,  0.0092234 ,  2.9209986 ],\n",
              "        [-3.1845582 , -0.15045407,  2.9343612 ],\n",
              "        [ 0.1829358 ,  1.9033524 , -1.6003352 ],\n",
              "        [-1.1550661 ,  1.1938916 ,  0.08581414],\n",
              "        [-0.468087  ,  1.661347  , -0.9244933 ],\n",
              "        [ 2.933936  ,  0.5873668 , -2.867765  ],\n",
              "        [-3.1000946 ,  0.88125765,  2.073485  ],\n",
              "        [-3.4087734 , -0.30819574,  3.253747  ],\n",
              "        [-2.0742896 ,  1.6830355 ,  0.34931803],\n",
              "        [ 2.903896  ,  0.33797345, -2.609119  ],\n",
              "        [-1.4782075 ,  0.6992692 ,  0.7889832 ],\n",
              "        [-3.2175882 ,  0.37092307,  2.4632607 ],\n",
              "        [-0.36932325,  1.4123749 , -0.8287782 ],\n",
              "        [ 1.9903623 ,  1.1827129 , -2.5761828 ],\n",
              "        [ 3.723233  , -0.35816824, -2.8321178 ]], dtype=float32),\n",
              " array([[ 1.6346174 ,  1.4423217 , -2.486226  ],\n",
              "        [-0.14623582,  1.7118539 , -1.242819  ],\n",
              "        [-3.2678292 , -0.64393985,  3.4621093 ],\n",
              "        [-3.1297936 , -0.68877655,  3.3242183 ],\n",
              "        [-3.2955635 , -0.6644026 ,  3.4568143 ],\n",
              "        [ 3.322165  ,  0.09303803, -2.7920504 ],\n",
              "        [-3.1482093 , -0.79757553,  3.4756298 ],\n",
              "        [-3.181917  ,  0.95559233,  1.9265883 ],\n",
              "        [ 0.8658692 ,  1.6412567 , -2.0739717 ],\n",
              "        [ 1.1121968 ,  1.53647   , -2.1591942 ],\n",
              "        [ 2.524853  ,  0.8772498 , -2.7287207 ],\n",
              "        [ 2.3803642 ,  0.37717083, -2.1701505 ],\n",
              "        [ 1.0275946 ,  1.6637937 , -2.2597122 ],\n",
              "        [-1.2710757 ,  1.9069201 , -0.5003266 ],\n",
              "        [ 3.567485  , -0.5240122 , -2.510711  ],\n",
              "        [ 0.48933822,  1.6363124 , -1.6039219 ]], dtype=float32),\n",
              " array([[-3.3056643 , -0.3441085 ,  3.2502356 ],\n",
              "        [ 0.26105937,  0.73187757, -0.7574042 ],\n",
              "        [-3.2598612 , -0.1855371 ,  3.0654154 ],\n",
              "        [ 2.0218935 ,  0.9607862 , -2.4279943 ],\n",
              "        [ 2.428418  ,  1.11773   , -2.8389504 ],\n",
              "        [ 2.2807271 ,  1.2394208 , -2.8794713 ],\n",
              "        [ 1.5914341 ,  1.5211873 , -2.5734625 ],\n",
              "        [ 0.26218823,  1.6845392 , -1.5337976 ],\n",
              "        [ 1.5907794 ,  1.6205899 , -2.5557792 ],\n",
              "        [-3.1043074 , -0.62789464,  3.260961  ],\n",
              "        [-3.3011086 , -0.60921204,  3.4527104 ],\n",
              "        [-3.417337  , -0.01460692,  2.9581823 ],\n",
              "        [ 1.3657116 ,  0.21454963, -1.3209983 ],\n",
              "        [ 3.2876928 ,  0.1483502 , -2.943591  ],\n",
              "        [-3.3196323 , -0.5281165 ,  3.3794222 ],\n",
              "        [ 0.17658885,  0.24464676, -0.16749543]], dtype=float32),\n",
              " array([[ 1.9808642 ,  1.0821638 , -2.4429774 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-2.4554036 ,  1.0236044 ,  1.430186  ],\n",
              "        [ 0.58620006,  0.6640766 , -0.8895407 ],\n",
              "        [ 2.519057  ,  1.0120622 , -2.8568778 ],\n",
              "        [ 2.0269256 ,  1.188237  , -2.6259537 ],\n",
              "        [-0.09585252,  1.50145   , -0.9805186 ],\n",
              "        [ 0.7563785 ,  1.6485412 , -1.7811568 ],\n",
              "        [-0.4240647 ,  0.3169083 ,  0.2298013 ],\n",
              "        [ 2.4340963 ,  0.4461455 , -2.3702986 ],\n",
              "        [ 2.5084789 ,  0.33552733, -2.3244076 ],\n",
              "        [-1.4920655 ,  1.9938258 , -0.31189385],\n",
              "        [-3.3857875 , -0.31019315,  3.2356374 ],\n",
              "        [-3.3501694 , -0.451021  ,  3.3394217 ],\n",
              "        [-3.2931697 , -0.6557765 ,  3.4578204 ],\n",
              "        [-1.1775719 ,  1.4825846 , -0.18319659]], dtype=float32),\n",
              " array([[ 2.8658926 ,  0.559549  , -2.7736917 ],\n",
              "        [ 0.8405605 ,  1.6347536 , -2.1415455 ],\n",
              "        [-0.44576257, -0.1847782 ,  0.65164655],\n",
              "        [-3.2912505 , -0.550852  ,  3.3803005 ],\n",
              "        [ 3.4516962 , -0.17532143, -2.7869868 ],\n",
              "        [ 1.4098214 ,  1.2424339 , -2.228375  ],\n",
              "        [ 2.6055434 ,  0.03656586, -2.0835252 ],\n",
              "        [-1.4878352 , -0.1666106 ,  1.6125474 ],\n",
              "        [ 0.90612125,  1.2183301 , -1.6275678 ],\n",
              "        [-3.202843  , -0.7761239 ,  3.4618554 ],\n",
              "        [-0.09890106, -0.07886302,  0.4345882 ],\n",
              "        [ 0.98302037,  1.0275029 , -1.4909132 ],\n",
              "        [-2.111715  ,  1.0679497 ,  0.83639   ],\n",
              "        [-3.1763303 ,  0.17440042,  2.5922155 ],\n",
              "        [ 3.409729  , -0.7874663 , -2.2249541 ],\n",
              "        [ 2.1965296 ,  1.2491642 , -2.7795122 ]], dtype=float32),\n",
              " array([[-3.307827  , -0.36798337,  3.2037516 ],\n",
              "        [ 1.9870877 ,  0.7086103 , -2.237419  ],\n",
              "        [ 2.7809632 ,  0.2591307 , -2.3929293 ],\n",
              "        [-3.3572066 , -0.50548375,  3.3781948 ],\n",
              "        [ 0.28319576,  1.7710649 , -1.7647963 ],\n",
              "        [ 1.960003  ,  1.2670912 , -2.5686417 ],\n",
              "        [-2.891456  ,  0.5725224 ,  2.1926632 ],\n",
              "        [-3.2873204 ,  0.5647865 ,  2.4255657 ],\n",
              "        [-1.5052202 ,  1.8017167 , -0.01590134],\n",
              "        [-1.4679738 ,  1.6805551 , -0.07809035],\n",
              "        [ 1.8854884 ,  1.2606511 , -2.5311239 ],\n",
              "        [-2.8763297 , -0.14836146,  2.6997242 ],\n",
              "        [ 0.9996156 ,  1.0212445 , -1.4522456 ],\n",
              "        [-3.058875  ,  0.19387017,  2.533454  ],\n",
              "        [-3.398987  , -0.5321159 ,  3.384397  ],\n",
              "        [ 1.2732221 ,  1.2242018 , -2.047798  ]], dtype=float32),\n",
              " array([[ 3.6139553 , -0.25753552, -2.8673668 ],\n",
              "        [-1.3514498 ,  1.7831482 , -0.33210412],\n",
              "        [ 2.4398773 ,  0.96289366, -2.7462468 ],\n",
              "        [ 3.633448  , -0.05331096, -3.0017881 ],\n",
              "        [-2.7099817 ,  0.01524675,  2.3503323 ],\n",
              "        [-0.23051225,  1.6854312 , -1.0649631 ],\n",
              "        [ 2.240732  ,  0.7672974 , -2.565539  ],\n",
              "        [-2.7099917 ,  0.20833558,  2.264329  ],\n",
              "        [-0.15030397,  1.4759278 , -0.8905489 ],\n",
              "        [ 2.8454013 ,  0.921886  , -3.118322  ],\n",
              "        [-3.284441  , -0.377062  ,  3.242116  ],\n",
              "        [-3.1962035 , -0.727948  ,  3.4473743 ],\n",
              "        [-1.7942873 ,  0.17935346,  1.4624155 ],\n",
              "        [ 1.4183434 ,  1.6253057 , -2.4718752 ],\n",
              "        [-3.0070543 , -0.30020568,  2.8882866 ],\n",
              "        [ 2.5044901 ,  0.59417045, -2.488142  ]], dtype=float32),\n",
              " array([[-2.9411097 , -0.8236809 ,  3.3712387 ],\n",
              "        [-2.9984405 , -0.6831591 ,  3.1774054 ],\n",
              "        [-3.5032575 ,  0.09011152,  3.0656693 ],\n",
              "        [ 0.52298063,  1.3988985 , -1.5901561 ],\n",
              "        [ 1.2954341 ,  1.7956556 , -2.534481  ],\n",
              "        [ 1.8853161 ,  1.0875098 , -2.5092213 ],\n",
              "        [-2.056165  ,  1.6444445 ,  0.37778634],\n",
              "        [ 2.6050193 ,  0.4388196 , -2.4270506 ],\n",
              "        [ 1.8508275 ,  1.4200414 , -2.7138486 ],\n",
              "        [-2.83752   , -0.6986561 ,  3.0963132 ],\n",
              "        [ 0.42434695,  1.5692443 , -1.4633412 ],\n",
              "        [-2.0252044 ,  1.4684446 ,  0.37331253],\n",
              "        [-3.0302057 , -0.6296313 ,  3.1832652 ],\n",
              "        [-1.003173  ,  1.3021587 ,  0.01222103],\n",
              "        [-3.3544233 ,  0.14432879,  2.7990794 ],\n",
              "        [ 1.9110826 ,  0.73263526, -2.132216  ]], dtype=float32),\n",
              " array([[-2.3774836 , -0.00801757,  2.122996  ],\n",
              "        [-1.691722  ,  2.0189185 , -0.2357813 ],\n",
              "        [ 2.6908283 ,  0.6849956 , -2.7652621 ],\n",
              "        [-1.825239  ,  0.74831927,  0.9431063 ],\n",
              "        [-3.0905466 , -0.62584174,  3.248937  ],\n",
              "        [ 2.4733434 ,  0.9043139 , -2.7620246 ],\n",
              "        [ 0.8207404 ,  1.3554437 , -1.7318374 ],\n",
              "        [ 3.3471763 ,  0.1954036 , -2.9046502 ],\n",
              "        [-3.1781495 , -0.568465  ,  3.3071795 ],\n",
              "        [ 3.4174068 ,  0.115815  , -2.9056864 ],\n",
              "        [-1.7721884 ,  1.9676712 , -0.1180597 ],\n",
              "        [-3.2638566 , -0.71856856,  3.449236  ],\n",
              "        [ 2.6138253 ,  0.8993261 , -2.8286266 ],\n",
              "        [-2.3043098 ,  1.3939078 ,  0.8661312 ],\n",
              "        [-3.3293355 , -0.07838965,  3.0310154 ],\n",
              "        [-3.3499844 , -0.54011726,  3.3798509 ]], dtype=float32),\n",
              " array([[ 1.203822  ,  1.2584876 , -1.9133589 ],\n",
              "        [-0.9024682 ,  1.2466333 , -0.14612967],\n",
              "        [-3.434469  , -0.42893043,  3.3486476 ],\n",
              "        [ 0.568326  ,  1.481994  , -1.6599026 ],\n",
              "        [ 0.20368195,  1.2414459 , -1.1427314 ],\n",
              "        [-2.995659  , -0.6335978 ,  3.2820055 ],\n",
              "        [-3.1565535 , -0.6631488 ,  3.3696227 ],\n",
              "        [-1.5878404 ,  1.6335584 , -0.06523495],\n",
              "        [-0.8089611 ,  1.2969395 , -0.29663104],\n",
              "        [ 2.0020568 ,  1.1250552 , -2.5259814 ],\n",
              "        [-2.03255   ,  1.7810707 ,  0.35285956],\n",
              "        [ 1.6306219 ,  0.82766676, -1.8650181 ],\n",
              "        [-0.28292486,  1.4938768 , -0.8281649 ],\n",
              "        [ 2.3528168 ,  0.40101704, -2.20049   ],\n",
              "        [-0.75298494,  0.19835117,  0.48820177],\n",
              "        [-0.03360825,  2.046186  , -1.6716142 ]], dtype=float32),\n",
              " array([[ 2.7054899 ,  0.66428405, -2.7051625 ],\n",
              "        [-3.2959304 , -0.5520792 ,  3.395482  ],\n",
              "        [-2.6659749 ,  1.0131955 ,  1.4998832 ],\n",
              "        [-1.483605  ,  1.814385  , -0.26540926],\n",
              "        [ 1.0141461 ,  1.6130334 , -2.095634  ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 2.461585  ,  0.865791  , -2.6658754 ],\n",
              "        [ 2.8461292 ,  0.5377693 , -2.9055686 ],\n",
              "        [ 0.83466136,  1.1403675 , -1.5545015 ],\n",
              "        [ 3.0428376 ,  0.33540353, -2.8567395 ],\n",
              "        [-3.349849  , -0.45603603,  3.3750243 ],\n",
              "        [-2.8723834 , -0.77113616,  3.2883327 ],\n",
              "        [ 1.0733163 ,  1.1211425 , -1.7026433 ],\n",
              "        [-2.2811642 , -0.92249763,  2.8791351 ],\n",
              "        [ 2.5376732 ,  1.0636914 , -2.9118984 ],\n",
              "        [ 3.1588428 ,  0.2932286 , -2.9112334 ]], dtype=float32),\n",
              " array([[ 3.4623322 ,  0.05592197, -2.8866599 ],\n",
              "        [ 2.6191113 ,  1.0950658 , -3.0020785 ],\n",
              "        [-1.3738488 ,  1.9299827 , -0.35754836],\n",
              "        [ 1.2866678 , -0.12389571, -0.96243584],\n",
              "        [-0.5421554 ,  1.4828061 , -0.6768072 ],\n",
              "        [ 2.5248206 ,  0.53585804, -2.4577832 ],\n",
              "        [-1.4525418 ,  0.05405253,  1.2266617 ],\n",
              "        [ 0.07431951,  2.090591  , -1.7452132 ],\n",
              "        [-1.9229156 ,  1.8709172 ,  0.06982569],\n",
              "        [ 0.41105494,  1.428732  , -1.3335901 ],\n",
              "        [-1.6209179 ,  1.6096797 ,  0.21953201],\n",
              "        [-3.1881392 , -0.75894785,  3.4383898 ],\n",
              "        [ 0.7255634 , -0.87798536,  0.19057374],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-1.3816811 ,  1.2312267 ,  0.35413927],\n",
              "        [ 1.5697232 ,  1.4591736 , -2.4120016 ]], dtype=float32),\n",
              " array([[-3.4303424 , -0.3536964 ,  3.3054104 ],\n",
              "        [ 2.1918645 , -0.01793231, -1.7546935 ],\n",
              "        [-1.1131846 ,  1.8085711 , -0.5574347 ],\n",
              "        [-2.9401002 , -0.39526665,  2.9049547 ],\n",
              "        [-2.2142031 ,  1.4675643 ,  0.72000676],\n",
              "        [ 1.7443467 ,  0.59160984, -1.7105284 ],\n",
              "        [ 3.5226378 , -1.0445207 , -2.0682685 ],\n",
              "        [-3.1023755 , -0.9090901 ,  3.465703  ],\n",
              "        [-3.2525272 ,  0.60836554,  2.3152084 ],\n",
              "        [-3.2850797 , -0.5912039 ,  3.413906  ],\n",
              "        [ 0.4432578 ,  1.6630753 , -1.545892  ],\n",
              "        [-0.7692382 ,  2.1684723 , -1.1260936 ],\n",
              "        [ 1.3951197 ,  1.144132  , -2.0746717 ],\n",
              "        [-3.1856267 , -0.75703955,  3.4624786 ],\n",
              "        [ 3.4999764 , -0.7571416 , -2.4056194 ],\n",
              "        [ 3.466542  ,  0.12292607, -2.9736636 ]], dtype=float32),\n",
              " array([[ 3.5503147 , -0.63735   , -2.4718485 ],\n",
              "        [-3.4527547 , -0.31728896,  3.2590728 ],\n",
              "        [-3.1696043 , -0.78305805,  3.440903  ],\n",
              "        [ 2.980922  ,  0.45064822, -2.758763  ],\n",
              "        [-0.8562214 , -1.0082108 ,  1.7450451 ],\n",
              "        [ 1.0624065 ,  0.48866776, -1.1686639 ],\n",
              "        [ 1.2941004 ,  0.988577  , -1.7719374 ],\n",
              "        [ 2.1639533 ,  1.0960013 , -2.6517537 ],\n",
              "        [ 1.884504  ,  0.8261743 , -2.123541  ],\n",
              "        [-3.3309174 , -0.56057966,  3.4189396 ],\n",
              "        [ 0.5742325 ,  0.76436627, -1.0545106 ],\n",
              "        [ 0.28485835,  1.4537336 , -1.291225  ],\n",
              "        [ 0.15601131,  1.5822788 , -1.3643928 ],\n",
              "        [ 2.1692376 ,  0.4884566 , -2.1787426 ],\n",
              "        [-3.0309315 ,  0.37002942,  2.3471682 ],\n",
              "        [ 3.5930846 , -0.31230173, -2.8256035 ]], dtype=float32),\n",
              " array([[-2.2837017 , -0.31488845,  2.2616324 ],\n",
              "        [ 3.5611246 , -0.41975173, -2.6553116 ],\n",
              "        [-1.9262447 ,  0.15566838,  1.6527696 ],\n",
              "        [ 3.074508  , -0.35365233, -2.2917418 ],\n",
              "        [-2.3816836 ,  1.3924145 ,  0.86481667],\n",
              "        [ 2.8004725 ,  0.6968937 , -2.7960935 ],\n",
              "        [ 1.207946  ,  1.5769335 , -2.2630298 ],\n",
              "        [-3.3703806 ,  0.51165116,  2.524189  ],\n",
              "        [-1.1410635 ,  1.10172   ,  0.17658943],\n",
              "        [-2.4370198 ,  1.6696899 ,  0.6934657 ],\n",
              "        [ 0.4306865 ,  1.1671039 , -1.2315464 ],\n",
              "        [-2.878083  ,  1.0286824 ,  1.7848508 ],\n",
              "        [ 2.6620386 , -0.06245367, -2.0951781 ],\n",
              "        [ 1.659878  ,  0.9388683 , -2.092571  ],\n",
              "        [ 0.9909783 ,  1.4985567 , -2.0274982 ],\n",
              "        [ 3.2266676 , -0.16463003, -2.6074853 ]], dtype=float32),\n",
              " array([[ 0.5476447 ,  1.3864602 , -1.5988145 ],\n",
              "        [-2.6173797 , -0.7650662 ,  3.070925  ],\n",
              "        [ 2.8043783 ,  0.19799852, -2.488216  ],\n",
              "        [-0.7595906 ,  0.95035833,  0.09299046],\n",
              "        [ 2.9556541 ,  0.27199423, -2.5121217 ],\n",
              "        [-3.4375908 , -0.06437404,  3.0786078 ],\n",
              "        [ 2.921849  ,  0.88647544, -3.1436505 ],\n",
              "        [-0.16011164,  1.5157672 , -1.0812566 ],\n",
              "        [-3.3428938 , -0.31359482,  3.20742   ],\n",
              "        [-0.23160848,  1.548045  , -1.1197796 ],\n",
              "        [-2.8949978 , -0.72729707,  3.2144203 ],\n",
              "        [-2.3856637 ,  0.4532671 ,  1.4257989 ],\n",
              "        [-3.2598612 , -0.1855371 ,  3.0654154 ],\n",
              "        [-0.7509712 ,  1.1806926 , -0.37274674],\n",
              "        [-2.8751287 ,  1.1671897 ,  1.476335  ],\n",
              "        [ 2.0629845 ,  1.2226086 , -2.6073647 ]], dtype=float32),\n",
              " array([[-3.3801925 ,  0.46507362,  2.5841632 ],\n",
              "        [ 3.69042   , -0.6886113 , -2.519457  ],\n",
              "        [-3.2458596 ,  0.21585537,  2.6408105 ],\n",
              "        [-1.010268  ,  1.7249885 , -0.4564932 ],\n",
              "        [ 1.7062165 ,  0.27368382, -1.642972  ],\n",
              "        [-3.4137647 , -0.4466869 ,  3.3613663 ],\n",
              "        [-3.126572  ,  0.53313875,  2.2129412 ],\n",
              "        [-0.1451731 ,  1.7291944 , -1.3755089 ],\n",
              "        [-2.4816926 ,  1.647323  ,  0.75775933],\n",
              "        [ 3.612873  , -0.30320573, -2.7882042 ],\n",
              "        [ 3.5689452 ,  0.01936406, -2.987122  ],\n",
              "        [ 2.0348313 , -0.33277687, -1.3151704 ],\n",
              "        [ 1.3318145 ,  1.5618953 , -2.3166935 ],\n",
              "        [-3.3234909 , -0.41799515,  3.2824988 ],\n",
              "        [ 2.0400584 ,  1.3247877 , -2.7844806 ],\n",
              "        [ 3.5982935 ,  0.09938028, -3.065175  ]], dtype=float32),\n",
              " array([[-2.828147  ,  0.65453804,  1.8172605 ],\n",
              "        [-3.270909  ,  0.32530734,  2.57162   ],\n",
              "        [ 1.6459788 ,  1.4013187 , -2.5204601 ],\n",
              "        [ 0.3939941 , -0.745376  ,  0.4072904 ],\n",
              "        [ 2.5609467 ,  0.7958611 , -2.6741211 ],\n",
              "        [ 1.4352397 ,  1.3878039 , -2.2872999 ],\n",
              "        [ 3.2921288 , -0.9503813 , -2.0585907 ],\n",
              "        [-2.943712  , -0.46536103,  2.9853015 ],\n",
              "        [-3.3795626 , -0.43382916,  3.354028  ],\n",
              "        [-1.6535915 ,  1.7571217 , -0.12117356],\n",
              "        [ 2.75166   ,  0.77772737, -2.8942688 ],\n",
              "        [ 1.9756039 ,  1.0997934 , -2.4984953 ],\n",
              "        [-3.4242928 , -0.11465981,  3.1035104 ],\n",
              "        [-3.3619876 , -0.38525194,  3.2935014 ],\n",
              "        [-3.140128  , -0.33321068,  3.1036422 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ]], dtype=float32),\n",
              " array([[ 2.0126164 ,  1.3478135 , -2.7725165 ],\n",
              "        [ 2.4357927 ,  0.9682518 , -2.707056  ],\n",
              "        [-3.2916765 , -0.52100885,  3.2957282 ],\n",
              "        [ 3.579869  , -0.18494228, -2.7772853 ],\n",
              "        [ 2.480309  ,  0.96841174, -2.8010936 ],\n",
              "        [-1.6107527 ,  1.2479934 ,  0.48234427],\n",
              "        [ 1.4402198 ,  1.4555583 , -2.389105  ],\n",
              "        [-0.9271715 ,  1.4629797 , -0.35653475],\n",
              "        [ 1.040676  ,  1.4684855 , -2.063558  ],\n",
              "        [ 0.7970519 ,  0.99857867, -1.5568402 ],\n",
              "        [ 3.1009216 ,  0.2907857 , -2.7790756 ],\n",
              "        [ 3.1693041 , -0.09527304, -2.5739942 ],\n",
              "        [ 3.614889  , -0.08117656, -2.9580486 ],\n",
              "        [-1.1252714 ,  2.1047392 , -0.7790236 ],\n",
              "        [-1.1496006 ,  2.0286913 , -0.6994806 ],\n",
              "        [ 3.6022956 ,  0.05181021, -3.0790486 ]], dtype=float32),\n",
              " array([[ 3.6122668 , -0.45909443, -2.6814184 ],\n",
              "        [ 0.75331825,  1.6777453 , -1.9354749 ],\n",
              "        [-3.3330066 , -0.19544007,  3.110196  ],\n",
              "        [-2.96843   , -0.31972566,  2.9319763 ],\n",
              "        [-1.7124254 ,  1.313843  ,  0.5055934 ],\n",
              "        [-1.0219439 ,  1.2256585 ,  0.07684416],\n",
              "        [-1.5364841 ,  2.0783052 , -0.40409404],\n",
              "        [ 3.211972  ,  0.27663022, -2.8498986 ],\n",
              "        [-0.7158045 ,  1.5327529 , -0.54750013],\n",
              "        [-1.8428726 ,  1.6932384 ,  0.18029192],\n",
              "        [-1.9383122 ,  1.6868142 ,  0.19517389],\n",
              "        [-2.1731446 ,  0.8071674 ,  1.3804586 ],\n",
              "        [-2.897033  ,  0.712018  ,  1.8311793 ],\n",
              "        [ 1.4971733 ,  1.362594  , -2.2932222 ],\n",
              "        [ 2.1552927 ,  1.3730134 , -2.9147353 ],\n",
              "        [-3.3022566 , -0.57152104,  3.4186869 ]], dtype=float32),\n",
              " array([[ 0.45932922,  1.3773806 , -1.4460411 ],\n",
              "        [ 3.4463818 , -0.45361117, -2.5776148 ],\n",
              "        [ 1.0690193 ,  1.5430344 , -2.115102  ],\n",
              "        [ 3.2875612 , -0.07584123, -2.702146  ],\n",
              "        [-1.7550011 ,  1.4207038 ,  0.43356803],\n",
              "        [-3.1051328 , -0.59407413,  3.2961907 ],\n",
              "        [ 3.4463818 , -0.45361117, -2.5776148 ],\n",
              "        [ 2.6909645 ,  0.30788836, -2.4955368 ],\n",
              "        [ 3.4948084 ,  0.17422968, -3.0807953 ],\n",
              "        [ 2.7218678 ,  0.696308  , -2.709607  ],\n",
              "        [ 0.25678203,  1.6440558 , -1.3815453 ],\n",
              "        [ 3.474365  , -1.1106905 , -2.0140648 ],\n",
              "        [-2.6594303 ,  0.566423  ,  1.9949064 ],\n",
              "        [ 1.1894459 ,  1.3505663 , -2.0143273 ],\n",
              "        [-3.2689216 , -0.66553855,  3.4522023 ],\n",
              "        [-2.0945637 ,  1.2522329 ,  0.5860554 ]], dtype=float32),\n",
              " array([[ 1.5299531 ,  1.1997346 , -2.1417642 ],\n",
              "        [-1.5277568 , -0.10858857,  1.5350473 ],\n",
              "        [ 0.90701836,  1.473296  , -1.904516  ],\n",
              "        [ 3.0410724 ,  0.16502187, -2.5772166 ],\n",
              "        [ 0.98643506,  1.7223603 , -2.208494  ],\n",
              "        [ 1.95902   ,  1.4108092 , -2.708066  ],\n",
              "        [-3.2643807 , -0.07865729,  2.9310598 ],\n",
              "        [-2.930806  , -0.08410216,  2.618737  ],\n",
              "        [ 2.1871817 ,  1.1908664 , -2.7675633 ],\n",
              "        [-2.0983198 ,  1.3217071 ,  0.7966512 ],\n",
              "        [-2.9052782 ,  1.1680372 ,  1.5524304 ],\n",
              "        [ 2.0082788 ,  1.3735036 , -2.7622743 ],\n",
              "        [-3.038798  , -0.45904413,  3.1261024 ],\n",
              "        [-3.0867271 , -0.58433956,  3.2452016 ],\n",
              "        [ 1.2096757 ,  0.999202  , -1.8601508 ],\n",
              "        [-2.7486136 ,  0.69851583,  1.8601221 ]], dtype=float32),\n",
              " array([[ 1.8659321 ,  1.1442307 , -2.4187732 ],\n",
              "        [ 3.182874  , -1.166619  , -1.835046  ],\n",
              "        [-2.1735919 ,  1.4147342 ,  0.7849741 ],\n",
              "        [-3.1313865 , -0.31074467,  3.0344462 ],\n",
              "        [ 1.5145158 ,  0.7083161 , -1.7139393 ],\n",
              "        [ 0.27183586,  0.37577108, -0.44687587],\n",
              "        [ 2.5164135 ,  1.1071995 , -2.9705763 ],\n",
              "        [ 2.1845226 ,  0.9635304 , -2.576007  ],\n",
              "        [-0.5736944 ,  2.0332875 , -1.2453762 ],\n",
              "        [ 0.10393822,  0.32643813, -0.19157173],\n",
              "        [-3.1928155 , -0.6716968 ,  3.443938  ],\n",
              "        [-0.4518713 ,  1.2005049 , -0.46520954],\n",
              "        [ 1.8113443 ,  1.6998094 , -2.937798  ],\n",
              "        [ 0.36070418,  1.3328235 , -1.2983507 ],\n",
              "        [ 0.14380798,  0.5714783 , -0.38933188],\n",
              "        [ 0.07749759,  1.4394847 , -1.0240617 ]], dtype=float32),\n",
              " array([[ 2.3139515 ,  0.6990967 , -2.3720548 ],\n",
              "        [ 2.09039   ,  0.77771366, -2.336638  ],\n",
              "        [-2.3696053 ,  1.7215554 ,  0.56012535],\n",
              "        [-3.10194   , -0.8608503 ,  3.4845586 ],\n",
              "        [-0.8731605 ,  2.1093128 , -0.87644595],\n",
              "        [ 3.09538   ,  0.36151764, -2.842408  ],\n",
              "        [ 3.15284   , -0.4208398 , -2.3132782 ],\n",
              "        [ 2.1897626 ,  1.0075811 , -2.5530405 ],\n",
              "        [ 0.7505364 ,  0.91846395, -1.2723562 ],\n",
              "        [-2.6570656 ,  0.8663689 ,  1.5858818 ],\n",
              "        [-3.2040327 ,  0.53422177,  2.350164  ],\n",
              "        [-2.0030468 , -0.25607607,  2.0320568 ],\n",
              "        [-3.2204978 , -0.12231607,  2.8170757 ],\n",
              "        [ 0.55494654,  1.8523251 , -1.9491966 ],\n",
              "        [ 1.3585554 ,  1.2633218 , -2.1356163 ],\n",
              "        [ 1.4186057 ,  1.1059967 , -2.068228  ]], dtype=float32),\n",
              " array([[-3.3377469 , -0.3676138 ,  3.2084718 ],\n",
              "        [ 2.1856601 ,  1.1350447 , -2.6348445 ],\n",
              "        [-3.1517568 ,  0.3201776 ,  2.4982922 ],\n",
              "        [ 0.26253685,  1.5406095 , -1.4542924 ],\n",
              "        [-0.86627924,  0.9249619 ,  0.06415973],\n",
              "        [-3.3084013 , -0.52350336,  3.3674457 ],\n",
              "        [-3.0365298 , -0.9411201 ,  3.4785802 ],\n",
              "        [ 1.3333108 ,  1.7397624 , -2.5996878 ],\n",
              "        [ 1.0001186 ,  1.6470228 , -2.1102567 ],\n",
              "        [ 3.3383915 , -0.5801956 , -2.197927  ],\n",
              "        [ 2.0941432 ,  0.75210774, -2.361206  ],\n",
              "        [ 1.1957175 ,  1.3818947 , -1.9839753 ],\n",
              "        [ 3.57214   , -0.3022437 , -2.8310542 ],\n",
              "        [ 2.447304  ,  0.73633516, -2.602942  ],\n",
              "        [-0.6898615 ,  0.48976636,  0.27319393],\n",
              "        [ 2.1964815 ,  1.1076342 , -2.6601079 ]], dtype=float32),\n",
              " array([[-3.0159142 , -0.02255747,  2.7798076 ],\n",
              "        [ 2.1521556 ,  0.19792502, -1.8797793 ],\n",
              "        [ 2.7343938 ,  0.24175864, -2.373812  ],\n",
              "        [ 2.2732358 ,  0.75255495, -2.4025345 ],\n",
              "        [ 0.40746617,  1.5658034 , -1.4938698 ],\n",
              "        [ 0.36797097,  1.1952268 , -1.1681771 ],\n",
              "        [ 3.182874  , -1.166619  , -1.835046  ],\n",
              "        [ 2.9777572 ,  0.48692417, -2.8413115 ],\n",
              "        [-3.047623  , -0.61997044,  3.189446  ],\n",
              "        [-3.1835256 , -0.7807311 ,  3.4733844 ],\n",
              "        [-1.4537505 ,  1.2863234 ,  0.33641708],\n",
              "        [ 0.43401787, -0.13232452, -0.09010952],\n",
              "        [-3.0533946 , -0.61583483,  3.258255  ],\n",
              "        [-3.258644  ,  0.88384056,  2.0915782 ],\n",
              "        [ 1.069138  ,  1.4334658 , -1.9100611 ],\n",
              "        [ 0.1395825 ,  1.3694733 , -1.3170428 ]], dtype=float32),\n",
              " array([[ 1.2106515 ,  1.5662094 , -2.1308284 ],\n",
              "        [ 1.4248058 ,  1.22014   , -2.0779076 ],\n",
              "        [-3.1247084 , -0.5216032 ,  3.278059  ],\n",
              "        [ 2.7020023 ,  0.7920464 , -2.8001513 ],\n",
              "        [ 1.3705953 ,  1.3371202 , -2.1716442 ],\n",
              "        [-3.1607757 , -0.62885916,  3.3398328 ],\n",
              "        [-2.904487  ,  0.55681884,  2.0671942 ],\n",
              "        [-3.3818696 , -0.00533041,  3.0133166 ],\n",
              "        [ 3.2688072 ,  0.42164537, -3.0430498 ],\n",
              "        [-1.1961553 ,  1.9609653 , -0.66199815],\n",
              "        [-3.2114458 , -0.20092824,  3.017407  ],\n",
              "        [-1.0550116 ,  1.6570553 , -0.47795624],\n",
              "        [ 1.4491495 ,  1.5087746 , -2.372179  ],\n",
              "        [ 1.9707997 , -0.4931779 , -1.1390848 ],\n",
              "        [-2.741059  ,  1.0159256 ,  1.5155038 ],\n",
              "        [-2.339661  ,  1.6255419 ,  0.7840107 ]], dtype=float32),\n",
              " array([[ 1.6190671 ,  0.79114604, -1.7984421 ],\n",
              "        [ 3.071325  ,  0.3201206 , -2.7165904 ],\n",
              "        [-3.152644  , -0.8038887 ,  3.44535   ],\n",
              "        [-0.9728666 ,  2.1840591 , -0.9002315 ],\n",
              "        [ 1.4011385 ,  1.151786  , -1.9143152 ],\n",
              "        [ 0.88747174,  0.56025326, -1.0384595 ],\n",
              "        [-0.25456473,  1.6635083 , -1.1261371 ],\n",
              "        [-1.3952366 , -1.2644395 ,  2.4295025 ],\n",
              "        [ 1.4389814 ,  1.5429198 , -2.4554195 ],\n",
              "        [-3.0202272 ,  0.59123504,  2.1472695 ],\n",
              "        [-3.4484842 , -0.28882954,  3.2645223 ],\n",
              "        [-3.3139398 , -0.6219307 ,  3.43213   ],\n",
              "        [ 2.581033  ,  0.63615674, -2.6233141 ],\n",
              "        [-0.70790166,  2.0209255 , -0.89777344],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [-0.5076175 ,  1.2108921 , -0.7080014 ]], dtype=float32),\n",
              " array([[-3.4441006 , -0.21489254,  3.2304559 ],\n",
              "        [-0.19809191,  0.7398151 , -0.5414906 ],\n",
              "        [-2.9031174 ,  0.61148673,  2.0296302 ],\n",
              "        [-2.9361167 , -0.72401637,  3.3002918 ],\n",
              "        [-3.0450664 , -0.92398846,  3.477001  ],\n",
              "        [-3.4521601 , -0.19582933,  3.1983073 ],\n",
              "        [-0.67536306,  1.7813492 , -0.9164182 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [ 1.5828071 ,  1.0509123 , -2.0095148 ],\n",
              "        [ 3.182874  , -1.166619  , -1.835046  ],\n",
              "        [-2.0806313 ,  1.1902224 ,  0.9517679 ],\n",
              "        [-1.4089252 ,  1.5410395 , -0.08304105],\n",
              "        [ 3.065997  ,  0.57262945, -2.9632664 ],\n",
              "        [ 0.46021   ,  1.1818768 , -1.2306173 ],\n",
              "        [ 1.520851  ,  1.5078853 , -2.469283  ],\n",
              "        [-3.297904  , -0.5836952 ,  3.4247127 ]], dtype=float32),\n",
              " array([[-1.7625245 ,  1.0384728 ,  0.82881546],\n",
              "        [-2.3484347 ,  1.5872694 ,  0.66709095],\n",
              "        [-2.360622  ,  1.3326615 ,  0.92980504],\n",
              "        [ 0.5183912 ,  1.2224528 , -1.2794709 ],\n",
              "        [-1.3819492 ,  1.5445085 , -0.12836576],\n",
              "        [-3.3046691 , -0.3439099 ,  3.253199  ],\n",
              "        [-3.344867  , -0.50115633,  3.3893404 ],\n",
              "        [-0.71597564,  1.8740995 , -0.855091  ],\n",
              "        [ 0.07920898,  1.394298  , -1.282495  ],\n",
              "        [ 1.6187176 ,  1.3766063 , -2.4658995 ],\n",
              "        [-3.1517572 , -0.8437885 ,  3.4950602 ],\n",
              "        [-2.8008418 ,  1.2803235 ,  1.3587412 ],\n",
              "        [-2.2913268 ,  1.2279278 ,  1.0103648 ],\n",
              "        [ 1.1685603 ,  1.1292583 , -1.941487  ],\n",
              "        [-1.6736989 ,  2.012241  , -0.23493929],\n",
              "        [-1.3849138 ,  1.9223853 , -0.38732743]], dtype=float32),\n",
              " array([[ 2.2197955 ,  0.97643125, -2.552904  ],\n",
              "        [-1.5654637 ,  2.0279746 , -0.3875826 ],\n",
              "        [-2.5917394 ,  1.3989124 ,  1.068751  ],\n",
              "        [-1.7077392 ,  0.6341604 ,  0.92230225],\n",
              "        [ 2.220727  ,  0.70688057, -2.37634   ],\n",
              "        [ 1.7503816 ,  1.1215589 , -2.339038  ],\n",
              "        [ 0.84111416,  1.1894058 , -1.4439545 ],\n",
              "        [ 1.5560073 ,  1.3594815 , -2.365732  ],\n",
              "        [ 1.4249214 ,  1.1911892 , -2.111278  ],\n",
              "        [ 3.1971924 ,  0.2689049 , -2.9368644 ],\n",
              "        [ 1.0586501 ,  1.4710935 , -1.9582832 ],\n",
              "        [ 2.7985842 ,  0.46433115, -2.654755  ],\n",
              "        [ 0.79207563,  1.3542241 , -1.7794884 ],\n",
              "        [ 1.4239322 ,  1.4774032 , -2.354403  ],\n",
              "        [ 2.6604903 ,  0.75598955, -2.8103728 ],\n",
              "        [ 1.4140826 ,  1.1929982 , -2.0811574 ]], dtype=float32),\n",
              " array([[-3.1116602 , -0.763708  ,  3.3854141 ],\n",
              "        [ 1.19419   ,  0.8051839 , -1.487831  ],\n",
              "        [ 2.7911036 ,  0.91179097, -2.96844   ],\n",
              "        [ 2.8975012 ,  0.83180547, -3.0137658 ],\n",
              "        [ 3.3178236 , -0.7658325 , -2.2713614 ],\n",
              "        [ 1.1585603 ,  0.48563454, -1.2525554 ],\n",
              "        [-2.6407557 , -0.24978557,  2.6051579 ],\n",
              "        [-2.7248933 ,  0.92099375,  1.5670173 ],\n",
              "        [-3.4345064 , -0.4340573 ,  3.3372872 ],\n",
              "        [-3.4864705 ,  0.09111954,  2.9746454 ],\n",
              "        [-3.2646525 , -0.40277562,  3.2576404 ],\n",
              "        [-2.860231  ,  0.5857584 ,  2.0572069 ],\n",
              "        [ 2.2542884 ,  1.3714358 , -2.9543226 ],\n",
              "        [-3.0735624 , -0.8417847 ,  3.4189522 ],\n",
              "        [ 0.9731587 ,  1.3773488 , -2.0810409 ],\n",
              "        [ 1.6628844 ,  1.1032434 , -2.1842086 ]], dtype=float32),\n",
              " array([[ 3.4028454 ,  0.17191884, -3.0294356 ],\n",
              "        [-2.9355514 ,  1.2896438 ,  1.4796016 ],\n",
              "        [-3.2217743 , -0.43586925,  3.208075  ],\n",
              "        [ 2.5513942 ,  0.22205263, -2.143188  ],\n",
              "        [-3.3725607 , -0.5701313 ,  3.3991475 ],\n",
              "        [-2.9891784 , -0.989638  ,  3.4994879 ],\n",
              "        [ 1.2260423 ,  1.2472478 , -1.9924946 ],\n",
              "        [-3.1137183 ,  0.2694609 ,  2.5806346 ],\n",
              "        [ 1.7833369 ,  1.3340399 , -2.5333984 ],\n",
              "        [-1.3849858 ,  1.8605832 , -0.47774738],\n",
              "        [-3.3173225 , -0.5970643 ,  3.4393125 ],\n",
              "        [-3.1136377 , -0.7175902 ,  3.377669  ],\n",
              "        [-3.157672  , -0.4458275 ,  3.2141836 ],\n",
              "        [-0.29604515,  1.4541436 , -0.9917099 ],\n",
              "        [ 0.8144184 ,  1.4795009 , -1.8611681 ],\n",
              "        [-3.3057013 , -0.6551424 ,  3.452095  ]], dtype=float32),\n",
              " array([[ 0.73024565,  1.4648851 , -1.8486143 ],\n",
              "        [-0.4735395 ,  1.5502044 , -0.94305134],\n",
              "        [-1.4311991 ,  0.02496275,  1.2864914 ],\n",
              "        [-3.3472664 , -0.5694967 ,  3.4062352 ],\n",
              "        [ 3.0658972 ,  0.18251328, -2.6801534 ],\n",
              "        [ 0.28250027,  1.6738275 , -1.4524629 ],\n",
              "        [ 2.850577  ,  0.48129168, -2.6058376 ],\n",
              "        [-0.29154083,  1.3354028 , -0.8493979 ],\n",
              "        [ 0.8067716 ,  1.2419484 , -1.7132845 ],\n",
              "        [ 2.4704216 ,  0.9652775 , -2.8754196 ],\n",
              "        [-3.3331568 , -0.58986175,  3.4099243 ],\n",
              "        [-3.3661754 , -0.35957548,  3.282236  ],\n",
              "        [-3.1722944 , -0.81927556,  3.4990034 ],\n",
              "        [ 0.8209081 ,  1.006984  , -1.5556716 ],\n",
              "        [ 1.3550006 ,  1.0763031 , -1.9156893 ],\n",
              "        [-1.2685283 ,  1.6617712 , -0.14211181]], dtype=float32),\n",
              " array([[-2.6480455 , -0.8111559 ,  3.051543  ],\n",
              "        [-2.4340549 ,  1.0539297 ,  1.3525999 ],\n",
              "        [ 0.46700636,  1.2764524 , -1.2800286 ],\n",
              "        [-0.7995669 ,  1.8119735 , -0.9740459 ],\n",
              "        [-3.226363  , -0.66658497,  3.3889916 ],\n",
              "        [-3.227495  , -0.5012623 ,  3.3140993 ],\n",
              "        [ 1.5124477 ,  1.1927043 , -2.2679243 ],\n",
              "        [ 3.5139997 , -0.08028697, -2.8729577 ],\n",
              "        [-2.6015642 , -0.3680298 ,  2.4887905 ],\n",
              "        [ 1.9163817 ,  0.9746362 , -2.2936177 ],\n",
              "        [-3.1160324 , -0.86764485,  3.4934142 ],\n",
              "        [-3.1147554 , -0.78899467,  3.4318821 ],\n",
              "        [-1.6995672 ,  2.004146  , -0.25670984],\n",
              "        [-1.5739471 ,  1.6106093 ,  0.1670297 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [ 1.7507279 ,  1.2388927 , -2.3633313 ]], dtype=float32),\n",
              " array([[-2.9615731 ,  0.9316517 ,  1.8981333 ],\n",
              "        [-3.2908368 , -0.04662909,  2.9330583 ],\n",
              "        [-1.6871527 ,  1.3607503 ,  0.28268528],\n",
              "        [ 0.6265101 ,  1.44341   , -1.6088467 ],\n",
              "        [ 3.1269624 ,  0.29369286, -2.9589233 ],\n",
              "        [ 2.2472808 ,  0.20760982, -2.0042167 ],\n",
              "        [-0.24251123,  1.2761078 , -0.8008644 ],\n",
              "        [ 3.1891348 , -0.37768212, -2.430289  ],\n",
              "        [ 2.1835687 ,  1.2829813 , -2.7727613 ],\n",
              "        [ 1.3435491 ,  1.1324171 , -1.908174  ],\n",
              "        [ 2.8628638 ,  0.31278503, -2.5135655 ],\n",
              "        [ 3.3264604 ,  0.22155571, -2.911838  ],\n",
              "        [ 0.68308705,  0.73315597, -1.041332  ],\n",
              "        [ 3.3264656 ,  0.05388554, -2.699802  ],\n",
              "        [-1.9630607 ,  1.9452612 ,  0.09334861],\n",
              "        [ 2.0594845 ,  1.0753089 , -2.4689302 ]], dtype=float32),\n",
              " array([[-3.0718749 , -0.537615  ,  3.1802864 ],\n",
              "        [-2.627948  , -0.6132768 ,  2.8943338 ],\n",
              "        [-2.2328415 ,  1.7192612 ,  0.6354351 ],\n",
              "        [ 3.6110513 , -0.34934643, -2.775517  ],\n",
              "        [ 1.2559079 ,  0.96263665, -1.8123312 ],\n",
              "        [ 1.6704723 , -1.274719  , -0.3674252 ],\n",
              "        [-1.8846471 ,  1.2657783 ,  0.64984715],\n",
              "        [-3.290914  , -0.490418  ,  3.300012  ],\n",
              "        [-2.1560352 ,  1.7177541 ,  0.36014158],\n",
              "        [-3.2506855 , -0.71743727,  3.4779832 ],\n",
              "        [-2.5830882 ,  0.9963565 ,  1.4190266 ],\n",
              "        [ 1.3187428 ,  1.3660603 , -2.2215915 ],\n",
              "        [-3.1901877 , -0.7735318 ,  3.4853396 ],\n",
              "        [-1.2237371 ,  1.7028667 , -0.48370573],\n",
              "        [-3.3566246 , -0.40043637,  3.344654  ],\n",
              "        [-1.5198766 ,  1.9654547 , -0.25417012]], dtype=float32),\n",
              " array([[ 1.6358315 ,  0.5616858 , -1.6116455 ],\n",
              "        [-3.4255333 ,  0.36660364,  2.7246468 ],\n",
              "        [ 1.5311797 ,  0.15682429, -1.348143  ],\n",
              "        [-3.1568744 , -0.31346864,  2.9704077 ],\n",
              "        [ 1.5094345 ,  1.455459  , -2.4584904 ],\n",
              "        [-0.3051225 ,  1.9821289 , -1.4262667 ],\n",
              "        [-3.3923204 , -0.30759588,  3.197812  ],\n",
              "        [-0.8727379 ,  1.0821711 , -0.02404599],\n",
              "        [-3.2140732 , -0.7549335 ,  3.4769013 ],\n",
              "        [-3.4601076 , -0.3125458 ,  3.2920165 ],\n",
              "        [-2.6599338 , -0.66074103,  2.9416857 ],\n",
              "        [-3.1950543 , -0.76118314,  3.4557455 ],\n",
              "        [-3.2646706 , -0.67032313,  3.4442225 ],\n",
              "        [-3.339201  ,  0.12648928,  2.8027291 ],\n",
              "        [-0.9262598 ,  1.7083403 , -0.6344085 ],\n",
              "        [ 0.25800064,  1.6366082 , -1.53055   ]], dtype=float32),\n",
              " array([[-0.5936609 ,  1.6779274 , -0.94903696],\n",
              "        [-0.57203126,  0.43647844,  0.18175837],\n",
              "        [-3.382856  , -0.20038006,  3.1295786 ],\n",
              "        [-1.016687  ,  1.5221003 , -0.28365272],\n",
              "        [ 0.12436262,  0.14818116, -0.04372076],\n",
              "        [-3.2597146 , -0.70741045,  3.4938219 ],\n",
              "        [-2.760943  , -0.6076809 ,  2.9812808 ],\n",
              "        [-2.6886318 , -0.6142765 ,  2.8754764 ],\n",
              "        [ 2.4645817 ,  0.894918  , -2.7085552 ],\n",
              "        [-2.7635105 ,  1.0301316 ,  1.5498452 ],\n",
              "        [-3.2432063 , -0.43166202,  3.2536435 ],\n",
              "        [-2.2734554 ,  1.1549021 ,  0.8087144 ],\n",
              "        [ 3.4832985 ,  0.01277037, -2.843682  ],\n",
              "        [-0.833146  ,  2.0481982 , -0.8311969 ],\n",
              "        [ 0.7122981 ,  1.5833498 , -1.9253948 ],\n",
              "        [-2.9585555 ,  0.68232095,  2.0616527 ]], dtype=float32),\n",
              " array([[-0.7127349 , -0.95659393,  1.6716212 ],\n",
              "        [-2.8790214 ,  0.76867473,  1.942086  ],\n",
              "        [-3.2715268 , -0.53989166,  3.3847113 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-0.14859718,  1.6195028 , -0.94576144],\n",
              "        [-3.3243115 , -0.61088175,  3.4376168 ],\n",
              "        [ 0.5577871 ,  1.4586116 , -1.7083497 ],\n",
              "        [-3.4088712 ,  0.16034392,  2.9035785 ],\n",
              "        [-2.0612397 ,  1.2766889 ,  0.8366941 ],\n",
              "        [ 3.2589996 ,  0.52589524, -3.0961657 ],\n",
              "        [-0.14867958,  1.7269474 , -1.2224874 ],\n",
              "        [-0.05023056,  0.57536364, -0.33874655],\n",
              "        [-3.3057013 , -0.6551424 ,  3.452095  ],\n",
              "        [-0.03296714,  1.5678807 , -1.2442687 ],\n",
              "        [-2.69543   ,  1.5582389 ,  1.1061317 ],\n",
              "        [ 2.2077289 ,  1.4349583 , -2.9237185 ]], dtype=float32),\n",
              " array([[-2.2271843 ,  1.3896338 ,  0.8488668 ],\n",
              "        [-3.1160285 , -0.6863185 ,  3.3554516 ],\n",
              "        [-2.9534945 ,  0.41714102,  2.2449608 ],\n",
              "        [ 1.8321129 ,  1.0679606 , -2.3097641 ],\n",
              "        [-1.7470458 ,  1.6191878 ,  0.08656909],\n",
              "        [-0.6238596 ,  1.5257746 , -0.6409209 ],\n",
              "        [-3.2666929 , -0.57628345,  3.3899367 ],\n",
              "        [-3.378345  , -0.49960682,  3.3952162 ],\n",
              "        [ 0.6457494 ,  1.2879076 , -1.542096  ],\n",
              "        [-3.3331869 , -0.5510075 ,  3.397318  ],\n",
              "        [-2.8730862 , -0.9955504 ,  3.4017284 ],\n",
              "        [-3.3180258 , -0.14528695,  3.0661366 ],\n",
              "        [ 0.10189758,  1.8845595 , -1.6678901 ],\n",
              "        [-3.0926313 , -0.5688061 ,  3.2762508 ],\n",
              "        [-0.19215643,  0.5430902 , -0.09539574],\n",
              "        [ 1.9375924 ,  1.2578548 , -2.695079  ]], dtype=float32),\n",
              " array([[ 2.8693142 ,  0.3383872 , -2.5855873 ],\n",
              "        [-3.2305791 , -0.7037641 ,  3.467579  ],\n",
              "        [ 2.8703878 ,  0.5753459 , -2.7411656 ],\n",
              "        [-0.9802417 ,  1.6487982 , -0.45043346],\n",
              "        [-3.415264  , -0.39466605,  3.252948  ],\n",
              "        [-3.2961147 , -0.13695183,  3.0278363 ],\n",
              "        [ 0.5986883 ,  0.9784744 , -1.1627538 ],\n",
              "        [-2.6480014 ,  1.3321906 ,  1.1057179 ],\n",
              "        [-2.6506557 , -0.13276812,  2.4796746 ],\n",
              "        [-2.7484622 , -0.4123347 ,  2.7835908 ],\n",
              "        [ 0.46622792,  1.1614294 , -1.2696652 ],\n",
              "        [ 2.8385587 ,  0.94306666, -3.10784   ],\n",
              "        [ 2.1150615 ,  0.8167056 , -2.3732176 ],\n",
              "        [-3.303921  , -0.6306137 ,  3.4622197 ],\n",
              "        [ 3.1453235 ,  0.25902307, -2.7940288 ],\n",
              "        [ 1.2878801 ,  1.4281802 , -2.2158422 ]], dtype=float32),\n",
              " array([[-3.2015884 ,  0.33604798,  2.544363  ],\n",
              "        [ 1.7907544 ,  1.6040407 , -2.7483783 ],\n",
              "        [-3.3399293 ,  0.14791134,  2.7376947 ],\n",
              "        [ 2.8811648 ,  0.13854554, -2.4413037 ],\n",
              "        [ 2.1913686 , -0.14453915, -1.7146426 ],\n",
              "        [-3.2924528 , -0.64118063,  3.4579597 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 0.85510534,  1.4847547 , -1.7219614 ],\n",
              "        [-3.088867  , -0.7702167 ,  3.3965943 ],\n",
              "        [-2.6898293 , -0.53532916,  2.7745423 ],\n",
              "        [-1.6499563 ,  1.1975421 ,  0.69653916],\n",
              "        [ 2.511673  ,  0.57275045, -2.5335748 ],\n",
              "        [ 1.5077845 ,  1.1254699 , -1.9929439 ],\n",
              "        [ 3.4494548 ,  0.13243328, -2.9827337 ],\n",
              "        [ 2.0111668 ,  0.8637449 , -2.2708716 ],\n",
              "        [ 1.6217682 ,  1.5969245 , -2.6199963 ]], dtype=float32),\n",
              " array([[-0.91427547,  1.7604975 , -0.6494937 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [-3.1882555 , -0.21540727,  2.920533  ],\n",
              "        [ 1.6790243 ,  1.4069192 , -2.5138493 ],\n",
              "        [ 2.9190643 , -0.21309176, -2.1599848 ],\n",
              "        [-2.8216333 ,  1.225051  ,  1.3027277 ],\n",
              "        [ 1.086754  ,  1.5341648 , -2.1283567 ],\n",
              "        [-3.0104268 ,  1.165104  ,  1.6570879 ],\n",
              "        [ 1.3917764 ,  1.1307905 , -2.0254025 ],\n",
              "        [ 1.2021546 ,  0.98208755, -1.6228304 ],\n",
              "        [-0.8689442 ,  1.3272464 , -0.16420504],\n",
              "        [ 2.0509932 ,  0.62731564, -2.122435  ],\n",
              "        [ 3.4968626 , -0.15189518, -2.7690277 ],\n",
              "        [ 0.8564434 ,  1.0113703 , -1.3598164 ],\n",
              "        [ 1.6867206 ,  1.2920448 , -2.3351433 ],\n",
              "        [ 2.2927945 , -0.7127104 , -1.437887  ]], dtype=float32),\n",
              " array([[-2.1621516 ,  0.9894802 ,  1.1160904 ],\n",
              "        [ 2.602464  ,  1.0310134 , -2.8620372 ],\n",
              "        [-0.15824299,  0.42123064, -0.12956308],\n",
              "        [ 0.97779816,  1.5223941 , -1.9693356 ],\n",
              "        [ 3.1267602 ,  0.15165295, -2.7304316 ],\n",
              "        [ 2.2240455 , -0.8952155 , -1.0554574 ],\n",
              "        [ 3.5903223 , -0.51662564, -2.6730833 ],\n",
              "        [ 1.932991  ,  1.1900288 , -2.5069265 ],\n",
              "        [ 3.111648  ,  0.48619896, -2.9872732 ],\n",
              "        [-0.09243058,  0.84171057, -0.49716765],\n",
              "        [-3.0594215 , -0.61451304,  3.2674718 ],\n",
              "        [ 2.012518  ,  0.8900994 , -2.3942838 ],\n",
              "        [-3.2148936 , -0.67512   ,  3.4032154 ],\n",
              "        [ 3.401365  ,  0.02268572, -2.9086442 ],\n",
              "        [-0.26970825, -1.0799551 ,  1.331266  ],\n",
              "        [-0.36638623,  1.1464392 , -0.5182848 ]], dtype=float32),\n",
              " array([[ 1.8167248 ,  1.33459   , -2.4878674 ],\n",
              "        [-3.2218149 , -0.5808556 ,  3.3469884 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [ 1.9640673 ,  0.88642883, -2.205256  ],\n",
              "        [-3.1980407 , -0.4770442 ,  3.2318048 ],\n",
              "        [-2.0351017 ,  1.1830249 ,  0.9822315 ],\n",
              "        [ 1.8875024 ,  1.2507484 , -2.4912758 ],\n",
              "        [ 0.85925496,  1.2319801 , -1.7542076 ],\n",
              "        [-3.2633116 , -0.7062792 ,  3.4701614 ],\n",
              "        [ 3.1420991 ,  0.66353345, -3.159469  ],\n",
              "        [ 2.1832235 ,  1.1495734 , -2.5888643 ],\n",
              "        [-0.08170477,  1.9785582 , -1.6888485 ],\n",
              "        [-0.4590346 ,  1.2104992 , -0.4281269 ],\n",
              "        [-0.69581944,  1.3018104 , -0.26058847],\n",
              "        [-3.3734171 , -0.54765177,  3.4013214 ],\n",
              "        [-0.7582192 ,  1.9074374 , -0.9587227 ]], dtype=float32),\n",
              " array([[-1.9905910e+00,  1.0077404e+00,  9.5227754e-01],\n",
              "        [-2.5895831e-01,  4.7250882e-01, -6.4144209e-02],\n",
              "        [-3.5185456e+00, -1.4460650e-01,  3.2060218e+00],\n",
              "        [-3.4635584e+00,  4.5983911e-02,  2.9566240e+00],\n",
              "        [-3.1652400e+00, -5.2977830e-01,  3.2926474e+00],\n",
              "        [-3.1257079e+00, -7.9205173e-01,  3.4305847e+00],\n",
              "        [-2.8709490e+00,  4.2398164e-01,  2.2305684e+00],\n",
              "        [ 1.6260574e+00,  1.0849935e+00, -2.2804453e+00],\n",
              "        [-1.7879926e+00,  1.1214801e+00,  6.4887559e-01],\n",
              "        [ 1.1372591e-03,  1.6714807e+00, -1.1720104e+00],\n",
              "        [ 1.9721287e+00, -5.7428497e-01, -1.1074882e+00],\n",
              "        [-3.3855522e+00, -4.2240950e-01,  3.3225710e+00],\n",
              "        [-1.4053818e+00,  1.4448121e+00,  8.0926634e-02],\n",
              "        [ 2.8450033e-01, -8.6310863e-01,  6.9513774e-01],\n",
              "        [ 1.0016782e+00,  1.3039963e+00, -1.8559401e+00],\n",
              "        [ 2.1485436e-01,  1.4613436e+00, -1.3216077e+00]], dtype=float32),\n",
              " array([[ 0.18667758,  1.7436541 , -1.5707543 ],\n",
              "        [-3.1626732 , -0.41595167,  3.116374  ],\n",
              "        [ 3.4422166 , -0.86809033, -2.2537024 ],\n",
              "        [ 1.9386337 ,  0.7848681 , -2.123591  ],\n",
              "        [-2.5827496 ,  0.40118438,  1.9582852 ],\n",
              "        [-2.3856637 ,  0.4532671 ,  1.4257989 ],\n",
              "        [-1.8582574 , -0.6403371 ,  2.23471   ],\n",
              "        [ 0.14556998,  1.6968968 , -1.4709785 ],\n",
              "        [-2.3597686 ,  0.20387751,  1.9043614 ],\n",
              "        [-2.5218563 ,  1.4909178 ,  1.0147315 ],\n",
              "        [-3.09434   ,  0.5707408 ,  2.1700625 ],\n",
              "        [ 2.8207111 ,  0.35463527, -2.51664   ],\n",
              "        [-3.3757112 ,  0.61754435,  2.4735732 ],\n",
              "        [-0.45091018,  1.6428181 , -0.8583387 ],\n",
              "        [-3.0186594 , -0.95185673,  3.470695  ],\n",
              "        [ 0.13189836,  0.40692392, -0.47076538]], dtype=float32),\n",
              " array([[ 0.62551135,  1.5374627 , -1.7282288 ],\n",
              "        [-3.2703116 , -0.08848333,  2.9967127 ],\n",
              "        [ 3.5360038 , -0.65121293, -2.5222752 ],\n",
              "        [ 0.18533987,  1.9653503 , -1.7891595 ],\n",
              "        [-3.2911484 , -0.6438515 ,  3.437099  ],\n",
              "        [ 0.95296633,  1.1371112 , -1.5295742 ],\n",
              "        [ 0.38805544,  1.4432869 , -1.4707344 ],\n",
              "        [-2.2311285 ,  0.30101517,  1.6668664 ],\n",
              "        [-3.5385249 ,  0.20106915,  2.9296222 ],\n",
              "        [-3.161435  , -0.5643184 ,  3.2355392 ],\n",
              "        [ 1.8558332 ,  0.6362164 , -2.0153956 ],\n",
              "        [-3.3290884 , -0.4475613 ,  3.3265    ],\n",
              "        [-3.248482  , -0.6769903 ,  3.4615476 ],\n",
              "        [ 2.1589177 ,  1.1367396 , -2.6301353 ],\n",
              "        [-3.3272047 ,  0.16527997,  2.7565558 ],\n",
              "        [ 0.9600895 ,  1.2815104 , -1.9075854 ]], dtype=float32),\n",
              " array([[ 3.6138523 , -0.31746542, -2.8036451 ],\n",
              "        [ 2.0124557 ,  1.0820932 , -2.5393114 ],\n",
              "        [-0.5136747 ,  1.8095015 , -0.94517255],\n",
              "        [ 2.1658537 ,  1.2147423 , -2.8266406 ],\n",
              "        [-3.2448583 , -0.635119  ,  3.4242394 ],\n",
              "        [ 2.902105  ,  0.37046334, -2.6610556 ],\n",
              "        [ 0.8590561 ,  1.2281395 , -1.6949584 ],\n",
              "        [-3.2764056 , -0.61237854,  3.4109893 ],\n",
              "        [-3.287244  , -0.20324424,  3.0622725 ],\n",
              "        [-0.9914815 ,  1.7332412 , -0.6076747 ],\n",
              "        [-3.2672198 , -0.72435045,  3.4696414 ],\n",
              "        [-2.9413974 , -0.86273193,  3.361864  ],\n",
              "        [-2.946155  ,  0.6616547 ,  1.9714681 ],\n",
              "        [-0.77306926, -0.8585237 ,  1.4745193 ],\n",
              "        [-1.7086535 , -0.6844792 ,  2.1742249 ],\n",
              "        [ 1.8421828 ,  1.3757898 , -2.5993838 ]], dtype=float32),\n",
              " array([[ 1.6972677 ,  1.2901124 , -2.4341125 ],\n",
              "        [ 2.23426   ,  0.7881171 , -2.4704332 ],\n",
              "        [ 1.753832  ,  1.0976988 , -2.2671022 ],\n",
              "        [-3.230549  , -0.6864368 ,  3.4259276 ],\n",
              "        [-3.3027136 , -0.18755823,  3.1270542 ],\n",
              "        [ 0.19453996,  1.9219557 , -1.7113612 ],\n",
              "        [-1.445301  ,  1.9681727 , -0.3763083 ],\n",
              "        [-3.523226  ,  0.04485163,  2.9967046 ],\n",
              "        [ 3.5399406 , -0.01478887, -2.9583404 ],\n",
              "        [ 2.841915  ,  0.30706167, -2.5565732 ],\n",
              "        [ 2.90629   ,  0.10185485, -2.428636  ],\n",
              "        [ 1.2985286 ,  1.0941765 , -2.0510578 ],\n",
              "        [-1.2501744 , -0.22354618,  1.3547695 ],\n",
              "        [-3.3123353 , -0.65348536,  3.4422076 ],\n",
              "        [-0.6709946 ,  2.0483937 , -1.0418683 ],\n",
              "        [-2.2438443 ,  1.5394527 ,  0.5493517 ]], dtype=float32),\n",
              " array([[-0.44556704, -1.3381953 ,  1.5410739 ],\n",
              "        [ 2.8916848 ,  0.11167321, -2.5183954 ],\n",
              "        [-2.6957798 , -0.46644142,  2.8701446 ],\n",
              "        [-0.58193713,  2.0112674 , -1.1079676 ],\n",
              "        [ 0.10124943,  1.4371573 , -1.1898973 ],\n",
              "        [ 2.2250566 ,  1.03745   , -2.658252  ],\n",
              "        [ 2.5510614 ,  0.05480744, -2.1591718 ],\n",
              "        [-3.1576145 , -0.8416015 ,  3.5040598 ],\n",
              "        [-2.6462753 ,  0.91233516,  1.4793736 ],\n",
              "        [ 1.6592203 ,  0.6573885 , -1.8499361 ],\n",
              "        [-0.27373028, -1.0668453 ,  1.1691792 ],\n",
              "        [-3.2552407 , -0.68138057,  3.4547658 ],\n",
              "        [-3.2266545 , -0.546693  ,  3.3722215 ],\n",
              "        [-1.9486736 ,  1.4134048 ,  0.55769145],\n",
              "        [ 2.02371   ,  1.2125021 , -2.665918  ],\n",
              "        [-3.2864704 , -0.5290102 ,  3.3908007 ]], dtype=float32),\n",
              " array([[-3.2849586 ,  0.00814562,  2.8176556 ],\n",
              "        [-3.1083753 ,  0.13053176,  2.6857178 ],\n",
              "        [ 1.1752462 ,  1.0597352 , -1.7124805 ],\n",
              "        [-3.3370445 , -0.14655305,  3.0806618 ],\n",
              "        [-3.2195084 ,  0.02137291,  2.8862977 ],\n",
              "        [ 2.9294927 , -0.24339473, -2.153319  ],\n",
              "        [ 3.5409472 , -0.14456838, -2.8944802 ],\n",
              "        [-3.1297681 , -0.7751404 ,  3.435551  ],\n",
              "        [-3.3424585 , -0.38948762,  3.3101308 ],\n",
              "        [ 0.91728836,  1.8465595 , -2.2836204 ],\n",
              "        [ 0.24060683,  1.2211403 , -1.0688225 ],\n",
              "        [ 3.6588256 , -0.6839997 , -2.519823  ],\n",
              "        [-3.2503173 , -0.655635  ,  3.4499686 ],\n",
              "        [-3.1483915 , -0.75228345,  3.3918498 ],\n",
              "        [ 1.2183211 ,  1.2040418 , -1.9480901 ],\n",
              "        [ 0.35626087,  1.0238589 , -1.1011767 ]], dtype=float32),\n",
              " array([[ 1.4898223 ,  1.2250452 , -2.107367  ],\n",
              "        [-3.4142077 ,  0.09682763,  2.9946382 ],\n",
              "        [ 1.6511697 ,  0.9768983 , -2.0770178 ],\n",
              "        [ 0.14963241,  1.4698457 , -1.372233  ],\n",
              "        [-2.5040104 , -0.28186086,  2.4586933 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-0.6706261 ,  1.8899399 , -1.015948  ],\n",
              "        [ 0.8895723 ,  0.37014648, -0.95215   ],\n",
              "        [ 1.9579313 ,  1.1993886 , -2.4818988 ],\n",
              "        [ 3.1301272 ,  0.05514873, -2.6226008 ],\n",
              "        [-3.2980025 , -0.37717912,  3.2667136 ],\n",
              "        [-0.32119167,  0.9673989 , -0.32219544],\n",
              "        [-2.2063107 , -1.19743   ,  3.0140972 ],\n",
              "        [ 0.9634315 , -0.7363169 , -0.23617846],\n",
              "        [ 0.11468856,  1.9549378 , -1.7716717 ],\n",
              "        [-3.2692652 , -0.17305109,  3.0253758 ]], dtype=float32),\n",
              " array([[-3.2618244 ,  0.7004312 ,  2.2482684 ],\n",
              "        [-3.0043309 ,  0.66899943,  2.0741596 ],\n",
              "        [ 1.5713515 ,  1.3535124 , -2.3345773 ],\n",
              "        [ 2.0651479 ,  1.419111  , -2.8472342 ],\n",
              "        [ 0.8683341 ,  1.3557415 , -1.8263369 ],\n",
              "        [-3.1078134 , -0.5747261 ,  3.258368  ],\n",
              "        [-2.599158  ,  1.4117683 ,  1.067006  ],\n",
              "        [ 2.4465902 ,  1.1471498 , -2.8902164 ],\n",
              "        [ 0.15267803,  1.6109644 , -1.3350137 ],\n",
              "        [-1.5588266 ,  1.8233578 , -0.21580857],\n",
              "        [-2.0330045 ,  1.8667425 ,  0.16188622],\n",
              "        [-3.151859  , -0.7743871 ,  3.4816678 ],\n",
              "        [ 1.8710055 ,  0.88965905, -2.2314515 ],\n",
              "        [ 0.7448657 ,  1.6594849 , -2.1045315 ],\n",
              "        [-2.983549  ,  0.32536593,  2.3367887 ],\n",
              "        [ 2.0964777 ,  0.6875914 , -2.3297334 ]], dtype=float32),\n",
              " array([[-3.0965269 ,  1.007352  ,  1.8429787 ],\n",
              "        [ 1.4770622 ,  1.0116075 , -2.0338044 ],\n",
              "        [ 0.8029514 , -0.39105514, -0.37526858],\n",
              "        [ 1.7766634 ,  0.8124138 , -2.0811706 ],\n",
              "        [-0.20222072,  2.0059898 , -1.4738681 ],\n",
              "        [-0.59755963,  1.784902  , -0.92926186],\n",
              "        [ 1.6065944 ,  1.3862212 , -2.399034  ],\n",
              "        [-1.692744  , -1.3089452 ,  2.6046736 ],\n",
              "        [ 1.2505957 ,  1.3353957 , -2.1473515 ],\n",
              "        [-1.9641799 ,  0.52337646,  1.3338767 ],\n",
              "        [ 2.776426  ,  0.8086738 , -2.8624408 ],\n",
              "        [ 3.1052718 ,  0.05495634, -2.6464138 ],\n",
              "        [-1.2736646 ,  1.8552207 , -0.44421232],\n",
              "        [-1.6985863 ,  1.5240388 ,  0.2732248 ],\n",
              "        [-2.1679614 , -1.0613521 ,  2.9706826 ],\n",
              "        [-2.7610738 , -0.8009652 ,  3.1522079 ]], dtype=float32),\n",
              " array([[ 1.6545203 ,  0.5218474 , -1.6641308 ],\n",
              "        [ 1.9921029 ,  0.51371837, -1.9282303 ],\n",
              "        [-1.992897  , -1.1028663 ,  2.7966938 ],\n",
              "        [ 0.8970585 ,  0.92266935, -1.5336301 ],\n",
              "        [-3.3928049 , -0.34742257,  3.2860181 ],\n",
              "        [-3.1345727 ,  1.1104228 ,  1.7821093 ],\n",
              "        [ 1.5805473 ,  1.2410129 , -2.207221  ],\n",
              "        [ 1.6666113 ,  1.3230615 , -2.4502478 ],\n",
              "        [ 2.3747938 , -0.3715114 , -1.6286905 ],\n",
              "        [-2.9972134 , -0.250241  ,  2.8348713 ],\n",
              "        [ 3.3812492 , -0.89936525, -2.2542546 ],\n",
              "        [ 1.6776872 ,  1.2957255 , -2.4448745 ],\n",
              "        [ 0.7639812 ,  1.4363964 , -1.5495982 ],\n",
              "        [-3.2869604 , -0.65542185,  3.4523082 ],\n",
              "        [-3.1662214 , -0.6592765 ,  3.3809094 ],\n",
              "        [-3.3941066 , -0.36076424,  3.3238826 ]], dtype=float32),\n",
              " array([[-3.2926452 , -0.58904517,  3.4234343 ],\n",
              "        [ 0.80760425,  0.981182  , -1.3240206 ],\n",
              "        [ 3.210212  ,  0.4045458 , -3.0042727 ],\n",
              "        [ 1.3932618 ,  1.1910697 , -2.0233583 ],\n",
              "        [ 2.3434055 ,  1.2333511 , -2.9232516 ],\n",
              "        [-3.2547367 ,  0.21890543,  2.743793  ],\n",
              "        [-3.3449614 , -0.13859333,  3.0504475 ],\n",
              "        [-3.4135787 , -0.09352038,  3.0258904 ],\n",
              "        [ 1.1021525 ,  1.4984535 , -1.9235926 ],\n",
              "        [ 2.5909126 ,  0.8203941 , -2.6914923 ],\n",
              "        [ 2.1971838 ,  0.8993761 , -2.5486062 ],\n",
              "        [-0.04589177,  2.09028   , -1.6783298 ],\n",
              "        [ 1.6503177 ,  1.1589113 , -2.2664094 ],\n",
              "        [ 3.2524416 , -0.7540355 , -1.9380842 ],\n",
              "        [ 2.1127675 ,  0.842546  , -2.4215014 ],\n",
              "        [ 2.8744743 , -0.01925215, -2.317256  ]], dtype=float32),\n",
              " array([[-0.9583304 ,  1.3104484 , -0.19960764],\n",
              "        [-0.4601128 ,  0.8016211 , -0.04271594],\n",
              "        [ 1.4937397 ,  1.4649035 , -2.369988  ],\n",
              "        [-0.55288047,  0.2836741 ,  0.382219  ],\n",
              "        [ 0.76372755,  1.6271237 , -1.8425437 ],\n",
              "        [-1.5193127 ,  1.9482886 , -0.37037724],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 1.6687418 , -0.2958403 , -1.0429136 ],\n",
              "        [ 2.8557012 , -0.2641662 , -2.0934544 ],\n",
              "        [-3.0907557 , -0.7431458 ,  3.3831284 ],\n",
              "        [ 1.094651  ,  0.94187856, -1.4661877 ],\n",
              "        [ 1.8090044 ,  1.4257874 , -2.6257818 ],\n",
              "        [-2.8228967 ,  0.75448066,  2.0102968 ],\n",
              "        [ 2.5852835 ,  1.099145  , -2.9827516 ],\n",
              "        [-1.3615824 ,  1.64529   , -0.30061823],\n",
              "        [-1.7752613 ,  1.6886758 ,  0.14993842]], dtype=float32),\n",
              " array([[-1.4977248 ,  1.4041296 ,  0.43462566],\n",
              "        [-3.3350384 , -0.60095453,  3.418108  ],\n",
              "        [ 0.91683143,  0.2773136 , -0.81394076],\n",
              "        [ 3.2278054 ,  0.07487576, -2.6827664 ],\n",
              "        [ 2.8659155 ,  0.5533966 , -2.736645  ],\n",
              "        [-0.92725736,  1.0800138 ,  0.06998269],\n",
              "        [ 0.5241601 ,  0.36762074, -0.78416497],\n",
              "        [ 1.3967471 ,  0.79735756, -1.6318003 ],\n",
              "        [-0.62442297,  0.9629659 , -0.12598033],\n",
              "        [ 1.8477874 ,  1.3744702 , -2.6935248 ],\n",
              "        [ 0.9128857 ,  1.0790964 , -1.6752328 ],\n",
              "        [ 3.6888196 , -0.4898077 , -2.7088318 ],\n",
              "        [ 1.6873158 ,  1.2035185 , -2.2617073 ],\n",
              "        [-2.8589694 , -0.3077986 ,  2.8558443 ],\n",
              "        [ 0.97828686,  1.2371484 , -1.696264  ],\n",
              "        [ 2.9096758 ,  0.08011843, -2.4179068 ]], dtype=float32),\n",
              " array([[-3.2490814 , -0.7038405 ,  3.4782486 ],\n",
              "        [-3.185495  , -0.7996247 ,  3.4882658 ],\n",
              "        [-2.9994254 , -0.9822197 ,  3.448409  ],\n",
              "        [ 0.06794761,  2.2157679 , -1.8665229 ],\n",
              "        [-1.7993597 , -0.2655311 ,  1.8373225 ],\n",
              "        [-0.49173537,  1.8055755 , -0.99139804],\n",
              "        [ 2.7323186 ,  0.7762918 , -2.901492  ],\n",
              "        [-1.5119873 ,  2.005432  , -0.49778327],\n",
              "        [ 3.5321105 , -0.46418223, -2.6106336 ],\n",
              "        [ 1.2676739 ,  1.0652416 , -1.8014319 ],\n",
              "        [-1.1300683 ,  1.1497806 ,  0.23657814],\n",
              "        [ 2.9314265 ,  0.33866706, -2.5910592 ],\n",
              "        [-0.75081116,  0.77260077,  0.26440126],\n",
              "        [ 2.1398742 ,  0.93635917, -2.3941422 ],\n",
              "        [ 3.1205184 ,  0.51655984, -2.8734584 ],\n",
              "        [-0.7776572 ,  1.8173207 , -0.97922206]], dtype=float32),\n",
              " array([[ 1.7638968 ,  1.2835929 , -2.4261262 ],\n",
              "        [-1.0881768 ,  1.8517627 , -0.67339116],\n",
              "        [-1.2988365 ,  1.4522282 , -0.05775382],\n",
              "        [-1.5296715 ,  1.1826518 ,  0.43115687],\n",
              "        [ 2.860494  ,  0.8536054 , -3.0165868 ],\n",
              "        [-2.2260137 ,  0.9418    ,  1.2076254 ],\n",
              "        [ 3.1690419 , -0.32745123, -2.2969024 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-1.5022471 ,  1.4441162 ,  0.05507765],\n",
              "        [-2.3523285 , -0.20328276,  2.2788835 ],\n",
              "        [-3.3154314 ,  0.9316106 ,  2.1028771 ],\n",
              "        [-1.9835702 ,  1.8812481 ,  0.09652718],\n",
              "        [ 2.0471587 , -0.12679245, -1.3920043 ],\n",
              "        [ 2.5763118 ,  0.63694996, -2.606776  ],\n",
              "        [-3.3224819 , -0.6675433 ,  3.4672875 ],\n",
              "        [ 2.2699935 , -0.10415442, -1.6811397 ]], dtype=float32),\n",
              " array([[-3.375286  , -0.5111682 ,  3.394711  ],\n",
              "        [ 0.96960723,  1.418147  , -1.8586234 ],\n",
              "        [ 2.4375207 ,  0.7031615 , -2.500597  ],\n",
              "        [-2.445644  ,  1.3208693 ,  1.005103  ],\n",
              "        [ 0.4955724 ,  0.8996593 , -1.1014442 ],\n",
              "        [ 2.301614  ,  0.7279057 , -2.3973985 ],\n",
              "        [-2.3827546 ,  1.6451027 ,  0.7907718 ],\n",
              "        [ 0.36436096,  1.1138123 , -1.1286631 ],\n",
              "        [ 0.21961582,  1.6006862 , -1.353482  ],\n",
              "        [-2.9489782 , -0.68662006,  3.250574  ],\n",
              "        [-3.5041614 , -0.07031026,  3.081386  ],\n",
              "        [ 1.6927606 ,  1.5735556 , -2.667297  ],\n",
              "        [ 2.988382  ,  0.32117802, -2.6665578 ],\n",
              "        [ 1.5452654 ,  1.1061025 , -2.063933  ],\n",
              "        [ 0.5963666 ,  1.654158  , -1.8847871 ],\n",
              "        [ 0.9343669 ,  0.36985365, -1.0314419 ]], dtype=float32),\n",
              " array([[-3.3285213 , -0.54247487,  3.4020345 ],\n",
              "        [-2.9455245 , -0.65306574,  3.2179358 ],\n",
              "        [ 0.16345301,  1.0216562 , -0.82144725],\n",
              "        [ 3.4456513 ,  0.21337187, -2.9917107 ],\n",
              "        [-3.070182  , -0.908038  ,  3.4985452 ],\n",
              "        [ 1.3747956 ,  0.352101  , -1.4597974 ],\n",
              "        [-3.2912202 , -0.62406373,  3.4228873 ],\n",
              "        [-3.045361  , -0.04390538,  2.6605272 ],\n",
              "        [-1.7478813 ,  1.1550931 ,  0.73769593],\n",
              "        [-3.1772301 , -0.5684359 ,  3.3205965 ],\n",
              "        [ 3.312035  , -0.17585544, -2.5406587 ],\n",
              "        [ 2.022727  ,  0.61043805, -1.9979922 ],\n",
              "        [-2.9626844 , -0.8963643 ,  3.3835783 ],\n",
              "        [-3.1061063 ,  0.9858225 ,  1.9099967 ],\n",
              "        [ 2.7939093 , -0.4449273 , -1.8680557 ],\n",
              "        [ 1.6851697 ,  1.4052933 , -2.4419842 ]], dtype=float32),\n",
              " array([[-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 1.486896  ,  1.3260585 , -2.26535   ],\n",
              "        [ 1.5172042 ,  0.59506047, -1.6502781 ],\n",
              "        [ 3.4536836 , -0.8927854 , -2.2562556 ],\n",
              "        [ 2.5753164 ,  0.98805845, -2.9474525 ],\n",
              "        [ 1.0593061 ,  1.5737132 , -2.004439  ],\n",
              "        [ 0.7849345 ,  1.356413  , -1.653252  ],\n",
              "        [-1.4408926 , -0.93145835,  2.2744126 ],\n",
              "        [-3.2487152 , -0.71257764,  3.4827993 ],\n",
              "        [ 1.7456992 ,  0.68146145, -1.9175391 ],\n",
              "        [ 0.8893928 , -1.0083436 ,  0.19360894],\n",
              "        [-3.1868649 , -0.74174446,  3.4685056 ],\n",
              "        [ 0.5010305 ,  0.9389608 , -0.79313636],\n",
              "        [-1.2343761 ,  1.7387278 , -0.43462586],\n",
              "        [-3.461911  , -0.1462388 ,  3.1535213 ],\n",
              "        [-0.27530995,  1.5011456 , -0.86290926]], dtype=float32),\n",
              " array([[ 2.289859  ,  1.1220213 , -2.8092432 ],\n",
              "        [-3.3663955 , -0.4436334 ,  3.3528774 ],\n",
              "        [-2.478678  ,  0.68900603,  1.5413401 ],\n",
              "        [ 2.9763312 ,  0.60761356, -2.8968787 ],\n",
              "        [ 1.3225178 ,  0.8869868 , -1.7801139 ],\n",
              "        [-2.8276083 ,  0.21947955,  2.3608513 ],\n",
              "        [ 1.6404212 ,  0.9772736 , -1.9532244 ],\n",
              "        [-3.3371685 , -0.6042453 ,  3.433371  ],\n",
              "        [-3.4364817 , -0.21641353,  3.1941543 ],\n",
              "        [-1.0994608 ,  1.4802008 , -0.30464908],\n",
              "        [ 1.6375836 ,  1.0981792 , -2.2071533 ],\n",
              "        [-3.256992  , -0.5388621 ,  3.3500621 ],\n",
              "        [-1.4252414 ,  1.9311883 , -0.45303813],\n",
              "        [ 2.1890318 ,  0.9917315 , -2.5548692 ],\n",
              "        [ 0.96588403, -0.6902678 , -0.17752635],\n",
              "        [ 3.1937058 , -0.15662211, -2.487639  ]], dtype=float32),\n",
              " array([[ 0.00908356,  1.3163089 , -1.1041467 ],\n",
              "        [ 0.12855199,  1.6648014 , -1.437002  ],\n",
              "        [ 2.513738  ,  1.0051154 , -2.8497047 ],\n",
              "        [ 0.12469248,  0.9036019 , -0.8540324 ],\n",
              "        [ 0.23298815,  1.8982326 , -1.7250192 ],\n",
              "        [ 3.2431836 , -0.5879935 , -2.1147985 ],\n",
              "        [-3.1037977 , -0.7045605 ,  3.3436708 ],\n",
              "        [ 2.046929  ,  1.252883  , -2.6259112 ],\n",
              "        [-2.652086  , -0.979576  ,  3.1704736 ],\n",
              "        [-3.269051  ,  0.26195702,  2.6267304 ],\n",
              "        [ 0.20540145,  1.3605253 , -1.194133  ],\n",
              "        [ 0.7933523 ,  0.79659414, -1.2705404 ],\n",
              "        [ 1.7215956 ,  1.3714852 , -2.3838763 ],\n",
              "        [ 3.1214898 ,  0.5719683 , -3.0644062 ],\n",
              "        [-3.095681  ,  0.5396273 ,  2.338535  ],\n",
              "        [ 2.9089162 , -0.11800126, -2.2499022 ]], dtype=float32),\n",
              " array([[ 1.8119227 ,  1.1915878 , -2.46383   ],\n",
              "        [ 2.588207  ,  0.47307307, -2.395791  ],\n",
              "        [-3.4082363 , -0.41862717,  3.373416  ],\n",
              "        [ 1.193724  ,  1.4368235 , -2.2154675 ],\n",
              "        [-3.2986019 , -0.01944732,  2.900838  ],\n",
              "        [-1.8357385 ,  1.2692362 ,  0.49614435],\n",
              "        [ 3.3858511 ,  0.21427864, -2.9402945 ],\n",
              "        [ 0.3364742 ,  0.36677617, -0.44910362],\n",
              "        [-0.28181577,  0.87780476, -0.26593736],\n",
              "        [-2.5571015 ,  1.4239736 ,  0.9062517 ],\n",
              "        [ 0.07247388,  0.92025435, -0.7159236 ],\n",
              "        [ 1.5624869 , -0.58920085, -0.77702165],\n",
              "        [-2.2961364 ,  1.5484836 ,  0.67940587],\n",
              "        [-3.0646176 , -0.53488433,  3.185959  ],\n",
              "        [ 2.1228979 ,  0.9795183 , -2.5415635 ],\n",
              "        [ 3.1060174 , -1.2640051 , -1.5836561 ]], dtype=float32),\n",
              " array([[ 1.5789319 ,  1.0186    , -2.022477  ],\n",
              "        [-1.1394712 ,  1.9362165 , -0.68489957],\n",
              "        [-2.0131838 ,  0.8760492 ,  1.0669291 ],\n",
              "        [ 2.25614   ,  1.1922615 , -2.826873  ],\n",
              "        [-3.1302905 , -0.16133884,  2.8655403 ],\n",
              "        [-2.3988883 , -1.0386659 ,  3.035932  ],\n",
              "        [-3.3027136 , -0.18755823,  3.1270542 ],\n",
              "        [-2.0331304 , -0.79910684,  2.5480788 ],\n",
              "        [ 2.2513254 ,  0.97928315, -2.5857487 ],\n",
              "        [-1.607315  ,  0.9881228 ,  0.698949  ],\n",
              "        [-3.2930405 , -0.5817482 ,  3.4367056 ],\n",
              "        [ 0.6988934 ,  1.0387431 , -1.3375883 ],\n",
              "        [-0.6479585 ,  1.198478  , -0.15351516],\n",
              "        [-1.023383  ,  1.6842439 , -0.4718947 ],\n",
              "        [-3.4063857 , -0.22870964,  3.1199398 ],\n",
              "        [-0.36124924,  1.2484192 , -0.5825567 ]], dtype=float32),\n",
              " array([[ 1.1311507 ,  1.388058  , -2.0246005 ],\n",
              "        [ 1.1433522 ,  1.5552365 , -2.281183  ],\n",
              "        [-1.7006603 ,  1.4298089 ,  0.15803419],\n",
              "        [-3.240597  , -0.72860026,  3.4412193 ],\n",
              "        [ 0.61712736,  1.9491595 , -2.0363805 ],\n",
              "        [-0.5880322 ,  1.6684746 , -0.866046  ],\n",
              "        [-0.5134327 ,  1.2060312 , -0.6336723 ],\n",
              "        [ 2.196253  ,  1.2134014 , -2.8045125 ],\n",
              "        [ 0.17322013,  1.0218712 , -0.7699418 ],\n",
              "        [ 0.04456097,  1.2713594 , -0.84746015],\n",
              "        [ 1.3812809 ,  0.486909  , -1.4485539 ],\n",
              "        [ 1.5472661 ,  1.6080587 , -2.534504  ],\n",
              "        [ 2.173665  ,  1.1023602 , -2.6723118 ],\n",
              "        [-3.3210952 , -0.5428246 ,  3.4137607 ],\n",
              "        [ 2.6007807 ,  0.7335043 , -2.687123  ],\n",
              "        [ 1.1404122 ,  1.1840523 , -1.876383  ]], dtype=float32),\n",
              " array([[-1.0251806 ,  2.0874143 , -0.7970941 ],\n",
              "        [ 2.8696027 ,  0.6015976 , -2.9219737 ],\n",
              "        [ 2.4122887 ,  0.7705182 , -2.6438198 ],\n",
              "        [ 1.2792287 ,  1.5923132 , -2.3489323 ],\n",
              "        [-2.1148288 ,  1.9005722 ,  0.17485529],\n",
              "        [-3.259785  , -0.45571464,  3.1938527 ],\n",
              "        [-2.5122826 , -0.299971  ,  2.4950778 ],\n",
              "        [ 2.3633256 , -1.0305072 , -1.1701487 ],\n",
              "        [ 0.86152387,  1.6017303 , -1.8886094 ],\n",
              "        [ 0.2844994 ,  1.8926841 , -1.7493222 ],\n",
              "        [-0.6903542 ,  1.6118321 , -0.5267488 ],\n",
              "        [ 1.696355  ,  1.4050438 , -2.559165  ],\n",
              "        [-2.8976176 ,  1.0230995 ,  1.7157351 ],\n",
              "        [-3.3038518 , -0.6020569 ,  3.3852487 ],\n",
              "        [ 2.4582818 ,  0.94265026, -2.7578025 ],\n",
              "        [-3.3148887 , -0.56169295,  3.4152927 ]], dtype=float32),\n",
              " array([[-2.9707406 , -0.9302137 ,  3.43164   ],\n",
              "        [-1.285263  ,  1.214522  ,  0.21329448],\n",
              "        [-1.0786842 ,  1.5437034 , -0.33419853],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-3.3387573 , -0.49425122,  3.374867  ],\n",
              "        [-1.862171  ,  1.5743482 ,  0.40334973],\n",
              "        [ 3.281299  ,  0.35443404, -2.9706736 ],\n",
              "        [-3.127773  , -0.38085392,  3.1602106 ],\n",
              "        [-3.1844609 ,  0.9731255 ,  2.0208194 ],\n",
              "        [-0.5136139 ,  0.7599239 , -0.23824611],\n",
              "        [ 3.3313553 ,  0.17023183, -2.9579763 ],\n",
              "        [ 2.069223  ,  1.1329232 , -2.569211  ],\n",
              "        [ 3.1723955 ,  0.39655817, -3.0058398 ],\n",
              "        [-1.5534213 ,  2.0497227 , -0.40129822],\n",
              "        [-3.2934077 , -0.6780219 ,  3.4658618 ],\n",
              "        [-0.88033116, -0.4010876 ,  1.2794459 ]], dtype=float32),\n",
              " array([[-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [ 0.03537184,  1.4250165 , -1.0961561 ],\n",
              "        [-3.2727294 , -0.69030654,  3.4425254 ],\n",
              "        [ 2.3237817 ,  0.94750595, -2.642316  ],\n",
              "        [ 0.98133093,  0.6760589 , -1.3741789 ],\n",
              "        [-3.204274  , -0.01286233,  2.8343472 ],\n",
              "        [-1.4776584 , -0.9189981 ,  2.2134857 ],\n",
              "        [-3.0988395 , -0.80859345,  3.450364  ],\n",
              "        [-3.2598612 , -0.1855371 ,  3.0654154 ],\n",
              "        [ 1.7126518 ,  1.4394917 , -2.5308828 ],\n",
              "        [ 3.6285079 , -0.7354154 , -2.4601252 ],\n",
              "        [-2.1430662 ,  0.23819354,  1.8672649 ],\n",
              "        [ 1.9776144 ,  1.0838178 , -2.4976206 ],\n",
              "        [-1.3361837 ,  0.38803425,  0.9344452 ],\n",
              "        [ 1.6690297 ,  1.1799053 , -2.301682  ],\n",
              "        [ 2.257249  ,  0.84327537, -2.4469528 ]], dtype=float32),\n",
              " array([[-1.1935766 ,  1.078341  ,  0.26929826],\n",
              "        [-1.1158105 ,  0.13249148,  0.96836793],\n",
              "        [-0.3137236 ,  1.8561714 , -1.2829741 ],\n",
              "        [-3.444764  , -0.34577033,  3.2368827 ],\n",
              "        [-3.52717   , -0.07722003,  3.158269  ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-0.35725194,  1.773386  , -1.0975132 ],\n",
              "        [ 0.26814744,  1.161151  , -1.1620669 ],\n",
              "        [-3.190763  , -0.68898547,  3.4421868 ],\n",
              "        [-2.463692  ,  1.2242564 ,  1.0887501 ],\n",
              "        [ 1.5862507 ,  1.6624068 , -2.6860383 ],\n",
              "        [ 1.6848463 ,  1.0421556 , -2.2308607 ],\n",
              "        [ 2.4010468 ,  0.9728565 , -2.7979465 ],\n",
              "        [-1.1493372 ,  0.32768235,  0.9008029 ],\n",
              "        [-3.1422222 , -0.32818177,  3.0884054 ],\n",
              "        [-3.3462703 , -0.4194834 ,  3.3207974 ]], dtype=float32),\n",
              " array([[ 3.0325005 ,  0.47363564, -2.972159  ],\n",
              "        [-0.18606102,  1.438522  , -0.8589481 ],\n",
              "        [ 3.353655  , -1.1529114 , -1.9084    ],\n",
              "        [-0.4159015 ,  1.6444577 , -0.96516234],\n",
              "        [ 2.0984838 ,  0.6103952 , -1.9681993 ],\n",
              "        [ 1.9378024 , -0.30816582, -1.3918793 ],\n",
              "        [ 1.3486196 ,  1.6044365 , -2.3363342 ],\n",
              "        [ 3.322165  ,  0.09303803, -2.7920504 ],\n",
              "        [-2.5376983 ,  1.4807605 ,  0.9140447 ],\n",
              "        [-3.1783173 ,  0.20374528,  2.6344209 ],\n",
              "        [-1.6266478 , -0.92897815,  2.31808   ],\n",
              "        [-0.42584673,  0.7487442 , -0.17208755],\n",
              "        [ 1.1538743 , -0.86768407, -0.2179517 ],\n",
              "        [-1.820644  ,  1.2351036 ,  0.47564915],\n",
              "        [ 1.5030804 ,  1.3918133 , -2.371944  ],\n",
              "        [ 0.8363622 ,  1.631451  , -1.9553286 ]], dtype=float32),\n",
              " array([[-3.1714656 , -0.8072825 ,  3.473287  ],\n",
              "        [-0.4998462 ,  1.4833783 , -0.6218627 ],\n",
              "        [-3.3415077 , -0.5382783 ,  3.3803449 ],\n",
              "        [ 0.2978813 ,  1.4425197 , -1.3930168 ],\n",
              "        [-2.8557277 ,  0.91374075,  1.8577399 ],\n",
              "        [ 3.557968  ,  0.10292251, -3.0241418 ],\n",
              "        [ 3.6188188 , -0.8585137 , -2.4143045 ],\n",
              "        [ 0.40903595,  1.615522  , -1.6270552 ],\n",
              "        [ 3.326481  ,  0.24444178, -2.9767323 ],\n",
              "        [-0.832727  ,  1.5780125 , -0.5670981 ],\n",
              "        [ 2.8422494 ,  0.4549236 , -2.6891875 ],\n",
              "        [ 0.5338992 ,  1.2255908 , -1.3964188 ],\n",
              "        [-0.08093073,  1.3642637 , -0.93553513],\n",
              "        [ 2.8971694 ,  0.82894456, -3.0452619 ],\n",
              "        [-0.76521534,  0.9388039 ,  0.09831166],\n",
              "        [-1.1004485 ,  0.99691814,  0.22125345]], dtype=float32),\n",
              " array([[ 2.2600765 ,  1.0468434 , -2.6365645 ],\n",
              "        [-1.552308  , -1.4038228 ,  2.6918037 ],\n",
              "        [ 1.6331455 ,  1.2887841 , -2.3256106 ],\n",
              "        [ 2.6089523 ,  0.96315134, -2.8799005 ],\n",
              "        [-0.01505308,  0.8355931 , -0.5283617 ],\n",
              "        [-3.4594414 , -0.07073814,  3.097622  ],\n",
              "        [ 2.0641792 ,  1.310831  , -2.7413573 ],\n",
              "        [-3.0877535 , -0.70677054,  3.3266442 ],\n",
              "        [-3.224674  , -0.7241816 ,  3.4580262 ],\n",
              "        [ 0.83292216,  1.6607686 , -1.9740652 ],\n",
              "        [ 2.7324862 ,  0.71726274, -2.7898288 ],\n",
              "        [ 1.1928195 ,  1.3751533 , -1.9980643 ],\n",
              "        [ 1.6241966 ,  1.5995605 , -2.5613565 ],\n",
              "        [-3.130543  , -0.85549486,  3.491601  ],\n",
              "        [-3.2142022 , -0.7523066 ,  3.4635282 ],\n",
              "        [ 0.25914276,  1.4138588 , -1.2905588 ]], dtype=float32),\n",
              " array([[ 2.5713456 ,  1.0036492 , -2.9041662 ],\n",
              "        [-0.24644549,  0.87582326, -0.42971522],\n",
              "        [-3.3084013 , -0.5814664 ,  3.4278297 ],\n",
              "        [ 3.324168  , -0.14283259, -2.6757565 ],\n",
              "        [ 3.505555  , -0.81909776, -2.332035  ],\n",
              "        [ 3.1693032 ,  0.2211096 , -2.8472857 ],\n",
              "        [-2.6546757 ,  0.07387318,  2.2481554 ],\n",
              "        [-3.2494557 , -0.32553896,  3.1387339 ],\n",
              "        [-1.3062015 ,  0.9974127 ,  0.18116419],\n",
              "        [-1.1084765 ,  1.7197485 , -0.46736044],\n",
              "        [-3.2102396 , -0.6296823 ,  3.3744519 ],\n",
              "        [-1.50024   , -0.41609976,  1.6137245 ],\n",
              "        [ 0.02601791,  1.0342329 , -0.8378434 ],\n",
              "        [ 1.9363698 ,  1.0241377 , -2.2385788 ],\n",
              "        [ 3.5033376 , -0.82672274, -2.3578172 ],\n",
              "        [-1.2821398 ,  0.2564635 ,  0.95266163]], dtype=float32),\n",
              " array([[ 1.8953317 ,  0.9961096 , -2.3869853 ],\n",
              "        [-2.965593  ,  0.22118154,  2.4721138 ],\n",
              "        [-1.0249218 ,  2.0528908 , -0.834734  ],\n",
              "        [ 0.20907208, -0.84675884,  0.7309808 ],\n",
              "        [ 0.5218706 ,  1.5734018 , -1.6561458 ],\n",
              "        [ 2.7350519 ,  0.79780054, -2.827478  ],\n",
              "        [ 1.66217   ,  1.2048296 , -2.505345  ],\n",
              "        [-0.320892  ,  0.9679937 , -0.29472533],\n",
              "        [-1.8320142 ,  0.23237811,  1.361619  ],\n",
              "        [-1.5862974 ,  1.8199925 , -0.15865308],\n",
              "        [-1.0880867 ,  0.6209225 ,  0.4414434 ],\n",
              "        [ 1.421574  , -0.1894831 , -1.0387769 ],\n",
              "        [ 3.547207  , -0.27768645, -2.7139118 ],\n",
              "        [ 1.7299589 ,  0.17623602, -1.528993  ],\n",
              "        [-2.0595968 ,  1.7611487 ,  0.37084794],\n",
              "        [-3.3405082 , -0.62513876,  3.4324026 ]], dtype=float32),\n",
              " array([[ 2.9899952 ,  0.8385925 , -3.1505728 ],\n",
              "        [ 1.52165   , -0.6167368 , -0.7116274 ],\n",
              "        [-1.9396132 , -0.51736313,  2.2823625 ],\n",
              "        [ 1.1797633 ,  1.1005925 , -1.7005078 ],\n",
              "        [-1.1257917 ,  1.4740565 , -0.04618238],\n",
              "        [ 3.4422166 , -0.86809033, -2.2537024 ],\n",
              "        [-2.6047642 , -1.1037661 ,  3.2555954 ],\n",
              "        [-1.9265896 ,  0.6430416 ,  0.95023894],\n",
              "        [-3.2018526 ,  0.7814172 ,  2.0855534 ],\n",
              "        [ 0.22571525,  1.6724111 , -1.4540541 ],\n",
              "        [-3.4094262 , -0.28342548,  3.2214963 ],\n",
              "        [-3.4795797 ,  0.2898114 ,  2.800679  ],\n",
              "        [ 3.097262  ,  0.4884891 , -2.9770894 ],\n",
              "        [ 2.915901  ,  0.52047586, -2.8905737 ],\n",
              "        [-0.9344267 ,  2.1669836 , -0.95544636],\n",
              "        [-3.2005796 , -0.7395835 ,  3.439755  ]], dtype=float32),\n",
              " array([[-0.73313683,  1.9084008 , -0.9921289 ],\n",
              "        [-3.2010343 , -0.7759248 ,  3.486261  ],\n",
              "        [-3.3044693 , -0.5956732 ,  3.420982  ],\n",
              "        [-0.14808422,  1.7478174 , -1.1131663 ],\n",
              "        [ 2.4054823 ,  1.0382515 , -2.732162  ],\n",
              "        [-3.2767413 , -0.6190113 ,  3.4180238 ],\n",
              "        [-3.2818549 , -0.41833684,  3.2945874 ],\n",
              "        [ 1.1380091 ,  1.554645  , -2.1940098 ],\n",
              "        [-2.153229  , -0.10389623,  1.914006  ],\n",
              "        [ 0.5885378 ,  1.2076687 , -1.3714309 ],\n",
              "        [-3.1879246 , -0.74684703,  3.4246564 ],\n",
              "        [ 1.6161205 ,  0.7344192 , -1.9230666 ],\n",
              "        [ 2.0889995 ,  0.52524775, -2.060111  ],\n",
              "        [-2.7772806 ,  0.5256092 ,  1.8464798 ],\n",
              "        [ 3.3989973 ,  0.02347918, -2.8966732 ],\n",
              "        [-0.07710437,  0.9076165 , -0.67336875]], dtype=float32),\n",
              " array([[-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 3.5771515 , -0.05463484, -2.9274383 ],\n",
              "        [-0.77482086,  1.9692067 , -0.8944585 ],\n",
              "        [ 1.2215966 ,  1.2910415 , -2.0180135 ],\n",
              "        [ 3.0310454 ,  0.5731128 , -2.8905377 ],\n",
              "        [ 1.1957895 ,  0.80384094, -1.5678461 ],\n",
              "        [ 2.1743343 ,  1.102295  , -2.7158597 ],\n",
              "        [ 1.5078651 ,  0.7780907 , -1.6840688 ],\n",
              "        [ 3.4422166 , -0.86809033, -2.2537024 ],\n",
              "        [ 2.100938  ,  0.00528921, -1.5298953 ],\n",
              "        [-1.8037367 ,  2.0455523 , -0.12943125],\n",
              "        [ 0.73873085,  1.6189095 , -1.8551444 ],\n",
              "        [ 3.162161  ,  0.06771822, -2.6008096 ],\n",
              "        [ 1.770163  ,  1.5505992 , -2.7443755 ],\n",
              "        [-3.373143  , -0.19108093,  3.1184025 ],\n",
              "        [ 1.1858133 ,  1.6081139 , -2.2179353 ]], dtype=float32),\n",
              " array([[-2.5400121 ,  1.5142277 ,  0.9753844 ],\n",
              "        [-2.8380387 , -0.09674849,  2.6235712 ],\n",
              "        [-2.9220111 , -0.9484217 ,  3.457996  ],\n",
              "        [ 3.5706906 , -0.2782559 , -2.83608   ],\n",
              "        [ 2.4512675 ,  0.0529752 , -2.0047464 ],\n",
              "        [ 2.522236  ,  0.680704  , -2.6084623 ],\n",
              "        [-2.9222841 ,  0.46283102,  2.2163656 ],\n",
              "        [ 0.7770298 ,  1.7230397 , -2.05836   ],\n",
              "        [ 0.5748218 ,  1.8949198 , -1.8339753 ],\n",
              "        [-2.6546814 , -1.0589358 ,  3.231287  ],\n",
              "        [ 1.2023437 ,  0.7584472 , -1.4664698 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [-2.6643841 ,  0.4221879 ,  2.067788  ],\n",
              "        [ 2.2396376 ,  1.2010232 , -2.7205067 ],\n",
              "        [ 2.484727  , -0.13925159, -1.9051809 ],\n",
              "        [ 1.0412668 , -1.280074  ,  0.17197604]], dtype=float32),\n",
              " array([[-3.2925591e+00, -4.4211400e-01,  3.3033338e+00],\n",
              "        [ 1.0004997e+00,  6.5528190e-01, -1.3689135e+00],\n",
              "        [ 3.3273113e+00,  1.7680265e-01, -2.8988738e+00],\n",
              "        [-2.7494547e+00, -1.4904772e-03,  2.5183432e+00],\n",
              "        [-1.0122877e+00,  1.7012714e+00, -5.5738944e-01],\n",
              "        [ 3.0066731e+00,  8.3872855e-01, -3.1366105e+00],\n",
              "        [-1.8905881e-01,  8.2125449e-01, -3.2254714e-01],\n",
              "        [-3.1537478e+00, -3.4817180e-01,  3.1030202e+00],\n",
              "        [ 1.5368172e+00,  1.5839127e+00, -2.5431356e+00],\n",
              "        [-3.3161900e+00, -9.4975151e-02,  3.0417292e+00],\n",
              "        [ 1.0165457e+00,  2.5444183e-01, -1.0031317e+00],\n",
              "        [ 8.7682194e-01,  1.0444555e+00, -1.4314165e+00],\n",
              "        [ 3.3462369e-01, -2.4772529e-01, -4.0311575e-02],\n",
              "        [-1.0787979e+00,  1.2997426e+00,  9.4231978e-02],\n",
              "        [ 2.8458116e+00, -7.3472285e-01, -1.7874699e+00],\n",
              "        [ 1.4006437e+00,  1.0607656e+00, -1.7581496e+00]], dtype=float32),\n",
              " array([[-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 1.955211  ,  1.0755807 , -2.4479103 ],\n",
              "        [-1.6754209 ,  0.9728215 ,  0.7407465 ],\n",
              "        [-1.538216  ,  1.7888281 , -0.23397191],\n",
              "        [-2.8408344 ,  0.10263022,  2.4828181 ],\n",
              "        [-3.5775545 ,  0.23790166,  2.9240289 ],\n",
              "        [-0.24953023,  2.085927  , -1.5127373 ],\n",
              "        [-3.3278883 , -0.6021642 ,  3.4212809 ],\n",
              "        [ 2.2299845 ,  1.2397549 , -2.812483  ],\n",
              "        [-0.7656661 ,  2.0750256 , -1.0345011 ],\n",
              "        [-3.4825857 ,  0.15236083,  2.9362767 ],\n",
              "        [-1.8225216 ,  1.0259539 ,  0.8191124 ],\n",
              "        [-3.1722424 , -0.69643635,  3.3934479 ],\n",
              "        [ 0.3824256 ,  1.2681407 , -1.2396669 ],\n",
              "        [-3.4048688 , -0.14833859,  3.1156433 ],\n",
              "        [-1.0034542 ,  2.097707  , -0.8204878 ]], dtype=float32),\n",
              " array([[ 1.4128605 ,  1.4011964 , -2.3245158 ],\n",
              "        [ 0.36797944,  1.7912967 , -1.7141033 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 1.3092133 ,  1.4423094 , -2.252088  ],\n",
              "        [-2.3849504 , -0.65909684,  2.7151828 ],\n",
              "        [-3.4043367 , -0.512315  ,  3.4025016 ],\n",
              "        [-3.276725  ,  0.16022843,  2.7134972 ],\n",
              "        [ 3.2183783 , -0.33879066, -2.3825464 ],\n",
              "        [ 2.4626405 ,  1.1350425 , -2.9811208 ],\n",
              "        [-1.3241255 ,  1.9928604 , -0.6477931 ],\n",
              "        [-2.1067543 ,  1.4555072 ,  0.6491721 ],\n",
              "        [ 1.3701514 ,  1.0093886 , -1.859265  ],\n",
              "        [ 2.994451  ,  0.4805721 , -2.7678645 ],\n",
              "        [ 0.02782444,  0.3350419 , -0.24434891],\n",
              "        [-3.3128674 , -0.3355942 ,  3.1802092 ],\n",
              "        [ 1.4561021 ,  1.4827365 , -2.4191656 ]], dtype=float32),\n",
              " array([[ 0.31457102,  1.8443732 , -1.8647597 ],\n",
              "        [ 0.2440902 ,  2.0061574 , -1.8295535 ],\n",
              "        [-1.1083031 ,  1.2207373 ,  0.17154339],\n",
              "        [ 2.172723  ,  0.71611154, -2.3401196 ],\n",
              "        [ 2.150728  ,  0.58500725, -2.1048741 ],\n",
              "        [-3.326409  , -0.52097774,  3.3540316 ],\n",
              "        [-3.240533  , -0.6107937 ,  3.3395438 ],\n",
              "        [ 2.5958233 ,  0.8807193 , -2.8542318 ],\n",
              "        [ 1.5652561 ,  0.90316534, -1.9972917 ],\n",
              "        [ 3.4302804 ,  0.23346932, -3.10285   ],\n",
              "        [-0.2554199 ,  1.3109018 , -0.6476101 ],\n",
              "        [ 1.3457576 ,  1.3933638 , -2.1653662 ],\n",
              "        [-3.3034074 , -0.50654143,  3.3180523 ],\n",
              "        [ 0.1308328 ,  1.5603615 , -1.2299283 ],\n",
              "        [-2.5582683 ,  1.1534368 ,  1.4577676 ],\n",
              "        [-3.3278883 , -0.6021642 ,  3.4212809 ]], dtype=float32),\n",
              " array([[ 0.11414431,  1.8907592 , -1.6017023 ],\n",
              "        [-2.5377939 ,  0.06560868,  2.1664383 ],\n",
              "        [-0.02435262,  1.3837904 , -1.0020411 ],\n",
              "        [-3.1903038 ,  0.46783516,  2.3752356 ],\n",
              "        [-1.8775532 ,  1.6606741 ,  0.36199954],\n",
              "        [ 1.1531765 ,  0.48277313, -1.2298832 ],\n",
              "        [ 2.8189592 ,  0.53378105, -2.7745376 ],\n",
              "        [-2.0109656 ,  0.5442403 ,  1.4895922 ],\n",
              "        [-3.248043  , -0.7238523 ,  3.435048  ],\n",
              "        [ 2.9122808 ,  0.8392278 , -3.0984163 ],\n",
              "        [-1.7395911 ,  1.911506  , -0.10899419],\n",
              "        [-0.61246413,  1.8508552 , -0.8790775 ],\n",
              "        [-2.3065379 ,  0.85719097,  1.2685921 ],\n",
              "        [ 2.587777  ,  1.2088283 , -3.084798  ],\n",
              "        [-0.8800464 ,  0.31500238,  0.5180971 ],\n",
              "        [ 2.9874775 ,  0.6160428 , -2.946702  ]], dtype=float32),\n",
              " array([[ 2.3240335 , -0.82710147, -1.0918387 ],\n",
              "        [-3.1904483 ,  0.13228926,  2.6793282 ],\n",
              "        [-1.6260185 ,  1.6378063 , -0.09419944],\n",
              "        [ 0.32227764,  1.317309  , -1.185003  ],\n",
              "        [ 1.9320741 ,  0.9973179 , -2.303409  ],\n",
              "        [ 2.6926336 ,  0.62814057, -2.629366  ],\n",
              "        [-2.8326318 ,  0.35772493,  2.1120253 ],\n",
              "        [ 3.4322503 ,  0.13056561, -3.0069993 ],\n",
              "        [-3.0454571 , -0.8201303 ,  3.3760698 ],\n",
              "        [-3.1098373 , -0.8759953 ,  3.4624553 ],\n",
              "        [-1.8316776 ,  1.6038736 ,  0.18019632],\n",
              "        [ 0.18428852,  1.7043223 , -1.5933164 ],\n",
              "        [ 3.4993746 , -0.3408771 , -2.7114754 ],\n",
              "        [ 2.6146338 ,  0.9611919 , -2.9540067 ],\n",
              "        [-3.2733536 , -0.55079925,  3.3977897 ],\n",
              "        [ 1.5133339 ,  1.6424974 , -2.6662588 ]], dtype=float32),\n",
              " array([[-3.2594745 , -0.69623655,  3.454524  ],\n",
              "        [-3.0913172 , -0.89528084,  3.5123525 ],\n",
              "        [ 3.539262  , -0.05433233, -2.8997793 ],\n",
              "        [ 3.1509836 ,  0.07678653, -2.5988836 ],\n",
              "        [-1.008191  , -0.2792211 ,  1.2709194 ],\n",
              "        [ 0.21174937,  1.5055612 , -1.3192132 ],\n",
              "        [ 1.6994458 ,  0.7161291 , -1.8455346 ],\n",
              "        [-3.1200602 , -0.68808204,  3.3373039 ],\n",
              "        [ 1.1618026 ,  1.7002692 , -2.3773806 ],\n",
              "        [ 3.4190361 , -0.92038786, -2.188193  ],\n",
              "        [-0.33534154,  1.0160908 , -0.46545336],\n",
              "        [ 1.6702174 , -1.3019222 , -0.41067946],\n",
              "        [ 0.54347163,  1.3176435 , -1.4541736 ],\n",
              "        [-0.94998443,  1.9574465 , -0.8471904 ],\n",
              "        [ 1.8077707 ,  1.4228892 , -2.658939  ],\n",
              "        [-3.1103628 , -0.61862797,  3.2580798 ]], dtype=float32),\n",
              " array([[ 2.462498  ,  0.9375254 , -2.767104  ],\n",
              "        [-1.2906961 ,  0.41612083,  0.8982169 ],\n",
              "        [-3.374149  , -0.54557055,  3.4023743 ],\n",
              "        [-0.74799347, -0.25622872,  0.8513703 ],\n",
              "        [-3.2544856 , -0.521031  ,  3.322355  ],\n",
              "        [-3.3129244 , -0.58865356,  3.4337804 ],\n",
              "        [-3.235832  , -0.63339716,  3.402801  ],\n",
              "        [ 2.5636766 ,  0.4175067 , -2.5073836 ],\n",
              "        [-3.326409  , -0.52097774,  3.3540316 ],\n",
              "        [ 0.8840933 , -0.9406371 , -0.04312334],\n",
              "        [ 0.95292276,  1.5573084 , -2.121427  ],\n",
              "        [-3.2002614 , -0.7490621 ,  3.4584603 ],\n",
              "        [ 1.5423819 ,  0.9171385 , -1.9378365 ],\n",
              "        [ 3.105612  , -0.07957289, -2.3728883 ],\n",
              "        [-0.00509841,  1.3044248 , -0.93401915],\n",
              "        [ 2.1690948 ,  0.993314  , -2.3935897 ]], dtype=float32),\n",
              " array([[-3.334656  , -0.5903475 ,  3.418365  ],\n",
              "        [ 3.3565567 , -0.55483925, -2.2375438 ],\n",
              "        [-3.2849066 , -0.6477735 ,  3.4483511 ],\n",
              "        [ 1.8289196 ,  1.1442941 , -2.3713298 ],\n",
              "        [ 0.02908697,  1.2638747 , -0.9984407 ],\n",
              "        [ 0.5425932 ,  0.843971  , -1.0105575 ],\n",
              "        [ 3.6020758 , -0.03211397, -2.9912038 ],\n",
              "        [-3.1763303 ,  0.17440042,  2.5922155 ],\n",
              "        [-3.3487403 , -0.35072866,  3.2740757 ],\n",
              "        [-3.2732222 , -0.49764755,  3.2862537 ],\n",
              "        [ 0.25972497,  0.8953917 , -0.81734574],\n",
              "        [-2.8794968 ,  1.2455326 ,  1.4855087 ],\n",
              "        [ 1.5614783 ,  1.2600024 , -2.2341654 ],\n",
              "        [ 2.8880272 , -0.3225427 , -2.0341394 ],\n",
              "        [-1.0360823 ,  0.8288389 ,  0.40285584],\n",
              "        [-3.261852  , -0.67623353,  3.469272  ]], dtype=float32),\n",
              " array([[ 3.353705  ,  0.24650061, -3.0409546 ],\n",
              "        [-1.5553879 ,  1.6746663 ,  0.0069548 ],\n",
              "        [ 1.7822876 ,  0.58826995, -1.7880411 ],\n",
              "        [-2.9600322 , -0.96763825,  3.417511  ],\n",
              "        [-1.5453424 ,  1.5234616 ,  0.14763385],\n",
              "        [-3.147043  ,  0.51995426,  2.2800152 ],\n",
              "        [ 3.454644  , -0.77430695, -2.3958893 ],\n",
              "        [-0.7422734 ,  0.61745965,  0.17745747],\n",
              "        [-0.78657717,  2.1097622 , -1.0363588 ],\n",
              "        [ 3.0058875 ,  0.46091518, -2.741279  ],\n",
              "        [ 0.9465083 ,  1.597049  , -1.9186668 ],\n",
              "        [-3.0513623 , -0.00840769,  2.699306  ],\n",
              "        [ 2.0838675 ,  0.74105597, -2.2262306 ],\n",
              "        [-0.87799686,  1.9753782 , -0.8647851 ],\n",
              "        [ 2.0750988 ,  1.055589  , -2.4488358 ],\n",
              "        [-3.4039974 , -0.35105416,  3.2760751 ]], dtype=float32),\n",
              " array([[-3.465379  , -0.07479263,  3.0384674 ],\n",
              "        [-3.216704  , -0.6560823 ,  3.4426692 ],\n",
              "        [-2.488421  ,  0.59313923,  1.6467714 ],\n",
              "        [-1.6049539 ,  0.95424914,  0.8397982 ],\n",
              "        [-3.13962   , -0.8700355 ,  3.485804  ],\n",
              "        [ 2.3648136 ,  1.0604446 , -2.8711145 ],\n",
              "        [ 0.92948514,  0.9149916 , -1.4846098 ],\n",
              "        [-1.1272684 ,  1.5128393 , -0.3341067 ],\n",
              "        [ 1.1002189 ,  1.8033139 , -2.5060158 ],\n",
              "        [ 2.2014468 ,  0.8057302 , -2.4215982 ],\n",
              "        [-3.3588302 , -0.13402064,  3.1053784 ],\n",
              "        [ 2.1761458 , -1.4639037 , -0.63470143],\n",
              "        [-3.340068  ,  0.9866409 ,  2.0833747 ],\n",
              "        [ 0.57997537,  1.4251    , -1.4084361 ],\n",
              "        [ 2.6019433 ,  0.6148302 , -2.554346  ],\n",
              "        [ 1.4115114 ,  1.5127903 , -2.264122  ]], dtype=float32),\n",
              " array([[ 1.0427028 ,  1.5001738 , -1.9632785 ],\n",
              "        [-2.8234684 , -1.0763851 ,  3.4613044 ],\n",
              "        [-0.58699495,  1.7115977 , -0.8633873 ],\n",
              "        [-2.3022377 ,  1.5472678 ,  0.7021015 ],\n",
              "        [-1.0148365 , -0.92491364,  1.7055528 ],\n",
              "        [-3.2936823 , -0.658919  ,  3.466878  ],\n",
              "        [ 2.3208158 ,  0.48858696, -2.2973168 ],\n",
              "        [-3.190943  , -0.77160287,  3.4652772 ],\n",
              "        [ 1.1035441 , -1.152824  ,  0.02414268],\n",
              "        [ 2.5439441 ,  0.9813686 , -2.8521292 ],\n",
              "        [-0.09227474,  0.08732181,  0.15334785],\n",
              "        [ 3.514874  ,  0.07284456, -2.9683583 ],\n",
              "        [-1.7226413 ,  1.8131424 , -0.04580063],\n",
              "        [ 1.357934  , -0.16464917, -0.86833465],\n",
              "        [-3.2521555 , -0.30058888,  3.1358557 ],\n",
              "        [ 2.24735   ,  1.1256473 , -2.7158127 ]], dtype=float32),\n",
              " array([[ 2.5216355 ,  0.72750473, -2.6402686 ],\n",
              "        [-1.7148813 ,  0.2771527 ,  1.3909564 ],\n",
              "        [-3.3009508 , -0.71626127,  3.4211595 ],\n",
              "        [ 0.05162108,  0.9842664 , -0.66924226],\n",
              "        [-0.9858697 ,  2.122995  , -0.91895235],\n",
              "        [ 0.26034114,  1.4374828 , -1.3178856 ],\n",
              "        [ 2.588764  ,  0.8614617 , -2.6945992 ],\n",
              "        [-1.1830267 ,  1.3367037 , -0.11782268],\n",
              "        [-3.2753656 , -0.6856376 ,  3.439834  ],\n",
              "        [ 3.0901663 ,  0.63041615, -3.0220718 ],\n",
              "        [-3.3594024 , -0.1710031 ,  3.0883791 ],\n",
              "        [ 2.5900977 ,  0.35308686, -2.366472  ],\n",
              "        [ 0.90090114,  1.3708173 , -1.6699464 ],\n",
              "        [ 0.5500512 ,  1.6152732 , -1.6862478 ],\n",
              "        [ 0.6467194 ,  1.4771744 , -1.604176  ],\n",
              "        [ 1.5831031 ,  1.3719207 , -2.3371072 ]], dtype=float32),\n",
              " array([[ 0.7910247 ,  1.4314225 , -1.8175609 ],\n",
              "        [ 2.5039866 ,  0.43798715, -2.3048208 ],\n",
              "        [ 0.05071207,  1.481712  , -1.22578   ],\n",
              "        [-3.141163  ,  0.9257938 ,  2.0831962 ],\n",
              "        [-3.3109796 , -0.47941303,  3.3323057 ],\n",
              "        [ 1.829153  , -0.04598957, -1.3897457 ],\n",
              "        [ 1.2709315 ,  1.2701919 , -2.168121  ],\n",
              "        [ 1.0864114 ,  1.2206892 , -1.8478658 ],\n",
              "        [ 0.0549404 ,  1.2086891 , -1.0560966 ],\n",
              "        [ 1.5607475 ,  1.45536   , -2.4488292 ],\n",
              "        [ 1.9873995 , -0.48009053, -1.2052048 ],\n",
              "        [-3.2863083 , -0.47986048,  3.302644  ],\n",
              "        [ 1.6889956 ,  1.4862658 , -2.5779583 ],\n",
              "        [ 2.8616092 ,  0.2568303 , -2.5818093 ],\n",
              "        [-3.3159854 , -0.669364  ,  3.472505  ],\n",
              "        [ 3.5583937 , -0.0055507 , -3.004521  ]], dtype=float32),\n",
              " array([[ 1.0339179 ,  1.6247417 , -2.1619089 ],\n",
              "        [-3.3986597 , -0.46600625,  3.379643  ],\n",
              "        [-1.2110708 ,  0.79467297,  0.5675088 ],\n",
              "        [ 0.06959791,  1.610519  , -1.3640902 ],\n",
              "        [-1.4965335 ,  1.8318754 , -0.19912027],\n",
              "        [-1.7867647 ,  1.9598825 , -0.00621814],\n",
              "        [-1.636525  , -0.33783796,  1.8917038 ],\n",
              "        [ 2.819956  ,  0.47713715, -2.6076467 ],\n",
              "        [-1.4682829 ,  1.2549545 ,  0.21508723],\n",
              "        [ 2.3352835 , -0.9958639 , -1.1671901 ],\n",
              "        [ 3.0956032 ,  0.01922031, -2.6671462 ],\n",
              "        [-3.0368135 , -0.17529286,  2.8846195 ],\n",
              "        [-3.3429997 , -0.563545  ,  3.4255922 ],\n",
              "        [-2.5242176 ,  1.3782768 ,  0.9563112 ],\n",
              "        [ 0.12428288,  1.2056714 , -1.1155815 ],\n",
              "        [-0.07274704,  1.6512748 , -1.2246383 ]], dtype=float32),\n",
              " array([[-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [-3.2605593 , -0.60458654,  3.4009762 ],\n",
              "        [-3.3297203 ,  0.06891317,  2.8648753 ],\n",
              "        [-1.8970782 ,  0.6998421 ,  0.99136674],\n",
              "        [-3.258996  ,  0.28088042,  2.6480181 ],\n",
              "        [ 1.3632308 ,  1.4366429 , -2.1989949 ],\n",
              "        [ 1.7936183 ,  0.890581  , -2.1895404 ],\n",
              "        [ 3.0011528 ,  0.32506803, -2.755718  ],\n",
              "        [-3.0317738 ,  0.24486656,  2.4989707 ],\n",
              "        [-3.1827912 , -0.80342805,  3.4782882 ],\n",
              "        [-3.04879   , -0.8648752 ,  3.4810448 ],\n",
              "        [ 0.5846146 ,  1.350964  , -1.4928727 ],\n",
              "        [-3.3557742 , -0.33150962,  3.237774  ],\n",
              "        [-3.0027604 , -0.80707705,  3.379443  ],\n",
              "        [ 1.7020701 , -0.9473363 , -0.6601405 ],\n",
              "        [-3.2114458 , -0.20092824,  3.017407  ]], dtype=float32),\n",
              " array([[-2.2746391e+00,  1.6130782e+00,  5.1659155e-01],\n",
              "        [ 1.4270035e+00,  1.5280441e+00, -2.3620582e+00],\n",
              "        [ 2.5478789e-01,  3.1612924e-01, -3.8290060e-01],\n",
              "        [-1.9659100e+00,  1.8548141e+00, -2.7646642e-04],\n",
              "        [ 2.0114095e+00, -1.7904583e-01, -1.5268732e+00],\n",
              "        [-3.2149851e+00, -7.2636878e-01,  3.4525084e+00],\n",
              "        [ 1.7847011e+00,  6.6786647e-01, -1.9789047e+00],\n",
              "        [ 2.0023489e-01,  1.8322583e+00, -1.6564739e+00],\n",
              "        [ 4.2198691e-01,  1.2754616e+00, -1.3416216e+00],\n",
              "        [-1.0635451e+00,  1.4104942e+00, -1.5950391e-01],\n",
              "        [ 1.7702669e+00,  7.1934474e-01, -2.0124087e+00],\n",
              "        [-2.0571768e+00,  1.5266825e+00,  4.2960885e-01],\n",
              "        [-2.5103457e+00,  9.1372555e-01,  1.3196869e+00],\n",
              "        [-1.0255696e+00,  2.2134237e+00, -9.1973341e-01],\n",
              "        [-3.3187993e+00, -2.2089428e-01,  3.1077290e+00],\n",
              "        [-2.4752200e+00,  1.3861719e+00,  1.1124493e+00]], dtype=float32),\n",
              " array([[ 1.4086099 ,  0.15591565, -1.250226  ],\n",
              "        [ 0.46233976,  1.1599003 , -1.1021823 ],\n",
              "        [-0.04929994,  0.46570238, -0.12214292],\n",
              "        [ 0.7491764 ,  1.2334231 , -1.6067331 ],\n",
              "        [-2.9381878 , -0.65008587,  3.1619315 ],\n",
              "        [ 2.0395577 ,  0.7025678 , -2.196715  ],\n",
              "        [-1.9418565 ,  1.7836444 ,  0.14076358],\n",
              "        [ 3.0903237 ,  0.45639756, -2.8875632 ],\n",
              "        [-3.1929426 , -0.74448144,  3.4603765 ],\n",
              "        [-2.4932954 , -0.76395977,  2.8952029 ],\n",
              "        [-0.6988539 , -0.08732504,  0.7766725 ],\n",
              "        [ 0.43524244,  1.8738805 , -1.939098  ],\n",
              "        [-0.64133245,  1.8008112 , -0.9125552 ],\n",
              "        [ 2.5999546 ,  0.14203107, -2.1321096 ],\n",
              "        [-0.3372308 ,  0.76420295, -0.2973572 ],\n",
              "        [-0.08310517,  0.72063965, -0.40732166]], dtype=float32),\n",
              " array([[ 2.7602432 ,  0.73525596, -2.8661094 ],\n",
              "        [-3.335844  , -0.23237233,  3.1397176 ],\n",
              "        [-2.292556  ,  1.5731593 ,  0.65688825],\n",
              "        [ 2.0799515 ,  1.0796171 , -2.4674478 ],\n",
              "        [ 1.0802352 ,  1.1823179 , -1.7002356 ],\n",
              "        [-2.96843   , -0.31972566,  2.9319763 ],\n",
              "        [-2.5880167 , -0.90564   ,  3.019191  ],\n",
              "        [-3.2749655 , -0.31225887,  3.1726415 ],\n",
              "        [ 2.5804331 ,  0.45384574, -2.4910412 ],\n",
              "        [-2.700794  , -0.67498106,  2.9669085 ],\n",
              "        [ 3.363137  ,  0.09443828, -2.8498821 ],\n",
              "        [-0.5588612 ,  1.9284146 , -1.1288729 ],\n",
              "        [ 0.2225818 ,  0.65648955, -0.65584147],\n",
              "        [-3.0626993 , -0.14399336,  2.840945  ],\n",
              "        [-0.09102224,  0.860312  , -0.37175584],\n",
              "        [-3.2864811 , -0.5357365 ,  3.302425  ]], dtype=float32),\n",
              " array([[-3.378703  , -0.39248428,  3.326744  ],\n",
              "        [ 0.8344518 ,  1.8570508 , -2.2315874 ],\n",
              "        [ 1.5123428 ,  1.1690625 , -2.1215627 ],\n",
              "        [-0.81214374,  1.8085114 , -0.7420016 ],\n",
              "        [-2.4113789 ,  1.6604079 ,  0.74437046],\n",
              "        [-0.7597924 ,  0.11292826,  0.60321516],\n",
              "        [-3.4484506 ,  0.4179394 ,  2.714771  ],\n",
              "        [ 2.7029498 ,  0.6883115 , -2.7098207 ],\n",
              "        [-3.2399178 , -0.33050478,  3.1513817 ],\n",
              "        [ 1.5953897 ,  1.0225624 , -2.0488849 ],\n",
              "        [-2.2277167 ,  1.1264837 ,  1.0982662 ],\n",
              "        [-3.161914  , -0.7654594 ,  3.4492302 ],\n",
              "        [-3.1491563 , -0.8407885 ,  3.498129  ],\n",
              "        [ 0.9916833 ,  1.176993  , -1.6491809 ],\n",
              "        [ 1.7048712 ,  0.6487695 , -1.8592407 ],\n",
              "        [-3.1295483 , -0.83134925,  3.464932  ]], dtype=float32),\n",
              " array([[ 0.15323642,  0.25667801, -0.16764592],\n",
              "        [ 2.0164912 ,  1.2243418 , -2.6410332 ],\n",
              "        [ 1.3036221 ,  1.5701283 , -2.4324162 ],\n",
              "        [-2.7745607 ,  1.2571263 ,  1.456519  ],\n",
              "        [-3.0854366 , -0.25552887,  2.8427196 ],\n",
              "        [ 2.1868486 ,  1.3239094 , -2.7784338 ],\n",
              "        [-2.9824464 ,  0.29251614,  2.4283495 ],\n",
              "        [-3.2821033 , -0.41489124,  3.2827764 ],\n",
              "        [-0.7666469 ,  2.0229123 , -0.925133  ],\n",
              "        [-3.3425896 , -0.5057265 ,  3.4145684 ],\n",
              "        [ 2.0723886 ,  0.8019444 , -2.3226519 ],\n",
              "        [ 1.2317508 ,  1.4751191 , -2.1610026 ],\n",
              "        [-3.199031  , -0.67051816,  3.416816  ],\n",
              "        [ 3.2350855 ,  0.20374933, -2.8385572 ],\n",
              "        [-3.4549043 , -0.39070347,  3.334639  ],\n",
              "        [-3.2206743 , -0.5597926 ,  3.30721   ]], dtype=float32),\n",
              " array([[-3.281841  ,  0.13766567,  2.7274842 ],\n",
              "        [-3.3066852 ,  0.07762666,  2.77431   ],\n",
              "        [-2.8035028 ,  0.96950406,  1.7331448 ],\n",
              "        [-1.7093394 ,  0.500759  ,  0.96766675],\n",
              "        [-2.9083326 ,  1.1886963 ,  1.4633069 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 2.5503297 , -0.99487185, -1.2579215 ],\n",
              "        [ 0.6385052 ,  1.5302528 , -1.6997821 ],\n",
              "        [ 2.6681292 ,  0.35238397, -2.5041997 ],\n",
              "        [ 1.3457927 ,  1.6546849 , -2.5217028 ],\n",
              "        [-2.6786995 , -1.0732131 ,  3.3704605 ],\n",
              "        [-1.551297  , -0.47926393,  1.8443797 ],\n",
              "        [-3.145962  , -0.7097435 ,  3.3927355 ],\n",
              "        [-3.2760966 , -0.6812001 ,  3.4349623 ],\n",
              "        [-1.2950355 ,  1.7017798 , -0.34778306],\n",
              "        [-2.8443513 , -0.3557863 ,  2.8200984 ]], dtype=float32),\n",
              " array([[-3.4217389 ,  0.0313764 ,  2.9499793 ],\n",
              "        [ 2.094155  ,  1.1238197 , -2.5559835 ],\n",
              "        [-0.65062386,  1.5536661 , -0.66094196],\n",
              "        [ 1.2866329 ,  1.6382459 , -2.3925743 ],\n",
              "        [ 3.1424022 ,  0.6692703 , -3.1665378 ],\n",
              "        [ 2.5981803 ,  0.50045836, -2.4865026 ],\n",
              "        [ 3.3532822 , -0.09095139, -2.702734  ],\n",
              "        [ 1.3062879 ,  1.4100542 , -2.180851  ],\n",
              "        [-3.1416361 , -0.66321456,  3.3669748 ],\n",
              "        [ 3.6078842 , -0.19727257, -2.8967152 ],\n",
              "        [ 0.73379594,  1.2020204 , -1.6277852 ],\n",
              "        [ 3.1675763 ,  0.44861004, -2.9690008 ],\n",
              "        [-3.2792    , -0.5122304 ,  3.3328493 ],\n",
              "        [-3.215469  , -0.7750344 ,  3.4534476 ],\n",
              "        [ 2.348424  ,  0.9420856 , -2.637293  ],\n",
              "        [ 0.79572755,  1.5678596 , -1.8374823 ]], dtype=float32),\n",
              " array([[ 1.1809913 ,  1.3573431 , -1.930264  ],\n",
              "        [-3.4613657 , -0.12858513,  3.130413  ],\n",
              "        [ 1.8051119 ,  1.2053299 , -2.3831491 ],\n",
              "        [ 1.7072133 ,  1.4176044 , -2.5335858 ],\n",
              "        [ 2.7017748 ,  0.76470304, -2.8417838 ],\n",
              "        [-1.4504778 ,  1.463664  ,  0.08451705],\n",
              "        [-1.414791  ,  0.18987772,  1.2489051 ],\n",
              "        [-2.3760376 , -0.89700985,  2.9812489 ],\n",
              "        [-2.233463  ,  0.9390302 ,  1.1455076 ],\n",
              "        [-1.5924841 ,  2.0879917 , -0.2835628 ],\n",
              "        [ 3.6318    , -0.5950105 , -2.6111355 ],\n",
              "        [-1.2026511 ,  1.6223928 , -0.2972737 ],\n",
              "        [ 2.310136  ,  1.0930678 , -2.6256728 ],\n",
              "        [ 2.484958  ,  0.5543436 , -2.4617994 ],\n",
              "        [ 0.40305984, -0.4111946 ,  0.13919874],\n",
              "        [-0.135127  ,  1.473318  , -1.0050328 ]], dtype=float32),\n",
              " array([[-1.6606982 ,  0.32524303,  1.2493448 ],\n",
              "        [-3.411247  , -0.42038688,  3.3277571 ],\n",
              "        [ 0.1663551 ,  1.7068337 , -1.360331  ],\n",
              "        [-3.2343853 , -0.3425574 ,  3.1546597 ],\n",
              "        [-0.63469386,  1.7163205 , -0.9248216 ],\n",
              "        [-3.1541493 ,  0.33234718,  2.518447  ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 1.0024182 ,  0.83768624, -1.4119743 ],\n",
              "        [ 0.85205215,  1.6764473 , -2.04623   ],\n",
              "        [-1.4805286 ,  1.9993371 , -0.418023  ],\n",
              "        [ 2.397123  ,  1.0483431 , -2.7357311 ],\n",
              "        [ 0.28815013,  1.4078263 , -1.3596632 ],\n",
              "        [ 0.98931843,  1.4432338 , -2.0404613 ],\n",
              "        [ 3.3651702 ,  0.34753728, -3.1118343 ],\n",
              "        [ 0.9798268 ,  0.9052037 , -1.5478854 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ]], dtype=float32),\n",
              " array([[ 1.6720093 ,  1.1805695 , -2.2386172 ],\n",
              "        [-3.2217743 , -0.43586925,  3.208075  ],\n",
              "        [ 1.9283139 ,  1.2713333 , -2.6725492 ],\n",
              "        [ 1.8533046 ,  1.0925009 , -2.2801216 ],\n",
              "        [ 0.91399175,  0.7239732 , -1.1966794 ],\n",
              "        [ 3.5709805 , -0.19653821, -2.7845743 ],\n",
              "        [ 0.901059  ,  0.44387677, -1.0787292 ],\n",
              "        [-3.0342045 ,  0.3531092 ,  2.4280818 ],\n",
              "        [ 3.02865   , -0.20677814, -2.40428   ],\n",
              "        [-3.3453505 , -0.1328071 ,  3.0173068 ],\n",
              "        [-3.2719815 , -0.59845173,  3.4109883 ],\n",
              "        [ 1.8751997 ,  0.17504445, -1.6185973 ],\n",
              "        [-3.2411964 ,  0.31268993,  2.5311875 ],\n",
              "        [ 0.23529972,  1.7806011 , -1.7632939 ],\n",
              "        [ 3.1941283 ,  0.66882885, -3.241057  ],\n",
              "        [ 0.25821504,  1.4682266 , -1.3679584 ]], dtype=float32),\n",
              " array([[ 2.4957654 ,  0.35311988, -2.2861745 ],\n",
              "        [ 0.21156217,  1.6130979 , -1.4421754 ],\n",
              "        [ 2.4247758 ,  1.0650197 , -2.7891355 ],\n",
              "        [-3.2097762 , -0.6413436 ,  3.3760676 ],\n",
              "        [-3.2613487 , -0.59553015,  3.423806  ],\n",
              "        [-3.4931195 ,  0.68741417,  2.415728  ],\n",
              "        [-1.5412803 ,  0.9819428 ,  0.63331914],\n",
              "        [ 0.76376355,  1.1646296 , -1.4518437 ],\n",
              "        [ 2.688503  , -1.4550472 , -1.0271994 ],\n",
              "        [-1.4488043 , -1.1521493 ,  2.2582436 ],\n",
              "        [-3.4517846 , -0.1725545 ,  3.1349165 ],\n",
              "        [-2.9195654 ,  0.5574649 ,  2.1051488 ],\n",
              "        [ 1.2869829 ,  0.9476533 , -1.7659914 ],\n",
              "        [-3.0028062 , -0.48342216,  3.109573  ],\n",
              "        [ 0.4090878 ,  1.7803432 , -1.8847512 ],\n",
              "        [ 3.231856  ,  0.39539772, -2.9994798 ]], dtype=float32),\n",
              " array([[ 2.637153  ,  0.33319008, -2.3979056 ],\n",
              "        [-1.3026139 ,  2.0644116 , -0.47952273],\n",
              "        [ 0.46237436, -0.88398826,  0.2378339 ],\n",
              "        [ 1.9695992 ,  0.92407274, -2.288783  ],\n",
              "        [-3.001405  , -0.35703757,  2.9988332 ],\n",
              "        [-1.7931648 , -1.3031851 ,  2.8256567 ],\n",
              "        [-0.25889406,  1.9811988 , -1.3484162 ],\n",
              "        [ 2.0053947 ,  0.7469816 , -2.268066  ],\n",
              "        [-3.2003531 , -0.52267313,  3.271408  ],\n",
              "        [ 0.37645578,  1.8362328 , -1.7284238 ],\n",
              "        [-1.6777656 , -0.6768192 ,  2.3679323 ],\n",
              "        [ 0.71204686,  0.5309565 , -0.9948293 ],\n",
              "        [ 0.88127476,  1.575996  , -2.0098772 ],\n",
              "        [-3.3157027 , -0.40175098,  3.2512884 ],\n",
              "        [-1.5841486 ,  1.1078377 ,  0.57593775],\n",
              "        [ 2.5669868 ,  0.43163973, -2.3378909 ]], dtype=float32),\n",
              " array([[ 2.2921212 ,  1.2867961 , -2.946136  ],\n",
              "        [-1.9405252 ,  1.5707773 ,  0.25802663],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-0.75448054,  1.7858616 , -0.8296496 ],\n",
              "        [ 2.1315608 , -0.17248009, -1.5087473 ],\n",
              "        [ 2.692516  ,  0.49684978, -2.619737  ],\n",
              "        [ 2.9886873 ,  0.2632702 , -2.676292  ],\n",
              "        [ 0.7157387 ,  1.6309537 , -1.9354109 ],\n",
              "        [ 1.3266612 ,  1.1627322 , -1.9683151 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [ 1.9896482 ,  0.30836716, -1.8809266 ],\n",
              "        [-3.3437693 , -0.25471753,  3.1431274 ],\n",
              "        [-3.2717874 , -0.59914625,  3.3545797 ],\n",
              "        [-3.3098118 , -0.60327566,  3.4261882 ],\n",
              "        [ 1.134373  ,  0.49152994, -1.160847  ],\n",
              "        [-2.2568388 ,  1.1369534 ,  1.1567757 ]], dtype=float32),\n",
              " array([[ 2.1146624 ,  1.2817067 , -2.7415164 ],\n",
              "        [-3.1005383 , -0.8273636 ,  3.4204588 ],\n",
              "        [ 3.5907104 , -0.55950457, -2.6287494 ],\n",
              "        [-3.041699  ,  0.1133389 ,  2.6527271 ],\n",
              "        [ 1.294424  ,  0.95472884, -1.8075689 ],\n",
              "        [-2.9622123 , -0.60599095,  3.143591  ],\n",
              "        [-3.2972076 , -0.6002244 ,  3.4264736 ],\n",
              "        [ 0.8672259 ,  1.5131707 , -1.8413477 ],\n",
              "        [-2.3875673 ,  1.5366987 ,  0.8737112 ],\n",
              "        [-0.67265874,  2.044518  , -1.146878  ],\n",
              "        [-1.0928675 ,  1.8062621 , -0.5408089 ],\n",
              "        [-3.204459  , -0.54310626,  3.3089128 ],\n",
              "        [ 1.1665611 , -1.3090727 ,  0.23383361],\n",
              "        [ 3.2250094 , -0.75107175, -2.1191945 ],\n",
              "        [ 3.626427  , -0.7901951 , -2.3844748 ],\n",
              "        [ 3.6636298 , -0.3477251 , -2.8606358 ]], dtype=float32),\n",
              " array([[-3.6775255e-01,  1.7064456e+00, -9.8223346e-01],\n",
              "        [-3.1257079e+00, -7.9205173e-01,  3.4305847e+00],\n",
              "        [-3.1900108e+00, -4.0864304e-01,  3.1447897e+00],\n",
              "        [ 1.5452319e+00,  1.1070831e+00, -2.1360025e+00],\n",
              "        [-2.8408344e+00,  1.0263022e-01,  2.4828181e+00],\n",
              "        [ 6.3788766e-01,  7.7881300e-01, -1.1269993e+00],\n",
              "        [ 1.2045378e-03,  1.8306109e+00, -1.5671352e+00],\n",
              "        [ 2.8783913e+00, -2.6650140e-01, -2.0954733e+00],\n",
              "        [ 2.9852178e+00,  1.5409739e-01, -2.4825828e+00],\n",
              "        [-3.4572837e+00, -7.5814798e-02,  3.0774550e+00],\n",
              "        [-2.1332176e+00,  4.2278937e-01,  1.6646504e+00],\n",
              "        [-1.1003404e+00,  1.0542986e+00,  3.1242532e-01],\n",
              "        [-3.1345351e+00, -7.4211752e-01,  3.3957171e+00],\n",
              "        [-3.2055330e+00, -7.5103372e-01,  3.4636209e+00],\n",
              "        [-3.2069876e+00, -6.7685652e-01,  3.4176168e+00],\n",
              "        [-2.7720816e+00,  6.8153918e-01,  1.7979872e+00]], dtype=float32),\n",
              " array([[-6.8500615e-03,  1.3725933e+00, -1.0221519e+00],\n",
              "        [ 7.1809238e-01,  1.5760194e+00, -1.8210204e+00],\n",
              "        [ 3.3992639e+00, -5.8754418e-02, -2.8307991e+00],\n",
              "        [-7.1555489e-01,  2.2178023e+00, -1.1745682e+00],\n",
              "        [-2.8467021e+00, -7.8453511e-01,  3.2253697e+00],\n",
              "        [ 1.5512580e+00,  1.0578653e+00, -2.0824118e+00],\n",
              "        [-1.9817329e-03,  1.6178557e+00, -1.3470154e+00],\n",
              "        [ 1.3453883e+00,  1.1136016e+00, -1.8765473e+00],\n",
              "        [ 3.2529616e+00, -1.9779047e-01, -2.5780978e+00],\n",
              "        [ 1.3800982e+00,  1.1438001e+00, -2.0246148e+00],\n",
              "        [ 1.2462568e+00,  1.3463068e+00, -1.9362210e+00],\n",
              "        [ 1.3795379e+00,  1.4003826e+00, -2.2364531e+00],\n",
              "        [ 2.1803907e-01, -8.8016188e-01,  6.7973846e-01],\n",
              "        [-1.6788262e+00,  2.1777195e-01,  1.3835840e+00],\n",
              "        [-3.4781969e+00,  2.9589042e-01,  2.7991281e+00],\n",
              "        [-2.6258981e+00,  6.3770169e-01,  1.6397293e+00]], dtype=float32),\n",
              " array([[ 2.6452982 ,  0.737883  , -2.643828  ],\n",
              "        [ 3.2562845 ,  0.6080067 , -3.198793  ],\n",
              "        [ 3.077565  , -0.13129525, -2.4164555 ],\n",
              "        [-0.56306976,  1.028835  , -0.09197437],\n",
              "        [-2.6057081 , -0.33567894,  2.7848566 ],\n",
              "        [-3.357743  , -0.43982884,  3.360983  ],\n",
              "        [ 1.2849162 ,  0.9317874 , -1.7812626 ],\n",
              "        [-1.1809733 ,  1.7212383 , -0.3518789 ],\n",
              "        [ 2.1429155 , -0.89439166, -0.9076869 ],\n",
              "        [-3.340161  ,  0.2359233 ,  2.7514143 ],\n",
              "        [ 1.6407574 ,  0.37603083, -1.6288738 ],\n",
              "        [-2.9620416 , -0.5026922 ,  3.1014376 ],\n",
              "        [ 1.014934  ,  1.6023211 , -2.0901332 ],\n",
              "        [ 2.8135183 ,  0.9829196 , -3.1588047 ],\n",
              "        [-0.33707836,  0.970758  , -0.36382532],\n",
              "        [-2.053392  ,  0.51654077,  1.4859372 ]], dtype=float32),\n",
              " array([[-2.344085  ,  1.5428656 ,  0.6905184 ],\n",
              "        [ 2.5765207 ,  0.77554107, -2.6611855 ],\n",
              "        [ 2.6195652 ,  0.22127032, -2.397441  ],\n",
              "        [ 3.4463818 , -0.45361117, -2.5776148 ],\n",
              "        [ 2.8752983 ,  0.91004974, -3.0370498 ],\n",
              "        [-0.27977952,  2.1077876 , -1.4122497 ],\n",
              "        [-3.3997815 , -0.07053065,  3.0555239 ],\n",
              "        [ 3.4223642 , -0.63987505, -2.4274898 ],\n",
              "        [ 3.6679478 , -0.51589507, -2.693665  ],\n",
              "        [-0.800078  ,  1.8384612 , -0.7832639 ],\n",
              "        [-0.3649575 ,  1.9291857 , -1.0999967 ],\n",
              "        [-3.3249571 , -0.14315687,  3.1044364 ],\n",
              "        [ 2.539516  , -0.1785829 , -2.018693  ],\n",
              "        [ 3.0670912 ,  0.11572678, -2.650041  ],\n",
              "        [-0.5402965 ,  1.5735041 , -0.6266632 ],\n",
              "        [-3.0400426 ,  0.5215909 ,  2.283863  ]], dtype=float32),\n",
              " array([[-2.429103  ,  0.04735579,  2.1967115 ],\n",
              "        [ 3.5359483 , -0.23422028, -2.849739  ],\n",
              "        [ 3.3980339 ,  0.37000468, -3.134618  ],\n",
              "        [ 2.1863592 , -1.121976  , -0.90020156],\n",
              "        [ 1.0885701 ,  1.389552  , -2.1876793 ],\n",
              "        [-1.1024528 ,  2.217482  , -0.823162  ],\n",
              "        [-3.2472415 , -0.7476069 ,  3.4818466 ],\n",
              "        [-3.294679  , -0.360814  ,  3.2078679 ],\n",
              "        [-1.6594055 ,  1.2489475 ,  0.2770928 ],\n",
              "        [ 1.7657123 ,  0.2735016 , -1.5652869 ],\n",
              "        [ 3.160914  , -0.60959876, -2.1777391 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 0.8267939 ,  1.5417849 , -2.0089374 ],\n",
              "        [-2.030511  ,  1.7626774 ,  0.26142973],\n",
              "        [ 1.4144613 ,  1.2883002 , -2.0578527 ],\n",
              "        [-3.4757378 ,  0.32217875,  2.7375855 ]], dtype=float32),\n",
              " array([[-0.80813664,  1.9016117 , -0.82430637],\n",
              "        [ 3.5607617 , -0.779295  , -2.3490763 ],\n",
              "        [-3.4430642 , -0.05649919,  2.981557  ],\n",
              "        [-2.8629599 ,  1.1508871 ,  1.4301189 ],\n",
              "        [-2.8159244 ,  1.0105383 ,  1.6466001 ],\n",
              "        [ 1.1737525 ,  1.6255524 , -2.278171  ],\n",
              "        [ 0.47695228,  1.3367013 , -1.3972771 ],\n",
              "        [ 3.229956  ,  0.2917625 , -2.8546438 ],\n",
              "        [-3.2175171 , -0.6805711 ,  3.3742166 ],\n",
              "        [ 0.8068681 ,  0.58839464, -0.9611259 ],\n",
              "        [ 1.1496259 ,  1.133099  , -1.8621082 ],\n",
              "        [ 1.102561  ,  1.3150598 , -1.9621134 ],\n",
              "        [ 3.5489686 ,  0.00801451, -2.971335  ],\n",
              "        [ 1.7790804 ,  1.4338398 , -2.664197  ],\n",
              "        [-3.3961468 , -0.3931012 ,  3.250944  ],\n",
              "        [-1.9149547 ,  1.2525905 ,  0.76111364]], dtype=float32),\n",
              " array([[ 1.8793175 ,  1.0705761 , -2.4945705 ],\n",
              "        [-2.6616087 ,  0.5797804 ,  1.7668314 ],\n",
              "        [-3.0292714 ,  0.15345316,  2.491506  ],\n",
              "        [-3.201016  , -0.6904272 ,  3.4243112 ],\n",
              "        [ 1.7075709 ,  1.455716  , -2.6054225 ],\n",
              "        [-3.1860025 , -0.136177  ,  2.8984003 ],\n",
              "        [ 1.3920797 ,  1.4840275 , -2.3691554 ],\n",
              "        [-0.55587727,  1.2130474 , -0.5584506 ],\n",
              "        [ 2.9312756 ,  0.38948524, -2.6937833 ],\n",
              "        [-2.9671211 , -0.00634011,  2.6293736 ],\n",
              "        [-1.9759315 ,  1.332362  ,  0.7227111 ],\n",
              "        [ 2.724263  ,  0.74167854, -2.7649908 ],\n",
              "        [-1.5812796 , -1.025935  ,  2.2830696 ],\n",
              "        [ 0.6464481 ,  0.40089786, -0.70955145],\n",
              "        [ 1.605114  ,  1.1765299 , -2.1310253 ],\n",
              "        [-3.190246  ,  0.17882861,  2.662313  ]], dtype=float32),\n",
              " array([[ 2.025567  ,  1.2496275 , -2.8055391 ],\n",
              "        [ 2.6248376 ,  0.3957782 , -2.3840852 ],\n",
              "        [ 1.955211  ,  1.0755807 , -2.4479103 ],\n",
              "        [ 2.465195  ,  1.041575  , -2.7998645 ],\n",
              "        [ 3.4050217 ,  0.29078326, -3.0474544 ],\n",
              "        [-2.049318  ,  0.03034183,  1.8867853 ],\n",
              "        [-1.222689  ,  1.3318632 , -0.10310653],\n",
              "        [-2.2501538 ,  1.6624483 ,  0.63295096],\n",
              "        [ 1.441095  ,  0.41107166, -1.3206373 ],\n",
              "        [ 3.0744598 ,  0.5591471 , -3.0303884 ],\n",
              "        [-0.6097666 ,  1.7957677 , -0.7206396 ],\n",
              "        [ 3.169832  ,  0.40120977, -2.873293  ],\n",
              "        [-1.8000023 , -0.10377214,  1.7235146 ],\n",
              "        [ 0.02070287,  1.440174  , -1.0473566 ],\n",
              "        [ 2.5089624 ,  0.00478302, -1.9649212 ],\n",
              "        [ 3.322165  ,  0.09303803, -2.7920504 ]], dtype=float32),\n",
              " array([[ 1.4372845 ,  1.1022822 , -1.992906  ],\n",
              "        [-3.137152  , -0.8355888 ,  3.494966  ],\n",
              "        [-0.28620657,  0.89680064, -0.38391963],\n",
              "        [-0.41386035,  1.3691195 , -0.8878498 ],\n",
              "        [-0.27192238,  1.0984459 , -0.54556847],\n",
              "        [ 2.0412288 ,  0.4806122 , -2.0988207 ],\n",
              "        [ 2.56968   ,  0.7275579 , -2.6662765 ],\n",
              "        [ 0.11015707, -0.15037237,  0.13976032],\n",
              "        [ 0.9888564 ,  1.4960045 , -2.1397243 ],\n",
              "        [ 3.0708835 , -0.17095077, -2.343929  ],\n",
              "        [-3.2648926 , -0.6340411 ,  3.4534826 ],\n",
              "        [-2.1983235 ,  1.5359277 ,  0.53243244],\n",
              "        [ 1.0532236 ,  1.1916357 , -1.6849649 ],\n",
              "        [-3.224674  , -0.7241816 ,  3.4580262 ],\n",
              "        [ 1.0395981 ,  1.0136044 , -1.6049882 ],\n",
              "        [-3.2127798 , -0.50765014,  3.2652721 ]], dtype=float32),\n",
              " array([[ 2.1617951 ,  0.53949606, -2.1186757 ],\n",
              "        [ 1.243444  ,  1.0278397 , -1.7590901 ],\n",
              "        [ 1.6503804 ,  1.1513149 , -2.0985634 ],\n",
              "        [-3.1835377 , -0.66167235,  3.415389  ],\n",
              "        [-0.09563893,  1.5820746 , -1.0710547 ],\n",
              "        [ 0.04591841,  0.79568446, -0.51097465],\n",
              "        [-3.1946657 , -0.7473826 ,  3.4400785 ],\n",
              "        [-1.0219854 ,  0.7063805 ,  0.4081873 ],\n",
              "        [ 2.6950603 ,  0.83352566, -2.867115  ],\n",
              "        [-3.1701143 , -0.82356995,  3.4875212 ],\n",
              "        [-2.284423  , -0.2475313 ,  2.3031707 ],\n",
              "        [-0.6214047 ,  1.4342357 , -0.33701912],\n",
              "        [-0.8974548 ,  1.6632662 , -0.6050372 ],\n",
              "        [ 1.4917127 , -1.1812801 , -0.23783824],\n",
              "        [ 0.09457448, -0.46721485,  0.2653701 ],\n",
              "        [-3.3076608 ,  0.03869061,  2.9072766 ]], dtype=float32),\n",
              " array([[-3.2084272 , -0.7784711 ,  3.480411  ],\n",
              "        [ 0.96931833,  1.0985852 , -1.5256509 ],\n",
              "        [ 3.4294686 ,  0.32077104, -3.1587543 ],\n",
              "        [-3.1512582 , -0.78230304,  3.4577224 ],\n",
              "        [-3.2930615 , -0.6809051 ,  3.4528718 ],\n",
              "        [-1.7773681 ,  1.4729807 ,  0.5109266 ],\n",
              "        [-0.31544864,  1.8708421 , -1.3524033 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-2.3405674 ,  0.98180467,  1.2175024 ],\n",
              "        [ 1.0821861 ,  0.44029644, -1.3159622 ],\n",
              "        [-1.090794  ,  0.6665836 ,  0.618106  ],\n",
              "        [ 1.1375242 ,  0.57399666, -1.301839  ],\n",
              "        [ 2.9851618 ,  0.59801847, -2.9039252 ],\n",
              "        [ 2.0578794 ,  1.16367   , -2.6429298 ],\n",
              "        [ 1.9463779 ,  1.0996668 , -2.4602475 ],\n",
              "        [-3.0198958 , -0.44325057,  3.0824072 ]], dtype=float32),\n",
              " array([[-3.2812107 , -0.59664106,  3.4197679 ],\n",
              "        [ 0.25452223, -0.90746695,  0.5529933 ],\n",
              "        [ 2.9209716 ,  0.8267592 , -3.0677824 ],\n",
              "        [-3.119128  , -0.81988823,  3.470872  ],\n",
              "        [ 0.19853292,  1.7915671 , -1.72564   ],\n",
              "        [-3.226867  , -0.6543088 ,  3.4219222 ],\n",
              "        [ 1.3118287 , -0.61618406, -0.69072765],\n",
              "        [ 0.4586983 ,  1.5303646 , -1.5517225 ],\n",
              "        [-2.2079847 ,  1.3522421 ,  0.6435934 ],\n",
              "        [ 3.5687203 , -0.2953343 , -2.7427325 ],\n",
              "        [-2.9413974 , -0.86273193,  3.361864  ],\n",
              "        [-3.440926  , -0.08829256,  3.120874  ],\n",
              "        [-3.3873856 , -0.4174281 ,  3.3115842 ],\n",
              "        [ 2.3658516 ,  0.2893649 , -2.0535376 ],\n",
              "        [ 0.71214765,  0.49394396, -0.9018973 ],\n",
              "        [ 3.3876681 ,  0.02115878, -2.8367057 ]], dtype=float32),\n",
              " array([[-0.07316281,  1.7956192 , -1.3257171 ],\n",
              "        [ 0.5271773 ,  1.0073489 , -1.1612732 ],\n",
              "        [ 2.578416  , -1.108937  , -1.2103219 ],\n",
              "        [ 1.4934235 ,  0.8734465 , -1.8677037 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [ 2.787007  , -0.10693497, -2.2045753 ],\n",
              "        [ 1.3384482 ,  1.6380136 , -2.4780083 ],\n",
              "        [-3.431801  , -0.22615755,  3.217237  ],\n",
              "        [ 2.9135015 , -0.08664376, -2.2951746 ],\n",
              "        [ 0.05535016,  1.0466696 , -0.83403426],\n",
              "        [ 3.5049891 , -0.06033087, -2.9048963 ],\n",
              "        [ 3.1352751 , -0.402975  , -2.3043842 ],\n",
              "        [-3.306578  , -0.61993796,  3.4460614 ],\n",
              "        [-1.4872319 ,  1.0838066 ,  0.46020937],\n",
              "        [ 2.1299427 ,  0.62596947, -2.1432514 ],\n",
              "        [-3.1303442 , -0.8871067 ,  3.4815602 ]], dtype=float32),\n",
              " array([[ 3.5671866 , -0.36743984, -2.7125916 ],\n",
              "        [-3.215772  , -0.55548453,  3.3300076 ],\n",
              "        [ 1.1010106 ,  0.8068501 , -1.5231764 ],\n",
              "        [ 2.0033467 ,  0.8529632 , -2.3056874 ],\n",
              "        [ 0.15694353,  1.5615499 , -1.1545148 ],\n",
              "        [-3.1504614 , -0.85622203,  3.4879618 ],\n",
              "        [-2.377485  ,  0.56736493,  1.6587    ],\n",
              "        [-2.9557736 ,  0.7712133 ,  2.060687  ],\n",
              "        [ 2.14171   , -1.0270194 , -0.881276  ],\n",
              "        [-3.2552407 , -0.68138057,  3.4547658 ],\n",
              "        [-2.2263095 , -0.22890034,  2.1880639 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-1.0319093 ,  1.4475547 , -0.29528952],\n",
              "        [-2.8586495 , -0.39798287,  2.9057693 ],\n",
              "        [-2.691714  ,  0.33712563,  2.1485426 ],\n",
              "        [-0.11293589,  1.881511  , -1.4526396 ]], dtype=float32),\n",
              " array([[ 2.1037776 ,  0.8799523 , -2.3205924 ],\n",
              "        [-0.2212607 ,  1.5779446 , -0.9700331 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 1.0936449 ,  1.5420333 , -2.148706  ],\n",
              "        [ 0.31411752,  1.6761305 , -1.6523788 ],\n",
              "        [ 2.1184657 ,  0.93243384, -2.4964046 ],\n",
              "        [-3.3401234 , -0.07725637,  3.0377455 ],\n",
              "        [-3.267578  , -0.37254882,  3.1905966 ],\n",
              "        [ 0.738609  ,  1.5110532 , -1.6305501 ],\n",
              "        [-2.9891574 ,  0.6825043 ,  2.0975595 ],\n",
              "        [ 2.2363632 ,  0.95708525, -2.6637065 ],\n",
              "        [-0.03589818, -0.6202713 ,  0.79763854],\n",
              "        [-2.4151895 , -0.77433425,  2.774561  ],\n",
              "        [-2.6438181 ,  1.5550824 ,  0.96688545],\n",
              "        [-3.3261042 , -0.44558427,  3.3272977 ],\n",
              "        [ 2.4767063 ,  0.5517945 , -2.4679632 ]], dtype=float32),\n",
              " array([[-3.1717355 , -0.7795745 ,  3.4696894 ],\n",
              "        [ 1.3378042 ,  1.5692815 , -2.4626117 ],\n",
              "        [-0.65650743, -0.19760785,  0.77485406],\n",
              "        [-3.3776305 , -0.45303872,  3.3548698 ],\n",
              "        [ 0.8665325 ,  1.6234597 , -1.9442184 ],\n",
              "        [ 3.6317244 , -0.19758397, -2.8379123 ],\n",
              "        [ 1.0687749 ,  1.400721  , -2.0020044 ],\n",
              "        [-3.367328  , -0.41131243,  3.3216982 ],\n",
              "        [ 3.2970145 ,  0.48513597, -3.1393137 ],\n",
              "        [ 2.2416694 ,  0.12297019, -1.8033999 ],\n",
              "        [ 2.7155085 , -0.00965557, -2.1204102 ],\n",
              "        [ 3.1352732 , -0.62407863, -2.0122108 ],\n",
              "        [-2.9946954 , -0.7683662 ,  3.3847146 ],\n",
              "        [ 0.047357  , -0.28482816,  0.4065894 ],\n",
              "        [ 3.579904  , -0.48585168, -2.6330357 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ]], dtype=float32),\n",
              " array([[-3.2208412e+00,  2.3528533e-01,  2.7232006e+00],\n",
              "        [-2.8123057e+00,  2.2914203e-01,  2.3206756e+00],\n",
              "        [ 6.3391274e-04,  3.1076181e-01, -2.9377928e-02],\n",
              "        [-3.2941394e+00, -3.3967552e-01,  3.1898737e+00],\n",
              "        [ 1.6839749e+00,  1.1270084e+00, -2.3865788e+00],\n",
              "        [-1.2850480e+00,  7.8916550e-01,  4.8868975e-01],\n",
              "        [-2.8966825e+00,  8.8774765e-01,  1.9055034e+00],\n",
              "        [-3.0451345e+00, -7.8600609e-01,  3.3792777e+00],\n",
              "        [ 1.3382748e+00,  4.4212124e-01, -1.2958345e+00],\n",
              "        [ 1.4979141e+00,  8.3170813e-01, -1.7857934e+00],\n",
              "        [-3.1797574e+00, -7.9032254e-01,  3.4286671e+00],\n",
              "        [ 1.7723047e+00,  1.5121816e+00, -2.7130251e+00],\n",
              "        [ 1.4245701e+00,  1.3562578e+00, -2.1639698e+00],\n",
              "        [ 2.0168326e+00,  8.9064085e-01, -2.4473231e+00],\n",
              "        [-3.2863057e+00, -6.5184212e-01,  3.4502580e+00],\n",
              "        [-1.7561966e+00,  1.3316176e+00,  5.3681648e-01]], dtype=float32),\n",
              " array([[ 0.48803374,  1.4049696 , -1.4939992 ],\n",
              "        [-1.8638736 ,  0.37371278,  1.2340353 ],\n",
              "        [ 1.3173275 ,  1.2250086 , -1.9255407 ],\n",
              "        [ 3.4621704 , -0.2624102 , -2.7188706 ],\n",
              "        [-2.93921   , -1.0168008 ,  3.4147804 ],\n",
              "        [-2.8922923 ,  0.6799543 ,  2.0224066 ],\n",
              "        [ 3.1847615 ,  0.38067445, -2.896638  ],\n",
              "        [-3.0083268 , -0.6245056 ,  3.2915115 ],\n",
              "        [ 0.17770283,  1.4906654 , -1.264405  ],\n",
              "        [ 1.2033082 ,  1.4939792 , -2.2226868 ],\n",
              "        [-0.8727292 ,  1.6352286 , -0.7072675 ],\n",
              "        [-1.6925365 ,  0.9825068 ,  0.73097575],\n",
              "        [ 1.769539  ,  1.4616424 , -2.7342257 ],\n",
              "        [ 0.7709196 ,  1.4551829 , -1.8633819 ],\n",
              "        [ 1.9391378 , -0.28354067, -1.082532  ],\n",
              "        [-3.2350981 , -0.7194383 ,  3.4745526 ]], dtype=float32),\n",
              " array([[-3.1862667 ,  0.32964978,  2.4825938 ],\n",
              "        [ 2.1095529 ,  0.46484545, -2.0659149 ],\n",
              "        [-0.9837306 ,  1.6886832 , -0.64114064],\n",
              "        [ 3.6509025 , -0.09876771, -3.0353951 ],\n",
              "        [ 0.7053857 ,  1.1575674 , -1.4977834 ],\n",
              "        [-3.3780065 , -0.4748126 ,  3.3678756 ],\n",
              "        [-0.2565322 , -0.26597705,  0.63764006],\n",
              "        [-1.767811  ,  1.6448213 ,  0.14364411],\n",
              "        [ 0.6071733 ,  1.5942366 , -1.8124803 ],\n",
              "        [ 1.9543452 ,  0.7450756 , -2.0436282 ],\n",
              "        [ 3.4648907 , -0.8563286 , -2.166584  ],\n",
              "        [-1.8784822 ,  1.8954232 , -0.08051673],\n",
              "        [-1.9258267 ,  1.6303477 ,  0.331579  ],\n",
              "        [ 2.0729187 ,  1.0249351 , -2.5590754 ],\n",
              "        [-3.2513497 , -0.6727026 ,  3.4453254 ],\n",
              "        [ 2.342867  ,  0.97661376, -2.7738633 ]], dtype=float32),\n",
              " array([[-3.2624605 , -0.68545187,  3.4533663 ],\n",
              "        [ 1.086862  ,  1.6902169 , -2.253715  ],\n",
              "        [ 0.41727018,  1.8204778 , -1.8049716 ],\n",
              "        [ 3.2802713 , -0.17062978, -2.6186342 ],\n",
              "        [ 2.462054  ,  0.965821  , -2.7939796 ],\n",
              "        [-3.1313865 , -0.31074467,  3.0344462 ],\n",
              "        [ 0.7311754 ,  1.6286682 , -1.8482649 ],\n",
              "        [-3.1598113 ,  0.09436186,  2.7154698 ],\n",
              "        [-3.3462307 , -0.17492968,  3.072959  ],\n",
              "        [ 2.2742755 , -0.1967379 , -1.6112127 ],\n",
              "        [ 1.7326497 ,  1.5052304 , -2.6621006 ],\n",
              "        [ 2.0551305 ,  1.0021292 , -2.4209275 ],\n",
              "        [ 2.7265477 ,  0.77418196, -2.7788258 ],\n",
              "        [ 3.3342273 ,  0.2893858 , -2.9717255 ],\n",
              "        [ 1.4552293 ,  1.436329  , -2.3144398 ],\n",
              "        [ 1.7701561 ,  1.5072299 , -2.5848243 ]], dtype=float32),\n",
              " array([[-3.0793324 , -0.89825124,  3.4391837 ],\n",
              "        [-0.49751875,  1.7465535 , -0.7798116 ],\n",
              "        [-1.1508354 ,  1.4074525 , -0.04409233],\n",
              "        [-2.98475   , -0.48053962,  3.0764089 ],\n",
              "        [-1.3790883 ,  1.9688766 , -0.43394455],\n",
              "        [ 0.47089887,  1.9550537 , -1.9660602 ],\n",
              "        [ 1.9535545 ,  0.01486172, -1.5890062 ],\n",
              "        [-1.554247  ,  1.9921824 , -0.3692254 ],\n",
              "        [ 3.330839  ,  0.03874272, -2.7365303 ],\n",
              "        [ 0.86530036,  1.1688128 , -1.5121022 ],\n",
              "        [ 3.0909894 ,  0.2277027 , -2.8224707 ],\n",
              "        [ 2.78513   ,  0.19695422, -2.4016883 ],\n",
              "        [ 1.1418072 ,  1.6669542 , -2.304371  ],\n",
              "        [ 2.1192658 ,  1.228024  , -2.669927  ],\n",
              "        [-1.5873834 , -0.7498927 ,  2.2094467 ],\n",
              "        [-3.2891996 , -0.5513202 ,  3.356905  ]], dtype=float32),\n",
              " array([[ 8.9993066e-01,  1.4815964e+00, -1.9089835e+00],\n",
              "        [-6.7483330e-01,  2.0112512e+00, -1.0382251e+00],\n",
              "        [-2.2966111e+00, -2.5646010e-01,  2.3530650e+00],\n",
              "        [-2.3809016e+00, -1.0005289e+00,  3.0187495e+00],\n",
              "        [-3.1881392e+00, -7.5894785e-01,  3.4383898e+00],\n",
              "        [ 1.6658033e+00,  1.2408973e+00, -2.3710215e+00],\n",
              "        [ 1.7157385e+00,  1.4323200e+00, -2.5708416e+00],\n",
              "        [-2.3568933e+00,  1.3120731e+00,  9.3703437e-01],\n",
              "        [ 1.8552158e+00,  1.3215466e+00, -2.6129618e+00],\n",
              "        [ 1.3019823e+00,  1.0982800e+00, -1.8197690e+00],\n",
              "        [ 3.4843247e+00,  1.7231908e-01, -3.0746865e+00],\n",
              "        [-3.2183607e+00,  1.5520397e-01,  2.6619129e+00],\n",
              "        [ 5.9276122e-01,  6.1008048e-01, -9.6781886e-01],\n",
              "        [ 3.5923340e+00, -3.3000258e-03, -3.0052757e+00],\n",
              "        [ 3.1473331e+00,  4.4383839e-01, -2.9157643e+00],\n",
              "        [ 1.6664122e+00,  1.7247431e+00, -2.8475428e+00]], dtype=float32),\n",
              " array([[-1.2278308 ,  1.9219679 , -0.75410855],\n",
              "        [-2.6184857 ,  0.5851416 ,  1.8947353 ],\n",
              "        [-0.9578522 ,  1.246251  , -0.07979134],\n",
              "        [ 0.95165485,  1.134361  , -1.6206331 ],\n",
              "        [-1.5820485 ,  0.4920851 ,  1.079571  ],\n",
              "        [-1.5910761 ,  1.9060966 , -0.13293019],\n",
              "        [-2.0084088 , -0.22818428,  2.033599  ],\n",
              "        [ 1.6538651 ,  1.5877458 , -2.6534886 ],\n",
              "        [ 0.49174258,  1.8343581 , -1.7715988 ],\n",
              "        [-0.8125742 ,  1.9354296 , -0.983506  ],\n",
              "        [ 1.0706295 ,  1.756861  , -2.3114274 ],\n",
              "        [ 1.4113524 ,  1.6092037 , -2.4654927 ],\n",
              "        [ 1.0157026 ,  1.3898209 , -1.8853948 ],\n",
              "        [ 3.5034459 , -0.05553363, -2.925369  ],\n",
              "        [-2.990476  ,  0.08026068,  2.5852015 ],\n",
              "        [ 2.623965  ,  0.28771684, -2.344938  ]], dtype=float32),\n",
              " array([[-3.3889802 , -0.5141852 ,  3.4109783 ],\n",
              "        [ 3.1918466 , -0.8536041 , -1.7579349 ],\n",
              "        [-3.3668196 , -0.523175  ,  3.3699505 ],\n",
              "        [-2.9193113 ,  1.1221029 ,  1.6721492 ],\n",
              "        [-3.4279509 , -0.26877436,  3.2563143 ],\n",
              "        [ 2.4665506 ,  0.75247097, -2.5408103 ],\n",
              "        [-1.537357  ,  2.0602481 , -0.45381302],\n",
              "        [ 3.1284344 , -0.43537188, -2.113275  ],\n",
              "        [ 3.0260098 ,  0.21394993, -2.5591035 ],\n",
              "        [-1.7948371 , -0.17988996,  1.6688272 ],\n",
              "        [-1.5438269 , -1.3572624 ,  2.5916235 ],\n",
              "        [ 3.0018852 ,  0.54122233, -2.9462276 ],\n",
              "        [-3.3093097 ,  0.06764593,  2.8615422 ],\n",
              "        [ 3.363485  ,  0.18379053, -3.0634742 ],\n",
              "        [ 1.7421883 , -1.0239506 , -0.4777606 ],\n",
              "        [ 3.4515378 , -0.6685793 , -2.2409103 ]], dtype=float32),\n",
              " array([[-1.9793772 ,  1.8003632 ,  0.23322524],\n",
              "        [ 1.5260125 ,  1.4380019 , -2.4779873 ],\n",
              "        [ 3.5271738 , -0.82043946, -2.401712  ],\n",
              "        [-3.0988543 ,  0.90694743,  1.8854548 ],\n",
              "        [-3.1322393 , -0.84048223,  3.4892452 ],\n",
              "        [-1.5342534 ,  2.074462  , -0.5082743 ],\n",
              "        [-3.0909379 , -0.32174402,  3.037447  ],\n",
              "        [-3.326409  , -0.52097774,  3.3540316 ],\n",
              "        [-2.561382  ,  1.1298949 ,  1.1752894 ],\n",
              "        [-1.0696868 ,  1.7357266 , -0.48451507],\n",
              "        [ 3.5225995 , -0.04479967, -2.9679797 ],\n",
              "        [ 1.4590293 ,  1.5261043 , -2.4950383 ],\n",
              "        [-1.5723944 ,  1.6706522 , -0.14411214],\n",
              "        [-3.430701  , -0.4693329 ,  3.3847528 ],\n",
              "        [-3.1906862 , -0.7184095 ,  3.4663947 ],\n",
              "        [-3.4127305 , -0.3047368 ,  3.2583568 ]], dtype=float32),\n",
              " array([[-0.07153705,  0.86144304, -0.46689236],\n",
              "        [ 2.1615665 ,  0.8141837 , -2.3670647 ],\n",
              "        [-2.7297523 ,  0.70378494,  1.8887243 ],\n",
              "        [ 2.2706192 ,  0.6479964 , -2.475099  ],\n",
              "        [-3.3934643 ,  0.1286348 ,  2.823368  ],\n",
              "        [ 0.93397725, -0.4058087 , -0.35948327],\n",
              "        [-2.6147473 , -0.23392199,  2.5854588 ],\n",
              "        [ 0.9664677 ,  0.66806865, -1.32892   ],\n",
              "        [ 3.1107452 , -0.38228813, -2.1949687 ],\n",
              "        [ 2.824318  ,  0.8165264 , -2.9080443 ],\n",
              "        [-1.5073103 ,  1.4293776 ,  0.24199435],\n",
              "        [-3.039749  ,  0.1854588 ,  2.5478122 ],\n",
              "        [-3.1295545 , -0.608158  ,  3.346598  ],\n",
              "        [ 1.999014  ,  1.0966463 , -2.5515175 ],\n",
              "        [-2.9675672 ,  0.77406764,  1.9347575 ],\n",
              "        [ 2.0115926 ,  0.7117888 , -2.2709298 ]], dtype=float32),\n",
              " array([[-3.394809  , -0.4762241 ,  3.3815215 ],\n",
              "        [ 1.4762031 ,  1.4930094 , -2.404274  ],\n",
              "        [-0.07354522,  1.6389782 , -1.3315865 ],\n",
              "        [ 0.90578157,  0.7668241 , -1.2027206 ],\n",
              "        [ 3.4032805 ,  0.33627167, -3.0910358 ],\n",
              "        [ 2.1077228 ,  1.289406  , -2.775723  ],\n",
              "        [-2.3856637 ,  0.4532671 ,  1.4257989 ],\n",
              "        [ 1.6288933 ,  1.564233  , -2.5495996 ],\n",
              "        [ 1.3377541 , -0.81482625, -0.41934946],\n",
              "        [-3.3164892 , -0.5862349 ,  3.4081855 ],\n",
              "        [-3.334318  , -0.58125216,  3.4010196 ],\n",
              "        [ 0.550613  ,  1.4639957 , -1.5958627 ],\n",
              "        [ 2.6083307 ,  1.0015129 , -3.0121145 ],\n",
              "        [-2.4946377 , -1.1926378 ,  3.21277   ],\n",
              "        [ 2.4985983 ,  0.95405614, -2.8420322 ],\n",
              "        [-2.7324328 ,  0.47265005,  1.925479  ]], dtype=float32),\n",
              " array([[-2.999993  ,  0.03795974,  2.5459318 ],\n",
              "        [ 0.6496268 ,  1.6535968 , -1.7479787 ],\n",
              "        [ 1.448158  ,  1.1801714 , -2.2494714 ],\n",
              "        [ 2.9562619 ,  0.6755325 , -2.9041915 ],\n",
              "        [ 0.9742998 ,  1.6223243 , -2.110255  ],\n",
              "        [ 2.102191  ,  1.3331301 , -2.8740215 ],\n",
              "        [-2.6986206 , -0.07497909,  2.4766731 ],\n",
              "        [-2.9675038 , -0.51960766,  3.1560192 ],\n",
              "        [-3.3127177 , -0.67226315,  3.4391332 ],\n",
              "        [ 2.3185072 ,  1.1877695 , -2.826974  ],\n",
              "        [ 1.4270054 ,  0.980171  , -1.9405771 ],\n",
              "        [-3.3278883 , -0.6021642 ,  3.4212809 ],\n",
              "        [ 0.29287127,  1.3028039 , -1.2404015 ],\n",
              "        [-3.3250692 ,  0.74877024,  2.226808  ],\n",
              "        [-3.1322405 , -0.5239446 ,  3.2484634 ],\n",
              "        [ 1.1206279 ,  1.4086514 , -2.1186252 ]], dtype=float32),\n",
              " array([[-2.4745903 ,  0.261413  ,  2.0677266 ],\n",
              "        [ 0.6907494 ,  1.3196867 , -1.4893224 ],\n",
              "        [ 3.2355433 , -0.1044189 , -2.5205824 ],\n",
              "        [-3.2643023 , -0.550986  ,  3.3623347 ],\n",
              "        [-3.240308  , -0.731462  ,  3.4914489 ],\n",
              "        [ 2.2181523 ,  0.9153226 , -2.496462  ],\n",
              "        [-2.5154145 ,  1.2751251 ,  1.1183804 ],\n",
              "        [-1.2485523 ,  1.9988838 , -0.5330613 ],\n",
              "        [ 1.0786717 ,  0.12179164, -0.9845073 ],\n",
              "        [ 1.0418717 ,  1.5301028 , -2.0374374 ],\n",
              "        [ 1.1638914 ,  1.4063398 , -2.0891662 ],\n",
              "        [-3.3057263 , -0.6261751 ,  3.4466596 ],\n",
              "        [-3.21533   , -0.40393993,  3.2102325 ],\n",
              "        [-3.2021518 , -0.3773365 ,  3.1389093 ],\n",
              "        [-1.821524  ,  1.2261957 ,  0.5802304 ],\n",
              "        [-3.2558305 , -0.6756481 ,  3.4146886 ]], dtype=float32),\n",
              " array([[-1.1742113 ,  1.3390213 ,  0.10544743],\n",
              "        [ 1.405733  ,  1.312554  , -2.2645535 ],\n",
              "        [-2.0572138 ,  1.7791737 ,  0.283477  ],\n",
              "        [ 0.04350289,  1.6420525 , -1.2460916 ],\n",
              "        [ 1.6927105 ,  1.38264   , -2.5182908 ],\n",
              "        [ 1.9782003 ,  1.45513   , -2.7139437 ],\n",
              "        [ 2.6685436 ,  0.8418031 , -2.8793025 ],\n",
              "        [ 2.1027129 ,  0.5945815 , -2.1513128 ],\n",
              "        [-3.226363  , -0.66658497,  3.3889916 ],\n",
              "        [-3.2231648 , -0.5854787 ,  3.3553238 ],\n",
              "        [ 1.397056  ,  1.501687  , -2.292826  ],\n",
              "        [-2.1065214 ,  1.8095851 ,  0.24964881],\n",
              "        [-2.211758  ,  1.8112799 ,  0.28663558],\n",
              "        [-0.5389375 ,  1.1933615 , -0.2955295 ],\n",
              "        [-3.2339232 , -0.6316649 ,  3.4065316 ],\n",
              "        [-2.2241814 ,  1.3150862 ,  0.7775316 ]], dtype=float32),\n",
              " array([[ 3.5611413 , -0.22662067, -2.7655492 ],\n",
              "        [ 0.63645834,  1.0177985 , -1.2625501 ],\n",
              "        [-3.0424194 ,  0.2712805 ,  2.4989502 ],\n",
              "        [-1.2965232 ,  1.8790795 , -0.44935164],\n",
              "        [ 1.0406337 , -0.9797118 ,  0.06963725],\n",
              "        [ 3.5756605 , -0.13969266, -2.898213  ],\n",
              "        [ 3.4293501 , -0.7770517 , -2.3116364 ],\n",
              "        [-3.2748883 , -0.6442401 ,  3.460917  ],\n",
              "        [-3.0848367 , -0.9159286 ,  3.489275  ],\n",
              "        [ 0.21826133,  1.6090078 , -1.4118629 ],\n",
              "        [-2.2209365 ,  1.8439909 ,  0.30307204],\n",
              "        [ 2.7643893 ,  0.4602776 , -2.6188483 ],\n",
              "        [-3.324485  , -0.64736533,  3.4585574 ],\n",
              "        [-1.570207  ,  1.7215592 , -0.01160018],\n",
              "        [-2.9401157 , -0.8695704 ,  3.3456087 ],\n",
              "        [ 2.549597  ,  0.8588088 , -2.7723699 ]], dtype=float32),\n",
              " array([[ 2.1833012 ,  1.2111958 , -2.7905207 ],\n",
              "        [ 2.6479237 ,  0.90886164, -2.9443274 ],\n",
              "        [ 2.9640124 , -0.9788049 , -1.7316608 ],\n",
              "        [-2.83359   ,  0.84858465,  1.7464745 ],\n",
              "        [ 2.6563997 ,  0.99018425, -2.948965  ],\n",
              "        [ 3.3648598 ,  0.15829706, -3.02353   ],\n",
              "        [-3.274578  , -0.7022034 ,  3.4662168 ],\n",
              "        [ 0.6090664 ,  0.99978733, -1.2759143 ],\n",
              "        [ 1.5363673 ,  1.1871834 , -2.1165776 ],\n",
              "        [ 0.1783328 ,  0.34410182, -0.43516147],\n",
              "        [-1.2167522 ,  0.33573782,  0.7205367 ],\n",
              "        [ 0.62892306,  0.22504772, -0.5966356 ],\n",
              "        [ 3.6147406 , -0.43499222, -2.6914082 ],\n",
              "        [-3.038498  , -0.20196879,  2.7377691 ],\n",
              "        [-0.14124471,  1.6445484 , -1.0124104 ],\n",
              "        [ 2.3225734 , -0.64135814, -1.2933466 ]], dtype=float32),\n",
              " array([[-0.53838545, -1.2821016 ,  1.3904446 ],\n",
              "        [-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [ 0.6267573 ,  0.56517994, -0.90434355],\n",
              "        [ 2.0856721 ,  0.8904009 , -2.3502102 ],\n",
              "        [ 1.1349403 ,  1.2587572 , -1.8747094 ],\n",
              "        [-3.1673567 , -0.62322605,  3.3889363 ],\n",
              "        [-2.5275185 ,  1.1164988 ,  1.3622557 ],\n",
              "        [ 3.431325  , -0.95871687, -2.0622272 ],\n",
              "        [-2.9269505 , -0.52286756,  3.0635228 ],\n",
              "        [ 1.1320502 , -0.80241066, -0.4217923 ],\n",
              "        [-2.8911324 , -0.8962616 ,  3.3501997 ],\n",
              "        [-3.310509  , -0.5147252 ,  3.3247242 ],\n",
              "        [ 0.37116066,  1.2017287 , -1.1318984 ],\n",
              "        [ 2.8446195 ,  0.6754497 , -2.8341808 ],\n",
              "        [-3.2419045 , -0.66827416,  3.405751  ],\n",
              "        [ 3.3012342 ,  0.0326458 , -2.779193  ]], dtype=float32),\n",
              " array([[ 0.4740665 ,  1.4014634 , -1.450691  ],\n",
              "        [ 1.3811175 ,  1.391301  , -2.175034  ],\n",
              "        [-3.125119  , -0.76577175,  3.404108  ],\n",
              "        [-3.342972  , -0.5536423 ,  3.421505  ],\n",
              "        [-3.344244  , -0.2648445 ,  3.1695771 ],\n",
              "        [-0.05571502,  1.6321558 , -1.1694875 ],\n",
              "        [-3.077521  , -0.75299215,  3.3893335 ],\n",
              "        [-0.9594304 ,  1.8493587 , -0.6663915 ],\n",
              "        [-3.375272  , -0.20382872,  3.1323447 ],\n",
              "        [-3.3111992 , -0.7104413 ,  3.4413397 ],\n",
              "        [-0.27721998,  1.2684175 , -0.68817127],\n",
              "        [ 1.2490402 , -0.17029487, -0.9643813 ],\n",
              "        [ 0.35406473,  1.1774925 , -1.1514598 ],\n",
              "        [ 2.0603511 , -0.1839055 , -1.3197006 ],\n",
              "        [ 2.7332227 , -0.23563398, -2.0217915 ],\n",
              "        [ 3.2043056 ,  0.21063769, -2.8485663 ]], dtype=float32),\n",
              " array([[-3.45037   , -0.1545835 ,  3.1498058 ],\n",
              "        [ 2.37967   ,  0.7681296 , -2.5833719 ],\n",
              "        [-3.1964784 , -0.45367828,  3.2184758 ],\n",
              "        [ 1.9197624 ,  1.3801659 , -2.6744776 ],\n",
              "        [ 3.11482   ,  0.66415524, -3.1113873 ],\n",
              "        [-1.6452173 , -0.67391413,  2.0204906 ],\n",
              "        [-0.04318362,  0.16431676, -0.03330545],\n",
              "        [ 1.2055658 ,  1.4336963 , -2.071687  ],\n",
              "        [ 1.6759789 ,  0.51558214, -1.6547611 ],\n",
              "        [-1.789416  ,  1.8020321 ,  0.08133179],\n",
              "        [ 0.503647  ,  1.1351615 , -1.240979  ],\n",
              "        [-0.14928137,  1.4837601 , -1.0832989 ],\n",
              "        [-3.0885746 , -0.71814907,  3.3256373 ],\n",
              "        [-3.1226294 , -0.8040955 ,  3.4532585 ],\n",
              "        [-1.0434061 ,  1.3619848 , -0.224752  ],\n",
              "        [-0.7586675 ,  1.9202641 , -0.8876257 ]], dtype=float32),\n",
              " array([[-3.3422797 ,  0.7255407 ,  2.3035069 ],\n",
              "        [ 1.336419  ,  1.5329628 , -2.2189522 ],\n",
              "        [ 3.5464556 ,  0.01338018, -3.022668  ],\n",
              "        [ 1.1444954 ,  1.5070072 , -2.1442678 ],\n",
              "        [-3.3139355 , -0.19023937,  3.1028147 ],\n",
              "        [ 0.6594106 ,  1.5586346 , -1.7084035 ],\n",
              "        [ 0.3809496 ,  1.2692147 , -1.3107026 ],\n",
              "        [-2.4763901 , -1.2362372 ,  3.2026544 ],\n",
              "        [-2.3537288 ,  0.33340046,  1.733618  ],\n",
              "        [-3.3873842 ,  0.11228642,  2.8145776 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 1.9323535 ,  0.48275968, -1.8784236 ],\n",
              "        [ 3.3783405 ,  0.33010533, -3.052282  ],\n",
              "        [-1.3957978 ,  1.1614783 ,  0.3523424 ],\n",
              "        [ 1.3675066 ,  1.4337083 , -2.2659855 ],\n",
              "        [-3.4422333 , -0.4271532 ,  3.3469448 ]], dtype=float32),\n",
              " array([[-3.301491  , -0.6340163 ,  3.447372  ],\n",
              "        [ 3.3276935 ,  0.34458163, -3.107943  ],\n",
              "        [ 2.5439937 ,  0.12802704, -2.1374302 ],\n",
              "        [-3.3105853 , -0.61963445,  3.4596343 ],\n",
              "        [ 0.70932835,  1.3763441 , -1.5128379 ],\n",
              "        [ 2.7103748 ,  0.36802903, -2.490583  ],\n",
              "        [-1.5209755 ,  2.1138759 , -0.46077943],\n",
              "        [ 1.7862529 ,  0.88325644, -2.0880013 ],\n",
              "        [-3.1313865 , -0.31074467,  3.0344462 ],\n",
              "        [ 2.4876385 ,  0.7540463 , -2.5612116 ],\n",
              "        [ 1.4330043 ,  0.49036673, -1.413823  ],\n",
              "        [-3.0326445 ,  0.5285393 ,  2.2022183 ],\n",
              "        [-3.3322556 , -0.38013503,  3.2088525 ],\n",
              "        [-1.2305723 ,  1.6175953 , -0.25612953],\n",
              "        [-2.5796    , -0.55982363,  2.8479257 ],\n",
              "        [ 2.8792555 ,  0.03622629, -2.291759  ]], dtype=float32),\n",
              " array([[-3.4147756 , -0.17178123,  3.1152637 ],\n",
              "        [-3.167784  ,  0.04910835,  2.696225  ],\n",
              "        [-1.5216194 ,  0.8280542 ,  0.7685881 ],\n",
              "        [-3.1789286 , -0.7816008 ,  3.476617  ],\n",
              "        [-3.0777261 , -0.7277259 ,  3.3245606 ],\n",
              "        [-2.858764  , -0.13304093,  2.6311505 ],\n",
              "        [-3.2597706 , -0.25963253,  3.167055  ],\n",
              "        [ 3.4486034 ,  0.24081704, -3.1250365 ],\n",
              "        [ 1.0718929 ,  0.8965343 , -1.5438752 ],\n",
              "        [ 2.177171  ,  1.0778017 , -2.70183   ],\n",
              "        [-3.0771124 , -0.33161268,  2.9803872 ],\n",
              "        [ 2.8742628 ,  0.71495247, -2.9316034 ],\n",
              "        [ 2.0578387 ,  0.98582816, -2.4160225 ],\n",
              "        [ 0.14517282,  1.3920811 , -1.1399624 ],\n",
              "        [ 1.3064848 ,  0.7965648 , -1.6949992 ],\n",
              "        [-3.2566974 , -0.6972381 ,  3.4558027 ]], dtype=float32),\n",
              " array([[-3.1269596 ,  0.40453604,  2.4405375 ],\n",
              "        [ 1.171666  ,  1.3239754 , -1.8911134 ],\n",
              "        [-2.3657362 , -0.567912  ,  2.5343432 ],\n",
              "        [ 0.01675584,  1.5236151 , -1.2525649 ],\n",
              "        [ 1.0020112 ,  1.6689322 , -2.082024  ],\n",
              "        [-3.174276  , -0.7270645 ,  3.3972354 ],\n",
              "        [-3.1460974 , -0.8144876 ,  3.470258  ],\n",
              "        [ 0.66400284,  0.9154756 , -1.2730918 ],\n",
              "        [ 3.0406086 ,  0.53620154, -2.8527756 ],\n",
              "        [ 1.7821612 ,  0.24951573, -1.59231   ],\n",
              "        [-3.267258  , -0.7466498 ,  3.4712226 ],\n",
              "        [-3.0057929 , -0.60161054,  3.1728668 ],\n",
              "        [ 2.4895482 ,  1.0361    , -2.8567414 ],\n",
              "        [-2.7511134 ,  0.05321283,  2.417792  ],\n",
              "        [ 3.452058  ,  0.10338639, -2.9870234 ],\n",
              "        [-0.43215442,  2.0537958 , -1.434989  ]], dtype=float32),\n",
              " array([[ 0.6474511 ,  1.6168884 , -1.9059699 ],\n",
              "        [ 2.5059993 ,  0.4716897 , -2.3979318 ],\n",
              "        [-0.42920762,  1.8877717 , -1.2666819 ],\n",
              "        [-3.2031276 , -0.7599019 ,  3.4575973 ],\n",
              "        [-3.3565042 , -0.56475824,  3.4060001 ],\n",
              "        [ 2.714824  ,  0.61861056, -2.6740298 ],\n",
              "        [ 2.4674513 ,  0.7422342 , -2.629404  ],\n",
              "        [ 2.7730632 ,  0.68602395, -2.9037647 ],\n",
              "        [-2.626446  ,  0.81989485,  1.5710311 ],\n",
              "        [-1.3652414 ,  2.0659099 , -0.5734045 ],\n",
              "        [-1.0538089 ,  0.86213267,  0.32794675],\n",
              "        [-3.377928  , -0.5143334 ,  3.3705842 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 2.181022  ,  0.86736846, -2.4420273 ],\n",
              "        [-3.3746822 , -0.42588517,  3.3037443 ],\n",
              "        [-1.9077622 ,  1.6329232 ,  0.28136006]], dtype=float32),\n",
              " array([[-0.49301648,  1.5020897 , -0.63016254],\n",
              "        [-3.3850331 , -0.20337412,  3.092461  ],\n",
              "        [ 1.3581952 ,  0.95938224, -1.7858977 ],\n",
              "        [-3.1397998 , -0.7339133 ,  3.3687737 ],\n",
              "        [-2.0024152 , -0.01137715,  1.77315   ],\n",
              "        [-3.284763  , -0.43393224,  3.3236718 ],\n",
              "        [ 1.5035499 ,  0.5993066 , -1.5782299 ],\n",
              "        [ 2.531796  ,  0.904209  , -2.7995293 ],\n",
              "        [ 2.449289  , -0.17496336, -1.795646  ],\n",
              "        [-2.6053865 , -1.0821611 ,  3.229662  ],\n",
              "        [-3.307897  , -0.65469146,  3.4519472 ],\n",
              "        [ 2.677239  ,  0.70889187, -2.8035269 ],\n",
              "        [-1.8191699 , -0.43550658,  2.0434928 ],\n",
              "        [ 1.8061522 , -0.16011544, -1.1870121 ],\n",
              "        [ 1.1284889 ,  1.502395  , -2.0834913 ],\n",
              "        [ 1.2668912 ,  0.81208265, -1.5340216 ]], dtype=float32),\n",
              " array([[ 0.37664133,  1.4020013 , -1.3250082 ],\n",
              "        [ 0.46317476,  1.0977343 , -1.1761668 ],\n",
              "        [-3.267358  , -0.70034343,  3.4584198 ],\n",
              "        [ 2.283927  ,  0.9873027 , -2.5673661 ],\n",
              "        [ 0.600228  , -0.15542182, -0.30939573],\n",
              "        [-0.41614953,  1.3700267 , -0.550907  ],\n",
              "        [ 0.7291775 ,  1.8329397 , -2.1774473 ],\n",
              "        [ 3.1988575 ,  0.16161734, -2.8425908 ],\n",
              "        [-0.08638428,  1.7081548 , -1.1306295 ],\n",
              "        [-2.4044054 ,  0.66744757,  1.6675398 ],\n",
              "        [-3.201719  , -0.5933517 ,  3.370873  ],\n",
              "        [ 3.4105031 ,  0.22923627, -3.057016  ],\n",
              "        [-1.6747526 ,  1.861528  , -0.19491166],\n",
              "        [ 2.31286   ,  1.2295045 , -2.9181376 ],\n",
              "        [-2.9764001 , -0.14226577,  2.7281272 ],\n",
              "        [ 2.1388853 ,  1.4507357 , -2.9338846 ]], dtype=float32),\n",
              " array([[-2.860955  ,  0.58337504,  2.0645447 ],\n",
              "        [ 3.5971704 , -0.21005666, -2.8260846 ],\n",
              "        [-3.102246  , -0.30732092,  2.992156  ],\n",
              "        [ 1.4503832 ,  1.0501758 , -1.9678764 ],\n",
              "        [ 2.9695842 ,  0.8069102 , -3.165533  ],\n",
              "        [ 2.5100596 ,  1.199736  , -2.9992104 ],\n",
              "        [ 2.4545715 ,  0.68758523, -2.4288464 ],\n",
              "        [ 2.8962247 ,  0.2225467 , -2.5202947 ],\n",
              "        [-1.124116  ,  1.3176402 ,  0.08214644],\n",
              "        [-3.1124535 ,  0.4113545 ,  2.4198432 ],\n",
              "        [ 1.8783915 ,  0.3047509 , -1.7916465 ],\n",
              "        [ 1.0860416 ,  1.1385304 , -1.7592384 ],\n",
              "        [-3.3753614 ,  0.3367658 ,  2.650179  ],\n",
              "        [-2.4954238 ,  1.6007963 ,  0.79028356],\n",
              "        [ 3.451304  , -0.0815016 , -2.8424587 ],\n",
              "        [ 2.2410693 , -0.17006466, -1.6995234 ]], dtype=float32),\n",
              " array([[ 0.37120324,  1.204471  , -1.3326721 ],\n",
              "        [ 3.616412  , -0.0833622 , -2.9862754 ],\n",
              "        [-0.09271298,  1.8951327 , -1.5285729 ],\n",
              "        [-0.86994046, -0.19912031,  1.0386896 ],\n",
              "        [ 0.7272268 ,  0.91162455, -1.2602317 ],\n",
              "        [ 0.79407686,  1.2941307 , -1.6350598 ],\n",
              "        [-3.1240013 ,  0.34143326,  2.524981  ],\n",
              "        [ 0.4461239 ,  0.81029505, -1.0083169 ],\n",
              "        [-2.4202485 ,  1.1096873 ,  1.2002856 ],\n",
              "        [ 3.3483222 , -0.50923175, -2.3347242 ],\n",
              "        [ 1.5558072 ,  1.4498323 , -2.4023063 ],\n",
              "        [ 2.199093  ,  1.0850846 , -2.6270835 ],\n",
              "        [-2.4816313 ,  0.67103827,  1.624774  ],\n",
              "        [ 3.117027  , -0.01674755, -2.5672886 ],\n",
              "        [-2.0682595 ,  1.4483546 ,  0.5247661 ],\n",
              "        [-0.59165055,  1.9005138 , -1.026274  ]], dtype=float32),\n",
              " array([[ 2.3732495 ,  1.0980371 , -2.8049283 ],\n",
              "        [ 1.6974092 ,  1.4366417 , -2.5233352 ],\n",
              "        [-0.30459478,  1.5035974 , -0.77067107],\n",
              "        [-0.14800678,  1.4251523 , -0.85958177],\n",
              "        [-3.347712  ,  0.2788449 ,  2.7477055 ],\n",
              "        [-3.4258916 , -0.2532271 ,  3.2444687 ],\n",
              "        [-3.4641225 , -0.06260627,  3.1097722 ],\n",
              "        [ 2.8803756 ,  0.8051263 , -3.06984   ],\n",
              "        [-1.4573692 ,  0.38943   ,  1.0083311 ],\n",
              "        [-0.06486662,  1.8453103 , -1.3353286 ],\n",
              "        [ 0.4263081 , -0.07571999, -0.09684973],\n",
              "        [-2.7450736 ,  0.56906235,  1.9715883 ],\n",
              "        [ 2.4531848 ,  0.9890436 , -2.8407998 ],\n",
              "        [ 0.839266  , -1.504793  ,  0.41808528],\n",
              "        [ 0.5878872 ,  1.3695349 , -1.4231291 ],\n",
              "        [-3.4556167 , -0.00547351,  3.0208244 ]], dtype=float32),\n",
              " array([[-3.1604373 , -0.761304  ,  3.4459727 ],\n",
              "        [-1.4764644 ,  1.7776281 , -0.24448887],\n",
              "        [-0.6551157 ,  0.911307  , -0.0470803 ],\n",
              "        [ 2.3528454 ,  0.99211395, -2.6886933 ],\n",
              "        [ 2.7238858 ,  0.87446076, -2.958357  ],\n",
              "        [ 0.4480863 ,  1.6492932 , -1.5348414 ],\n",
              "        [ 2.028132  ,  0.9836271 , -2.39969   ],\n",
              "        [-1.3326459 ,  2.0089617 , -0.60408545],\n",
              "        [ 2.0170867 ,  0.81748986, -2.2939672 ],\n",
              "        [-3.1237178 ,  0.4962528 ,  2.2896676 ],\n",
              "        [-0.88953334,  1.8371607 , -0.76810324],\n",
              "        [ 1.6758198 ,  0.7988465 , -2.1747499 ],\n",
              "        [ 1.8249009 ,  0.32871076, -1.781213  ],\n",
              "        [ 2.060995  ,  0.9730636 , -2.497417  ],\n",
              "        [-0.6675389 ,  1.2461352 , -0.3559484 ],\n",
              "        [ 1.7229053 ,  1.2603588 , -2.4156904 ]], dtype=float32),\n",
              " array([[ 2.7074702 ,  0.6836325 , -2.8472693 ],\n",
              "        [-0.9082237 ,  1.8787756 , -0.8815751 ],\n",
              "        [ 0.88165647,  1.7199867 , -2.1974914 ],\n",
              "        [-2.6752121 , -0.70102715,  2.8822653 ],\n",
              "        [-0.30470058,  1.4530119 , -0.8841839 ],\n",
              "        [-3.4050114 ,  0.47336963,  2.595664  ],\n",
              "        [-0.8791501 ,  1.1411486 , -0.00525708],\n",
              "        [ 3.5714304 , -0.6809234 , -2.543674  ],\n",
              "        [-3.319495  , -0.0253826 ,  2.8782637 ],\n",
              "        [ 2.6884987 ,  0.8386796 , -2.8914514 ],\n",
              "        [ 3.4517558 , -0.11486147, -2.8629396 ],\n",
              "        [ 2.5601604 ,  0.46120578, -2.3707983 ],\n",
              "        [-0.10877428, -1.4774605 ,  1.2959301 ],\n",
              "        [ 3.185629  , -0.40055016, -2.2142172 ],\n",
              "        [-3.4177127 , -0.24255553,  3.1819377 ],\n",
              "        [-1.2181981 ,  0.7516711 ,  0.50502217]], dtype=float32),\n",
              " array([[ 3.6041331 , -0.6474856 , -2.5517268 ],\n",
              "        [-0.5724067 ,  1.5645436 , -0.9279095 ],\n",
              "        [-2.1551077 ,  0.97363365,  0.9188553 ],\n",
              "        [ 2.820262  ,  0.7396358 , -2.805912  ],\n",
              "        [-2.7465644 , -1.175572  ,  3.4220915 ],\n",
              "        [-3.1551898 , -0.6144814 ,  3.323763  ],\n",
              "        [-3.1995838 , -0.32732219,  3.1564488 ],\n",
              "        [-3.1490521 ,  0.5384486 ,  2.3045454 ],\n",
              "        [ 3.2202523 ,  0.09941126, -2.749734  ],\n",
              "        [-2.6299145 ,  1.0689327 ,  1.3880075 ],\n",
              "        [-2.0206873 ,  1.9624324 ,  0.09627794],\n",
              "        [ 2.7983153 ,  0.6632207 , -2.8767405 ],\n",
              "        [ 1.6257858 ,  1.1880302 , -2.1853242 ],\n",
              "        [-1.2897888 ,  1.7682272 , -0.20160188],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-3.27748   , -0.20716667,  3.0850368 ]], dtype=float32),\n",
              " array([[-3.5269253 ,  0.20350108,  2.9403284 ],\n",
              "        [ 0.04537961,  0.71729255, -0.53277385],\n",
              "        [-3.0530365 , -0.8393086 ,  3.416956  ],\n",
              "        [ 2.111069  ,  0.45498285, -2.0292106 ],\n",
              "        [-3.0999174 , -0.12189105,  2.7823582 ],\n",
              "        [ 1.0972801 ,  0.99754745, -1.7201886 ],\n",
              "        [ 2.5110948 ,  0.33279112, -2.1890893 ],\n",
              "        [-3.5307534 , -0.07971611,  3.1931503 ],\n",
              "        [-3.2340586 , -0.6175244 ,  3.4056125 ],\n",
              "        [ 2.8782418 ,  0.86853373, -3.0677147 ],\n",
              "        [-3.459745  , -0.3444849 ,  3.3076162 ],\n",
              "        [-0.50952417, -1.2002801 ,  1.4310921 ],\n",
              "        [-0.27490467,  2.1717072 , -1.5206554 ],\n",
              "        [-3.064335  , -0.8509363 ,  3.3397737 ],\n",
              "        [ 3.565129  , -0.0678326 , -2.9279242 ],\n",
              "        [-2.3614786 ,  0.0673585 ,  1.973785  ]], dtype=float32),\n",
              " array([[ 1.9772471 , -0.57262534, -1.1543356 ],\n",
              "        [-0.29464248,  1.397983  , -0.64723384],\n",
              "        [-3.0974872 , -0.86110324,  3.4830966 ],\n",
              "        [-0.8991859 ,  1.2113677 , -0.13631982],\n",
              "        [-3.3831663 , -0.21098074,  3.1772854 ],\n",
              "        [-0.5866455 ,  1.0371635 , -0.15818462],\n",
              "        [-2.9128966 ,  1.0722125 ,  1.7017331 ],\n",
              "        [ 2.590223  ,  0.5225999 , -2.5381665 ],\n",
              "        [ 3.0334353 ,  0.51700723, -2.890166  ],\n",
              "        [ 2.403083  , -0.55515516, -1.5214247 ],\n",
              "        [ 3.4909961 , -0.1513429 , -2.7389956 ],\n",
              "        [ 3.612601  , -0.680737  , -2.5025353 ],\n",
              "        [ 0.6442844 , -0.03611472, -0.44978628],\n",
              "        [ 3.0729704 ,  0.14591652, -2.6317468 ],\n",
              "        [ 1.8569797 ,  1.4304754 , -2.72091   ],\n",
              "        [-2.864216  ,  0.657109  ,  1.9861398 ]], dtype=float32),\n",
              " array([[ 3.523398  ,  0.07054698, -2.9988756 ],\n",
              "        [ 1.4283658 ,  1.3005785 , -2.0854402 ],\n",
              "        [-3.3221972 , -0.62063134,  3.441032  ],\n",
              "        [ 2.2944748 ,  0.7590584 , -2.3930926 ],\n",
              "        [ 3.0324578 ,  0.06419832, -2.5465872 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 3.4938672 ,  0.07481409, -2.994893  ],\n",
              "        [-0.5249944 ,  1.737738  , -0.9067177 ],\n",
              "        [-0.8969893 ,  1.701999  , -0.4779555 ],\n",
              "        [ 3.182874  , -1.166619  , -1.835046  ],\n",
              "        [ 0.05065567,  1.6835908 , -1.4317887 ],\n",
              "        [ 1.7340149 ,  1.3943369 , -2.5574827 ],\n",
              "        [-3.0243323 , -1.0028269 ,  3.4729204 ],\n",
              "        [-2.91062   , -0.4141815 ,  2.9090674 ],\n",
              "        [ 0.4030588 ,  1.8510226 , -1.844621  ],\n",
              "        [ 0.81913084,  1.8157386 , -2.027611  ]], dtype=float32),\n",
              " array([[ 0.2795947 ,  1.6300808 , -1.366823  ],\n",
              "        [-3.500655  , -0.02984472,  3.039812  ],\n",
              "        [-3.3394825 , -0.22831208,  3.1931891 ],\n",
              "        [ 1.3028035 ,  1.0556097 , -1.9440999 ],\n",
              "        [ 3.6324506 , -0.25968534, -2.8422523 ],\n",
              "        [ 1.9503912 ,  1.0165658 , -2.4889345 ],\n",
              "        [ 0.5916102 ,  1.7411593 , -1.7991335 ],\n",
              "        [ 2.0538797 ,  0.7473283 , -2.161994  ],\n",
              "        [-1.590074  ,  0.4182133 ,  1.2761483 ],\n",
              "        [-1.8112878 ,  1.9278177 , -0.09243334],\n",
              "        [-2.252135  ,  0.4972392 ,  1.6116446 ],\n",
              "        [ 3.1771667 , -0.05514241, -2.627771  ],\n",
              "        [-0.54710656,  0.8741167 , -0.17445682],\n",
              "        [ 3.4420278 , -0.15325774, -2.854866  ],\n",
              "        [-2.7559772 , -0.85366994,  3.20045   ],\n",
              "        [ 2.3269665 ,  1.0112203 , -2.6696515 ]], dtype=float32),\n",
              " array([[ 2.7744353 ,  0.724542  , -2.8656693 ],\n",
              "        [ 0.60321486,  0.5412112 , -0.922621  ],\n",
              "        [ 2.5023444 ,  0.74326646, -2.6519814 ],\n",
              "        [ 0.05324942,  1.3481318 , -1.1488104 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-3.2056906 , -0.7731855 ,  3.4739485 ],\n",
              "        [-1.0472947 ,  1.7039605 , -0.60253465],\n",
              "        [-2.4684513 ,  0.1031966 ,  2.171628  ],\n",
              "        [ 1.1186806 ,  1.316003  , -1.8385425 ],\n",
              "        [-3.2841065 ,  0.03647949,  2.8830712 ],\n",
              "        [ 3.1297853 ,  0.32174882, -2.9486332 ],\n",
              "        [-3.0066059 , -0.5873695 ,  3.222711  ],\n",
              "        [-3.2052379 , -0.42370507,  3.1778884 ],\n",
              "        [ 3.0023878 ,  0.6369965 , -2.9305682 ],\n",
              "        [-0.49742433,  1.6843389 , -0.8892285 ],\n",
              "        [ 1.6273453 ,  1.463925  , -2.5127816 ]], dtype=float32),\n",
              " array([[-3.2680795 , -0.6791872 ,  3.3862543 ],\n",
              "        [-1.0443944 ,  1.4712362 , -0.38640425],\n",
              "        [ 3.2680967 ,  0.34494057, -3.0658107 ],\n",
              "        [-3.349765  , -0.34579632,  3.2628453 ],\n",
              "        [ 1.8403593 ,  1.0761704 , -2.2862887 ],\n",
              "        [-3.2781417 , -0.6554259 ,  3.4531333 ],\n",
              "        [-3.3497589 , -0.12318697,  3.128243  ],\n",
              "        [-3.3586328 , -0.19852047,  3.1037493 ],\n",
              "        [-0.6075644 ,  0.1768781 ,  0.56516254],\n",
              "        [-3.0381448 , -0.8707936 ,  3.4452713 ],\n",
              "        [-3.2175245 , -0.7427461 ,  3.457212  ],\n",
              "        [ 2.9858406 ,  0.48392776, -2.7968907 ],\n",
              "        [-0.2811094 ,  0.22763227,  0.13492414],\n",
              "        [ 3.6042626 , -0.27340093, -2.805481  ],\n",
              "        [-0.2860268 ,  1.6016086 , -1.1403387 ],\n",
              "        [-3.3776305 , -0.45303872,  3.3548698 ]], dtype=float32),\n",
              " array([[ 2.5356545 ,  0.05396433, -2.147446  ],\n",
              "        [-3.310813  , -0.31949812,  3.235334  ],\n",
              "        [ 1.7570392 ,  0.88076985, -2.123039  ],\n",
              "        [ 1.7819518 ,  1.278751  , -2.4660964 ],\n",
              "        [-2.6133547 ,  1.2706443 ,  1.1355567 ],\n",
              "        [ 1.1130043 ,  0.19774841, -0.93200403],\n",
              "        [ 3.296182  ,  0.2842329 , -2.9276977 ],\n",
              "        [-3.315207  , -0.41370332,  3.2841005 ],\n",
              "        [-3.0928829 , -0.8237378 ,  3.4281528 ],\n",
              "        [-3.2630477 , -0.5912579 ,  3.399258  ],\n",
              "        [-1.8076812 ,  0.17282167,  1.6431621 ],\n",
              "        [-3.3647084 , -0.11307278,  3.048367  ],\n",
              "        [ 1.3678216 ,  1.6469188 , -2.4309683 ],\n",
              "        [ 1.7386285 , -1.2288328 , -0.4738995 ],\n",
              "        [-0.81700265,  0.55125   ,  0.5233139 ],\n",
              "        [-2.1028416 ,  1.2709278 ,  0.7893318 ]], dtype=float32),\n",
              " array([[-0.34402105,  1.7072076 , -1.0892713 ],\n",
              "        [ 0.25026336,  0.93740284, -0.8811993 ],\n",
              "        [ 2.183769  ,  1.3554231 , -2.8511539 ],\n",
              "        [ 2.0356457 ,  1.2631612 , -2.6420376 ],\n",
              "        [-3.318599  , -0.25007084,  3.137042  ],\n",
              "        [ 0.46609268,  1.743179  , -1.7010229 ],\n",
              "        [-0.16934335, -1.3432685 ,  1.225576  ],\n",
              "        [ 2.6446195 , -0.02988756, -2.1059728 ],\n",
              "        [ 0.13588594,  1.8631417 , -1.6601163 ],\n",
              "        [ 3.5337107 , -0.30863082, -2.638884  ],\n",
              "        [-0.3063415 ,  1.9629058 , -1.3543146 ],\n",
              "        [-3.2396176 , -0.45534173,  3.2395964 ],\n",
              "        [-2.0931427 ,  0.19687167,  1.7724881 ],\n",
              "        [ 2.026409  , -0.29379746, -1.3619223 ],\n",
              "        [ 1.4995449 ,  0.45145085, -1.5352825 ],\n",
              "        [-0.743246  ,  2.0978284 , -1.2258301 ]], dtype=float32),\n",
              " array([[ 1.92941   , -0.73350227, -1.0641047 ],\n",
              "        [ 0.47483715,  1.4854311 , -1.5592456 ],\n",
              "        [-2.1722229 , -0.08090666,  1.9761041 ],\n",
              "        [ 2.9979432 ,  0.3246288 , -2.6979406 ],\n",
              "        [-0.32876053,  1.7001768 , -1.0647843 ],\n",
              "        [-3.3212297 , -0.54676735,  3.4102092 ],\n",
              "        [-1.471816  , -0.6807518 ,  1.9872441 ],\n",
              "        [-3.2919078 , -0.5369829 ,  3.3828034 ],\n",
              "        [-3.1561844 ,  0.22693369,  2.5828538 ],\n",
              "        [ 1.0237324 ,  0.07761538, -0.788765  ],\n",
              "        [ 1.9816587 ,  1.097178  , -2.4804986 ],\n",
              "        [ 3.5848584 ,  0.06348268, -3.0327778 ],\n",
              "        [ 3.5931404 , -0.5581491 , -2.615696  ],\n",
              "        [ 0.6734616 ,  1.665631  , -1.8613005 ],\n",
              "        [-3.3872705 , -0.3458483 ,  3.2992055 ],\n",
              "        [ 0.8763878 ,  1.577361  , -2.06185   ]], dtype=float32),\n",
              " array([[-3.193073  ,  0.70558184,  2.2645807 ],\n",
              "        [-3.1995838 , -0.32732219,  3.1564488 ],\n",
              "        [-0.5378204 ,  1.8705505 , -1.0759029 ],\n",
              "        [ 2.3324196 ,  0.8442991 , -2.5351565 ],\n",
              "        [-1.9391273 , -1.2307298 ,  2.7597663 ],\n",
              "        [-2.2237182 ,  1.8146425 ,  0.40299368],\n",
              "        [ 1.2341996 ,  0.81197643, -1.6165715 ],\n",
              "        [ 1.3325374 ,  0.95567906, -1.6707551 ],\n",
              "        [ 1.5262161 , -0.4933209 , -0.6788881 ],\n",
              "        [ 3.4769032 ,  0.27357894, -3.136259  ],\n",
              "        [-3.219249  , -0.7779619 ,  3.4859865 ],\n",
              "        [ 3.377219  ,  0.06259373, -2.860728  ],\n",
              "        [ 0.99586725,  1.7379516 , -2.157085  ],\n",
              "        [-3.3663585 , -0.39946368,  3.3047185 ],\n",
              "        [ 0.5542901 ,  0.02563639, -0.3311171 ],\n",
              "        [-2.9438221 , -0.9974458 ,  3.4350352 ]], dtype=float32),\n",
              " array([[-0.4299449 ,  1.8253486 , -1.0539346 ],\n",
              "        [ 2.3057244 ,  1.1931709 , -2.8285513 ],\n",
              "        [ 3.5285175 , -1.0262483 , -2.149744  ],\n",
              "        [ 3.0251157 ,  0.710223  , -3.0635533 ],\n",
              "        [ 0.12621498,  0.28403196, -0.04753562],\n",
              "        [-3.2753584 , -0.63202935,  3.4312654 ],\n",
              "        [ 2.7130024 ,  0.7306498 , -2.815627  ],\n",
              "        [ 2.6927588 ,  0.55008054, -2.5974965 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [ 1.5628618 ,  1.1030003 , -2.072746  ],\n",
              "        [-0.9345805 , -0.5862543 ,  1.3644568 ],\n",
              "        [ 1.9797062 ,  1.4171771 , -2.7060194 ],\n",
              "        [ 2.8862786 ,  0.7971043 , -3.0619688 ],\n",
              "        [-2.3973024 ,  0.20039535,  2.1965528 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-0.4878258 ,  1.5294453 , -0.7657284 ]], dtype=float32),\n",
              " array([[-2.5842254 , -0.9506832 ,  3.0352397 ],\n",
              "        [-3.1505027 , -0.8180731 ,  3.475914  ],\n",
              "        [-3.276234  ,  0.32605374,  2.566974  ],\n",
              "        [ 0.4002423 ,  1.6662527 , -1.5996484 ],\n",
              "        [-2.3926094 ,  0.93166625,  1.4352456 ],\n",
              "        [-2.9144294 ,  0.14459884,  2.4638038 ],\n",
              "        [-3.2646806 , -0.55875593,  3.3573303 ],\n",
              "        [ 1.5655023 ,  0.86924016, -1.8706682 ],\n",
              "        [ 0.0108323 ,  1.560145  , -1.1303643 ],\n",
              "        [-3.4144967 , -0.39868042,  3.331768  ],\n",
              "        [ 2.5075357 ,  0.8318511 , -2.7246938 ],\n",
              "        [-0.7001343 ,  1.4587294 , -0.5424589 ],\n",
              "        [-3.186487  , -0.788792  ,  3.485621  ],\n",
              "        [ 3.1473749 , -0.11882875, -2.4457078 ],\n",
              "        [-0.73680216,  1.959912  , -0.9841351 ],\n",
              "        [-3.331985  ,  0.1317775 ,  2.8195305 ]], dtype=float32),\n",
              " array([[-3.1505656 ,  0.07595596,  2.6959646 ],\n",
              "        [-2.4361632 , -0.21589848,  2.4882648 ],\n",
              "        [-0.8179603 ,  1.9173707 , -0.7909725 ],\n",
              "        [ 0.9891364 , -0.6184845 , -0.35210449],\n",
              "        [ 3.6263697 , -0.34127548, -2.8052986 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [ 3.4422166 , -0.86809033, -2.2537024 ],\n",
              "        [-2.5845816 ,  1.0861036 ,  1.3841293 ],\n",
              "        [ 0.4516342 ,  1.8164809 , -1.822525  ],\n",
              "        [ 1.86138   ,  1.1051952 , -2.322197  ],\n",
              "        [-3.3011234 , -0.42753303,  3.3140616 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [-0.84382176,  0.4932221 ,  0.4355323 ],\n",
              "        [-0.06806459,  1.3046011 , -0.95068854],\n",
              "        [ 2.9676082 ,  0.64661735, -2.9443245 ],\n",
              "        [ 1.1699709 , -0.43275854, -0.6206306 ]], dtype=float32),\n",
              " array([[-0.43863508,  0.91594684, -0.17099929],\n",
              "        [-1.0472127 ,  1.8753179 , -0.6873815 ],\n",
              "        [-3.40837   ,  0.01386163,  2.9721184 ],\n",
              "        [-0.7845951 ,  1.8175993 , -0.89130056],\n",
              "        [ 0.9250997 ,  1.1043831 , -1.6223024 ],\n",
              "        [-3.3707335 , -0.5139968 ,  3.4017472 ],\n",
              "        [-0.2522818 ,  1.552935  , -0.8344857 ],\n",
              "        [-0.57596684,  1.4372551 , -0.5982914 ],\n",
              "        [-2.3776863 ,  1.62156   ,  0.6978854 ],\n",
              "        [ 1.6216184 ,  0.6180141 , -1.7370661 ],\n",
              "        [-1.4436667 ,  1.7387477 , -0.20387702],\n",
              "        [-2.293545  , -1.2092072 ,  3.0316467 ],\n",
              "        [-3.2114458 , -0.20092824,  3.017407  ],\n",
              "        [-2.4095862 ,  1.2485747 ,  1.2198029 ],\n",
              "        [-0.38572785,  1.550057  , -0.8263638 ],\n",
              "        [ 3.1323993 ,  0.4882918 , -2.9338202 ]], dtype=float32),\n",
              " array([[ 0.08539474,  1.7905476 , -1.589859  ],\n",
              "        [-2.2206042 ,  0.7665989 ,  1.329345  ],\n",
              "        [ 1.2721885 ,  1.0317174 , -1.874521  ],\n",
              "        [-3.1340995 , -0.7627765 ,  3.4492383 ],\n",
              "        [-3.3358505 , -0.60829175,  3.4358616 ],\n",
              "        [-3.4987586 , -0.25166622,  3.2261095 ],\n",
              "        [ 1.699042  ,  1.0091859 , -2.110488  ],\n",
              "        [ 1.5955845 ,  1.3890867 , -2.3706653 ],\n",
              "        [ 3.6598732 , -0.39290693, -2.7395859 ],\n",
              "        [ 1.4041376 ,  1.2970448 , -2.2269278 ],\n",
              "        [-3.1855085 , -0.75411713,  3.4859157 ],\n",
              "        [-3.3732812 , -0.39075914,  3.294348  ],\n",
              "        [ 0.18141115,  2.0406113 , -1.789677  ],\n",
              "        [-2.345997  ,  0.03018977,  2.0279653 ],\n",
              "        [-2.5505965 ,  0.73794466,  1.6267686 ],\n",
              "        [ 2.2840726 ,  1.0996388 , -2.805564  ]], dtype=float32),\n",
              " array([[-2.7783904 ,  1.2481829 ,  1.3134677 ],\n",
              "        [-1.5624558 ,  1.1646085 ,  0.5121461 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 2.0522678 ,  0.97352725, -2.5030155 ],\n",
              "        [-1.1115178 ,  1.7274269 , -0.3460971 ],\n",
              "        [ 2.773812  , -0.01186799, -2.2622538 ],\n",
              "        [-3.1225483 ,  0.59294146,  2.161278  ],\n",
              "        [-3.187789  , -0.7169193 ,  3.4322047 ],\n",
              "        [-2.011596  ,  0.43058047,  1.522608  ],\n",
              "        [ 1.1079637 ,  1.5316623 , -2.1318429 ],\n",
              "        [ 0.72851413,  0.9630989 , -1.3309267 ],\n",
              "        [ 3.4204066 , -0.09437621, -2.8501568 ],\n",
              "        [-0.47401425,  1.6380892 , -0.87121654],\n",
              "        [-2.723901  ,  0.63931024,  1.8818896 ],\n",
              "        [-1.7406563 ,  0.8362571 ,  0.969748  ],\n",
              "        [-0.42616296,  1.7919322 , -1.1599357 ]], dtype=float32),\n",
              " array([[ 2.3119862 ,  0.14135122, -2.0292916 ],\n",
              "        [-0.24954581,  1.1485535 , -0.60308254],\n",
              "        [ 1.4755824 ,  0.8008322 , -1.83445   ],\n",
              "        [-3.3634748 , -0.3948333 ,  3.2775836 ],\n",
              "        [-3.399802  , -0.41746756,  3.3406699 ],\n",
              "        [-3.321022  , -0.5209526 ,  3.377829  ],\n",
              "        [ 0.21264087,  1.9881872 , -1.7847035 ],\n",
              "        [-3.3685439 , -0.4365711 ,  3.3586533 ],\n",
              "        [-3.2621577 , -0.59376895,  3.390627  ],\n",
              "        [ 0.8836049 ,  0.29189685, -0.84772766],\n",
              "        [-3.213776  , -0.21644849,  2.9960754 ],\n",
              "        [-3.2831767 , -0.43205908,  3.1976714 ],\n",
              "        [-3.4698138 ,  0.02359442,  3.039697  ],\n",
              "        [ 2.1420534 ,  0.39602995, -1.9344835 ],\n",
              "        [ 0.78422403,  1.5807254 , -1.9308078 ],\n",
              "        [ 1.0925058 ,  1.8505877 , -2.395864  ]], dtype=float32),\n",
              " array([[ 1.8932137 ,  1.3874147 , -2.6909359 ],\n",
              "        [-3.4493377 ,  0.6635649 ,  2.5141015 ],\n",
              "        [ 0.9477229 ,  1.3869871 , -1.720479  ],\n",
              "        [ 1.6103365 ,  1.3465303 , -2.38346   ],\n",
              "        [ 2.0389235 ,  1.4634753 , -2.8320897 ],\n",
              "        [ 1.7584928 ,  0.78774005, -2.0186386 ],\n",
              "        [-1.8896698 ,  1.7682667 ,  0.09759136],\n",
              "        [ 2.4715092 , -0.38759294, -1.7291605 ],\n",
              "        [-3.364035  ,  0.56631356,  2.4706833 ],\n",
              "        [-1.9254016 , -0.9269136 ,  2.4134643 ],\n",
              "        [-0.60367316,  0.74179614,  0.25264645],\n",
              "        [ 2.70687   ,  0.00489987, -2.1752267 ],\n",
              "        [ 0.6898807 ,  1.446731  , -1.6558077 ],\n",
              "        [ 3.3951812 , -0.44109073, -2.4889665 ],\n",
              "        [ 0.91948205,  1.5598575 , -2.0143535 ],\n",
              "        [-2.290541  , -0.45052823,  2.3583426 ]], dtype=float32),\n",
              " array([[ 2.176955  , -0.16184378, -1.5867865 ],\n",
              "        [-2.3856637 ,  0.4532671 ,  1.4257989 ],\n",
              "        [-1.2320737 ,  2.0331306 , -0.6355025 ],\n",
              "        [ 3.5379019 , -0.7197689 , -2.3242912 ],\n",
              "        [ 3.315015  ,  0.3483865 , -3.0374875 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 0.01196797,  1.3907925 , -1.0311728 ],\n",
              "        [ 0.08480185,  1.8667365 , -1.6096307 ],\n",
              "        [ 0.8623937 , -0.5484428 , -0.27849883],\n",
              "        [ 3.288276  ,  0.02927495, -2.760913  ],\n",
              "        [ 1.1403817 ,  1.710558  , -2.282903  ],\n",
              "        [ 2.112841  , -1.0308255 , -0.94146246],\n",
              "        [-1.2558748 ,  0.9970958 ,  0.31932947],\n",
              "        [ 0.12056156,  1.4337794 , -1.0837269 ],\n",
              "        [ 3.3126547 ,  0.22799033, -2.966286  ],\n",
              "        [-2.4044216 , -0.7014553 ,  2.765872  ]], dtype=float32),\n",
              " array([[ 3.5931158 , -0.5046804 , -2.6258543 ],\n",
              "        [ 2.8288217 ,  0.4717433 , -2.650837  ],\n",
              "        [ 3.0574102 ,  0.38916382, -2.806263  ],\n",
              "        [ 3.5760548 , -0.2477713 , -2.813065  ],\n",
              "        [ 0.6424347 ,  1.1117874 , -1.2642752 ],\n",
              "        [ 2.1464913 ,  1.0953447 , -2.6874669 ],\n",
              "        [ 2.1337276 ,  1.0895607 , -2.5618854 ],\n",
              "        [ 1.2299808 ,  1.4515301 , -2.1527083 ],\n",
              "        [-2.9244866 , -1.0175644 ,  3.4001808 ],\n",
              "        [ 1.7915645 ,  0.6139276 , -2.0151303 ],\n",
              "        [-0.00992787,  1.4155164 , -0.9584002 ],\n",
              "        [-1.3430198 , -0.76265156,  2.048016  ],\n",
              "        [-3.3560236 , -0.11638083,  3.0361824 ],\n",
              "        [ 1.8346964 ,  1.5212573 , -2.8380713 ],\n",
              "        [ 0.7063075 ,  0.9917389 , -1.3899968 ],\n",
              "        [-0.973848  ,  2.1553411 , -0.88635015]], dtype=float32),\n",
              " array([[-2.4631436 ,  1.349501  ,  1.1204891 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 1.4291325 ,  1.5303935 , -2.3368526 ],\n",
              "        [-0.12587057,  1.0403861 , -0.57256174],\n",
              "        [ 2.2456782 ,  0.21245255, -1.9187026 ],\n",
              "        [ 2.648589  ,  0.86296964, -2.8492904 ],\n",
              "        [ 2.9790008 ,  0.66885304, -2.945866  ],\n",
              "        [ 1.2611328 ,  0.2772384 , -1.2078383 ],\n",
              "        [ 3.3321502 , -0.2870918 , -2.4040055 ],\n",
              "        [-3.447794  , -0.02711506,  3.019683  ],\n",
              "        [ 2.0015805 , -0.61763614, -1.1691175 ],\n",
              "        [ 1.3191758 ,  0.5058513 , -1.4634914 ],\n",
              "        [-3.113323  , -0.80840933,  3.4764347 ],\n",
              "        [ 2.4273832 ,  0.65315723, -2.4458132 ],\n",
              "        [ 1.5468735 ,  1.1652856 , -2.1856804 ],\n",
              "        [-3.2031276 , -0.7599019 ,  3.4575973 ]], dtype=float32),\n",
              " array([[-2.950081  , -0.79176784,  3.3042445 ],\n",
              "        [-1.0251516 ,  1.7403201 , -0.6000792 ],\n",
              "        [ 0.33850223,  1.3205835 , -1.2553917 ],\n",
              "        [-3.1856415 , -0.7968769 ,  3.4516268 ],\n",
              "        [-0.23313285,  1.6265484 , -0.94694984],\n",
              "        [-3.1659527 , -0.78225946,  3.462679  ],\n",
              "        [-3.2413123 , -0.37468946,  3.1684742 ],\n",
              "        [ 0.36496136,  1.8850173 , -1.9156164 ],\n",
              "        [ 0.6386134 , -0.73251474,  0.01483013],\n",
              "        [-3.4180338 , -0.3383946 ,  3.2887025 ],\n",
              "        [-2.901369  ,  0.8329922 ,  1.7467678 ],\n",
              "        [ 2.2767015 ,  0.85741925, -2.5751982 ],\n",
              "        [ 3.6514175 , -0.40973362, -2.7705798 ],\n",
              "        [ 1.1009821 ,  0.18055196, -0.90165484],\n",
              "        [ 0.8416818 ,  1.5129367 , -1.6583009 ],\n",
              "        [-3.3825161 , -0.20848611,  3.167396  ]], dtype=float32),\n",
              " array([[-3.3899632 , -0.29165924,  3.220039  ],\n",
              "        [ 1.2579963 ,  1.6185845 , -2.339664  ],\n",
              "        [ 3.6168337 , -0.0954544 , -2.9850392 ],\n",
              "        [-3.0213401 , -0.9464712 ,  3.5049272 ],\n",
              "        [ 1.5292602 ,  1.3805029 , -2.3832216 ],\n",
              "        [ 1.6005617 ,  1.2454084 , -2.2768059 ],\n",
              "        [ 0.6563205 ,  0.11434156, -0.51397234],\n",
              "        [ 1.5280621 ,  1.3742968 , -2.3745198 ],\n",
              "        [-3.109144  ,  0.05974557,  2.6621401 ],\n",
              "        [ 2.8900125 ,  0.5590338 , -2.9434395 ],\n",
              "        [ 3.4835806 , -0.78108376, -2.293641  ],\n",
              "        [-0.21024774,  1.6060914 , -1.0129833 ],\n",
              "        [ 1.7879345 ,  1.0886165 , -2.2004585 ],\n",
              "        [ 2.2253294 ,  0.392121  , -2.074614  ],\n",
              "        [ 1.8998767 ,  1.0058869 , -2.3286805 ],\n",
              "        [-0.15865023,  1.5986174 , -1.0896386 ]], dtype=float32),\n",
              " array([[-1.6023144e-01,  1.0525783e+00, -8.6295474e-01],\n",
              "        [-1.6659520e+00,  1.5973344e+00,  2.7186372e-03],\n",
              "        [-3.2640355e+00, -5.5214584e-01,  3.3641710e+00],\n",
              "        [ 3.5676086e+00, -1.5119661e-02, -2.9361663e+00],\n",
              "        [ 2.6641824e+00, -9.3473715e-01, -1.3883533e+00],\n",
              "        [ 1.3984164e+00,  8.5437697e-01, -1.8262017e+00],\n",
              "        [-2.9338853e+00,  8.3226240e-01,  1.8739015e+00],\n",
              "        [-3.0710409e+00,  3.5842136e-01,  2.4490306e+00],\n",
              "        [ 1.0425464e+00,  9.1486013e-01, -1.5408790e+00],\n",
              "        [-1.3577898e-01,  1.6621447e-01,  2.9116655e-02],\n",
              "        [-3.4318273e+00, -3.7778625e-01,  3.3063686e+00],\n",
              "        [-3.2931077e+00, -6.4307386e-01,  3.4076085e+00],\n",
              "        [-3.1866372e+00, -1.4309508e-01,  2.8697796e+00],\n",
              "        [-2.5207825e+00,  6.0072613e-01,  1.6649498e+00],\n",
              "        [-1.6360177e+00,  1.2011489e+00,  4.8113799e-01],\n",
              "        [-7.9929399e-01,  1.4564313e+00, -6.0224152e-01]], dtype=float32),\n",
              " array([[ 3.4904735 , -0.95259994, -2.2616205 ],\n",
              "        [ 1.6847326 ,  1.2348676 , -2.3684733 ],\n",
              "        [ 0.9444216 , -0.13535383, -0.6540992 ],\n",
              "        [ 2.1759808 ,  0.8260828 , -2.4976325 ],\n",
              "        [-3.0814147 , -0.82433176,  3.4423494 ],\n",
              "        [ 2.9963615 ,  0.58136636, -3.0048184 ],\n",
              "        [-0.4691514 ,  0.35943827,  0.27788594],\n",
              "        [ 1.3451638 ,  0.88639176, -1.6577791 ],\n",
              "        [ 1.947758  ,  1.235267  , -2.5912375 ],\n",
              "        [ 1.091014  ,  0.6143585 , -1.3459277 ],\n",
              "        [ 1.866809  , -0.13172996, -1.248107  ],\n",
              "        [-3.2821226 , -0.08236004,  2.9471307 ],\n",
              "        [-2.957597  , -0.04409855,  2.7802665 ],\n",
              "        [-0.9349724 ,  1.588607  , -0.3407737 ],\n",
              "        [-2.8440425 , -0.5629281 ,  3.0373433 ],\n",
              "        [-2.473236  ,  1.6213592 ,  0.7223395 ]], dtype=float32),\n",
              " array([[-3.051544  ,  0.3001815 ,  2.3949184 ],\n",
              "        [-3.40193   ,  0.02589525,  2.8835404 ],\n",
              "        [ 2.1319869 ,  0.49706662, -2.1624548 ],\n",
              "        [-2.8986022 ,  0.1928674 ,  2.356195  ],\n",
              "        [-3.2232602 ,  0.4387633 ,  2.4971437 ],\n",
              "        [-3.2960067 , -0.30539906,  3.1625764 ],\n",
              "        [-0.8838342 ,  1.9750363 , -0.9231563 ],\n",
              "        [ 1.4211437 ,  0.51687443, -1.5036778 ],\n",
              "        [ 2.7639253 ,  0.79832715, -2.9572067 ],\n",
              "        [-2.6954055 ,  0.60247564,  1.8551266 ],\n",
              "        [-3.4237568 , -0.21027319,  3.1845944 ],\n",
              "        [-2.395117  , -0.6479047 ,  2.7782497 ],\n",
              "        [-3.241121  , -0.46434733,  3.2895277 ],\n",
              "        [ 2.6898654 ,  0.98480844, -3.0082636 ],\n",
              "        [ 1.1607188 ,  0.8109757 , -1.5115223 ],\n",
              "        [-3.4344532 , -0.29348233,  3.250826  ]], dtype=float32),\n",
              " array([[ 0.55991715,  1.1792942 , -1.2242532 ],\n",
              "        [ 0.92287713,  0.1863868 , -0.83784467],\n",
              "        [-2.3050141 ,  1.5658666 ,  0.6796165 ],\n",
              "        [ 3.4951115 ,  0.02098858, -2.9608412 ],\n",
              "        [-0.7540001 ,  1.7438444 , -0.7997712 ],\n",
              "        [ 1.7877184 ,  1.2456731 , -2.4973571 ],\n",
              "        [ 1.5171766 ,  1.3643026 , -2.3855832 ],\n",
              "        [-3.594247  ,  0.21347387,  2.932604  ],\n",
              "        [-3.0098605 ,  0.46352175,  2.2329473 ],\n",
              "        [-3.3619847 , -0.09693352,  3.065117  ],\n",
              "        [ 2.6423914 ,  0.642068  , -2.6132512 ],\n",
              "        [ 1.515107  ,  0.7091967 , -1.6985682 ],\n",
              "        [-2.284784  ,  1.3993293 ,  0.8015081 ],\n",
              "        [ 3.118743  ,  0.03484795, -2.51639   ],\n",
              "        [-3.3583171 , -0.49409893,  3.3910038 ],\n",
              "        [-2.3856637 ,  0.4532671 ,  1.4257989 ]], dtype=float32),\n",
              " array([[-3.2941859 , -0.3340548 ,  3.2254221 ],\n",
              "        [-1.3589848 ,  1.6710231 , -0.20266241],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 0.8338975 ,  1.5173657 , -2.0063255 ],\n",
              "        [-2.3998654 ,  0.64713526,  1.7192659 ],\n",
              "        [-3.3032653 , -0.14822617,  3.0296273 ],\n",
              "        [ 0.6520695 ,  1.4902438 , -1.6335032 ],\n",
              "        [-1.969301  ,  0.450704  ,  1.2020428 ],\n",
              "        [-3.2511203 ,  0.6724483 ,  2.3267534 ],\n",
              "        [ 1.1121569 , -1.484207  ,  0.4098849 ],\n",
              "        [ 1.0099587 ,  0.95481503, -1.6556692 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 1.60995   ,  1.4650271 , -2.4351375 ],\n",
              "        [ 1.2069002 ,  1.4571551 , -2.206943  ],\n",
              "        [-3.0514867 ,  1.0426718 ,  1.8993471 ],\n",
              "        [-2.6889803 ,  0.82665706,  1.6002922 ]], dtype=float32),\n",
              " array([[ 2.0426986 ,  1.140248  , -2.6247582 ],\n",
              "        [ 3.42648   , -0.47293878, -2.596471  ],\n",
              "        [ 1.4327852 ,  1.1685786 , -2.0594802 ],\n",
              "        [-3.173821  , -0.8047668 ,  3.4494472 ],\n",
              "        [ 2.9184928 ,  0.96617484, -3.1778588 ],\n",
              "        [-0.43255007, -0.11970949,  0.57922006],\n",
              "        [-3.3233125 , -0.3366274 ,  3.2037513 ],\n",
              "        [-3.0271976 ,  1.1273643 ,  1.7170364 ],\n",
              "        [ 2.5338972 , -1.3220621 , -0.983674  ],\n",
              "        [ 1.1642307 ,  1.3413416 , -1.909512  ],\n",
              "        [-3.1341207 , -0.7742604 ,  3.4428396 ],\n",
              "        [ 1.5020963 ,  1.1065701 , -2.1308165 ],\n",
              "        [ 1.9542017 ,  0.829392  , -2.1901329 ],\n",
              "        [-3.2114458 , -0.20092824,  3.017407  ],\n",
              "        [-3.1215641 , -0.14795715,  2.8760564 ],\n",
              "        [ 2.1265209 ,  0.7984319 , -2.2714992 ]], dtype=float32),\n",
              " array([[-3.1159403 ,  0.41590813,  2.3139935 ],\n",
              "        [-1.9793817 ,  1.6544871 ,  0.36660463],\n",
              "        [-3.2082198 , -0.5917274 ,  3.316792  ],\n",
              "        [-2.7639592 , -0.23306349,  2.7200909 ],\n",
              "        [ 3.5844257 , -0.26437557, -2.7735128 ],\n",
              "        [-1.4990535 ,  1.6579553 , -0.10430504],\n",
              "        [-3.3222666 , -0.61414385,  3.4440947 ],\n",
              "        [ 1.6435118 ,  1.4137617 , -2.4907975 ],\n",
              "        [-3.3290396 , -0.63037515,  3.44872   ],\n",
              "        [-1.7009145 ,  1.7365693 , -0.07135215],\n",
              "        [ 2.4863427 ,  0.72624445, -2.7146692 ],\n",
              "        [ 3.3044524 ,  0.32019112, -3.017074  ],\n",
              "        [-3.2248685 , -0.45711356,  3.2414575 ],\n",
              "        [-3.3617432 , -0.00957619,  2.9469514 ],\n",
              "        [ 2.4975395 ,  0.66789645, -2.656716  ],\n",
              "        [ 1.474669  ,  1.2001178 , -2.1521301 ]], dtype=float32),\n",
              " array([[-0.822274  , -0.66291654,  1.2728231 ],\n",
              "        [ 0.6308319 ,  1.6314696 , -1.8007711 ],\n",
              "        [ 0.9675831 ,  1.411633  , -1.957621  ],\n",
              "        [ 0.93105024,  0.9967891 , -1.4475611 ],\n",
              "        [ 1.2184703 , -0.3333116 , -0.6053469 ],\n",
              "        [-3.0269969 , -0.02330462,  2.6764498 ],\n",
              "        [ 2.3160632 ,  0.97097564, -2.6572108 ],\n",
              "        [ 2.2340403 ,  1.2549025 , -2.8520644 ],\n",
              "        [-3.2937524 , -0.6335492 ,  3.4347186 ],\n",
              "        [-3.159595  ,  0.19153084,  2.5872712 ],\n",
              "        [-3.36917   , -0.566025  ,  3.423451  ],\n",
              "        [ 3.5845435 , -0.07937869, -2.9888668 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-0.44244125,  1.4983422 , -0.8135891 ],\n",
              "        [-3.026838  , -0.15103033,  2.8510091 ],\n",
              "        [-1.4086543 ,  0.29004714,  1.2316139 ]], dtype=float32),\n",
              " array([[ 2.239808  , -0.04184553, -1.6817898 ],\n",
              "        [-3.1986682 , -0.6146805 ,  3.3932023 ],\n",
              "        [-2.204568  ,  0.6602127 ,  1.3717723 ],\n",
              "        [ 1.9161353 ,  1.5589823 , -2.890728  ],\n",
              "        [-3.1482275 , -0.54588914,  3.281448  ],\n",
              "        [-0.9876632 ,  1.8645161 , -0.47307873],\n",
              "        [ 1.0531421 ,  1.2977062 , -1.7807232 ],\n",
              "        [-1.6864357 ,  1.9723324 , -0.23240341],\n",
              "        [ 3.0124075 ,  0.5630741 , -2.9519618 ],\n",
              "        [ 3.6578243 , -0.54205954, -2.645125  ],\n",
              "        [ 1.1117891 ,  1.4391147 , -2.0413792 ],\n",
              "        [ 1.9835366 ,  0.9342386 , -2.332191  ],\n",
              "        [-3.3353288 , -0.15005782,  3.0475168 ],\n",
              "        [ 1.2105199 ,  0.8612229 , -1.6639497 ],\n",
              "        [-2.1989005 ,  1.7116145 ,  0.4096042 ],\n",
              "        [ 1.245332  ,  1.8518633 , -2.507959  ]], dtype=float32),\n",
              " array([[ 2.9162047 ,  0.51360226, -2.901395  ],\n",
              "        [ 2.1956198 ,  0.684343  , -2.2831154 ],\n",
              "        [-3.2114458 , -0.20092824,  3.017407  ],\n",
              "        [ 1.0726382 ,  1.2145236 , -1.8012491 ],\n",
              "        [-0.9513274 ,  2.0890408 , -0.9313357 ],\n",
              "        [-3.2791784 , -0.46221992,  3.279054  ],\n",
              "        [ 3.0948522 ,  0.38338867, -2.9486592 ],\n",
              "        [ 1.2026063 ,  1.239743  , -1.8228533 ],\n",
              "        [ 0.81739837,  1.3881742 , -1.7470188 ],\n",
              "        [ 2.2519898 , -0.41121948, -1.4278622 ],\n",
              "        [-3.447507  ,  0.22696215,  2.8316588 ],\n",
              "        [-3.39591   , -0.0248932 ,  2.9746614 ],\n",
              "        [ 2.613583  ,  0.6396569 , -2.5913177 ],\n",
              "        [ 3.5148387 , -0.10598411, -2.8389535 ],\n",
              "        [-3.3263204 , -0.19606374,  3.1074657 ],\n",
              "        [ 0.56776065,  1.7533154 , -1.9111984 ]], dtype=float32),\n",
              " array([[-0.46725553,  1.5324236 , -0.87734306],\n",
              "        [-2.9967377 ,  1.1545571 ,  1.6791091 ],\n",
              "        [ 0.31621203,  1.7707785 , -1.7311293 ],\n",
              "        [-3.2209086 ,  0.24851249,  2.6112256 ],\n",
              "        [-3.1282232 , -0.634374  ,  3.304611  ],\n",
              "        [-3.4968302 , -0.04354507,  3.0926301 ],\n",
              "        [-0.30721292,  1.6307949 , -1.0632416 ],\n",
              "        [ 2.8975065 ,  0.5062292 , -2.8775756 ],\n",
              "        [ 1.2061524 ,  0.5782083 , -1.2919644 ],\n",
              "        [ 1.3273734 ,  1.4965547 , -2.255723  ],\n",
              "        [-3.340704  , -0.20664507,  3.1210139 ],\n",
              "        [-1.7335907 ,  1.845543  , -0.13451406],\n",
              "        [-3.299614  , -0.59714204,  3.40091   ],\n",
              "        [-3.0408056 , -0.93149215,  3.4370627 ],\n",
              "        [-2.4154103 , -1.016852  ,  3.089503  ],\n",
              "        [-3.2521694 , -0.66288865,  3.417331  ]], dtype=float32),\n",
              " array([[-0.89415777, -0.38674253,  1.2539883 ],\n",
              "        [-0.22279598,  0.51378226, -0.11249901],\n",
              "        [-2.4023197 , -0.18155119,  2.3310144 ],\n",
              "        [ 2.1082404 ,  1.1916376 , -2.5705464 ],\n",
              "        [-3.3011897 , -0.5795156 ,  3.3913245 ],\n",
              "        [-2.7183506 ,  0.79563963,  1.6327323 ],\n",
              "        [ 1.3404815 ,  1.4272307 , -2.2299826 ],\n",
              "        [-3.3572528 , -0.36413237,  3.2957582 ],\n",
              "        [ 2.017287  ,  1.2404069 , -2.6853452 ],\n",
              "        [ 0.30439305,  1.4230347 , -1.402282  ],\n",
              "        [-3.2044523 , -0.542977  ,  3.322771  ],\n",
              "        [-1.6535974 ,  0.06397089,  1.7098721 ],\n",
              "        [ 2.3264616 ,  0.92517436, -2.5838013 ],\n",
              "        [-1.7705256 ,  1.733034  ,  0.02756216],\n",
              "        [-1.7253511 ,  1.6965162 , -0.04538636],\n",
              "        [ 3.5320134 , -0.4162331 , -2.6872568 ]], dtype=float32),\n",
              " array([[ 0.08851887,  1.3409452 , -1.0537827 ],\n",
              "        [ 1.012339  ,  0.95184654, -1.3643961 ],\n",
              "        [ 1.4943572 ,  1.6850077 , -2.5301924 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 1.4971098 ,  1.4504997 , -2.3779333 ],\n",
              "        [-3.3406518 , -0.5029223 ,  3.3807783 ],\n",
              "        [-3.3483162 , -0.34604207,  3.23637   ],\n",
              "        [-2.6582897 ,  0.9667144 ,  1.602428  ],\n",
              "        [-2.966224  , -0.29620418,  2.927055  ],\n",
              "        [-0.4599212 ,  1.97215   , -1.0420194 ],\n",
              "        [-3.2558157 , -0.6558528 ,  3.4543586 ],\n",
              "        [ 3.6318657 , -0.4564648 , -2.7316713 ],\n",
              "        [ 2.7336566 ,  0.8519463 , -2.939414  ],\n",
              "        [ 0.47910222,  0.4462832 , -0.56689894],\n",
              "        [-3.3391678 , -0.13403797,  3.048799  ],\n",
              "        [ 2.7587001 ,  0.9192668 , -3.0055504 ]], dtype=float32),\n",
              " array([[ 1.0826395 ,  1.7189621 , -2.2666273 ],\n",
              "        [ 2.2057362 ,  0.7427858 , -2.3584123 ],\n",
              "        [ 1.7959641 ,  1.0230567 , -2.3245318 ],\n",
              "        [ 1.3214506 ,  0.31032452, -1.288902  ],\n",
              "        [ 1.2447094 ,  0.97571766, -1.7111467 ],\n",
              "        [-1.6236423 ,  1.786944  , -0.11801235],\n",
              "        [-2.216265  ,  1.4599367 ,  0.81058097],\n",
              "        [-3.1184855 ,  0.68494856,  2.2188191 ],\n",
              "        [-3.3512087 ,  0.24472994,  2.716018  ],\n",
              "        [ 1.2071937 ,  1.0835179 , -1.7764568 ],\n",
              "        [ 1.6107956 ,  1.277499  , -2.485946  ],\n",
              "        [ 1.1566464 ,  1.4906186 , -2.2828965 ],\n",
              "        [-3.3537283 , -0.45458874,  3.3746474 ],\n",
              "        [-3.389384  ,  0.18061452,  2.762039  ],\n",
              "        [-0.3869105 ,  0.7866148 , -0.37452742],\n",
              "        [-0.3101758 ,  1.1493746 , -0.5803197 ]], dtype=float32),\n",
              " array([[ 3.5309687 , -0.6449082 , -2.4761438 ],\n",
              "        [ 0.22220391,  1.646524  , -1.4351542 ],\n",
              "        [-2.8581252 ,  0.59374756,  2.1245441 ],\n",
              "        [ 3.5605738 , -0.47673032, -2.6439137 ],\n",
              "        [ 2.6353965 ,  0.8412963 , -2.8287768 ],\n",
              "        [-3.3707113 , -0.2298446 ,  3.2296438 ],\n",
              "        [ 1.4763821 ,  1.6038998 , -2.4870033 ],\n",
              "        [ 3.122799  ,  0.36526498, -2.8275914 ],\n",
              "        [ 3.110854  ,  0.58430415, -3.0435152 ],\n",
              "        [-3.2150004 , -0.68192333,  3.460233  ],\n",
              "        [-1.058263  ,  0.38536546,  0.7579547 ],\n",
              "        [ 2.5659463 ,  0.72022855, -2.6104932 ],\n",
              "        [-3.0127842 , -0.47455266,  3.0866637 ],\n",
              "        [ 3.3551774 , -0.3086215 , -2.5690532 ],\n",
              "        [ 3.1082258 , -0.9021526 , -1.7794778 ],\n",
              "        [ 1.5970383 ,  1.3165305 , -2.2821245 ]], dtype=float32),\n",
              " array([[-2.8623345 , -0.23346035,  2.7269723 ],\n",
              "        [ 3.5714304 , -0.6809234 , -2.543674  ],\n",
              "        [-3.259591  ,  0.36200565,  2.5285091 ],\n",
              "        [-2.0757697 ,  1.9385281 ,  0.15733719],\n",
              "        [ 2.6563652 , -0.669739  , -1.6283205 ],\n",
              "        [ 0.5402165 ,  1.4137344 , -1.5515028 ],\n",
              "        [ 1.4322621 ,  1.2516365 , -2.062448  ],\n",
              "        [ 2.3357875 ,  0.9135392 , -2.4555593 ],\n",
              "        [ 2.6139343 ,  0.87225914, -2.7792416 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-0.4484472 ,  0.84188163, -0.34233618],\n",
              "        [-3.3147743 ,  0.32378322,  2.6175165 ],\n",
              "        [-3.32857   ,  0.39536652,  2.6467776 ],\n",
              "        [-3.406503  , -0.37696674,  3.2718115 ],\n",
              "        [-3.4523304 ,  0.07054685,  2.9927788 ],\n",
              "        [-2.2110498 ,  0.3783115 ,  1.6834342 ]], dtype=float32),\n",
              " array([[-2.8679411 ,  0.31548372,  2.3086977 ],\n",
              "        [ 1.8190556 ,  1.4364957 , -2.6548524 ],\n",
              "        [ 1.6196209 ,  1.009766  , -1.9450269 ],\n",
              "        [ 2.6227093 ,  0.01506448, -2.0781026 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [-2.8968496 , -0.764625  ,  3.2499852 ],\n",
              "        [-2.1222246 ,  0.86405337,  1.1840897 ],\n",
              "        [ 2.7856023 ,  0.86553884, -2.938746  ],\n",
              "        [ 0.2303392 ,  1.2766408 , -1.1028947 ],\n",
              "        [ 2.3863308 ,  0.19147468, -2.051188  ],\n",
              "        [ 2.1591952 ,  1.0902605 , -2.5654604 ],\n",
              "        [-2.5650342 ,  0.1486836 ,  2.158266  ],\n",
              "        [-3.228733  , -0.7277671 ,  3.4762893 ],\n",
              "        [-2.0117824 ,  1.8172393 ,  0.1824368 ],\n",
              "        [-2.9487858 , -0.5151694 ,  3.0666811 ],\n",
              "        [-3.1638443 , -0.7721667 ,  3.4725244 ]], dtype=float32),\n",
              " array([[-3.106013  , -0.05613782,  2.7973726 ],\n",
              "        [-2.6593566 , -0.83760667,  3.0827203 ],\n",
              "        [-3.047932  , -0.29518837,  2.9404573 ],\n",
              "        [-0.7046526 ,  1.7087303 , -0.6863464 ],\n",
              "        [ 0.595035  ,  0.45925897, -0.6041467 ],\n",
              "        [ 1.1324275 ,  0.66331697, -1.3938588 ],\n",
              "        [ 3.0314314 ,  0.13063633, -2.6175184 ],\n",
              "        [-3.2943375 , -0.27888715,  3.1369371 ],\n",
              "        [ 1.8645979 ,  1.5537566 , -2.8085    ],\n",
              "        [-2.4770496 ,  0.8457594 ,  1.4962175 ],\n",
              "        [-3.2698772 , -0.5043428 ,  3.3385944 ],\n",
              "        [-3.2874305 , -0.55953825,  3.3635972 ],\n",
              "        [ 3.2575521 ,  0.5118656 , -3.15271   ],\n",
              "        [-0.15547264,  1.2680452 , -0.8422727 ],\n",
              "        [ 1.8015047 ,  1.0090107 , -2.2025838 ],\n",
              "        [-2.6862729 ,  1.195467  ,  1.3138545 ]], dtype=float32),\n",
              " array([[-3.2465184 ,  0.3022112 ,  2.6272678 ],\n",
              "        [ 3.5767868 , -0.6488091 , -2.4325743 ],\n",
              "        [ 0.629275  ,  1.1027431 , -1.3820318 ],\n",
              "        [-3.0448163 ,  0.23603728,  2.5097797 ],\n",
              "        [ 0.92080915,  1.3169957 , -1.7913764 ],\n",
              "        [ 0.44337228,  1.7163527 , -1.9033856 ],\n",
              "        [-3.3238318 , -0.46509466,  3.3665938 ],\n",
              "        [ 0.738225  ,  0.5330237 , -0.86731756],\n",
              "        [-0.07529563,  1.1546975 , -0.86422384],\n",
              "        [-0.49637684,  1.8070365 , -1.1373882 ],\n",
              "        [-3.3222556 , -0.25709826,  3.1449766 ],\n",
              "        [ 2.4953516 ,  0.30494535, -2.2456977 ],\n",
              "        [ 0.6351735 ,  1.5280656 , -1.6075199 ],\n",
              "        [-0.72285676,  1.94884   , -0.9661397 ],\n",
              "        [-3.382219  , -0.4813451 ,  3.3999748 ],\n",
              "        [-0.59713084,  1.5969819 , -0.8525303 ]], dtype=float32),\n",
              " array([[ 1.8503162 ,  0.6167684 , -1.9091166 ],\n",
              "        [-3.2987068 , -0.645538  ,  3.4229455 ],\n",
              "        [ 1.95317   ,  1.16614   , -2.4528518 ],\n",
              "        [-3.3278883 , -0.6021642 ,  3.4212809 ],\n",
              "        [-2.43318   ,  1.6618553 ,  0.72912586],\n",
              "        [ 0.81026   ,  1.6087117 , -2.0152192 ],\n",
              "        [-2.205699  ,  1.0969784 ,  1.0379028 ],\n",
              "        [ 3.4276621 , -0.3715987 , -2.614104  ],\n",
              "        [-3.265468  , -0.65171194,  3.4586349 ],\n",
              "        [-3.430662  ,  0.2910524 ,  2.699685  ],\n",
              "        [-3.2415366 , -0.7182901 ,  3.4627733 ],\n",
              "        [ 3.3804848 , -0.94221395, -2.0621047 ],\n",
              "        [ 1.7166909 , -0.08209685, -1.3180921 ],\n",
              "        [-3.3129005 , -0.55396867,  3.4142847 ],\n",
              "        [ 0.72597504,  1.705747  , -1.9636145 ],\n",
              "        [ 1.2143514 ,  1.6805303 , -2.3088467 ]], dtype=float32),\n",
              " array([[ 3.196218  ,  0.4767939 , -3.075018  ],\n",
              "        [-2.024901  ,  1.8626066 ,  0.181932  ],\n",
              "        [-3.104681  , -0.8015965 ,  3.4651413 ],\n",
              "        [-3.27748   , -0.20716667,  3.0850368 ],\n",
              "        [-3.094821  ,  0.06056981,  2.654852  ],\n",
              "        [ 1.8626904 ,  1.43876   , -2.7217693 ],\n",
              "        [-0.4863434 ,  1.9467522 , -1.1122384 ],\n",
              "        [ 1.6800824 ,  0.9320574 , -2.0372238 ],\n",
              "        [-1.4639258 ,  2.1966958 , -0.5350219 ],\n",
              "        [-1.8005543 ,  1.9723998 , -0.11371158],\n",
              "        [-0.77941316,  1.0247953 , -0.03512318],\n",
              "        [-0.36467847,  0.19676459,  0.2899142 ],\n",
              "        [ 2.8027651 , -0.34676364, -2.0340786 ],\n",
              "        [-3.3173456 , -0.16998209,  3.0963802 ],\n",
              "        [ 2.7304704 ,  0.5930277 , -2.7555988 ],\n",
              "        [ 2.0275357 ,  1.3626515 , -2.8299952 ]], dtype=float32),\n",
              " array([[ 0.05717853,  1.6728607 , -1.4464674 ],\n",
              "        [-3.2114458 , -0.20092824,  3.017407  ],\n",
              "        [ 1.1367677 ,  1.5014158 , -2.1181211 ],\n",
              "        [ 3.0688815 ,  0.3585197 , -2.8311756 ],\n",
              "        [-1.173113  , -1.1978644 ,  2.0501475 ],\n",
              "        [ 2.6439106 ,  0.9146196 , -2.9278123 ],\n",
              "        [ 3.4985168 , -0.5969369 , -2.582137  ],\n",
              "        [ 3.171664  ,  0.21923119, -2.6800404 ],\n",
              "        [ 0.3290496 ,  0.6438955 , -0.74184716],\n",
              "        [ 0.25100127,  1.64268   , -1.4514788 ],\n",
              "        [-3.1762207 , -0.6132492 ,  3.2828426 ],\n",
              "        [-0.28544188, -0.8693378 ,  1.1468434 ],\n",
              "        [ 2.0765166 ,  1.1314126 , -2.5267391 ],\n",
              "        [-0.02586634,  1.6013942 , -1.2092876 ],\n",
              "        [ 1.5014335 ,  1.226345  , -2.1499708 ],\n",
              "        [ 1.7854666 ,  1.343037  , -2.432168  ]], dtype=float32),\n",
              " array([[-3.240569  , -0.748908  ,  3.4736733 ],\n",
              "        [ 0.9664077 ,  0.7801614 , -1.2158648 ],\n",
              "        [-2.599957  , -0.46725842,  2.7347658 ],\n",
              "        [-3.2389073 , -0.6907351 ,  3.4716718 ],\n",
              "        [-3.313869  , -0.32137546,  3.1950178 ],\n",
              "        [ 0.6892101 , -0.34599102, -0.27319863],\n",
              "        [-3.3129098 , -0.39944348,  3.2520235 ],\n",
              "        [ 2.15852   ,  0.97966194, -2.4883707 ],\n",
              "        [ 2.0927775 ,  1.148691  , -2.5759385 ],\n",
              "        [-2.8478353 , -0.47237727,  2.9000044 ],\n",
              "        [-1.0495344 ,  1.167271  , -0.05196176],\n",
              "        [ 1.9975989 ,  1.0956284 , -2.4514866 ],\n",
              "        [ 0.50335425,  1.3197986 , -1.4454553 ],\n",
              "        [ 0.4770699 ,  1.409866  , -1.4731736 ],\n",
              "        [ 0.8514773 ,  1.3751162 , -1.7482244 ],\n",
              "        [ 2.2017992 ,  0.6102436 , -2.159439  ]], dtype=float32),\n",
              " array([[ 1.3446008 ,  1.1723157 , -1.947963  ],\n",
              "        [-0.86392826,  2.1770964 , -0.92045355],\n",
              "        [-0.9964832 ,  2.0798469 , -0.9091599 ],\n",
              "        [ 1.5817255 ,  1.555662  , -2.6182475 ],\n",
              "        [ 0.620252  ,  1.3853987 , -1.5840851 ],\n",
              "        [ 3.2456157 , -0.67765534, -2.09883   ],\n",
              "        [-1.9248599 ,  1.8843694 ,  0.06478304],\n",
              "        [-3.2004526 ,  0.50586116,  2.3581514 ],\n",
              "        [-0.65276617,  1.9247999 , -1.0235659 ],\n",
              "        [ 3.4174197 , -0.04449828, -2.832364  ],\n",
              "        [-0.96586823,  1.3412012 , -0.30625063],\n",
              "        [ 0.5780811 ,  1.6113948 , -1.7411995 ],\n",
              "        [ 1.728561  ,  1.209685  , -2.2179306 ],\n",
              "        [-1.7124723 ,  0.8792021 ,  0.90292114],\n",
              "        [ 1.7340702 ,  1.3721253 , -2.4485486 ],\n",
              "        [-1.2155327 ,  1.9422212 , -0.5749809 ]], dtype=float32),\n",
              " array([[ 3.523952  , -0.27324966, -2.751852  ],\n",
              "        [ 3.4145308 ,  0.0911284 , -2.9281645 ],\n",
              "        [-3.3320835 , -0.6307626 ,  3.4418168 ],\n",
              "        [-3.1483915 , -0.75228345,  3.3918498 ],\n",
              "        [-0.7343751 ,  1.9543487 , -1.0205848 ],\n",
              "        [-1.9270223 ,  1.355255  ,  0.4642232 ],\n",
              "        [-3.268873  , -0.3696317 ,  3.19775   ],\n",
              "        [-0.9772284 ,  1.4588892 , -0.2740579 ],\n",
              "        [-2.814391  , -0.1182987 ,  2.6258428 ],\n",
              "        [-2.0561855 ,  0.36173323,  1.4927174 ],\n",
              "        [ 2.935825  ,  0.39467397, -2.7997866 ],\n",
              "        [ 0.39388147,  1.0813332 , -1.0842724 ],\n",
              "        [-3.2272568 , -0.7030464 ,  3.4611409 ],\n",
              "        [-3.3437693 , -0.25471753,  3.1431274 ],\n",
              "        [-1.5654119 ,  0.77655894,  0.7976415 ],\n",
              "        [ 0.5512685 ,  1.7552669 , -1.9407511 ]], dtype=float32),\n",
              " array([[ 1.0420834 ,  1.4581484 , -1.9655073 ],\n",
              "        [-0.03642301,  1.2795765 , -0.98824733],\n",
              "        [ 1.9571631 ,  1.2325944 , -2.5344012 ],\n",
              "        [ 0.38958746,  1.6861902 , -1.4747475 ],\n",
              "        [-3.3015172 , -0.63009596,  3.442223  ],\n",
              "        [-3.4241397 ,  0.17561218,  2.8321059 ],\n",
              "        [ 2.2925215 ,  0.44810548, -2.1912036 ],\n",
              "        [-3.29936   , -0.6605551 ,  3.4623141 ],\n",
              "        [ 0.8325641 ,  1.7290719 , -2.2124634 ],\n",
              "        [-0.480269  ,  1.8613465 , -1.0456419 ],\n",
              "        [ 3.6012275 , -0.49757126, -2.6577935 ],\n",
              "        [-2.277119  ,  0.4508463 ,  1.7377433 ],\n",
              "        [ 1.9900079 ,  0.8158485 , -2.1778092 ],\n",
              "        [-3.3650458 , -0.4752322 ,  3.3405633 ],\n",
              "        [ 0.5612311 ,  1.3874995 , -1.5909411 ],\n",
              "        [ 1.2912008 ,  1.5642194 , -2.3031974 ]], dtype=float32),\n",
              " array([[-3.1115408 ,  0.13197805,  2.7179193 ],\n",
              "        [-2.3588593 ,  1.4608397 ,  0.7404802 ],\n",
              "        [-3.3458982 , -0.57491255,  3.4418445 ],\n",
              "        [-3.410032  , -0.40538663,  3.3126805 ],\n",
              "        [ 3.5733154 , -0.30571514, -2.7566254 ],\n",
              "        [ 3.2785401 ,  0.32279444, -2.9216535 ],\n",
              "        [ 3.276478  , -0.00829089, -2.6964855 ],\n",
              "        [ 2.4403272 ,  0.88299704, -2.6892622 ],\n",
              "        [ 1.1436678 ,  1.4818081 , -2.123031  ],\n",
              "        [ 1.6788872 ,  1.2849637 , -2.2699037 ],\n",
              "        [-1.9424819 ,  1.069798  ,  0.8213204 ],\n",
              "        [ 2.369767  ,  0.7007742 , -2.4606826 ],\n",
              "        [ 2.891976  ,  0.17968325, -2.4423788 ],\n",
              "        [-3.2717328 , -0.35089484,  3.1893692 ],\n",
              "        [-0.04861645,  1.4459997 , -1.0845505 ],\n",
              "        [-3.3064482 , -0.33466676,  3.2776232 ]], dtype=float32),\n",
              " array([[ 0.43385974,  1.6954991 , -1.7514055 ],\n",
              "        [-1.7845519 , -0.9761137 ,  2.4875746 ],\n",
              "        [-2.4251268 , -0.31500843,  2.4754448 ],\n",
              "        [-2.1947253 ,  1.3389537 ,  0.95619464],\n",
              "        [-1.9414364 ,  1.4607773 ,  0.46930015],\n",
              "        [-3.1555538 ,  0.12302327,  2.671812  ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 2.4332273 ,  0.88657457, -2.7270648 ],\n",
              "        [-3.1314325 , -0.6722132 ,  3.3507605 ],\n",
              "        [-1.1202558 ,  1.9454252 , -0.55723107],\n",
              "        [-3.362791  , -0.48548812,  3.3997767 ],\n",
              "        [ 1.0763551 ,  0.29695082, -1.0280739 ],\n",
              "        [ 3.6371033 , -0.3744294 , -2.8590662 ],\n",
              "        [ 1.7914149 ,  1.4090742 , -2.5826898 ],\n",
              "        [ 2.508624  ,  0.974129  , -2.8114896 ],\n",
              "        [-2.9582355 ,  0.17497568,  2.4809265 ]], dtype=float32),\n",
              " array([[-3.3322217e+00, -6.2169731e-01,  3.4449506e+00],\n",
              "        [-3.1969345e+00, -7.4219215e-01,  3.4383135e+00],\n",
              "        [ 1.2587618e+00,  1.2630759e+00, -2.0266988e+00],\n",
              "        [ 3.4880893e+00, -7.3165469e-02, -2.7899239e+00],\n",
              "        [ 2.0572221e+00,  1.3690941e+00, -2.6453772e+00],\n",
              "        [ 3.5616359e-01,  1.3327004e+00, -1.3062905e+00],\n",
              "        [ 2.6736989e+00,  8.0070615e-01, -2.8823657e+00],\n",
              "        [ 2.4393969e-03,  1.8390189e+00, -1.3511707e+00],\n",
              "        [ 3.1820395e+00, -1.2254119e+00, -1.5570211e+00],\n",
              "        [-3.0076046e+00, -4.7280052e-01,  3.0861559e+00],\n",
              "        [-3.8189954e-01, -1.0792936e+00,  1.3930682e+00],\n",
              "        [ 3.3068376e+00,  1.4673954e-01, -2.8391333e+00],\n",
              "        [-3.3737504e+00, -3.8621101e-01,  3.2529821e+00],\n",
              "        [-3.3358440e+00, -2.3237233e-01,  3.1397176e+00],\n",
              "        [-3.0089900e+00, -9.3239784e-01,  3.4427872e+00],\n",
              "        [-2.7306411e+00, -1.0039879e+00,  3.2616229e+00]], dtype=float32),\n",
              " array([[ 2.2762148 , -0.17210694, -1.6579001 ],\n",
              "        [-3.0009224 , -0.97764975,  3.4847698 ],\n",
              "        [-0.08112699,  0.34048915, -0.03647705],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [ 1.1960198 ,  1.4416285 , -2.0613    ],\n",
              "        [-3.173096  , -0.7810823 ,  3.4853158 ],\n",
              "        [ 2.1259437 ,  0.635338  , -2.0968409 ],\n",
              "        [ 0.83868474,  0.66677475, -1.2692387 ],\n",
              "        [ 2.6923473 ,  0.3473504 , -2.365681  ],\n",
              "        [ 1.1900929 ,  1.2626467 , -1.9955051 ],\n",
              "        [ 0.5869592 ,  1.8177274 , -1.995355  ],\n",
              "        [-0.6825573 ,  1.6341416 , -0.6788187 ],\n",
              "        [ 2.0885499 ,  0.7244597 , -2.2957306 ],\n",
              "        [-3.15989   ,  0.39132217,  2.4996123 ],\n",
              "        [-3.3427403 , -0.5408476 ,  3.407161  ],\n",
              "        [ 1.4900556 ,  1.3320924 , -2.2167408 ]], dtype=float32),\n",
              " array([[ 0.9924812 ,  1.4841536 , -1.9868618 ],\n",
              "        [ 1.6394526 ,  1.311632  , -2.3954873 ],\n",
              "        [-0.26012686,  0.9054205 , -0.33314067],\n",
              "        [ 0.76568335,  0.99801034, -1.1297402 ],\n",
              "        [ 1.2461396 ,  1.8710237 , -2.628343  ],\n",
              "        [-3.0734823 , -0.36075035,  3.087173  ],\n",
              "        [-1.467032  ,  1.2337476 ,  0.3678488 ],\n",
              "        [-0.96126765,  1.1007866 , -0.05546102],\n",
              "        [ 3.1795366 ,  0.20107909, -2.775323  ],\n",
              "        [ 2.4050748 ,  0.40313655, -2.3233373 ],\n",
              "        [ 0.9617011 ,  0.21393153, -0.77861106],\n",
              "        [ 1.2766594 ,  1.204801  , -2.0389419 ],\n",
              "        [ 1.4874607 ,  1.1764866 , -2.1803768 ],\n",
              "        [ 3.0143366 ,  0.7580872 , -3.1028986 ],\n",
              "        [ 0.76997447,  1.0413226 , -1.3444574 ],\n",
              "        [-0.5471305 ,  1.6649339 , -0.8502087 ]], dtype=float32),\n",
              " array([[-0.5141816 ,  1.7667912 , -0.96306396],\n",
              "        [-3.3111818 , -0.53796554,  3.3617768 ],\n",
              "        [ 2.8301034 ,  0.63249487, -2.8720403 ],\n",
              "        [-2.669967  , -0.8869616 ,  3.1678987 ],\n",
              "        [ 2.0923595 ,  0.6833979 , -2.1664689 ],\n",
              "        [ 2.5296552 ,  0.14761788, -2.1620636 ],\n",
              "        [-3.4543235 ,  0.0278601 ,  3.0008266 ],\n",
              "        [-0.31824398,  0.7446165 , -0.11476191],\n",
              "        [ 2.1628435 ,  1.2539635 , -2.7493804 ],\n",
              "        [ 1.0868288 ,  0.03795629, -0.81226444],\n",
              "        [ 3.3933074 ,  0.26326934, -3.071716  ],\n",
              "        [-2.7613285 , -0.07481042,  2.4757946 ],\n",
              "        [ 3.053535  , -0.04656132, -2.4956808 ],\n",
              "        [ 2.4825814 , -0.01074018, -2.0757022 ],\n",
              "        [-2.4966383 ,  1.6487035 ,  0.76064086],\n",
              "        [-3.026138  , -0.9293319 ,  3.46518   ]], dtype=float32),\n",
              " array([[-3.233163  , -0.6888832 ,  3.43185   ],\n",
              "        [-2.7234437 ,  0.9581497 ,  1.6065323 ],\n",
              "        [ 0.14717028,  0.48126596, -0.4022751 ],\n",
              "        [-2.0383527 ,  1.3643856 ,  0.69125926],\n",
              "        [ 2.9644766 ,  0.07576704, -2.5151534 ],\n",
              "        [-3.0069854 , -0.7962922 ,  3.4040372 ],\n",
              "        [ 1.2461723 ,  1.6732289 , -2.4015682 ],\n",
              "        [ 1.0867696 ,  1.4322519 , -1.9548781 ],\n",
              "        [-3.1798635 , -0.7545152 ,  3.4789467 ],\n",
              "        [-0.24928252,  1.9432344 , -1.2383395 ],\n",
              "        [ 1.4267976 ,  1.4496125 , -2.3843021 ],\n",
              "        [-0.7400234 ,  0.68715787,  0.11631466],\n",
              "        [ 0.31556144,  2.063732  , -1.932594  ],\n",
              "        [-3.2867591 , -0.23372144,  3.1118896 ],\n",
              "        [-1.9840308 ,  0.8545402 ,  0.96968997],\n",
              "        [ 0.77996075,  1.7376454 , -2.0933142 ]], dtype=float32),\n",
              " array([[-1.4706427 ,  1.0778627 ,  0.44975418],\n",
              "        [-1.6114892 , -0.58023036,  2.0040102 ],\n",
              "        [-3.2846978 , -0.60946417,  3.4650126 ],\n",
              "        [ 3.3174474 ,  0.11832148, -2.9146194 ],\n",
              "        [ 1.4131376 ,  1.1903932 , -2.0368962 ],\n",
              "        [ 3.4065955 , -0.3662091 , -2.5427828 ],\n",
              "        [ 3.5447867 , -0.17194408, -2.855606  ],\n",
              "        [-2.5182302 ,  1.0622768 ,  1.2840443 ],\n",
              "        [ 2.0385256 ,  1.1898052 , -2.6259232 ],\n",
              "        [-3.318268  , -0.52929676,  3.3544273 ],\n",
              "        [ 1.9566683 ,  0.7398716 , -2.0558705 ],\n",
              "        [-0.4254956 ,  1.0512146 , -0.4378959 ],\n",
              "        [-1.6591371 ,  1.1587875 ,  0.5079987 ],\n",
              "        [ 2.3766599 ,  1.137969  , -2.815525  ],\n",
              "        [ 0.8197348 ,  1.1797955 , -1.5519986 ],\n",
              "        [ 1.0390083 ,  1.323341  , -1.956384  ]], dtype=float32),\n",
              " array([[ 1.2260526 ,  1.3406336 , -2.0316973 ],\n",
              "        [ 1.1803502 ,  0.22658128, -1.1320065 ],\n",
              "        [ 0.8368887 ,  0.42224696, -0.8823849 ],\n",
              "        [ 0.0400646 ,  0.26678994, -0.01663686],\n",
              "        [ 3.6388774 , -0.6619673 , -2.5650544 ],\n",
              "        [-2.977155  , -0.95788294,  3.3982477 ],\n",
              "        [ 3.4748113 , -0.1301578 , -2.8228133 ],\n",
              "        [ 3.233408  , -0.13587756, -2.6542943 ],\n",
              "        [ 3.6437232 , -0.148408  , -2.9643855 ],\n",
              "        [ 1.4799958 ,  0.4568285 , -1.452443  ],\n",
              "        [-2.522496  , -0.4072335 ,  2.651392  ],\n",
              "        [ 0.36321756,  1.616959  , -1.6301343 ],\n",
              "        [ 0.24461614,  1.1994125 , -1.1912906 ],\n",
              "        [-3.2247636 , -0.6209483 ,  3.3919811 ],\n",
              "        [-0.39000162,  0.39661834,  0.13226311],\n",
              "        [ 2.2470922 ,  1.0929782 , -2.7454185 ]], dtype=float32),\n",
              " array([[-2.3653874 , -0.23728046,  2.4027014 ],\n",
              "        [-2.3856637 ,  0.4532671 ,  1.4257989 ],\n",
              "        [-1.7859797 ,  1.9893234 , -0.14842814],\n",
              "        [ 1.0349562 ,  1.5742553 , -1.93496   ],\n",
              "        [-3.434894  ,  0.7654887 ,  2.3040023 ],\n",
              "        [-3.2822664 , -0.6512303 ,  3.4492843 ],\n",
              "        [-1.1315818 ,  2.1876507 , -0.82157606],\n",
              "        [-2.9903584 ,  0.30499882,  2.3199463 ],\n",
              "        [ 1.9693801 ,  1.4553369 , -2.7962246 ],\n",
              "        [ 0.4514985 ,  1.9423759 , -1.9599946 ],\n",
              "        [-3.4784691 ,  0.259199  ,  2.8154259 ],\n",
              "        [ 3.0047925 ,  0.46952006, -2.8105993 ],\n",
              "        [-1.7220227 , -0.41445753,  1.7787287 ],\n",
              "        [-3.4865615 , -0.17332867,  3.2023058 ],\n",
              "        [-3.2321713 , -0.653028  ,  3.432983  ],\n",
              "        [-3.2266133 , -0.02596913,  2.9164705 ]], dtype=float32),\n",
              " array([[ 3.541567  , -0.36958477, -2.6294734 ],\n",
              "        [-3.186248  ,  0.32714185,  2.5723145 ],\n",
              "        [-0.96639556,  1.9012216 , -0.78047645],\n",
              "        [-2.6420548 , -0.07801668,  2.3038874 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-1.4597663 ,  1.8137444 , -0.30606705],\n",
              "        [-2.3238432 , -1.1131674 ,  2.9631548 ],\n",
              "        [ 1.125321  ,  1.3472282 , -2.0589228 ],\n",
              "        [ 3.3408136 ,  0.2762858 , -2.9941597 ],\n",
              "        [-3.1702096 , -0.8445579 ,  3.4902482 ],\n",
              "        [-3.294722  , -0.6008958 ,  3.4267755 ],\n",
              "        [ 1.885033  ,  1.3919771 , -2.6393647 ],\n",
              "        [ 0.5838015 ,  1.5011595 , -1.6902702 ],\n",
              "        [ 0.45224285,  1.660616  , -1.7309926 ],\n",
              "        [-3.2456086 , -0.7182058 ,  3.4712276 ],\n",
              "        [-2.3579233 , -1.3028322 ,  3.1471577 ]], dtype=float32),\n",
              " array([[-3.206652  , -0.57006466,  3.3870487 ],\n",
              "        [-3.4127014 , -0.3621988 ,  3.317587  ],\n",
              "        [-1.0703725 , -0.2234422 ,  1.1993619 ],\n",
              "        [ 1.6742474 ,  0.877598  , -2.1125257 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 0.9497623 ,  1.3497759 , -1.778354  ],\n",
              "        [-0.05417923,  0.9242265 , -0.5862996 ],\n",
              "        [-3.368222  , -0.0898687 ,  3.0455961 ],\n",
              "        [ 2.4019172 ,  0.04881031, -1.9650667 ],\n",
              "        [ 2.5909302 ,  0.62759054, -2.5760617 ],\n",
              "        [-3.2498083 ,  0.36721805,  2.466952  ],\n",
              "        [-3.136018  ,  0.26111725,  2.580108  ],\n",
              "        [-1.3673869 ,  1.9169569 , -0.44230524],\n",
              "        [-1.4536505 ,  1.4002819 ,  0.23787966],\n",
              "        [ 2.5836642 ,  0.7412557 , -2.634251  ],\n",
              "        [ 3.2322981 ,  0.21023151, -2.815391  ]], dtype=float32),\n",
              " array([[ 3.4550898 , -0.0431337 , -2.8292756 ],\n",
              "        [ 1.1484939 ,  0.46340632, -1.2303985 ],\n",
              "        [ 0.23455685,  1.2566386 , -1.002867  ],\n",
              "        [-3.2578783 , -0.4280934 ,  3.288722  ],\n",
              "        [ 3.4306934 ,  0.1426885 , -2.9775257 ],\n",
              "        [-0.3743261 ,  1.7505807 , -1.1792233 ],\n",
              "        [ 1.6986274 ,  0.95836914, -2.1795778 ],\n",
              "        [-3.2289326 , -0.7445157 ,  3.4797597 ],\n",
              "        [ 1.052288  ,  1.2512625 , -1.7352448 ],\n",
              "        [-3.2951372 , -0.64187545,  3.4373088 ],\n",
              "        [ 1.7527528 ,  0.8822298 , -2.2380219 ],\n",
              "        [ 3.4422166 , -0.86809033, -2.2537024 ],\n",
              "        [-0.9981014 ,  1.5447084 , -0.38894   ],\n",
              "        [ 0.862355  ,  1.5019919 , -1.8889651 ],\n",
              "        [-3.0560653 , -0.52216697,  3.1556337 ],\n",
              "        [-3.3080268 , -0.5005057 ,  3.320806  ]], dtype=float32),\n",
              " array([[-2.7056844 ,  1.503837  ,  1.0498322 ],\n",
              "        [-3.4154348 , -0.32521287,  3.2846746 ],\n",
              "        [ 1.2200328 ,  1.2224644 , -1.8155252 ],\n",
              "        [ 2.645454  ,  1.0728865 , -3.0937803 ],\n",
              "        [ 0.73077613,  1.340119  , -1.5269487 ],\n",
              "        [ 3.3342097 , -0.54240465, -2.3039324 ],\n",
              "        [ 1.3717216 ,  1.7283543 , -2.44737   ],\n",
              "        [-3.2286675 , -0.55568016,  3.3806186 ],\n",
              "        [-2.0569685 , -0.39393067,  2.300798  ],\n",
              "        [ 0.8465834 ,  1.2368003 , -1.5765488 ],\n",
              "        [-0.5777456 ,  2.0482488 , -1.2157483 ],\n",
              "        [-2.728443  , -0.1643019 ,  2.624259  ],\n",
              "        [-0.13996585,  1.7433128 , -1.3335278 ],\n",
              "        [ 1.4922218 ,  1.5704068 , -2.5383043 ],\n",
              "        [-0.0710625 ,  1.1361445 , -0.9354661 ],\n",
              "        [-3.431359  , -0.31076273,  3.26892   ]], dtype=float32),\n",
              " array([[-2.3667266 ,  1.7081503 ,  0.6652428 ],\n",
              "        [-2.6579795 ,  0.7617863 ,  1.7304786 ],\n",
              "        [ 0.17165682,  0.20460205, -0.30132577],\n",
              "        [-3.5040998 , -0.09485256,  3.1407375 ],\n",
              "        [ 0.6212905 ,  1.8293213 , -1.8746847 ],\n",
              "        [-3.3058717 , -0.5931368 ,  3.438223  ],\n",
              "        [ 2.449527  , -0.3816655 , -1.6334974 ],\n",
              "        [-2.6956034 ,  1.1102312 ,  1.4817984 ],\n",
              "        [-2.393325  ,  1.6039315 ,  0.64218175],\n",
              "        [-3.2485886 , -0.28286687,  3.1292157 ],\n",
              "        [-1.693827  ,  2.0324001 , -0.1019856 ],\n",
              "        [-2.6753814 , -0.21667674,  2.611444  ],\n",
              "        [ 2.5000002 ,  0.83643687, -2.642312  ],\n",
              "        [ 2.276414  ,  1.3848574 , -2.9954376 ],\n",
              "        [-3.2472694 ,  0.83594733,  2.1035702 ],\n",
              "        [ 3.0500858 ,  0.7105325 , -3.1057453 ]], dtype=float32),\n",
              " array([[-3.3534987 , -0.53667355,  3.3834102 ],\n",
              "        [ 0.9647421 ,  1.5719758 , -2.1025252 ],\n",
              "        [ 1.3173267 ,  1.1974825 , -2.0918782 ],\n",
              "        [-3.3190496 , -0.57775855,  3.4231982 ],\n",
              "        [ 1.9715226 ,  1.449355  , -2.7949362 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-3.3160622 , -0.55009156,  3.4127524 ],\n",
              "        [-3.1443326 ,  0.73983943,  2.075303  ],\n",
              "        [-3.3406138 , -0.3423492 ,  3.2693913 ],\n",
              "        [ 2.6151865 ,  0.7384275 , -2.7013845 ],\n",
              "        [ 1.5725569 ,  0.48459366, -1.6752476 ],\n",
              "        [ 2.467231  ,  1.1215807 , -2.8920815 ],\n",
              "        [ 1.5168426 ,  0.7192545 , -1.8406595 ],\n",
              "        [ 0.13906175,  1.8700255 , -1.5975387 ],\n",
              "        [-3.3837674 ,  0.10399406,  2.8160028 ],\n",
              "        [-0.41387606,  1.6517594 , -0.97813344]], dtype=float32),\n",
              " array([[-2.8627627 ,  0.86083925,  1.8727746 ],\n",
              "        [ 2.0501244 ,  0.13996436, -1.7073562 ],\n",
              "        [ 2.1436775 ,  0.6261417 , -2.2125916 ],\n",
              "        [-3.0885746 , -0.71814907,  3.3256373 ],\n",
              "        [-3.058214  , -0.8278755 ,  3.414958  ],\n",
              "        [-2.197655  ,  0.24779657,  1.7500944 ],\n",
              "        [ 1.5197614 ,  0.8996777 , -1.8123953 ],\n",
              "        [-1.6726137 ,  1.7842199 , -0.00920516],\n",
              "        [ 0.85798734,  1.7024566 , -2.0257733 ],\n",
              "        [ 3.413535  ,  0.17662477, -2.9749513 ],\n",
              "        [ 0.10684152,  1.8928498 , -1.5216265 ],\n",
              "        [ 2.8910325 , -0.5752507 , -1.8928599 ],\n",
              "        [ 2.4692004 , -0.16863206, -1.8027672 ],\n",
              "        [ 3.2837827 , -0.18453553, -2.6224847 ],\n",
              "        [ 1.0879492 ,  1.7188693 , -2.1714115 ],\n",
              "        [-3.3650105 , -0.09436829,  3.086657  ]], dtype=float32),\n",
              " array([[-0.96792793,  1.2325755 ,  0.01714187],\n",
              "        [-3.2160537 , -0.4737817 ,  3.2573762 ],\n",
              "        [-3.4478166 ,  0.5584103 ,  2.589639  ],\n",
              "        [ 1.5909489 ,  1.101298  , -2.1023426 ],\n",
              "        [ 1.964373  ,  1.0251147 , -2.2431817 ],\n",
              "        [-3.0244763 ,  1.2214667 ,  1.6434968 ],\n",
              "        [-3.3380125 , -0.21938726,  3.1557434 ],\n",
              "        [-2.0475566 ,  1.5982934 ,  0.49793142],\n",
              "        [ 2.77533   ,  0.06343302, -2.2533383 ],\n",
              "        [-1.7875961 ,  0.8197999 ,  0.98242897],\n",
              "        [ 0.94597447,  0.81187046, -1.4956913 ],\n",
              "        [ 0.08467478,  0.40478608, -0.1995663 ],\n",
              "        [-0.7518074 ,  2.1361508 , -1.0448134 ],\n",
              "        [ 0.5569465 ,  0.0694324 , -0.5211222 ],\n",
              "        [ 2.9876964 ,  0.67567456, -2.9669735 ],\n",
              "        [-2.9864407 ,  1.0111624 ,  1.7323279 ]], dtype=float32),\n",
              " array([[ 1.6352881e+00,  1.4420446e+00, -2.3559365e+00],\n",
              "        [-2.1283307e+00,  4.9531254e-01,  1.5497353e+00],\n",
              "        [ 9.9530506e-01,  1.5459100e+00, -2.1146796e+00],\n",
              "        [ 1.3079321e+00,  1.3037062e+00, -2.0590360e+00],\n",
              "        [ 1.4100903e+00,  6.1736679e-01, -1.6175723e+00],\n",
              "        [ 1.4420258e+00,  1.2552859e+00, -2.2692757e+00],\n",
              "        [ 5.9596866e-01,  1.5687325e+00, -1.7763004e+00],\n",
              "        [ 1.6016449e+00,  9.4472748e-01, -2.0936546e+00],\n",
              "        [-1.1731409e+00,  1.6998092e+00, -5.0377196e-01],\n",
              "        [-2.6199477e+00,  3.0367489e-03,  2.2823710e+00],\n",
              "        [-2.9155962e+00,  5.6260818e-01,  1.9715481e+00],\n",
              "        [ 3.1477931e-01, -8.8547456e-01,  4.2976758e-01],\n",
              "        [-3.3157532e+00,  1.1839841e-01,  2.8110311e+00],\n",
              "        [-3.3798184e+00, -2.1609654e-01,  3.1609526e+00],\n",
              "        [-1.2539982e+00,  1.1842710e+00,  4.7252239e-03],\n",
              "        [-1.2307853e+00,  1.7091848e+00, -1.5748978e-01]], dtype=float32),\n",
              " array([[-2.945602  , -0.77549016,  3.2398314 ],\n",
              "        [-2.8408344 ,  0.10263022,  2.4828181 ],\n",
              "        [-3.5207045 , -0.09402818,  3.099772  ],\n",
              "        [ 3.2074597 ,  0.5781245 , -3.1616812 ],\n",
              "        [-0.33783212,  1.7056581 , -1.1181786 ],\n",
              "        [ 1.1347798 ,  1.2346573 , -2.000888  ],\n",
              "        [-0.70476437,  2.0863442 , -1.1727091 ],\n",
              "        [ 2.7771122 , -0.01576954, -2.1436987 ],\n",
              "        [-3.3080695 ,  0.05579026,  2.9239087 ],\n",
              "        [ 3.317845  , -0.15354349, -2.587731  ],\n",
              "        [ 3.3963451 ,  0.17436716, -2.9815302 ],\n",
              "        [-2.1367962 ,  1.8325919 ,  0.18197045],\n",
              "        [ 0.86677283,  1.5832994 , -1.9715978 ],\n",
              "        [ 3.0481703 ,  0.33309928, -2.794448  ],\n",
              "        [ 0.10418144,  1.867786  , -1.59308   ],\n",
              "        [-2.5070064 , -0.4411547 ,  2.5815516 ]], dtype=float32),\n",
              " array([[-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-2.6846373 , -1.0767514 ,  3.27413   ],\n",
              "        [-3.266312  , -0.703306  ,  3.4759378 ],\n",
              "        [-1.2531617 , -0.01381846,  1.2226918 ],\n",
              "        [ 3.4896908 , -1.0641491 , -2.1232655 ],\n",
              "        [ 1.9733914 ,  1.0575914 , -2.5021172 ],\n",
              "        [-2.4817948 , -0.64067554,  2.776979  ],\n",
              "        [ 2.9630978 , -0.9943001 , -1.6278416 ],\n",
              "        [ 0.9597218 ,  0.86527675, -1.3420064 ],\n",
              "        [ 2.2176728 ,  1.0940565 , -2.6432488 ],\n",
              "        [-0.93169737,  0.16688457,  0.9768517 ],\n",
              "        [ 2.7622893 ,  0.8713509 , -2.9868636 ],\n",
              "        [-0.63649   ,  1.985148  , -1.0796065 ],\n",
              "        [ 1.2674488 ,  1.6456734 , -2.457993  ],\n",
              "        [-2.6579988 ,  0.97652715,  1.4175992 ],\n",
              "        [-3.3669775 , -0.4521974 ,  3.2508564 ]], dtype=float32),\n",
              " array([[ 2.4171417 ,  0.19779028, -2.0457244 ],\n",
              "        [-0.0908857 ,  1.2130535 , -0.8296393 ],\n",
              "        [ 2.012929  ,  0.929736  , -2.3377407 ],\n",
              "        [ 1.6762146 ,  0.0625427 , -1.4315114 ],\n",
              "        [ 2.8811853 ,  0.18329272, -2.4146774 ],\n",
              "        [ 2.2677782 ,  0.6904466 , -2.4050946 ],\n",
              "        [-3.4678428 , -0.27864602,  3.251749  ],\n",
              "        [ 2.1044605 ,  1.2356546 , -2.6357503 ],\n",
              "        [-3.1187909 , -0.8334565 ,  3.474987  ],\n",
              "        [ 0.8900779 ,  1.0112239 , -1.4079764 ],\n",
              "        [ 3.4014196 ,  0.12877077, -2.971713  ],\n",
              "        [-3.0701    , -0.7460878 ,  3.3701625 ],\n",
              "        [ 2.5370305 ,  0.24278104, -2.3228307 ],\n",
              "        [-0.98272014,  1.482716  , -0.44810057],\n",
              "        [ 2.6007757 ,  0.9441695 , -2.900497  ],\n",
              "        [-2.290455  ,  0.09369572,  1.9270251 ]], dtype=float32),\n",
              " array([[-1.6782482 ,  1.0398654 ,  0.8398112 ],\n",
              "        [ 0.685913  ,  1.7028788 , -1.9934316 ],\n",
              "        [ 1.8965868 , -0.62562716, -0.9827651 ],\n",
              "        [ 1.9152192 ,  1.1913235 , -2.5437362 ],\n",
              "        [-1.8193606 , -0.57229817,  2.2251556 ],\n",
              "        [ 2.1634994 ,  1.1592299 , -2.6512606 ],\n",
              "        [ 1.962185  ,  1.040139  , -2.3792808 ],\n",
              "        [-3.1974647 , -0.702595  ,  3.443253  ],\n",
              "        [ 2.4312716 ,  0.2671659 , -2.1482923 ],\n",
              "        [-0.35209706,  1.5266563 , -0.9949011 ],\n",
              "        [ 1.0133548 ,  1.5997354 , -2.0021095 ],\n",
              "        [-3.2017345 , -0.24740177,  3.0729601 ],\n",
              "        [ 1.0970289 ,  1.3832188 , -1.9887489 ],\n",
              "        [-1.2983547 ,  1.1942557 ,  0.21423174],\n",
              "        [-2.9561017 ,  1.3880516 ,  1.5168707 ],\n",
              "        [ 1.0301551 ,  1.3051864 , -1.7357233 ]], dtype=float32),\n",
              " array([[-3.3114626 , -0.6289656 ,  3.4839258 ],\n",
              "        [-3.3228204 , -0.44172618,  3.34249   ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-2.278375  ,  1.2254015 ,  0.82583153],\n",
              "        [ 0.8052806 ,  0.8451653 , -1.3069957 ],\n",
              "        [-2.0110495 ,  0.46516725,  1.4030168 ],\n",
              "        [ 3.229164  ,  0.27129313, -3.0203214 ],\n",
              "        [ 0.26799312,  1.1145645 , -1.0283583 ],\n",
              "        [ 1.5730635 ,  1.2542394 , -2.2801049 ],\n",
              "        [ 2.699019  ,  0.8687614 , -2.9115    ],\n",
              "        [-2.8525455 ,  0.86721987,  1.864034  ],\n",
              "        [-2.8669837 ,  1.2998369 ,  1.5381094 ],\n",
              "        [ 2.0877135 ,  1.1958907 , -2.6475282 ],\n",
              "        [-1.6603985 , -1.1956894 ,  2.5719712 ],\n",
              "        [ 1.0874165 ,  1.0014042 , -1.7292687 ],\n",
              "        [-0.40948886,  0.74009293, -0.14838766]], dtype=float32),\n",
              " array([[ 2.2875218 ,  0.95424783, -2.626598  ],\n",
              "        [-1.1650618 ,  1.9541615 , -0.58614016],\n",
              "        [-3.2891192 , -0.6298567 ,  3.4580896 ],\n",
              "        [ 0.42662078,  1.3166243 , -1.4330826 ],\n",
              "        [-3.3131502 ,  0.3977913 ,  2.5998435 ],\n",
              "        [ 2.1175787 ,  1.278503  , -2.8265758 ],\n",
              "        [-0.98863953,  1.9974316 , -0.8710345 ],\n",
              "        [-2.697775  ,  1.043622  ,  1.4997141 ],\n",
              "        [ 3.4385715 ,  0.03971747, -2.963324  ],\n",
              "        [ 2.8772745 ,  0.74173224, -2.987928  ],\n",
              "        [ 0.51270837,  1.5587372 , -1.5658101 ],\n",
              "        [ 2.403687  ,  1.1164087 , -2.9059408 ],\n",
              "        [-3.2409186 ,  0.26955375,  2.6835525 ],\n",
              "        [-3.287883  , -0.50842345,  3.3476982 ],\n",
              "        [ 2.111195  ,  1.0422724 , -2.5942984 ],\n",
              "        [ 1.8997052 ,  0.6295637 , -1.8435483 ]], dtype=float32),\n",
              " array([[ 3.302544  ,  0.3772145 , -2.9945626 ],\n",
              "        [ 3.1527443 , -0.8930715 , -1.8757794 ],\n",
              "        [ 2.3876216 , -0.55666846, -1.5102324 ],\n",
              "        [ 2.600836  ,  0.13189515, -2.123347  ],\n",
              "        [ 1.9256235 , -0.6669052 , -0.9723108 ],\n",
              "        [-3.3462632 , -0.42262724,  3.3383536 ],\n",
              "        [-3.0592268 , -0.8480985 ,  3.4371605 ],\n",
              "        [ 2.9458663 ,  0.53392625, -2.8802783 ],\n",
              "        [-2.4661863 ,  0.87510824,  1.5009209 ],\n",
              "        [ 1.710868  ,  0.4893249 , -1.7729359 ],\n",
              "        [ 2.8685815 ,  0.19437428, -2.4954183 ],\n",
              "        [ 0.32007763,  1.239882  , -1.2403269 ],\n",
              "        [ 2.5629818 , -0.00837936, -2.088701  ],\n",
              "        [-2.0769768 ,  1.3215314 ,  0.75641966],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 1.7721804 ,  1.212845  , -2.3707223 ]], dtype=float32),\n",
              " array([[-1.830558  ,  2.0334573 , -0.18887651],\n",
              "        [-0.10170637,  1.515758  , -1.092528  ],\n",
              "        [ 2.1456578 ,  1.0206654 , -2.5448089 ],\n",
              "        [ 1.4864862 ,  1.1154892 , -2.0706382 ],\n",
              "        [ 1.0698711 ,  0.9667077 , -1.6411973 ],\n",
              "        [ 3.3837323 , -0.01538007, -2.7785826 ],\n",
              "        [ 1.5615119 ,  1.4739953 , -2.3990068 ],\n",
              "        [ 1.3813022 ,  1.5793756 , -2.5440533 ],\n",
              "        [ 0.45435956,  0.55359703, -0.7540569 ],\n",
              "        [ 0.24818785, -0.7489224 ,  0.7543446 ],\n",
              "        [ 2.785053  ,  0.5465136 , -2.6961036 ],\n",
              "        [ 1.8063084 ,  1.3489708 , -2.5707731 ],\n",
              "        [ 1.4939536 ,  1.0578178 , -1.8822901 ],\n",
              "        [ 0.3076655 ,  1.6253885 , -1.460814  ],\n",
              "        [-0.53802717,  1.0851461 , -0.49733773],\n",
              "        [-3.054425  , -0.32450438,  2.9572947 ]], dtype=float32),\n",
              " array([[ 2.0776498 ,  0.9755018 , -2.2835963 ],\n",
              "        [-3.4553964 , -0.23265147,  3.2204432 ],\n",
              "        [ 1.0455992 ,  1.5676429 , -2.1721983 ],\n",
              "        [ 3.5510118 , -0.39231518, -2.6304502 ],\n",
              "        [ 1.9584885 ,  1.1814526 , -2.5734437 ],\n",
              "        [ 0.79625326,  1.1092131 , -1.4536995 ],\n",
              "        [-0.62026477,  1.1961479 , -0.33222327],\n",
              "        [ 1.4436721 ,  1.177266  , -2.084733  ],\n",
              "        [-3.4193194 , -0.06197042,  3.0048852 ],\n",
              "        [ 0.49362475,  1.4390107 , -1.3683021 ],\n",
              "        [ 2.9484358 ,  0.13900173, -2.5098958 ],\n",
              "        [-2.657799  ,  1.2279934 ,  1.3251662 ],\n",
              "        [ 1.6011516 ,  1.5696634 , -2.632194  ],\n",
              "        [ 1.1059434 ,  0.6029147 , -1.4160646 ],\n",
              "        [-3.173937  , -0.02511079,  2.86939   ],\n",
              "        [ 3.5878298 , -0.45944762, -2.679473  ]], dtype=float32),\n",
              " array([[-3.288336  ,  0.10820664,  2.7802732 ],\n",
              "        [ 3.609444  , -0.0755154 , -3.0213695 ],\n",
              "        [ 1.9032339 ,  1.0896661 , -2.4874196 ],\n",
              "        [ 2.9979851 ,  0.5182673 , -2.8452322 ],\n",
              "        [-2.271581  , -0.08240558,  2.1435187 ],\n",
              "        [-1.9644516 , -0.6841283 ,  2.4707391 ],\n",
              "        [-2.5967858 ,  0.506745  ,  1.8025439 ],\n",
              "        [-1.0551316 ,  1.4128388 , -0.28490517],\n",
              "        [ 2.9294615 , -0.80030286, -1.7555448 ],\n",
              "        [-3.410817  , -0.46632808,  3.3854122 ],\n",
              "        [ 0.93080944,  1.5990499 , -2.128592  ],\n",
              "        [ 1.1083152 ,  0.8912746 , -1.5242225 ],\n",
              "        [ 1.8236905 ,  0.18015712, -1.5681813 ],\n",
              "        [-0.56862026,  1.7120866 , -0.8192011 ],\n",
              "        [-2.9951146 ,  0.1261902 ,  2.5046098 ],\n",
              "        [-1.4654689 , -0.21149573,  1.569354  ]], dtype=float32),\n",
              " array([[ 2.5178125 ,  1.0702803 , -3.004766  ],\n",
              "        [ 1.7111531 ,  0.09792263, -1.407082  ],\n",
              "        [ 2.0189111 ,  0.9279454 , -2.3137426 ],\n",
              "        [ 0.1372896 ,  1.7918738 , -1.5435188 ],\n",
              "        [ 0.7720546 ,  1.8183227 , -1.9300368 ],\n",
              "        [-3.0859208 , -0.72997135,  3.3404396 ],\n",
              "        [ 0.31729713,  1.4479222 , -1.2632209 ],\n",
              "        [ 2.968951  ,  0.5378039 , -2.8542447 ],\n",
              "        [-0.03729024,  1.4680622 , -1.1709965 ],\n",
              "        [ 3.6115909 , -0.53796107, -2.5573854 ],\n",
              "        [-2.7835462 , -1.0802583 ,  3.3585603 ],\n",
              "        [-0.91555506,  2.1038685 , -1.0659375 ],\n",
              "        [ 1.6088411 ,  1.5489157 , -2.5507576 ],\n",
              "        [ 3.5327754 , -0.20259748, -2.7422132 ],\n",
              "        [ 1.4683093 , -0.21653053, -0.98687965],\n",
              "        [ 1.5987629 ,  1.3446461 , -2.362773  ]], dtype=float32),\n",
              " array([[-2.0802057e+00,  1.3763901e+00,  6.9911575e-01],\n",
              "        [-3.1936357e+00, -5.0272751e-01,  3.2897305e+00],\n",
              "        [ 2.3385127e+00,  4.1357625e-01, -2.0412543e+00],\n",
              "        [-2.9433336e+00, -3.5044187e-01,  2.8691940e+00],\n",
              "        [-6.5592939e-01,  1.8048917e+00, -9.2755103e-01],\n",
              "        [ 2.4730918e+00,  5.0606692e-01, -2.4240685e+00],\n",
              "        [ 1.3201796e+00,  1.2496439e+00, -1.9744692e+00],\n",
              "        [ 2.7875454e+00, -4.6071878e-01, -1.9662653e+00],\n",
              "        [-1.6492201e+00, -1.1703508e+00,  2.4603052e+00],\n",
              "        [-1.3276803e+00,  1.3455505e+00,  1.2388260e-01],\n",
              "        [-3.2174890e+00, -6.5209597e-01,  3.3862832e+00],\n",
              "        [ 3.1740901e+00,  3.3195934e-01, -2.8576529e+00],\n",
              "        [-1.3281661e+00,  1.4800349e+00,  5.7921041e-04],\n",
              "        [-2.6471226e+00,  1.5232996e+00,  1.1077840e+00],\n",
              "        [-1.9444323e+00,  1.3917861e+00,  5.9584051e-01],\n",
              "        [-3.3324029e+00,  6.1484480e-01,  2.4513226e+00]], dtype=float32),\n",
              " array([[ 1.8234824 ,  0.4447091 , -1.8104558 ],\n",
              "        [-3.3753786 , -0.49365717,  3.4038873 ],\n",
              "        [-3.331782  , -0.62842506,  3.4593241 ],\n",
              "        [ 0.8649582 ,  1.7612706 , -2.0377517 ],\n",
              "        [-1.8205394 ,  1.0348407 ,  0.880942  ],\n",
              "        [ 3.6536443 , -0.45253316, -2.6137533 ],\n",
              "        [-1.238365  ,  1.6297754 , -0.15771206],\n",
              "        [-3.3673275 , -0.30083904,  3.2547657 ],\n",
              "        [-1.390114  ,  1.9992218 , -0.5063839 ],\n",
              "        [-1.8893923 ,  1.1138939 ,  0.8001301 ],\n",
              "        [-3.2715268 , -0.53989166,  3.3847113 ],\n",
              "        [-2.8955162 , -0.65694034,  3.245893  ],\n",
              "        [ 1.3559208 ,  1.088034  , -1.8784649 ],\n",
              "        [ 3.5513146 , -0.29724148, -2.7507677 ],\n",
              "        [-2.9454007 , -0.25185528,  2.8709378 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ]], dtype=float32),\n",
              " array([[-0.33673945, -0.41987517,  0.7528928 ],\n",
              "        [-0.447874  ,  1.6698631 , -0.95308596],\n",
              "        [-3.3306282 , -0.503292  ,  3.3346875 ],\n",
              "        [ 3.0401216 ,  0.63837755, -3.069016  ],\n",
              "        [ 3.140375  ,  0.03761356, -2.6954322 ],\n",
              "        [ 3.5648844 , -0.08332738, -3.0179343 ],\n",
              "        [ 1.1096989 ,  0.84510446, -1.501648  ],\n",
              "        [ 0.84963876,  1.6666299 , -2.0393605 ],\n",
              "        [ 0.9995541 ,  0.5094233 , -1.1068656 ],\n",
              "        [ 1.1515034 ,  1.5458912 , -2.2157197 ],\n",
              "        [ 1.2289262 ,  0.30751565, -1.1762853 ],\n",
              "        [ 1.175268  ,  1.2663842 , -1.9227064 ],\n",
              "        [-0.6924748 ,  1.1137624 , -0.21697032],\n",
              "        [ 1.5069624 ,  1.4816669 , -2.406145  ],\n",
              "        [-3.1319091 ,  0.64961165,  2.2952461 ],\n",
              "        [-1.1391611 , -1.309946  ,  2.1555014 ]], dtype=float32),\n",
              " array([[-3.3785365 , -0.38678738,  3.3079433 ],\n",
              "        [-3.3762271 , -0.28256217,  3.2113996 ],\n",
              "        [ 2.3076508 ,  1.2809213 , -2.9570322 ],\n",
              "        [-3.418529  ,  0.19795549,  2.8349729 ],\n",
              "        [ 2.6189818 ,  0.7692704 , -2.7027166 ],\n",
              "        [ 1.1891736 ,  1.0340433 , -1.7344141 ],\n",
              "        [ 2.0815322 ,  1.0194734 , -2.4756565 ],\n",
              "        [-1.8889129 ,  1.1322964 ,  0.8051925 ],\n",
              "        [ 2.2130294 ,  0.6921184 , -2.080432  ],\n",
              "        [-2.3439682 ,  0.7880709 ,  1.368139  ],\n",
              "        [ 2.6819243 ,  0.90331995, -2.951657  ],\n",
              "        [-1.4442937 , -0.64299214,  1.9545822 ],\n",
              "        [-3.2126315 , -0.5333746 ,  3.300292  ],\n",
              "        [-2.0822012 ,  1.6752921 ,  0.36182716],\n",
              "        [ 2.359278  ,  0.89200777, -2.5604737 ],\n",
              "        [-3.2551153 , -0.66391784,  3.4227166 ]], dtype=float32),\n",
              " array([[-3.161914  , -0.7654594 ,  3.4492302 ],\n",
              "        [ 2.4674728 , -0.33215174, -1.7497865 ],\n",
              "        [-2.020127  ,  1.6468741 ,  0.3459507 ],\n",
              "        [ 1.5510029 ,  0.21734707, -1.2973707 ],\n",
              "        [-2.0199273 , -0.6418035 ,  2.5086417 ],\n",
              "        [-3.2593176 , -0.09033222,  2.978167  ],\n",
              "        [ 1.9168358 ,  1.1797708 , -2.5106366 ],\n",
              "        [-3.3595316 , -0.43713698,  3.3174286 ],\n",
              "        [-3.2202334 ,  0.5819762 ,  2.335035  ],\n",
              "        [-0.61173767, -0.8019816 ,  1.1438224 ],\n",
              "        [ 1.6120702 ,  1.3158966 , -2.3523357 ],\n",
              "        [-2.8551488 ,  0.40436074,  2.1100523 ],\n",
              "        [ 2.6882741 ,  0.6284046 , -2.7069385 ],\n",
              "        [ 2.7428796 ,  0.03940589, -2.2685554 ],\n",
              "        [-2.657432  ,  0.92180026,  1.5678575 ],\n",
              "        [-3.3910306 ,  0.33789667,  2.6423793 ]], dtype=float32),\n",
              " array([[-2.489114  , -0.5007775 ,  2.6302872 ],\n",
              "        [-3.2874243 , -0.6049376 ,  3.4242668 ],\n",
              "        [-2.653017  ,  1.3410978 ,  1.2692783 ],\n",
              "        [-1.1099967 ,  1.5656971 , -0.20065853],\n",
              "        [-2.807768  ,  0.5729955 ,  1.9529495 ],\n",
              "        [ 1.8871436 ,  0.9678232 , -2.2459574 ],\n",
              "        [ 2.7424815 , -0.8592212 , -1.4271555 ],\n",
              "        [-1.3846725 , -0.5356726 ,  1.6957939 ],\n",
              "        [-2.033167  , -1.1491519 ,  2.8190575 ],\n",
              "        [-0.4707366 , -1.122573  ,  1.3852738 ],\n",
              "        [ 3.3239408 ,  0.17827591, -2.8867855 ],\n",
              "        [-2.9844372 , -0.61121476,  3.1034923 ],\n",
              "        [ 2.6074321 ,  0.66637444, -2.8251462 ],\n",
              "        [-2.7646463 ,  1.4760674 ,  1.1487794 ],\n",
              "        [ 0.82549   ,  1.0915781 , -1.4679706 ],\n",
              "        [-0.48513013,  1.664794  , -0.93694055]], dtype=float32),\n",
              " array([[ 2.8503788 ,  0.33780426, -2.6318233 ],\n",
              "        [-3.2608745 , -0.6538046 ,  3.4414246 ],\n",
              "        [-1.4662793 ,  1.5719746 , -0.05099653],\n",
              "        [ 3.6132815 , -0.16095148, -2.9349446 ],\n",
              "        [-0.5131074 ,  1.4283749 , -0.8871302 ],\n",
              "        [-0.5717599 ,  1.5269336 , -0.62976193],\n",
              "        [-0.39427695,  1.8325719 , -1.0778201 ],\n",
              "        [-3.4109714 ,  0.27078542,  2.7455068 ],\n",
              "        [-3.3446558 , -0.57875717,  3.4081469 ],\n",
              "        [ 0.34981087, -0.09899377, -0.2524565 ],\n",
              "        [ 2.4748938 ,  0.74935776, -2.7091393 ],\n",
              "        [-3.5019476 , -0.14753309,  3.132311  ],\n",
              "        [-1.5394075 , -1.3105891 ,  2.5957963 ],\n",
              "        [-2.7904139 , -0.9199808 ,  3.2024407 ],\n",
              "        [ 2.6981657 ,  0.63194215, -2.587224  ],\n",
              "        [-3.1223106 , -0.7163489 ,  3.381939  ]], dtype=float32),\n",
              " array([[ 1.5581104 ,  1.312487  , -2.1734552 ],\n",
              "        [ 0.59350055,  0.6502079 , -0.9251225 ],\n",
              "        [-0.24524778, -0.9885887 ,  1.0695585 ],\n",
              "        [-2.2651117 ,  1.1902777 ,  1.1131411 ],\n",
              "        [ 1.2118999 ,  0.92016786, -1.6759152 ],\n",
              "        [-0.17564125,  1.4618658 , -0.8683698 ],\n",
              "        [ 1.6878525 ,  1.5637066 , -2.6448817 ],\n",
              "        [ 0.23822027,  0.810531  , -0.71969414],\n",
              "        [-1.6195673 ,  0.7697929 ,  0.7835432 ],\n",
              "        [-3.0907772 , -0.6298362 ,  3.3046017 ],\n",
              "        [ 2.780101  ,  0.89857936, -3.0012693 ],\n",
              "        [-0.9112794 ,  1.2280403 , -0.04485211],\n",
              "        [ 2.8953836 ,  0.40014663, -2.6905892 ],\n",
              "        [-3.2254026 , -0.6401857 ,  3.4043686 ],\n",
              "        [-1.9573737 ,  1.1274408 ,  0.6204627 ],\n",
              "        [ 2.1184661 , -0.04445045, -1.7422268 ]], dtype=float32),\n",
              " array([[-3.3005471 , -0.22786741,  3.0933783 ],\n",
              "        [-0.84074247, -0.08355842,  0.96482664],\n",
              "        [ 2.8103404 ,  0.86481315, -2.9974065 ],\n",
              "        [-3.413123  , -0.27682766,  3.2013319 ],\n",
              "        [-3.3335817 , -0.3819262 ,  3.2521276 ],\n",
              "        [ 2.9409075 ,  0.688517  , -3.011341  ],\n",
              "        [-2.0718935 , -0.92506206,  2.6252475 ],\n",
              "        [ 1.958891  ,  0.43003622, -1.8616259 ],\n",
              "        [-2.3804986 , -0.01705886,  2.2390773 ],\n",
              "        [-3.2114458 , -0.20092824,  3.017407  ],\n",
              "        [-3.1755588 , -0.7707904 ,  3.453436  ],\n",
              "        [-3.2050629 , -0.6244561 ,  3.3746777 ],\n",
              "        [ 3.5928464 , -0.46430483, -2.7150278 ],\n",
              "        [-2.0183587 , -0.75817883,  2.4680593 ],\n",
              "        [-3.4087734 , -0.30819574,  3.253747  ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ]], dtype=float32),\n",
              " array([[-3.0555394 , -0.86413336,  3.4109182 ],\n",
              "        [ 2.9289253 ,  0.45169616, -2.8472328 ],\n",
              "        [-1.1910199 ,  2.1996822 , -0.81875825],\n",
              "        [-3.0401804 ,  0.02371486,  2.627862  ],\n",
              "        [ 2.4839227 ,  1.100074  , -3.0184698 ],\n",
              "        [-3.3278883 , -0.6021642 ,  3.4212809 ],\n",
              "        [ 3.4217005 ,  0.10899309, -2.8914545 ],\n",
              "        [ 1.8181542 ,  1.0617206 , -2.341391  ],\n",
              "        [ 0.93124044,  1.296372  , -1.8970075 ],\n",
              "        [-3.2073524 , -0.80863523,  3.4833903 ],\n",
              "        [ 2.0470822 ,  1.4055022 , -2.7903757 ],\n",
              "        [ 3.4103897 , -0.04868701, -2.8126912 ],\n",
              "        [ 0.36545387,  1.616793  , -1.5697267 ],\n",
              "        [ 2.5977085 ,  0.43387637, -2.3959908 ],\n",
              "        [-3.0610836 , -0.40952107,  3.133216  ],\n",
              "        [-1.30188   , -0.8905435 ,  1.9734704 ]], dtype=float32),\n",
              " array([[ 0.14162752, -0.74698776,  0.5664152 ],\n",
              "        [-3.306299  ,  0.3329851 ,  2.6368885 ],\n",
              "        [-3.3628953 , -0.55841947,  3.4188247 ],\n",
              "        [ 1.7425581 ,  0.88483644, -2.1440716 ],\n",
              "        [-3.3442638 , -0.52028406,  3.388908  ],\n",
              "        [ 2.5683987 ,  0.5386244 , -2.4660177 ],\n",
              "        [-0.11988796,  0.93408644, -0.50615436],\n",
              "        [ 2.9998715 ,  0.39779076, -2.8575277 ],\n",
              "        [-1.2042915 ,  0.4830676 ,  0.45504233],\n",
              "        [ 2.436991  ,  1.0523405 , -2.8353786 ],\n",
              "        [-1.5240455 ,  2.0458188 , -0.3676105 ],\n",
              "        [-3.1914098 , -0.21731442,  3.0628757 ],\n",
              "        [ 1.988973  , -0.4092191 , -1.2347198 ],\n",
              "        [ 1.7938821 ,  1.3290753 , -2.5353003 ],\n",
              "        [-3.3103235 , -0.61314285,  3.4258385 ],\n",
              "        [ 2.4794898 ,  0.36133316, -2.338059  ]], dtype=float32),\n",
              " array([[ 3.5714304 , -0.6809234 , -2.543674  ],\n",
              "        [ 1.7647349 ,  1.0033445 , -2.287833  ],\n",
              "        [ 1.3943865 ,  0.6046818 , -1.5364232 ],\n",
              "        [-3.285366  , -0.66599476,  3.4616122 ],\n",
              "        [-3.141007  ,  0.6467569 ,  2.244039  ],\n",
              "        [-1.1108423 ,  1.4774171 , -0.09463637],\n",
              "        [ 3.2939703 , -0.1590306 , -2.610241  ],\n",
              "        [ 2.2428873 ,  1.2800833 , -2.8520415 ],\n",
              "        [-3.269602  , -0.02780316,  2.8198647 ],\n",
              "        [-3.3027136 , -0.18755823,  3.1270542 ],\n",
              "        [-2.5751317 ,  0.4304839 ,  1.9827538 ],\n",
              "        [ 2.2844012 ,  0.41374642, -2.1818683 ],\n",
              "        [ 3.5488112 ,  0.01002039, -2.9655209 ],\n",
              "        [-3.1356008 ,  0.8893352 ,  1.9001192 ],\n",
              "        [ 2.3689692 ,  1.0520903 , -2.7697804 ],\n",
              "        [ 2.401176  , -0.43216863, -1.5520923 ]], dtype=float32),\n",
              " array([[-0.27449974,  1.1864924 , -0.6357117 ],\n",
              "        [ 1.7829192 ,  1.3899168 , -2.4349194 ],\n",
              "        [-0.38686943,  1.299348  , -0.6391777 ],\n",
              "        [-2.1610975 , -0.25322515,  2.1813354 ],\n",
              "        [ 3.5466993 , -0.83141077, -2.4023113 ],\n",
              "        [-3.1378176 , -0.74679506,  3.392459  ],\n",
              "        [-3.1322393 , -0.84048223,  3.4892452 ],\n",
              "        [ 1.8695837 ,  0.07191647, -1.5308661 ],\n",
              "        [ 2.3065038 ,  0.5591171 , -2.3746634 ],\n",
              "        [ 2.0105307 ,  0.84434325, -2.2459037 ],\n",
              "        [-3.208637  , -0.72354144,  3.4277816 ],\n",
              "        [ 0.6872627 ,  1.722734  , -1.8324957 ],\n",
              "        [-0.38885114,  2.0912688 , -1.3881943 ],\n",
              "        [ 3.491336  , -0.43403587, -2.599923  ],\n",
              "        [-2.2819    ,  1.5999584 ,  0.5245916 ],\n",
              "        [-2.8894832 ,  0.6057457 ,  2.0171285 ]], dtype=float32),\n",
              " array([[ 3.3720376 , -0.52902365, -2.3750641 ],\n",
              "        [ 1.5544204 ,  0.38659683, -1.4625409 ],\n",
              "        [ 0.49658063,  1.9641824 , -2.0213997 ],\n",
              "        [-2.5583806 ,  0.43740284,  1.9936308 ],\n",
              "        [ 2.8486607 , -0.19496599, -2.19771   ],\n",
              "        [-2.019211  ,  0.7919167 ,  1.126337  ],\n",
              "        [-3.2637885 , -0.5316868 ,  3.3491964 ],\n",
              "        [-3.271609  , -0.1924414 ,  3.019553  ],\n",
              "        [-2.3150218 , -0.94197595,  2.930031  ],\n",
              "        [-3.1763303 ,  0.17440042,  2.5922155 ],\n",
              "        [-3.2338998 , -0.16577014,  3.0059228 ],\n",
              "        [ 1.6709331 ,  1.174863  , -2.3165045 ],\n",
              "        [ 2.974924  , -0.19952476, -2.3166423 ],\n",
              "        [ 3.0941598 ,  0.48911136, -2.9335246 ],\n",
              "        [ 3.0890305 , -0.57221246, -2.0625026 ],\n",
              "        [-2.4558024 ,  1.5297586 ,  0.86868167]], dtype=float32),\n",
              " array([[ 2.3803074 ,  0.499797  , -2.2967558 ],\n",
              "        [-3.06095   , -0.9353756 ,  3.4836247 ],\n",
              "        [-3.024986  ,  0.8145368 ,  2.0389187 ],\n",
              "        [ 3.508297  ,  0.15133515, -3.084062  ],\n",
              "        [-3.3259096 , -0.4873508 ,  3.3703008 ],\n",
              "        [ 0.8854695 ,  1.3110152 , -1.6666725 ],\n",
              "        [ 0.10790254,  1.7817985 , -1.419987  ],\n",
              "        [ 1.7262107 ,  1.3426462 , -2.3829498 ],\n",
              "        [ 0.25122467, -0.36303172,  0.20238252],\n",
              "        [-3.3695667 , -0.44586092,  3.369326  ],\n",
              "        [ 0.7640986 ,  1.0651823 , -1.400156  ],\n",
              "        [-1.8265405 ,  1.2508482 ,  0.5746628 ],\n",
              "        [-2.2787912 ,  0.42317086,  1.6829443 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [ 2.70981   ,  0.49568197, -2.5327375 ],\n",
              "        [ 1.5404127 ,  1.3611232 , -2.2081819 ]], dtype=float32),\n",
              " array([[-3.124265  , -0.80980134,  3.4637794 ],\n",
              "        [-3.161914  , -0.7654594 ,  3.4492302 ],\n",
              "        [-3.3747952 , -0.5053209 ,  3.3957953 ],\n",
              "        [-3.220649  ,  0.56899476,  2.3303828 ],\n",
              "        [ 2.893942  ,  0.6542677 , -2.902028  ],\n",
              "        [ 3.2585325 , -0.01321965, -2.7418494 ],\n",
              "        [ 1.0364186 ,  0.19368847, -0.88529253],\n",
              "        [ 1.8996651 ,  1.1741513 , -2.4385543 ],\n",
              "        [-0.2859128 ,  1.116957  , -0.65329504],\n",
              "        [-2.804839  , -0.83257467,  3.2732651 ],\n",
              "        [-3.2567163 , -0.6668378 ,  3.4319701 ],\n",
              "        [-2.609741  ,  0.9523305 ,  1.4422684 ],\n",
              "        [-2.9657133 , -0.861701  ,  3.424286  ],\n",
              "        [ 1.7823082 ,  1.3848257 , -2.5640168 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-1.1699302 ,  1.886212  , -0.61590505]], dtype=float32),\n",
              " array([[-2.3761723 ,  0.7970879 ,  1.4166597 ],\n",
              "        [-0.3370931 ,  1.7062145 , -1.1309202 ],\n",
              "        [ 1.7796417 ,  0.8546099 , -1.8986459 ],\n",
              "        [ 2.5808213 ,  0.5273685 , -2.4899468 ],\n",
              "        [ 2.064028  ,  1.0587851 , -2.4596882 ],\n",
              "        [ 0.86016977,  0.8454441 , -1.3051238 ],\n",
              "        [-3.1843107 , -0.5909097 ,  3.2461612 ],\n",
              "        [ 2.6005592 ,  0.86467135, -2.8488126 ],\n",
              "        [ 3.5896816 , -0.46100703, -2.7208164 ],\n",
              "        [-3.3673275 , -0.30083904,  3.2547657 ],\n",
              "        [ 1.5039842 ,  0.9210332 , -1.9955537 ],\n",
              "        [-0.6411393 ,  1.6025567 , -0.67370963],\n",
              "        [ 2.8135912 ,  0.5665311 , -2.7584395 ],\n",
              "        [-3.3815496 , -0.42311767,  3.3304863 ],\n",
              "        [-3.3771198 , -0.38669255,  3.3254666 ],\n",
              "        [-3.326409  , -0.52097774,  3.3540316 ]], dtype=float32),\n",
              " array([[ 2.8807695 ,  0.5799978 , -2.9151323 ],\n",
              "        [ 2.479173  ,  0.7264479 , -2.5098717 ],\n",
              "        [ 2.7189047 ,  0.4715288 , -2.6653805 ],\n",
              "        [-2.057576  ,  1.7663822 ,  0.1909064 ],\n",
              "        [ 0.23615894,  2.0515487 , -2.0168927 ],\n",
              "        [-3.4465296 , -0.00519863,  3.0004005 ],\n",
              "        [-1.4539531 ,  1.5949095 , -0.1161226 ],\n",
              "        [-3.3291519 , -0.4995483 ,  3.381914  ],\n",
              "        [ 0.39117178,  1.8352613 , -1.7299614 ],\n",
              "        [ 3.143965  ,  0.01997303, -2.6269197 ],\n",
              "        [-3.2016995 ,  0.33264187,  2.575202  ],\n",
              "        [-0.85600466,  2.0911708 , -0.82258826],\n",
              "        [ 1.2867723 ,  0.61699027, -1.3890338 ],\n",
              "        [-1.6615916 , -0.36128727,  1.9112061 ],\n",
              "        [ 0.82846075,  1.443023  , -1.771796  ],\n",
              "        [-2.909969  ,  1.1221714 ,  1.6823184 ]], dtype=float32),\n",
              " array([[ 2.2850602 , -0.85978466, -1.2441859 ],\n",
              "        [-2.3668852 ,  0.6245296 ,  1.6683741 ],\n",
              "        [ 2.1665804 ,  0.96002483, -2.514072  ],\n",
              "        [ 3.6676257 , -0.3132873 , -2.8494368 ],\n",
              "        [ 0.72996503,  0.99597824, -1.3567283 ],\n",
              "        [ 2.1103923 ,  1.1326722 , -2.5960948 ],\n",
              "        [-0.04066411, -0.5158352 ,  0.60761654],\n",
              "        [-2.7993195 , -0.95420814,  3.3458142 ],\n",
              "        [-3.1460974 , -0.8144876 ,  3.470258  ],\n",
              "        [-3.3137746 , -0.50418115,  3.3697371 ],\n",
              "        [ 1.6340982 ,  1.3349258 , -2.505848  ],\n",
              "        [ 2.284101  ,  1.2107154 , -2.8598738 ],\n",
              "        [ 1.2083445 ,  0.51146376, -1.3589637 ],\n",
              "        [ 0.5035821 , -0.28659603, -0.2395516 ],\n",
              "        [-0.9183339 ,  1.8037289 , -0.6077258 ],\n",
              "        [-0.7745206 ,  1.0038282 , -0.07913718]], dtype=float32),\n",
              " array([[-1.1619979 ,  0.02463507,  1.2362479 ],\n",
              "        [-0.6217217 ,  1.7216743 , -0.88860345],\n",
              "        [ 1.3404375 ,  0.83258015, -1.754914  ],\n",
              "        [-3.4814837 , -0.10657299,  3.1549945 ],\n",
              "        [-1.721773  ,  1.6849536 ,  0.06230357],\n",
              "        [-3.2723503 , -0.67086613,  3.4344225 ],\n",
              "        [ 0.9939651 , -0.0455483 , -0.698745  ],\n",
              "        [ 1.6515235 ,  1.0357145 , -2.1203213 ],\n",
              "        [ 2.6282275 ,  0.5357484 , -2.6264029 ],\n",
              "        [-0.7583433 ,  1.6545783 , -0.7468469 ],\n",
              "        [-3.092202  , -0.84591794,  3.4514325 ],\n",
              "        [-2.6726315 , -1.1473275 ,  3.3491478 ],\n",
              "        [-1.8373023 , -0.2687852 ,  1.829186  ],\n",
              "        [ 2.6678908 , -0.49556932, -1.7400151 ],\n",
              "        [-0.01812442, -1.4779607 ,  1.2322943 ],\n",
              "        [ 2.6778777 ,  0.61282647, -2.690665  ]], dtype=float32),\n",
              " array([[-3.1082234 ,  0.62321067,  2.1859949 ],\n",
              "        [ 3.1836803 ,  0.20503762, -2.9334157 ],\n",
              "        [-2.7561457 , -1.0277377 ,  3.3297052 ],\n",
              "        [ 0.63730067,  0.72652596, -0.99287903],\n",
              "        [ 0.12837115,  1.5193576 , -1.2712909 ],\n",
              "        [-3.4947264 ,  0.39576742,  2.7339504 ],\n",
              "        [-2.7001336 , -0.40274262,  2.8436842 ],\n",
              "        [-1.5340347 ,  1.8866853 , -0.32656682],\n",
              "        [-2.9035125 ,  1.2502075 ,  1.478029  ],\n",
              "        [-2.545613  ,  0.13546644,  2.2205207 ],\n",
              "        [ 2.331138  ,  0.5598588 , -2.3180962 ],\n",
              "        [ 1.3082122 ,  1.427008  , -2.152117  ],\n",
              "        [-3.5232832 , -0.06656843,  3.0776057 ],\n",
              "        [ 1.3907369 ,  1.450344  , -2.2599854 ],\n",
              "        [ 0.21314536,  0.87756395, -0.74656755],\n",
              "        [ 1.3878723 ,  0.83725965, -1.6361728 ]], dtype=float32),\n",
              " array([[ 3.2576883 , -0.3275105 , -2.4421299 ],\n",
              "        [ 0.22798233,  0.8313274 , -0.602914  ],\n",
              "        [ 0.7796418 ,  1.5061156 , -1.8957534 ],\n",
              "        [ 2.5677876 ,  0.6560092 , -2.5396671 ],\n",
              "        [ 2.5157654 ,  1.2370108 , -3.0911322 ],\n",
              "        [-2.5500817 ,  0.7191738 ,  1.712754  ],\n",
              "        [ 2.9458277 , -0.23532595, -2.221799  ],\n",
              "        [-2.5471108 ,  1.1174101 ,  1.3464407 ],\n",
              "        [-0.24531871,  1.4888781 , -0.95363617],\n",
              "        [-1.9566742 ,  1.4768428 ,  0.43766612],\n",
              "        [-0.6123343 ,  1.5483284 , -0.6579781 ],\n",
              "        [ 1.620518  ,  1.1344985 , -2.2229767 ],\n",
              "        [-3.1404796 ,  0.2552851 ,  2.585709  ],\n",
              "        [-1.0689123 ,  1.9945893 , -0.7853209 ],\n",
              "        [ 2.047695  ,  1.2308279 , -2.6936138 ],\n",
              "        [-1.6032172 ,  1.9791805 , -0.38577706]], dtype=float32),\n",
              " array([[ 1.5749375 ,  1.1559519 , -2.2003186 ],\n",
              "        [ 0.06176044,  1.4230845 , -1.2230222 ],\n",
              "        [-3.3512397 , -0.2148081 ,  3.1273222 ],\n",
              "        [ 1.399787  ,  1.5129019 , -2.4127936 ],\n",
              "        [ 3.5101202 , -0.15889132, -2.7720332 ],\n",
              "        [ 2.9315271 ,  0.4667835 , -2.7893946 ],\n",
              "        [-0.8543359 ,  1.5687609 , -0.5014243 ],\n",
              "        [-3.340537  , -0.48515525,  3.378774  ],\n",
              "        [-2.094912  ,  1.2939192 ,  0.76101327],\n",
              "        [ 1.5978607 ,  1.4040238 , -2.4566147 ],\n",
              "        [ 1.2054154 ,  1.2873286 , -2.0277908 ],\n",
              "        [-1.4299879 ,  1.5698355 ,  0.02026276],\n",
              "        [ 2.015223  ,  0.15727836, -1.6685126 ],\n",
              "        [ 0.18245651,  1.7942802 , -1.6068227 ],\n",
              "        [ 1.8140029 , -0.16554886, -1.2161024 ],\n",
              "        [ 2.5331817 ,  0.8451511 , -2.7198634 ]], dtype=float32),\n",
              " array([[-1.8339025 ,  1.826424  , -0.0466197 ],\n",
              "        [ 2.0140018 ,  0.8385725 , -2.3150568 ],\n",
              "        [ 1.9055048 ,  1.2732443 , -2.4971528 ],\n",
              "        [-3.3596232 , -0.19099605,  3.0894918 ],\n",
              "        [-1.8651348 ,  1.2917014 ,  0.4869352 ],\n",
              "        [ 1.8478332 ,  1.0778043 , -2.400739  ],\n",
              "        [-3.2685268 , -0.5582582 ,  3.3713477 ],\n",
              "        [-3.320741  , -0.34527156,  3.2013936 ],\n",
              "        [ 0.8388314 ,  1.7138045 , -2.0018828 ],\n",
              "        [-3.4328644 ,  0.33186617,  2.7287686 ],\n",
              "        [ 0.8283326 ,  1.8249837 , -2.0700755 ],\n",
              "        [ 2.5160823 ,  0.8623142 , -2.8374813 ],\n",
              "        [ 0.7713934 ,  1.7451653 , -2.005564  ],\n",
              "        [-3.2652655 , -0.6698173 ,  3.462627  ],\n",
              "        [ 3.5019178 , -0.6082312 , -2.4171033 ],\n",
              "        [ 2.7088964 ,  0.91257054, -2.966565  ]], dtype=float32),\n",
              " array([[ 1.4837512 ,  1.5362327 , -2.5577402 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [ 2.050432  ,  0.1393152 , -1.6723976 ],\n",
              "        [ 2.538086  , -0.42172346, -1.6772895 ],\n",
              "        [-3.4379983 , -0.37709036,  3.3052418 ],\n",
              "        [-0.14104156,  1.9399433 , -1.3412642 ],\n",
              "        [ 0.05935494,  1.141209  , -0.85754347],\n",
              "        [ 1.740059  ,  1.3254551 , -2.345043  ],\n",
              "        [ 1.8687767 ,  1.4683472 , -2.6718047 ],\n",
              "        [-3.2810056 ,  0.20046397,  2.7019205 ],\n",
              "        [-3.3199565 , -0.07539658,  2.9959908 ],\n",
              "        [-1.6477741 ,  1.9725525 , -0.26707464],\n",
              "        [-2.853173  , -0.24380106,  2.8024602 ],\n",
              "        [ 0.19959526,  1.6311806 , -1.5564532 ],\n",
              "        [-3.0366488 , -0.55726314,  3.1890717 ],\n",
              "        [ 1.3018085 ,  1.5958068 , -2.3659892 ]], dtype=float32),\n",
              " array([[ 0.9871588 ,  1.6253519 , -2.0082965 ],\n",
              "        [ 0.6036615 ,  1.3176209 , -1.5358133 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-2.6524806 ,  1.4049504 ,  1.0702255 ],\n",
              "        [-2.5693233 ,  1.0106341 ,  1.3590653 ],\n",
              "        [ 0.78985447,  1.2301308 , -1.5248928 ],\n",
              "        [ 0.9841365 ,  0.6771647 , -1.2881147 ],\n",
              "        [-3.1681852 , -0.75476193,  3.4781752 ],\n",
              "        [-3.2113059 , -0.75466585,  3.50937   ],\n",
              "        [ 3.3748713 ,  0.25085947, -3.068889  ],\n",
              "        [ 0.99860746,  0.5091957 , -1.0964609 ],\n",
              "        [ 2.404461  ,  0.76022303, -2.5893197 ],\n",
              "        [ 2.5994165 , -0.30797228, -1.8717275 ],\n",
              "        [-0.6823601 ,  0.9327368 , -0.01206166],\n",
              "        [-3.2617886 , -0.46022984,  3.2731094 ],\n",
              "        [-0.3379357 ,  1.8197888 , -1.3475711 ]], dtype=float32),\n",
              " array([[-3.3538697 ,  0.07735615,  2.977677  ],\n",
              "        [ 1.2744211 ,  1.2151865 , -1.9934754 ],\n",
              "        [ 0.3960022 , -0.3752295 ,  0.09637834],\n",
              "        [ 2.5810633 , -0.23399642, -1.9287696 ],\n",
              "        [-0.82093924,  1.6961092 , -0.6413193 ],\n",
              "        [-3.0845225 , -0.54175997,  3.2218218 ],\n",
              "        [ 0.08449419, -0.23254353,  0.17317185],\n",
              "        [-1.4489918 , -0.31807953,  1.7247295 ],\n",
              "        [ 0.91517884,  1.2493559 , -1.69935   ],\n",
              "        [-0.07897636,  0.8490094 , -0.57457745],\n",
              "        [-2.1836007 ,  0.28297696,  1.7326899 ],\n",
              "        [ 1.5525104 ,  1.3042327 , -2.3560596 ],\n",
              "        [ 2.7063446 ,  0.5869316 , -2.7500253 ],\n",
              "        [ 1.334006  ,  1.7229913 , -2.492691  ],\n",
              "        [-3.0974872 , -0.86110324,  3.4830966 ],\n",
              "        [ 2.223422  ,  1.0954939 , -2.7125201 ]], dtype=float32),\n",
              " array([[-3.234887  , -0.09503557,  2.8921275 ],\n",
              "        [-1.0466872 ,  0.9795774 ,  0.28419316],\n",
              "        [ 1.9549366 ,  1.1856102 , -2.5833519 ],\n",
              "        [ 3.0551836 ,  0.34849146, -2.7139657 ],\n",
              "        [ 2.2175326 ,  1.2630407 , -2.7524438 ],\n",
              "        [ 2.190133  ,  1.1452473 , -2.7352965 ],\n",
              "        [ 2.573137  ,  0.8913536 , -2.844255  ],\n",
              "        [ 2.4991956 ,  0.965348  , -2.8546023 ],\n",
              "        [ 2.0946693 ,  1.1466657 , -2.6182208 ],\n",
              "        [-3.3657644 ,  0.1201921 ,  2.7304301 ],\n",
              "        [-3.24316   ,  0.03358508,  2.852955  ],\n",
              "        [ 1.9678048 ,  1.0901376 , -2.4513023 ],\n",
              "        [-3.4427857 ,  0.11557965,  2.8764253 ],\n",
              "        [ 1.1451211 ,  0.7914555 , -1.547466  ],\n",
              "        [-3.3738823 , -0.5251433 ,  3.4036748 ],\n",
              "        [-3.2141356 , -0.7815531 ,  3.4813423 ]], dtype=float32),\n",
              " array([[-3.4103074 , -0.48068726,  3.350473  ],\n",
              "        [-0.14941387,  1.3108743 , -0.87172574],\n",
              "        [-2.7721856 , -0.5840609 ,  2.930426  ],\n",
              "        [ 2.5491989 ,  0.95850384, -2.8844213 ],\n",
              "        [-0.40738785,  1.0221236 , -0.4413885 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-3.158174  , -0.77716684,  3.4242582 ],\n",
              "        [-2.9670537 , -0.5625264 ,  3.087502  ],\n",
              "        [-3.0885746 , -0.71814907,  3.3256373 ],\n",
              "        [ 2.3148706 ,  1.0720679 , -2.7929487 ],\n",
              "        [-2.9357824 , -0.12462673,  2.7030747 ],\n",
              "        [ 1.3758506 ,  1.1709248 , -2.1331277 ],\n",
              "        [-1.8915342 ,  1.7089947 ,  0.16703281],\n",
              "        [-0.19232596,  1.1624242 , -0.6616272 ],\n",
              "        [-1.1797235 ,  1.8734744 , -0.51593924],\n",
              "        [-1.9365236 ,  0.57795024,  1.343956  ]], dtype=float32),\n",
              " array([[-2.8852432e+00, -6.3092691e-01,  3.0721819e+00],\n",
              "        [ 2.1000874e+00,  8.5468984e-01, -2.2834640e+00],\n",
              "        [-7.8283411e-01,  1.7896401e+00, -8.9822018e-01],\n",
              "        [-2.7576551e+00,  7.0653331e-01,  1.7615213e+00],\n",
              "        [-3.2530911e+00, -6.7600530e-01,  3.4263887e+00],\n",
              "        [-3.4199865e+00,  8.6049818e-02,  2.9139032e+00],\n",
              "        [ 8.6874044e-01,  7.6023448e-01, -1.3098193e+00],\n",
              "        [ 2.9966853e+00, -4.7712005e-04, -2.3853986e+00],\n",
              "        [ 2.6976089e+00,  6.8283451e-01, -2.8489401e+00],\n",
              "        [-3.2143903e+00,  1.5367670e-02,  2.7297778e+00],\n",
              "        [-3.2480431e+00, -7.2385228e-01,  3.4350481e+00],\n",
              "        [ 1.1287047e+00,  7.9442155e-01, -1.5863667e+00],\n",
              "        [-8.3528960e-01,  1.7752479e+00, -7.6548994e-01],\n",
              "        [-1.7624310e+00,  1.3032118e+00,  5.1102471e-01],\n",
              "        [ 1.1552066e+00,  1.2947251e+00, -1.9928055e+00],\n",
              "        [ 2.3057530e+00,  8.4609735e-01, -2.5065525e+00]], dtype=float32),\n",
              " array([[-0.7892534 ,  0.6769049 ,  0.37320113],\n",
              "        [-1.847002  ,  1.5369236 ,  0.32486293],\n",
              "        [-1.3217567 ,  0.11334493,  1.1780738 ],\n",
              "        [ 3.3240879 , -0.5546875 , -2.309762  ],\n",
              "        [-3.1650965 , -0.6934359 ,  3.2985487 ],\n",
              "        [ 2.9563053 ,  0.15397893, -2.457632  ],\n",
              "        [-0.92339325, -0.1230704 ,  0.8746128 ],\n",
              "        [ 1.6903855 ,  0.333544  , -1.5966251 ],\n",
              "        [ 1.4572127 ,  1.0318398 , -2.0490634 ],\n",
              "        [-3.297173  , -0.6972658 ,  3.469603  ],\n",
              "        [ 2.1324308 ,  0.60918075, -2.1887264 ],\n",
              "        [-3.2834022 , -0.46671143,  3.3274283 ],\n",
              "        [-3.2598612 , -0.1855371 ,  3.0654154 ],\n",
              "        [-1.4229963 , -0.24110404,  1.695412  ],\n",
              "        [-2.3342555 ,  0.09086626,  1.9186896 ],\n",
              "        [-3.0813086 ,  0.29577065,  2.407124  ]], dtype=float32),\n",
              " array([[-3.1311471 , -0.4268491 ,  3.154344  ],\n",
              "        [-0.04058745,  1.4298357 , -1.0715356 ],\n",
              "        [-0.6659667 ,  0.45400837,  0.40958875],\n",
              "        [ 2.036805  ,  0.8825207 , -2.3121614 ],\n",
              "        [-3.3823006 , -0.1547067 ,  3.071192  ],\n",
              "        [-1.6801046 ,  0.3423048 ,  1.2366879 ],\n",
              "        [-2.8664362 ,  0.43563643,  2.150596  ],\n",
              "        [ 3.3632436 , -0.05665879, -2.6996465 ],\n",
              "        [-1.6399063 ,  1.5262414 ,  0.13176623],\n",
              "        [ 1.8609773 ,  1.4387547 , -2.7604916 ],\n",
              "        [-3.216891  , -0.7288239 ,  3.4475486 ],\n",
              "        [-3.3445477 , -0.14866033,  3.0907412 ],\n",
              "        [ 0.75085896,  0.7600328 , -1.1273665 ],\n",
              "        [ 2.657561  , -0.58220595, -1.6573803 ],\n",
              "        [-0.10366872,  1.4903517 , -0.9893453 ],\n",
              "        [ 3.4293501 , -0.7770517 , -2.3116364 ]], dtype=float32),\n",
              " array([[ 3.0137074 ,  0.32732224, -2.7501197 ],\n",
              "        [-2.0836027 ,  1.2816991 ,  0.75006294],\n",
              "        [ 0.2797764 , -0.21223155,  0.10476847],\n",
              "        [-2.9707406 , -0.9302137 ,  3.43164   ],\n",
              "        [-1.6557844 ,  2.0606017 , -0.26420864],\n",
              "        [ 2.1564865 ,  1.0931901 , -2.5970674 ],\n",
              "        [ 2.6752744 ,  0.8025224 , -2.9024975 ],\n",
              "        [ 3.1194577 ,  0.3622243 , -2.7952347 ],\n",
              "        [ 1.6121929 ,  0.4529132 , -1.6838379 ],\n",
              "        [-3.459572  , -0.14043865,  3.1660714 ],\n",
              "        [ 1.6453196 ,  1.1632763 , -2.1746325 ],\n",
              "        [-0.7576857 ,  1.6473621 , -0.57294196],\n",
              "        [ 1.1178244 ,  1.1823406 , -1.6335164 ],\n",
              "        [-2.2734554 ,  1.1549021 ,  0.8087144 ],\n",
              "        [-3.1428416 , -0.43314537,  3.2194433 ],\n",
              "        [ 3.3939092 ,  0.13394287, -2.9055707 ]], dtype=float32),\n",
              " array([[-3.2529087 , -0.72088104,  3.4602327 ],\n",
              "        [-0.94751525, -0.01048186,  1.0142285 ],\n",
              "        [ 0.5796754 ,  0.22868437, -0.5357044 ],\n",
              "        [ 2.7179992 ,  0.6002184 , -2.7943647 ],\n",
              "        [ 3.0136163 ,  0.63077617, -3.0270813 ],\n",
              "        [ 2.4084175 ,  0.6603008 , -2.4808056 ],\n",
              "        [ 3.5231678 , -0.09606209, -2.8920088 ],\n",
              "        [ 2.3376763 ,  1.2902445 , -2.9561749 ],\n",
              "        [-1.5299472 ,  2.1230326 , -0.51142126],\n",
              "        [ 0.598265  ,  1.092867  , -1.261651  ],\n",
              "        [-1.9946479 ,  1.3621175 ,  0.53544295],\n",
              "        [ 1.2562578 ,  1.2822556 , -1.8812795 ],\n",
              "        [ 3.4443283 , -0.12033496, -2.8036418 ],\n",
              "        [-3.1239192 ,  0.62750965,  2.2438068 ],\n",
              "        [-3.0911171 , -0.6639128 ,  3.3208346 ],\n",
              "        [ 3.3251173 ,  0.43781215, -3.097506  ]], dtype=float32),\n",
              " array([[-3.165863  , -0.42405277,  3.1956801 ],\n",
              "        [ 2.9780576 ,  0.23136199, -2.608746  ],\n",
              "        [-3.070959  , -0.36931875,  2.9996583 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [ 1.1873077 ,  1.3461303 , -2.0325942 ],\n",
              "        [ 2.858813  ,  0.45259824, -2.6562033 ],\n",
              "        [ 2.6812928 ,  0.21388267, -2.3588953 ],\n",
              "        [ 1.3723212 ,  1.4506922 , -2.3327885 ],\n",
              "        [ 0.0640676 ,  1.3696221 , -1.0169921 ],\n",
              "        [-1.7560929 ,  1.0369616 ,  0.68542063],\n",
              "        [ 2.1167243 ,  1.0985726 , -2.6874723 ],\n",
              "        [ 3.0396247 ,  0.68464446, -3.097609  ],\n",
              "        [ 3.614292  , -0.17290613, -2.9191227 ],\n",
              "        [-0.61230636,  2.1121836 , -1.1712193 ],\n",
              "        [ 3.0343168 , -0.61247945, -1.9910321 ],\n",
              "        [ 2.4567018 ,  0.91063845, -2.786718  ]], dtype=float32),\n",
              " array([[-0.59371954,  1.54115   , -0.55571043],\n",
              "        [ 2.7795513 ,  0.47690004, -2.5627918 ],\n",
              "        [-3.2739024 , -0.59598476,  3.3911536 ],\n",
              "        [-3.2564585 ,  0.16242354,  2.6802154 ],\n",
              "        [-3.4191196 , -0.19951802,  3.1207907 ],\n",
              "        [ 1.9827205 ,  1.3367393 , -2.7286868 ],\n",
              "        [-3.0782251 , -0.6864909 ,  3.3633015 ],\n",
              "        [ 0.6994172 , -0.871981  ,  0.16713092],\n",
              "        [-0.9815995 ,  1.7122483 , -0.4781962 ],\n",
              "        [ 3.023514  ,  0.38335553, -2.7474742 ],\n",
              "        [-3.400901  , -0.32195225,  3.2340236 ],\n",
              "        [-3.5629396 ,  0.16429755,  2.9791584 ],\n",
              "        [-2.3312576 ,  0.32831243,  1.9243165 ],\n",
              "        [ 1.5015794 ,  1.2366325 , -2.2509503 ],\n",
              "        [-1.6212325 ,  1.884073  , -0.05328698],\n",
              "        [ 0.8935792 ,  0.5773649 , -1.1081637 ]], dtype=float32),\n",
              " array([[-2.8258197 , -0.83655334,  3.2115197 ],\n",
              "        [ 2.9901485 ,  0.35343975, -2.7014067 ],\n",
              "        [-3.0409763 ,  0.474057  ,  2.233162  ],\n",
              "        [ 1.7499536 ,  1.613013  , -2.7347486 ],\n",
              "        [-0.68810225,  0.7159364 ,  0.08746146],\n",
              "        [ 3.309046  , -0.19859229, -2.488278  ],\n",
              "        [-3.1956265 , -0.73465145,  3.4181232 ],\n",
              "        [-2.340895  , -0.22918911,  2.3645008 ],\n",
              "        [-3.444526  ,  0.05227351,  2.9575071 ],\n",
              "        [ 1.9420834 ,  1.2301965 , -2.5619893 ],\n",
              "        [ 1.7811489 ,  1.198175  , -2.352975  ],\n",
              "        [-2.3944328 , -0.17111835,  2.2661622 ],\n",
              "        [ 0.9979727 ,  0.39694527, -1.0294459 ],\n",
              "        [ 1.4455642 ,  1.3685893 , -2.2573004 ],\n",
              "        [-2.9143734 ,  0.00413334,  2.5418081 ],\n",
              "        [ 2.0726998 ,  0.8560864 , -2.2952886 ]], dtype=float32),\n",
              " array([[-3.0756571 , -0.48159376,  3.1576898 ],\n",
              "        [-3.176633  , -0.76971257,  3.4467416 ],\n",
              "        [-1.9935273 ,  1.5761092 ,  0.56037354],\n",
              "        [ 0.98105186,  1.7310523 , -2.1677423 ],\n",
              "        [ 2.265982  ,  0.696169  , -2.383054  ],\n",
              "        [ 2.3880627 ,  1.0719758 , -2.8336606 ],\n",
              "        [ 3.42648   , -0.47293878, -2.596471  ],\n",
              "        [-1.5135673 ,  1.8634024 , -0.3104201 ],\n",
              "        [ 3.538033  , -0.21016067, -2.780439  ],\n",
              "        [-3.3631823 , -0.43867612,  3.3116066 ],\n",
              "        [ 1.4313072 ,  1.3579545 , -2.2067976 ],\n",
              "        [-3.1978676 ,  0.6890957 ,  2.1921244 ],\n",
              "        [-3.3927581 , -0.5163888 ,  3.4199033 ],\n",
              "        [-1.3051598 ,  1.9367361 , -0.4321891 ],\n",
              "        [-3.2117126 ,  0.34475216,  2.4957786 ],\n",
              "        [ 1.2966805 ,  1.4867187 , -2.2979245 ]], dtype=float32),\n",
              " array([[-1.4935445 ,  0.75106925,  0.7874469 ],\n",
              "        [ 0.20157076,  1.0797979 , -1.0487199 ],\n",
              "        [-1.4413972 ,  1.6643925 , -0.14753728],\n",
              "        [ 3.600145  , -0.23276123, -2.8309388 ],\n",
              "        [ 3.5272262 ,  0.06158293, -3.002954  ],\n",
              "        [ 1.2813016 ,  1.2467146 , -2.005848  ],\n",
              "        [ 2.4106162 ,  0.50723094, -2.4016066 ],\n",
              "        [ 1.2154905 ,  1.3394133 , -2.0633545 ],\n",
              "        [ 1.3644366 ,  1.4732146 , -2.286027  ],\n",
              "        [ 1.1240355 ,  1.2816899 , -1.9429246 ],\n",
              "        [-3.2717311 ,  0.7965896 ,  2.2546885 ],\n",
              "        [-3.2494035 , -0.4434645 ,  3.2484992 ],\n",
              "        [-3.3057787 , -0.55257696,  3.414405  ],\n",
              "        [ 1.6656107 ,  1.1462637 , -2.2207232 ],\n",
              "        [ 3.4103897 , -0.04868701, -2.8126912 ],\n",
              "        [-3.0849001 , -0.23206103,  2.8548543 ]], dtype=float32),\n",
              " array([[-0.8186756 ,  1.9937371 , -0.9436891 ],\n",
              "        [ 0.9023712 ,  1.7511498 , -2.1650634 ],\n",
              "        [ 3.5818403 , -0.28748468, -2.8317246 ],\n",
              "        [ 2.1705337 ,  0.7556026 , -2.3920035 ],\n",
              "        [-0.17526287,  1.5934532 , -1.1839364 ],\n",
              "        [ 3.6006315 , -0.25665185, -2.823208  ],\n",
              "        [ 2.787008  ,  0.62055326, -2.7631247 ],\n",
              "        [ 1.957302  ,  0.9008403 , -2.424424  ],\n",
              "        [-3.1552923 , -0.47782582,  3.207527  ],\n",
              "        [-3.4502816 , -0.43713233,  3.3236942 ],\n",
              "        [-1.7028011 ,  0.52632105,  1.230749  ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 2.8541028 , -0.4900632 , -2.0251563 ],\n",
              "        [-0.6335479 ,  1.7128317 , -0.8693346 ],\n",
              "        [-0.59944266,  1.3565916 , -0.5253644 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ]], dtype=float32),\n",
              " array([[ 3.6070983 , -0.09098792, -3.0226307 ],\n",
              "        [-3.1456666 , -0.6371571 ,  3.3071327 ],\n",
              "        [-3.351763  ,  0.71082556,  2.301618  ],\n",
              "        [-3.3022451 , -0.26254302,  3.1640358 ],\n",
              "        [ 1.8882842 , -0.15100922, -1.4916133 ],\n",
              "        [ 2.9341896 , -0.48782137, -1.9433632 ],\n",
              "        [-0.66720706,  2.1951842 , -1.2477206 ],\n",
              "        [-2.88673   , -0.8401607 ,  3.2324982 ],\n",
              "        [ 0.14001307, -0.5545931 ,  0.25849822],\n",
              "        [-3.1584423 , -0.60144156,  3.3147688 ],\n",
              "        [-0.8471256 ,  1.6688536 , -0.67914724],\n",
              "        [ 1.3454283 ,  1.0857462 , -1.9827191 ],\n",
              "        [ 2.2699862 ,  1.0602602 , -2.6161203 ],\n",
              "        [ 0.80726826,  1.4914088 , -1.8355858 ],\n",
              "        [ 0.5266374 ,  1.5426515 , -1.5549681 ],\n",
              "        [ 1.6285845 ,  1.4417832 , -2.6365385 ]], dtype=float32),\n",
              " array([[ 3.2490866 ,  0.55957067, -3.1839018 ],\n",
              "        [ 2.6287153 , -0.20007667, -2.0582867 ],\n",
              "        [-2.7782853 , -0.7046796 ,  3.1089554 ],\n",
              "        [-2.0259225 , -0.02202302,  1.9572713 ],\n",
              "        [ 3.3851948 ,  0.23129503, -2.9699185 ],\n",
              "        [ 1.916772  ,  1.3743421 , -2.7209568 ],\n",
              "        [ 2.109801  , -0.15888399, -1.4245145 ],\n",
              "        [ 1.196484  ,  1.6693368 , -2.230972  ],\n",
              "        [ 1.8054376 ,  1.151678  , -2.360799  ],\n",
              "        [ 0.54701245,  1.4690734 , -1.5113225 ],\n",
              "        [ 3.6241667 , -0.09833102, -2.935899  ],\n",
              "        [-2.8317344 ,  0.7928596 ,  1.9351121 ],\n",
              "        [ 0.1989756 ,  0.21373186, -0.14437631],\n",
              "        [-1.1223862 ,  1.9774588 , -0.60891956],\n",
              "        [ 1.945052  ,  0.86892253, -2.1893137 ],\n",
              "        [ 2.6043289 ,  0.7651894 , -2.727278  ]], dtype=float32),\n",
              " array([[-3.1722586 , -0.7098582 ,  3.437448  ],\n",
              "        [ 2.762076  ,  0.95060855, -2.9588408 ],\n",
              "        [-3.230337  , -0.31907922,  3.1410317 ],\n",
              "        [ 3.589072  , -0.4302136 , -2.688432  ],\n",
              "        [ 1.8086207 ,  1.0869874 , -2.256824  ],\n",
              "        [ 0.38425523,  1.1727452 , -1.23129   ],\n",
              "        [ 1.07244   ,  0.61732805, -1.3023214 ],\n",
              "        [-0.0110683 ,  1.6172556 , -1.1895931 ],\n",
              "        [ 1.7769274 ,  0.8333051 , -1.990154  ],\n",
              "        [ 1.3563312 ,  1.3927803 , -2.2060773 ],\n",
              "        [ 1.0275401 ,  1.0577513 , -1.6961398 ],\n",
              "        [-1.0448858 ,  1.0324847 ,  0.15707445],\n",
              "        [-2.6979854 ,  0.36856756,  2.0455081 ],\n",
              "        [ 2.5484326 ,  0.85937876, -2.7533555 ],\n",
              "        [-3.2552407 , -0.68138057,  3.4547658 ],\n",
              "        [ 1.225025  ,  1.8095925 , -2.501493  ]], dtype=float32),\n",
              " array([[ 2.200754  ,  1.2063545 , -2.7948928 ],\n",
              "        [ 0.6104233 , -0.14355257, -0.31722474],\n",
              "        [-3.2204342 , -0.71479416,  3.4453027 ],\n",
              "        [-3.2317495 ,  0.13770224,  2.7367964 ],\n",
              "        [ 1.9061443 ,  0.12780854, -1.5455772 ],\n",
              "        [-3.4333692 , -0.14238136,  3.1081142 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-2.5947924 ,  1.3657104 ,  1.240787  ],\n",
              "        [ 3.0318635 ,  0.59456956, -2.9308496 ],\n",
              "        [ 2.208827  ,  0.69268245, -2.304883  ],\n",
              "        [-0.26904845,  0.0394954 ,  0.226733  ],\n",
              "        [-0.6985519 ,  1.984373  , -1.1663846 ],\n",
              "        [ 3.5115497 ,  0.10835917, -3.033886  ],\n",
              "        [-0.08291649, -0.8680744 ,  0.84828234],\n",
              "        [ 1.2356223 ,  1.1835963 , -1.8447644 ],\n",
              "        [-0.07269791,  1.6686405 , -1.3067791 ]], dtype=float32),\n",
              " array([[ 3.5950139 , -0.16042909, -2.932664  ],\n",
              "        [ 2.3230999 ,  0.9680795 , -2.5173843 ],\n",
              "        [-3.1829515 , -0.80306846,  3.4849572 ],\n",
              "        [ 1.5306362 ,  1.5070015 , -2.4380562 ],\n",
              "        [-2.9692526 ,  0.81723577,  2.0312498 ],\n",
              "        [ 1.4325773 , -0.3608773 , -0.7469896 ],\n",
              "        [ 0.17400822,  1.9564807 , -1.7456594 ],\n",
              "        [ 1.4978753 ,  1.6727731 , -2.5908341 ],\n",
              "        [-3.4309018 ,  0.6557326 ,  2.492581  ],\n",
              "        [ 3.5780623 , -0.825673  , -2.4185033 ],\n",
              "        [ 2.6715    ,  0.30403233, -2.4376028 ],\n",
              "        [-1.094482  ,  1.8348902 , -0.6362394 ],\n",
              "        [ 3.2082164 ,  0.470051  , -3.036818  ],\n",
              "        [-3.3774827 ,  0.29871303,  2.5733826 ],\n",
              "        [ 3.5749147 ,  0.04465527, -3.0771194 ],\n",
              "        [-3.1373813 , -0.72714317,  3.4195938 ]], dtype=float32),\n",
              " array([[-1.0754237 , -0.55511326,  1.4991448 ],\n",
              "        [-2.364394  ,  1.378066  ,  0.8507686 ],\n",
              "        [ 2.445625  ,  0.61647385, -2.3573046 ],\n",
              "        [ 2.0422916 ,  0.49466896, -2.0059092 ],\n",
              "        [-3.030544  ,  1.0843192 ,  1.7233409 ],\n",
              "        [-1.5649368 ,  1.685152  , -0.02254043],\n",
              "        [-3.1112294 , -0.7235982 ,  3.3900757 ],\n",
              "        [ 1.2501336 ,  1.3671304 , -1.9738636 ],\n",
              "        [-3.2272313 ,  0.31655315,  2.5838058 ],\n",
              "        [-3.3195128 , -0.6485923 ,  3.477174  ],\n",
              "        [ 1.2456182 ,  1.1029857 , -1.8683841 ],\n",
              "        [ 1.8696145 , -0.319449  , -1.2711402 ],\n",
              "        [ 1.925358  ,  0.15767547, -1.6132735 ],\n",
              "        [-3.1460617 , -0.84421206,  3.4736328 ],\n",
              "        [ 0.18681389,  0.25043586, -0.29674238],\n",
              "        [ 2.704623  ,  1.0049213 , -3.019546  ]], dtype=float32),\n",
              " array([[-2.866178  ,  1.0806049 ,  1.5535766 ],\n",
              "        [ 0.47174296,  1.5743335 , -1.7179005 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [ 1.0975634 ,  1.2770957 , -1.8485792 ],\n",
              "        [-3.1532977 , -0.7031045 ,  3.4157836 ],\n",
              "        [-3.4449432 , -0.2355679 ,  3.1883945 ],\n",
              "        [-2.024315  ,  1.3385757 ,  0.7238407 ],\n",
              "        [-1.4593309 ,  0.59175336,  0.9106804 ],\n",
              "        [-3.0000021 ,  0.06755214,  2.5825493 ],\n",
              "        [ 0.59366375,  1.6268698 , -1.6432765 ],\n",
              "        [-2.7335446 ,  0.43459883,  2.1132169 ],\n",
              "        [ 3.5886803 , -0.22593604, -2.8200943 ],\n",
              "        [-3.294122  , -0.33519313,  3.2137394 ],\n",
              "        [-1.8157681 ,  1.9827803 , -0.12511697],\n",
              "        [-1.1531283 ,  0.3052291 ,  0.85013604],\n",
              "        [-1.8614684 ,  1.8921169 , -0.10904053]], dtype=float32),\n",
              " array([[-3.1105525 , -0.72652614,  3.4340878 ],\n",
              "        [-3.3330667 , -0.5552318 ,  3.438335  ],\n",
              "        [-0.14493191, -0.47696078,  0.994208  ],\n",
              "        [ 1.3680271 ,  1.5063007 , -2.3727424 ],\n",
              "        [ 2.1602995 ,  1.2892011 , -2.828198  ],\n",
              "        [-0.18674272,  1.8317257 , -1.2781767 ],\n",
              "        [ 0.81570095,  1.7570318 , -2.2181556 ],\n",
              "        [ 2.6284146 ,  0.76976377, -2.717048  ],\n",
              "        [-1.5223546 ,  0.8742248 ,  0.6660067 ],\n",
              "        [ 0.18630089,  1.8817273 , -1.5277809 ],\n",
              "        [ 1.3803535 ,  1.1808472 , -2.0006194 ],\n",
              "        [-1.7317085 ,  1.8427281 , -0.12785766],\n",
              "        [ 0.29203972,  1.576966  , -1.5196632 ],\n",
              "        [-1.0716636 ,  1.1862596 ,  0.03009393],\n",
              "        [ 1.7232269 ,  1.2891829 , -2.5154681 ],\n",
              "        [ 0.520694  ,  1.7829524 , -1.8474839 ]], dtype=float32),\n",
              " array([[ 2.5305254 ,  0.6677166 , -2.6703415 ],\n",
              "        [-0.75246614,  1.4448647 , -0.39169025],\n",
              "        [-0.04935111,  0.8105892 , -0.5280571 ],\n",
              "        [ 1.8428371 ,  1.3412712 , -2.5894723 ],\n",
              "        [ 0.4140049 ,  1.4195975 , -1.4435532 ],\n",
              "        [ 2.0402403 ,  1.3508174 , -2.7506437 ],\n",
              "        [-2.3678923 , -0.20748258,  2.3021197 ],\n",
              "        [-3.2718875 , -0.37051204,  3.2522357 ],\n",
              "        [ 2.793252  ,  0.85518473, -3.034734  ],\n",
              "        [ 2.3176165 ,  0.76709574, -2.3876832 ],\n",
              "        [-2.1712112 ,  1.4098045 ,  0.59666675],\n",
              "        [-2.2512314 , -1.0514964 ,  2.8366897 ],\n",
              "        [ 1.3461179 , -0.21391925, -0.88645256],\n",
              "        [-1.7195734 ,  1.7174162 , -0.03796854],\n",
              "        [ 1.2694045 ,  1.2459949 , -1.9951591 ],\n",
              "        [ 0.94945276,  1.3578492 , -1.8343759 ]], dtype=float32),\n",
              " array([[ 1.4774061 ,  0.6636419 , -1.5207475 ],\n",
              "        [ 0.40762106,  1.120445  , -1.2114617 ],\n",
              "        [ 0.7765491 ,  1.0678482 , -1.3623488 ],\n",
              "        [ 0.6670415 ,  1.7261204 , -1.954257  ],\n",
              "        [-2.005623  , -0.8083207 ,  2.5279636 ],\n",
              "        [ 0.05067914,  1.3504711 , -0.94596094],\n",
              "        [ 1.7687892 ,  0.10768798, -1.3868427 ],\n",
              "        [-3.2111888 , -0.71338224,  3.4322605 ],\n",
              "        [ 1.3872405 ,  1.676112  , -2.4796517 ],\n",
              "        [ 2.7056904 , -0.13170262, -2.0973053 ],\n",
              "        [-0.30721033,  1.6869348 , -1.0105658 ],\n",
              "        [-3.018009  , -0.4586634 ,  3.0244904 ],\n",
              "        [ 1.507022  ,  0.8678026 , -1.962305  ],\n",
              "        [ 0.12604465,  1.5854546 , -1.2444856 ],\n",
              "        [ 0.1814208 ,  0.6758909 , -0.70915973],\n",
              "        [-1.378883  ,  1.409867  , -0.05371187]], dtype=float32),\n",
              " array([[-3.0404062 ,  1.2198914 ,  1.6400015 ],\n",
              "        [ 0.43523985,  1.0704715 , -1.1389248 ],\n",
              "        [-3.3070796 ,  0.3745894 ,  2.5583715 ],\n",
              "        [-2.6797893 ,  1.479883  ,  1.1642184 ],\n",
              "        [ 1.4182781 ,  1.6164652 , -2.5553818 ],\n",
              "        [ 2.375724  ,  0.84958816, -2.690358  ],\n",
              "        [-3.2722716 ,  0.3008527 ,  2.7295182 ],\n",
              "        [ 0.10329539,  1.8548173 , -1.5457785 ],\n",
              "        [-0.40057966,  1.3806561 , -0.63086843],\n",
              "        [ 1.7513195 ,  1.4174451 , -2.5787132 ],\n",
              "        [ 0.7411787 ,  1.8923699 , -2.0417664 ],\n",
              "        [-3.1366603 , -0.8030751 ,  3.464633  ],\n",
              "        [-3.2869976 , -0.45771185,  3.298365  ],\n",
              "        [-1.9848475 ,  0.23164749,  1.3971457 ],\n",
              "        [ 0.82237995,  0.3314474 , -0.8198749 ],\n",
              "        [ 2.840526  ,  0.41674444, -2.6029606 ]], dtype=float32),\n",
              " array([[ 1.2285801 ,  0.7923347 , -1.580106  ],\n",
              "        [ 1.2181195 ,  1.4340335 , -2.062416  ],\n",
              "        [-3.1877723 ,  0.2050606 ,  2.6248317 ],\n",
              "        [-2.996197  , -0.364293  ,  2.9721422 ],\n",
              "        [-1.7114259 ,  1.8259724 , -0.02829291],\n",
              "        [ 3.4502125 , -0.22660746, -2.631585  ],\n",
              "        [ 2.2193916 ,  0.96610343, -2.529076  ],\n",
              "        [ 0.63967294,  1.9090539 , -1.9371396 ],\n",
              "        [ 1.4535052 ,  1.4619123 , -2.4035158 ],\n",
              "        [-1.8878478 , -0.9802811 ,  2.6820312 ],\n",
              "        [-3.0885746 , -0.71814907,  3.3256373 ],\n",
              "        [-0.0550555 ,  1.5619332 , -1.1747432 ],\n",
              "        [ 1.7055365 ,  1.277836  , -2.3766398 ],\n",
              "        [ 1.82067   ,  1.1320742 , -2.3066936 ],\n",
              "        [ 3.4524252 ,  0.29143834, -3.1056256 ],\n",
              "        [-3.2802064 , -0.6236322 ,  3.4531012 ]], dtype=float32),\n",
              " array([[ 3.399702  , -0.5763061 , -2.5196514 ],\n",
              "        [ 1.6528891 ,  1.2956924 , -2.478852  ],\n",
              "        [ 0.5829572 ,  0.6093254 , -0.95949435],\n",
              "        [ 0.21421   ,  1.8056232 , -1.6787325 ],\n",
              "        [ 0.8641799 ,  1.5580848 , -1.9339391 ],\n",
              "        [ 0.4791231 ,  1.3901771 , -1.3205982 ],\n",
              "        [ 3.322165  ,  0.09303803, -2.7920504 ],\n",
              "        [ 0.9593306 ,  1.2178061 , -1.6951848 ],\n",
              "        [-0.77366704,  1.2641608 , -0.28968245],\n",
              "        [-3.2394476 , -0.71455073,  3.4639697 ],\n",
              "        [-0.8348613 ,  2.138881  , -1.0854999 ],\n",
              "        [ 3.6215415 , -0.5922203 , -2.54335   ],\n",
              "        [-2.994925  , -0.48876283,  3.0544524 ],\n",
              "        [-3.4136124 , -0.45749483,  3.3779173 ],\n",
              "        [ 2.7808654 ,  0.7815808 , -2.8775663 ],\n",
              "        [ 3.1276925 ,  0.68766415, -3.171463  ]], dtype=float32),\n",
              " array([[ 3.304963  ,  0.20763713, -2.884931  ],\n",
              "        [ 2.4571784 ,  0.78767323, -2.6762633 ],\n",
              "        [ 0.8122174 ,  1.6482548 , -1.9845372 ],\n",
              "        [-2.5054739 , -0.73052126,  2.8968859 ],\n",
              "        [-3.0726798 ,  1.0910186 ,  1.6909449 ],\n",
              "        [-0.38098368,  0.29569978,  0.35568422],\n",
              "        [-3.2853608 , -0.52537245,  3.3327358 ],\n",
              "        [ 2.4260757 ,  0.4893795 , -2.3475142 ],\n",
              "        [ 3.5482547 , -0.7407508 , -2.370947  ],\n",
              "        [ 2.2750387 ,  0.35162082, -2.0829623 ],\n",
              "        [ 1.7832648 ,  1.0871543 , -2.3146038 ],\n",
              "        [ 1.8873957 ,  1.2837714 , -2.5511088 ],\n",
              "        [ 2.1623836 ,  1.0875796 , -2.6667418 ],\n",
              "        [-3.0704005 , -0.38957253,  3.0918636 ],\n",
              "        [ 0.72232056,  0.3964034 , -0.61192465],\n",
              "        [-3.2681878 ,  0.04892431,  2.720293  ]], dtype=float32),\n",
              " array([[ 2.6625118e-01,  1.3975533e+00, -1.3246455e+00],\n",
              "        [ 3.2325912e+00,  3.3444804e-01, -2.9855011e+00],\n",
              "        [-1.9584091e+00, -1.0705820e+00,  2.6584458e+00],\n",
              "        [-1.7415342e+00, -9.3598759e-01,  2.4713166e+00],\n",
              "        [ 2.7082512e+00,  5.0399584e-01, -2.6178997e+00],\n",
              "        [-3.2549665e+00,  1.3948095e-01,  2.7935243e+00],\n",
              "        [-3.3015468e+00,  1.5402699e-03,  2.8467650e+00],\n",
              "        [-3.1972523e+00, -1.9718531e-01,  2.9993954e+00],\n",
              "        [-1.7501704e+00,  1.9408165e+00, -8.6777903e-02],\n",
              "        [-2.6546566e+00, -9.7518098e-01,  3.2432976e+00],\n",
              "        [-1.6482075e+00, -4.5261770e-02,  1.7532709e+00],\n",
              "        [-4.4344398e-01,  1.1053488e+00, -5.0426245e-01],\n",
              "        [ 2.9751844e+00,  6.8855035e-01, -3.0222619e+00],\n",
              "        [-1.9114244e-01,  1.5680436e+00, -1.1175451e+00],\n",
              "        [-2.8737743e+00, -9.9329537e-01,  3.3296273e+00],\n",
              "        [ 3.3367107e+00,  3.2997724e-01, -3.0607290e+00]], dtype=float32),\n",
              " array([[-0.19601446,  2.0105636 , -1.4155685 ],\n",
              "        [-1.0633631 ,  2.0502677 , -0.8447733 ],\n",
              "        [-0.70309407,  0.35232034,  0.24139255],\n",
              "        [-0.78603286, -1.2343625 ,  1.8395466 ],\n",
              "        [ 2.2456508 ,  0.75882006, -2.4290543 ],\n",
              "        [-3.2250366 , -0.6901058 ,  3.4549763 ],\n",
              "        [ 0.5572493 ,  0.694996  , -0.90260345],\n",
              "        [-0.11679489, -0.20644729,  0.19861127],\n",
              "        [-3.3215606 , -0.32101008,  3.1573067 ],\n",
              "        [ 1.3455316 ,  0.04691051, -1.1321523 ],\n",
              "        [-3.1781254 , -0.7958312 ,  3.4879227 ],\n",
              "        [-2.4924965 , -0.7848201 ,  2.9217634 ],\n",
              "        [-0.79135996,  0.8437759 ,  0.12840855],\n",
              "        [-3.3070028 , -0.65595806,  3.45918   ],\n",
              "        [-3.0974872 , -0.86110324,  3.4830966 ],\n",
              "        [ 0.7438563 ,  0.9934677 , -1.319752  ]], dtype=float32),\n",
              " array([[ 2.178633  ,  0.41279355, -2.0909915 ],\n",
              "        [-3.3661463 , -0.49293882,  3.3968525 ],\n",
              "        [-3.4475887 , -0.17041352,  3.1614327 ],\n",
              "        [-3.1925836 , -0.7211404 ,  3.4322138 ],\n",
              "        [-2.3349488 ,  1.7087603 ,  0.60664636],\n",
              "        [-2.337248  , -0.7114895 ,  2.7491894 ],\n",
              "        [-1.3816606 ,  0.22683556,  1.1539557 ],\n",
              "        [ 3.4006722 , -0.07398929, -2.7606654 ],\n",
              "        [ 3.3228366 ,  0.09057071, -2.7773724 ],\n",
              "        [-3.5630972 ,  0.5562987 ,  2.6640146 ],\n",
              "        [-2.5263708 ,  1.4995375 ,  0.98120135],\n",
              "        [ 1.3982307 ,  1.5876249 , -2.392352  ],\n",
              "        [-2.34078   ,  1.634425  ,  0.55077976],\n",
              "        [-3.0943687 , -0.41901907,  3.0586498 ],\n",
              "        [ 1.0486308 ,  1.1315179 , -1.7565734 ],\n",
              "        [-2.857847  ,  0.9272566 ,  1.7707866 ]], dtype=float32),\n",
              " array([[-2.6347678 ,  0.87999916,  1.5540456 ],\n",
              "        [ 2.2730203 ,  0.66686547, -2.3451993 ],\n",
              "        [-2.765649  ,  0.03320681,  2.4657412 ],\n",
              "        [-2.2734554 ,  1.1549021 ,  0.8087144 ],\n",
              "        [-1.0700151 ,  0.86316854,  0.34007236],\n",
              "        [ 0.045921  ,  1.4362154 , -1.0223802 ],\n",
              "        [ 0.5274098 ,  1.23722   , -1.2272155 ],\n",
              "        [ 0.9365526 ,  1.4499302 , -1.9129972 ],\n",
              "        [ 2.9576762 , -0.7267749 , -1.8363652 ],\n",
              "        [-2.5642335 ,  1.568411  ,  0.96888685],\n",
              "        [ 1.1647991 ,  1.4497658 , -2.1660907 ],\n",
              "        [-3.246596  , -0.5915204 ,  3.380403  ],\n",
              "        [-3.0296922 ,  0.35395896,  2.3899274 ],\n",
              "        [ 1.3270679 ,  0.9610543 , -1.7933888 ],\n",
              "        [ 0.6213051 ,  1.6746539 , -1.8699362 ],\n",
              "        [-3.3192854 , -0.6142729 ,  3.44361   ]], dtype=float32),\n",
              " array([[-2.9490645 ,  1.2310725 ,  1.510457  ],\n",
              "        [ 0.72639066,  1.6134777 , -1.9406163 ],\n",
              "        [-1.4434215 ,  1.6618862 , -0.25695786],\n",
              "        [ 3.555077  , -0.20082831, -2.8323514 ],\n",
              "        [-2.9661129 ,  0.32535398,  2.3610365 ],\n",
              "        [-1.9908401 , -0.5263846 ,  2.3032742 ],\n",
              "        [ 2.3360467 ,  0.6997498 , -2.3867254 ],\n",
              "        [ 0.27127102,  1.3662709 , -1.3222471 ],\n",
              "        [-0.9730937 ,  0.23526147,  0.81217885],\n",
              "        [-0.929686  ,  1.586634  , -0.32544243],\n",
              "        [-3.0209715 , -0.71089846,  3.2865422 ],\n",
              "        [ 1.5679487 ,  1.5971694 , -2.6268876 ],\n",
              "        [ 0.3434337 ,  1.609647  , -1.4973162 ],\n",
              "        [ 0.02355924,  1.4242128 , -1.0673206 ],\n",
              "        [ 0.61185044,  1.4920605 , -1.7421038 ],\n",
              "        [ 1.6939484 ,  1.0806329 , -2.256607  ]], dtype=float32),\n",
              " array([[-3.2377079 , -0.69227904,  3.4798336 ],\n",
              "        [-0.11397342,  1.9148221 , -1.4962859 ],\n",
              "        [ 2.1944263 , -0.39589188, -1.5054963 ],\n",
              "        [ 0.888642  ,  1.6349342 , -1.9487143 ],\n",
              "        [-3.1894882 , -0.65841365,  3.3971126 ],\n",
              "        [ 1.0956857 ,  1.5128344 , -2.0896902 ],\n",
              "        [-3.3813968 , -0.35257939,  3.2836452 ],\n",
              "        [-3.3236496 ,  0.3647307 ,  2.553286  ],\n",
              "        [-1.9367744 , -0.5669147 ,  2.241068  ],\n",
              "        [-0.5503846 ,  2.214926  , -1.4162374 ],\n",
              "        [-0.7283282 ,  1.4297279 , -0.37764293],\n",
              "        [-3.2656257 , -0.5639918 ,  3.3689213 ],\n",
              "        [-3.438556  , -0.34226736,  3.2961402 ],\n",
              "        [ 3.614961  , -0.5050052 , -2.6321526 ],\n",
              "        [-0.64541674,  1.8440632 , -0.9433517 ],\n",
              "        [-3.2352774 , -0.7414629 ,  3.4611626 ]], dtype=float32),\n",
              " array([[-3.241834  , -0.36485466,  3.1565676 ],\n",
              "        [-3.0616295 , -0.45241883,  3.096243  ],\n",
              "        [ 1.3992457 ,  1.13814   , -1.9713663 ],\n",
              "        [ 2.7433114 ,  0.26495323, -2.3712993 ],\n",
              "        [ 3.2442698 ,  0.18721312, -2.8723047 ],\n",
              "        [ 3.5500278 , -0.18709476, -2.834515  ],\n",
              "        [ 2.0209374 ,  0.32308656, -1.9239223 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-3.2453196 ,  0.02738199,  2.7864382 ],\n",
              "        [ 2.589946  ,  0.8981105 , -2.784821  ],\n",
              "        [-1.8023936 ,  1.757713  ,  0.01238757],\n",
              "        [ 2.211663  ,  0.07817898, -1.820531  ],\n",
              "        [ 2.406811  , -0.04163973, -1.932658  ],\n",
              "        [-0.7985553 ,  1.4937819 , -0.48386848],\n",
              "        [-3.3350255 , -0.40939084,  3.324955  ],\n",
              "        [-1.6746641 ,  1.7514273 , -0.06546631]], dtype=float32),\n",
              " array([[-0.27745277,  2.1370082 , -1.5860599 ],\n",
              "        [-0.8531609 ,  2.1335998 , -1.0891123 ],\n",
              "        [-1.7901611 ,  1.9172837 , -0.1390476 ],\n",
              "        [-1.6357057 ,  0.8996116 ,  0.8755127 ],\n",
              "        [ 1.1386592 ,  1.8066891 , -2.4666393 ],\n",
              "        [ 0.17658885,  0.24464676, -0.16749543],\n",
              "        [-1.9626828 ,  1.6934229 ,  0.36663467],\n",
              "        [ 1.4050379 ,  1.1235343 , -2.0655298 ],\n",
              "        [-3.0417683 ,  0.8427134 ,  2.0083106 ],\n",
              "        [ 1.0207511 ,  1.0109707 , -1.6154864 ],\n",
              "        [ 1.2561469 ,  1.2742254 , -1.9942505 ],\n",
              "        [ 3.583069  , -0.0746161 , -2.9530795 ],\n",
              "        [-0.7015081 ,  1.5953025 , -0.7177246 ],\n",
              "        [-1.95031   ,  1.2678705 ,  0.61928886],\n",
              "        [-0.5619607 ,  1.9446166 , -1.0822386 ],\n",
              "        [-3.4477518 , -0.22423382,  3.2090755 ]], dtype=float32),\n",
              " array([[-3.2735102 , -0.5132754 ,  3.3306227 ],\n",
              "        [ 2.6689575 ,  0.3040621 , -2.5753272 ],\n",
              "        [ 2.9044    ,  0.7292708 , -2.9748116 ],\n",
              "        [-0.80625314,  0.51540637,  0.41015512],\n",
              "        [-0.23881748,  1.9960955 , -1.4549224 ],\n",
              "        [-0.23661642,  1.8997368 , -1.4728866 ],\n",
              "        [ 1.6284101 ,  0.7743971 , -1.7600625 ],\n",
              "        [-3.4683907 , -0.25841442,  3.232216  ],\n",
              "        [ 3.114457  ,  0.48157892, -2.9670212 ],\n",
              "        [ 1.8860269 ,  1.382419  , -2.6714368 ],\n",
              "        [ 0.76824784,  1.7180679 , -1.9079477 ],\n",
              "        [ 2.6982718 ,  0.4547923 , -2.4506323 ],\n",
              "        [ 3.141374  ,  0.18857995, -2.7540174 ],\n",
              "        [ 3.6080732 , -0.3043035 , -2.8372297 ],\n",
              "        [ 1.0011927 ,  1.2570868 , -1.9082719 ],\n",
              "        [-0.7339389 ,  1.5177943 , -0.5890511 ]], dtype=float32),\n",
              " array([[ 1.6626652 ,  1.3777711 , -2.4536352 ],\n",
              "        [-3.2406905 , -0.41657987,  3.225102  ],\n",
              "        [-2.724798  , -0.428798  ,  2.8145194 ],\n",
              "        [-3.250391  , -0.6400516 ,  3.4413335 ],\n",
              "        [ 3.3980958 ,  0.21085966, -3.0413287 ],\n",
              "        [ 2.2642257 ,  1.0266217 , -2.6688733 ],\n",
              "        [ 0.4498391 ,  1.9300035 , -2.031071  ],\n",
              "        [ 1.9720651 ,  0.9934869 , -2.2927043 ],\n",
              "        [ 1.7389628 ,  1.3573637 , -2.4439316 ],\n",
              "        [-2.9484794 ,  0.24405146,  2.447865  ],\n",
              "        [-0.04654355,  1.6534256 , -1.3887739 ],\n",
              "        [ 0.19322106,  1.7944824 , -1.5693345 ],\n",
              "        [ 0.9680901 ,  1.5132071 , -1.9364209 ],\n",
              "        [-2.2235487 ,  0.4934037 ,  1.6764431 ],\n",
              "        [ 0.04475715,  1.6702672 , -1.2474167 ],\n",
              "        [ 2.2653458 ,  0.75621974, -2.444427  ]], dtype=float32),\n",
              " array([[-3.46184   ,  0.39719018,  2.7148561 ],\n",
              "        [-1.9864806 ,  0.25931135,  1.5863438 ],\n",
              "        [ 2.199338  ,  0.3001729 , -1.9930727 ],\n",
              "        [ 3.6190624 , -0.12050205, -2.9343312 ],\n",
              "        [-2.2478418 , -0.8086307 ,  2.7340713 ],\n",
              "        [ 1.2965797 ,  1.5566825 , -2.1721466 ],\n",
              "        [ 1.1803375 ,  0.27607104, -1.0832207 ],\n",
              "        [ 1.0154253 ,  1.646599  , -2.1322932 ],\n",
              "        [ 1.8525182 ,  0.35726383, -1.6882706 ],\n",
              "        [ 0.0794508 ,  1.6207151 , -1.2959828 ],\n",
              "        [ 3.6251895 , -0.69919026, -2.5902352 ],\n",
              "        [-1.3478855 ,  1.4361926 ,  0.10028867],\n",
              "        [-2.9434516 ,  1.098777  ,  1.6496534 ],\n",
              "        [ 3.464154  ,  0.26562747, -3.1167092 ],\n",
              "        [ 1.9617641 ,  1.3975819 , -2.7664995 ],\n",
              "        [-0.03748408,  1.5074396 , -1.081953  ]], dtype=float32),\n",
              " array([[-2.563598  ,  0.45611885,  1.838588  ],\n",
              "        [ 2.5287144 ,  0.07669439, -2.0692122 ],\n",
              "        [ 3.271911  , -0.8820629 , -1.993725  ],\n",
              "        [ 2.0519001 ,  0.48313776, -2.0018363 ],\n",
              "        [ 1.2299745 ,  0.94202876, -1.6917806 ],\n",
              "        [ 2.3004782 ,  0.95063084, -2.7071218 ],\n",
              "        [ 1.8532425 ,  1.191656  , -2.3777704 ],\n",
              "        [ 1.9366193 ,  1.1785136 , -2.5618439 ],\n",
              "        [ 3.313553  , -0.14238809, -2.5884218 ],\n",
              "        [ 0.5880836 ,  1.8565427 , -2.0229487 ],\n",
              "        [-1.692266  ,  1.8370428 , -0.11443687],\n",
              "        [-0.6952157 ,  1.8385938 , -0.93305886],\n",
              "        [-3.3919904 , -0.40783438,  3.328586  ],\n",
              "        [-0.57243615,  0.9765838 , -0.19581196],\n",
              "        [-2.2961917 , -0.592273  ,  2.6669023 ],\n",
              "        [-3.13156   , -0.626699  ,  3.311469  ]], dtype=float32),\n",
              " array([[-3.206488  , -0.78288305,  3.4790769 ],\n",
              "        [-2.8488142 ,  0.46518204,  2.171533  ],\n",
              "        [ 0.8023079 ,  1.168174  , -1.5070432 ],\n",
              "        [ 2.571324  ,  0.7298149 , -2.756444  ],\n",
              "        [ 2.1322775 ,  1.1968602 , -2.7753525 ],\n",
              "        [ 2.8245645 ,  0.63582426, -2.8458014 ],\n",
              "        [-2.0733411 ,  1.6092612 ,  0.5072378 ],\n",
              "        [-2.319884  ,  1.6133915 ,  0.6091633 ],\n",
              "        [-1.0570456 ,  1.7666475 , -0.25115776],\n",
              "        [ 3.1872747 , -0.06362433, -2.4931808 ],\n",
              "        [-3.3113751 ,  0.30006784,  2.6460187 ],\n",
              "        [-0.4749279 ,  0.11949961,  0.38394138],\n",
              "        [ 2.824238  ,  0.20608577, -2.452158  ],\n",
              "        [ 1.3034358 ,  1.5491242 , -2.2053404 ],\n",
              "        [-0.5257207 ,  2.0056286 , -1.2934109 ],\n",
              "        [ 0.34239224,  1.2630124 , -1.1999122 ]], dtype=float32),\n",
              " array([[-1.0931183 ,  2.14192   , -0.87059605],\n",
              "        [-0.16120149,  1.0903637 , -0.6397154 ],\n",
              "        [-2.32794   ,  1.5608109 ,  0.7221991 ],\n",
              "        [-0.97121924,  0.9711928 ,  0.07528366],\n",
              "        [-3.4143353 , -0.2628136 ,  3.2259338 ],\n",
              "        [ 2.2005873 ,  1.1574806 , -2.6815577 ],\n",
              "        [ 3.3760254 ,  0.15318602, -2.9466636 ],\n",
              "        [ 2.008146  ,  1.0219346 , -2.4765944 ],\n",
              "        [-3.3411512 , -0.22477064,  3.1491914 ],\n",
              "        [-3.308233  ,  0.60974145,  2.4221473 ],\n",
              "        [-2.577393  , -0.5166938 ,  2.8078098 ],\n",
              "        [-0.0771568 ,  1.5484715 , -1.1173513 ],\n",
              "        [ 0.702373  ,  1.2939882 , -1.5196149 ],\n",
              "        [-1.3186485 ,  1.0237871 ,  0.50433713],\n",
              "        [ 0.20347951,  1.5631939 , -1.4879968 ],\n",
              "        [-3.237665  , -0.7575184 ,  3.4844284 ]], dtype=float32),\n",
              " array([[-2.8519323 ,  0.9724273 ,  1.8526207 ],\n",
              "        [ 3.371741  , -0.42159638, -2.425918  ],\n",
              "        [ 3.28252   , -0.01943946, -2.7227702 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 1.1484975 ,  1.5091617 , -2.1967854 ],\n",
              "        [-3.2349975 , -0.6670108 ,  3.4170024 ],\n",
              "        [ 0.8583599 ,  0.3924854 , -0.91579556],\n",
              "        [-2.2555306 ,  0.11241303,  1.8910731 ],\n",
              "        [ 1.0285393 ,  1.3665043 , -1.9188509 ],\n",
              "        [-1.4523017 ,  1.8627304 , -0.3061114 ],\n",
              "        [-3.40193   ,  0.02589525,  2.8835404 ],\n",
              "        [-2.2618492 ,  1.5527781 ,  0.5901334 ],\n",
              "        [-3.1717849 , -0.8207969 ,  3.5009117 ],\n",
              "        [ 2.4750068 ,  0.7555306 , -2.5881815 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-3.359542  , -0.3300452 ,  3.1959515 ]], dtype=float32),\n",
              " array([[ 2.3704684 ,  1.2928575 , -3.011959  ],\n",
              "        [ 3.1413329 , -0.01964347, -2.5303001 ],\n",
              "        [-3.5112226 , -0.03120422,  3.0856814 ],\n",
              "        [ 0.3374003 ,  1.138641  , -1.1786418 ],\n",
              "        [-0.84621984,  1.897195  , -0.88900566],\n",
              "        [-3.3170469 , -0.12835869,  3.0351233 ],\n",
              "        [ 2.114814  ,  1.1053663 , -2.543117  ],\n",
              "        [ 2.8827343 , -0.3987764 , -2.0189586 ],\n",
              "        [-0.04795066,  1.2833256 , -0.902817  ],\n",
              "        [ 0.01011829,  1.966752  , -1.6817303 ],\n",
              "        [-2.7989714 ,  0.11192792,  2.5282564 ],\n",
              "        [-3.236822  , -0.2617521 ,  3.070548  ],\n",
              "        [ 1.8061855 ,  1.1611491 , -2.4117854 ],\n",
              "        [-3.4861562 , -0.25924283,  3.2674289 ],\n",
              "        [-2.8448207 , -0.31497705,  2.8418393 ],\n",
              "        [-2.8217003 , -1.0596853 ,  3.4411874 ]], dtype=float32),\n",
              " array([[-3.268873  , -0.3696317 ,  3.19775   ],\n",
              "        [ 2.2191281 ,  1.2296731 , -2.8155327 ],\n",
              "        [-3.301524  , -0.51426435,  3.3690736 ],\n",
              "        [ 3.343765  ,  0.47962344, -3.1928735 ],\n",
              "        [ 3.0481703 ,  0.33309928, -2.794448  ],\n",
              "        [-3.3550913 , -0.23898533,  3.1645932 ],\n",
              "        [-3.2749655 , -0.31225887,  3.1726415 ],\n",
              "        [ 1.7965876 ,  1.2471575 , -2.3831487 ],\n",
              "        [ 2.4928453 ,  0.7423605 , -2.7016587 ],\n",
              "        [ 1.806327  ,  1.0919317 , -2.3515115 ],\n",
              "        [ 1.0897719 ,  1.3534753 , -1.9691687 ],\n",
              "        [ 0.7333346 ,  0.6967183 , -1.1580422 ],\n",
              "        [ 2.1877615 ,  1.0633578 , -2.6570034 ],\n",
              "        [ 3.5762498 , -0.4775552 , -2.6204238 ],\n",
              "        [ 0.26420432,  1.7443825 , -1.6332895 ],\n",
              "        [-1.5163766 , -0.94968885,  2.2871947 ]], dtype=float32),\n",
              " array([[-1.1607167 ,  1.9100935 , -0.47938308],\n",
              "        [ 0.1752199 ,  1.2384046 , -1.2032866 ],\n",
              "        [ 1.6065696 ,  1.4420673 , -2.5366442 ],\n",
              "        [-1.6587682 ,  1.6541798 ,  0.00491725],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-1.1046801 ,  1.6744531 , -0.44268775],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [-0.27430245,  1.442011  , -0.790913  ],\n",
              "        [-2.4864233 ,  0.0895208 ,  2.0167794 ],\n",
              "        [-3.2934902 , -0.5328486 ,  3.3820825 ],\n",
              "        [-1.5741874 ,  1.4499997 ,  0.18091232],\n",
              "        [ 2.097816  ,  1.3140565 , -2.7961593 ],\n",
              "        [-1.6792644 ,  1.5227407 ,  0.17802346],\n",
              "        [-1.6797966 , -0.3473628 ,  1.8711754 ],\n",
              "        [-1.3022393 ,  1.6339451 , -0.1220578 ],\n",
              "        [ 0.8256951 ,  1.6142389 , -2.1160603 ]], dtype=float32),\n",
              " array([[ 1.5111247 , -1.0749449 , -0.33764553],\n",
              "        [-2.1177642 ,  0.44740793,  1.6526468 ],\n",
              "        [-1.0006765 , -1.2977593 ,  2.019425  ],\n",
              "        [-1.5686175 ,  2.051739  , -0.39249063],\n",
              "        [ 0.5958803 ,  1.2454411 , -1.4422379 ],\n",
              "        [ 1.4338528 , -0.19345489, -1.0366361 ],\n",
              "        [ 0.5505748 ,  1.8515397 , -2.1321905 ],\n",
              "        [ 0.49842653,  1.8580613 , -1.9397533 ],\n",
              "        [-3.3411658 , -0.4927861 ,  3.3657396 ],\n",
              "        [-2.4740498 ,  1.0097111 ,  1.3136853 ],\n",
              "        [ 1.7698431 ,  1.2340935 , -2.4503598 ],\n",
              "        [-2.9471638 , -0.95520544,  3.4375787 ],\n",
              "        [-3.3785365 , -0.38678738,  3.3079433 ],\n",
              "        [-1.9862353 ,  0.46308464,  1.5912302 ],\n",
              "        [ 1.1767457 ,  1.451306  , -2.062608  ],\n",
              "        [-1.9476916 ,  1.2983111 ,  0.6441902 ]], dtype=float32),\n",
              " array([[ 3.4985168 , -0.5969369 , -2.582137  ],\n",
              "        [ 3.5984495 , -0.7992089 , -2.468267  ],\n",
              "        [ 2.8872705 ,  0.6794699 , -2.854669  ],\n",
              "        [-2.8631003 ,  0.91966   ,  1.7220755 ],\n",
              "        [ 3.181432  ,  0.4013368 , -2.9210165 ],\n",
              "        [-2.0743072 ,  0.05511201,  1.6878451 ],\n",
              "        [ 1.8161052 ,  0.78073335, -2.088197  ],\n",
              "        [ 2.5550663 ,  0.8531846 , -2.7739112 ],\n",
              "        [ 2.7603095 ,  0.5819596 , -2.7888546 ],\n",
              "        [ 1.4972144 ,  0.7886097 , -1.8042951 ],\n",
              "        [ 1.4264318 ,  1.2339252 , -2.1637206 ],\n",
              "        [-2.0185213 , -0.03874533,  1.9809141 ],\n",
              "        [ 2.0023456 ,  1.1935886 , -2.4584901 ],\n",
              "        [-2.775408  , -0.4450144 ,  2.959256  ],\n",
              "        [ 3.5279539 , -0.22279447, -2.7272825 ],\n",
              "        [ 1.3846303 ,  1.0725099 , -2.0111241 ]], dtype=float32),\n",
              " array([[-3.3616    , -0.45761773,  3.3480072 ],\n",
              "        [ 1.6510986 ,  0.8691021 , -2.0410757 ],\n",
              "        [ 0.72999805,  1.2795849 , -1.6087644 ],\n",
              "        [-3.2481186 ,  0.44602475,  2.414758  ],\n",
              "        [ 3.3666475 , -0.36091065, -2.55434   ],\n",
              "        [-0.34887123,  1.6204566 , -0.7937687 ],\n",
              "        [ 1.1334356 ,  1.40701   , -2.0521975 ],\n",
              "        [ 2.0217264 ,  1.1022753 , -2.4742012 ],\n",
              "        [-2.9899888 ,  1.0202385 ,  1.8104885 ],\n",
              "        [-2.4379742 ,  1.6629802 ,  0.8489661 ],\n",
              "        [-0.5859094 ,  2.0929728 , -1.1719916 ],\n",
              "        [ 2.1428475 ,  0.12582098, -1.8739192 ],\n",
              "        [ 1.1912502 ,  0.8261433 , -1.7310271 ],\n",
              "        [ 2.0482597 ,  1.141922  , -2.5638862 ],\n",
              "        [-3.2189696 , -0.6905097 ,  3.4567275 ],\n",
              "        [-1.1548249 ,  2.1718364 , -0.9183545 ]], dtype=float32),\n",
              " array([[-3.4566388 , -0.26383004,  3.2518797 ],\n",
              "        [-3.273119  , -0.60636467,  3.4213843 ],\n",
              "        [-2.989935  , -0.01793985,  2.786879  ],\n",
              "        [-2.464049  ,  0.6690668 ,  1.6071832 ],\n",
              "        [-3.2038155 , -0.43365183,  3.1830075 ],\n",
              "        [-0.7663233 ,  1.7802125 , -0.76870704],\n",
              "        [ 2.5457926 ,  0.97981334, -2.8690188 ],\n",
              "        [ 2.5254521 ,  0.452972  , -2.4438417 ],\n",
              "        [ 3.390428  , -0.5890618 , -2.4174213 ],\n",
              "        [ 1.5744303 ,  1.3859569 , -2.3698301 ],\n",
              "        [ 3.6530216 , -0.6032326 , -2.557343  ],\n",
              "        [-1.2368394 , -0.43872508,  1.6849518 ],\n",
              "        [-3.3574796 , -0.4904594 ,  3.3648973 ],\n",
              "        [ 3.0803206 ,  0.67108434, -3.1443639 ],\n",
              "        [ 1.2217094 ,  0.9172184 , -1.7705276 ],\n",
              "        [ 0.8648794 ,  1.5799507 , -1.9201858 ]], dtype=float32),\n",
              " array([[ 2.9557931 ,  0.40095282, -2.7389507 ],\n",
              "        [-2.9925706 , -0.11175945,  2.6635861 ],\n",
              "        [-0.96733713,  1.6798962 , -0.43682355],\n",
              "        [-3.3276618 , -0.63511306,  3.4458978 ],\n",
              "        [-2.902662  ,  1.3921777 ,  1.4390244 ],\n",
              "        [ 2.3473608 ,  0.5498122 , -2.3343167 ],\n",
              "        [ 0.5881302 ,  1.3671921 , -1.5994306 ],\n",
              "        [ 2.2491271 ,  1.1536154 , -2.8117466 ],\n",
              "        [-2.3679907 , -0.8807589 ,  2.8910184 ],\n",
              "        [-3.46009   , -0.2764389 ,  3.236365  ],\n",
              "        [ 1.6329385 ,  1.1997069 , -2.2502666 ],\n",
              "        [ 2.6648834 ,  0.46308658, -2.4486785 ],\n",
              "        [-2.8416028 , -1.0318227 ,  3.4188135 ],\n",
              "        [ 1.2958711 ,  1.3842546 , -2.100812  ],\n",
              "        [ 1.2700633 ,  1.0187193 , -1.8938453 ],\n",
              "        [-3.1085799 , -0.8346212 ,  3.4834476 ]], dtype=float32),\n",
              " array([[-3.3202999 , -0.501374  ,  3.4008355 ],\n",
              "        [ 3.311804  ,  0.2512339 , -2.932448  ],\n",
              "        [-2.861862  ,  0.93451446,  1.6367921 ],\n",
              "        [-0.47684944,  1.025565  , -0.18039057],\n",
              "        [ 3.3981693 ,  0.2502334 , -2.9886408 ],\n",
              "        [-3.1356761 , -0.7826155 ,  3.4408112 ],\n",
              "        [-3.2114708 , -0.2846623 ,  3.120237  ],\n",
              "        [ 3.5545578 , -0.57762384, -2.4374795 ],\n",
              "        [ 2.1176832 ,  1.2508596 , -2.813301  ],\n",
              "        [-2.7644289 , -0.51549995,  2.8547118 ],\n",
              "        [-2.5380723 ,  1.0068444 ,  1.3628552 ],\n",
              "        [-3.2508423 , -0.58913696,  3.3801322 ],\n",
              "        [ 2.187111  ,  0.9328784 , -2.5213118 ],\n",
              "        [-0.24347353,  1.0681255 , -0.5219093 ],\n",
              "        [ 2.228326  ,  1.1107087 , -2.7009373 ],\n",
              "        [ 2.0423162 ,  0.05490781, -1.775454  ]], dtype=float32),\n",
              " array([[-8.0703187e-01,  1.2872454e+00, -2.0340167e-01],\n",
              "        [-2.4061766e+00,  1.5020431e+00,  8.1222296e-01],\n",
              "        [-3.3305387e+00,  7.4950166e-02,  2.8119249e+00],\n",
              "        [ 3.2835379e-01,  1.4162925e+00, -1.4247512e+00],\n",
              "        [-2.7806962e+00,  1.4132822e-03,  2.5457017e+00],\n",
              "        [-8.8778788e-01,  2.0772767e+00, -8.4624499e-01],\n",
              "        [ 2.4246027e+00, -6.3991915e-03, -1.9416416e+00],\n",
              "        [ 1.5325736e+00,  1.0407315e+00, -2.1075699e+00],\n",
              "        [ 3.2539244e+00,  2.8024328e-01, -2.9217618e+00],\n",
              "        [-3.0799141e+00, -9.3822145e-01,  3.5019343e+00],\n",
              "        [ 1.7874619e+00,  1.1586751e+00, -2.2639561e+00],\n",
              "        [-2.8126245e+00, -2.1889213e-01,  2.6286592e+00],\n",
              "        [-3.3132880e+00, -5.8008498e-01,  3.4060855e+00],\n",
              "        [-3.2878072e+00,  6.2971282e-01,  2.3459787e+00],\n",
              "        [-1.6831552e+00,  6.3115281e-01,  1.0983472e+00],\n",
              "        [-3.2454877e+00, -3.0230597e-01,  3.0834360e+00]], dtype=float32),\n",
              " array([[ 1.7039477 ,  1.0750769 , -2.3136961 ],\n",
              "        [-3.2125773 , -0.6511283 ,  3.3818405 ],\n",
              "        [ 0.96041065,  1.1686473 , -1.5329236 ],\n",
              "        [ 2.7219536 ,  0.68622714, -2.6820498 ],\n",
              "        [ 2.6691263 ,  1.0316006 , -2.9976063 ],\n",
              "        [ 3.200914  ,  0.23851737, -2.8836257 ],\n",
              "        [ 3.380173  ,  0.22005239, -2.9543066 ],\n",
              "        [ 0.23963757,  1.6805967 , -1.480803  ],\n",
              "        [ 0.61355263,  1.3335208 , -1.5323126 ],\n",
              "        [ 1.6043271 , -0.8961584 , -0.4507199 ],\n",
              "        [-1.6891624 ,  1.7744352 , -0.11446113],\n",
              "        [-1.3723468 ,  1.737408  , -0.18431635],\n",
              "        [ 0.90380573,  1.7091125 , -2.080862  ],\n",
              "        [-0.6770156 ,  0.19176131,  0.48284453],\n",
              "        [ 0.5189879 ,  0.9020332 , -1.0541382 ],\n",
              "        [ 0.5422109 ,  0.62873805, -0.9502981 ]], dtype=float32),\n",
              " array([[ 2.3505054 , -0.6348839 , -1.4516947 ],\n",
              "        [ 1.9480869 ,  0.88158786, -2.2493443 ],\n",
              "        [-1.0625397 ,  1.515946  , -0.3148836 ],\n",
              "        [-1.609015  ,  1.7489928 ,  0.12384707],\n",
              "        [ 1.5812687 ,  1.4523517 , -2.4828982 ],\n",
              "        [-3.5169182 ,  0.05066105,  3.060847  ],\n",
              "        [-2.247403  , -1.134552  ,  2.8746152 ],\n",
              "        [-0.29509613,  0.0087543 ,  0.32497483],\n",
              "        [ 1.4960922 ,  0.02693794, -1.1833802 ],\n",
              "        [-3.420806  , -0.3868871 ,  3.3283057 ],\n",
              "        [-0.31662866,  1.158993  , -0.44976914],\n",
              "        [ 1.7679    ,  1.4624877 , -2.5674996 ],\n",
              "        [-3.4017284 , -0.33463454,  3.271984  ],\n",
              "        [-0.7638885 ,  1.8620286 , -0.9580515 ],\n",
              "        [-3.3496702 , -0.5326175 ,  3.375268  ],\n",
              "        [ 0.84705526,  0.2700124 , -0.90963316]], dtype=float32),\n",
              " array([[-2.9611776 ,  0.82027704,  1.9135137 ],\n",
              "        [-2.6629646 ,  0.2732668 ,  2.236495  ],\n",
              "        [-3.2468216 , -0.59340227,  3.3832226 ],\n",
              "        [ 0.47731695,  1.5391641 , -1.6372535 ],\n",
              "        [-3.2114458 , -0.20092824,  3.017407  ],\n",
              "        [-0.3170621 , -0.53897715,  1.0535893 ],\n",
              "        [-2.9633565 , -1.0116421 ,  3.505372  ],\n",
              "        [-3.0909038 ,  0.39820614,  2.2919369 ],\n",
              "        [-3.2351933 , -0.65987   ,  3.4380164 ],\n",
              "        [-3.3077323 , -0.378962  ,  3.1888037 ],\n",
              "        [-3.2719266 , -0.6252128 ,  3.430861  ],\n",
              "        [-1.8667502 ,  1.5001746 ,  0.29377884],\n",
              "        [ 1.3883158 ,  1.575118  , -2.421099  ],\n",
              "        [-3.219924  , -0.6654285 ,  3.4243765 ],\n",
              "        [ 2.888162  ,  0.47209668, -2.8015838 ],\n",
              "        [-1.7068034 ,  0.90221024,  0.80690324]], dtype=float32),\n",
              " array([[ 1.589032  ,  0.02268219, -1.1855434 ],\n",
              "        [ 0.36726692,  1.8547574 , -1.75295   ],\n",
              "        [ 0.92292064,  1.3571266 , -1.7953515 ],\n",
              "        [ 3.281202  ,  0.16873898, -2.8149858 ],\n",
              "        [-0.04374371,  1.5786628 , -1.1213441 ],\n",
              "        [ 3.48922   , -0.3655272 , -2.5965636 ],\n",
              "        [ 1.8953949 ,  1.1670419 , -2.517607  ],\n",
              "        [-2.5132935 , -0.68193305,  2.8865864 ],\n",
              "        [ 3.3032243 , -0.36150566, -2.454287  ],\n",
              "        [ 3.088156  ,  0.20918527, -2.706885  ],\n",
              "        [ 1.8763983 ,  0.96623385, -2.357215  ],\n",
              "        [ 1.3420807 ,  0.7943505 , -1.6796021 ],\n",
              "        [ 1.5033393 ,  1.0209726 , -1.9952657 ],\n",
              "        [-2.443451  ,  0.2092155 ,  2.0628889 ],\n",
              "        [-3.3011253 , -0.4867321 ,  3.322905  ],\n",
              "        [-3.147527  , -0.5362818 ,  3.244536  ]], dtype=float32),\n",
              " array([[-3.2443955 , -0.67559695,  3.4503493 ],\n",
              "        [-0.660186  ,  1.0414209 , -0.17990218],\n",
              "        [-3.3335698 , -0.59777427,  3.4423504 ],\n",
              "        [ 0.42316282,  1.5840069 , -1.6080658 ],\n",
              "        [ 1.2908028 ,  1.679371  , -2.3404534 ],\n",
              "        [ 1.1792387 ,  1.3922976 , -2.0351872 ],\n",
              "        [ 0.35430124,  1.7775222 , -1.8308176 ],\n",
              "        [-3.3859017 , -0.17357498,  3.1428523 ],\n",
              "        [ 3.3297298 , -0.17101824, -2.6841226 ],\n",
              "        [-1.9292942 ,  0.10077079,  1.641897  ],\n",
              "        [-3.2450104 ,  0.45693234,  2.393721  ],\n",
              "        [ 1.4086605 ,  1.2228624 , -2.1260612 ],\n",
              "        [-0.7472956 ,  1.5171864 , -0.4893824 ],\n",
              "        [-3.4024112 ,  0.38507846,  2.6789322 ],\n",
              "        [ 1.1278763 ,  0.1831595 , -0.9369129 ],\n",
              "        [ 3.1196663 ,  0.5284579 , -3.0817275 ]], dtype=float32),\n",
              " array([[-0.28524616,  1.5572932 , -0.90955627],\n",
              "        [ 0.48163998,  1.4432741 , -1.5233196 ],\n",
              "        [-3.1770487 , -0.760833  ,  3.455554  ],\n",
              "        [-1.8929144 ,  0.11550643,  1.629034  ],\n",
              "        [ 2.0372167 ,  1.189958  , -2.5768504 ],\n",
              "        [-0.7968729 ,  1.8225417 , -0.8433095 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-3.1256855 , -0.32740015,  3.09597   ],\n",
              "        [-3.0622597 , -0.68779093,  3.3409376 ],\n",
              "        [ 1.7406434 ,  1.0176445 , -2.277278  ],\n",
              "        [-3.2598612 , -0.1855371 ,  3.0654154 ],\n",
              "        [-2.194495  ,  1.7098736 ,  0.6613909 ],\n",
              "        [-0.03371217,  1.9186605 , -1.4232382 ],\n",
              "        [-3.4332352 , -0.3294786 ,  3.239803  ],\n",
              "        [ 2.4989035 ,  0.85309476, -2.7890992 ],\n",
              "        [-3.2943652 , -0.5574713 ,  3.3931847 ]], dtype=float32),\n",
              " array([[-0.501971  ,  1.4228698 , -0.5182119 ],\n",
              "        [-3.3528247 , -0.51494396,  3.4264655 ],\n",
              "        [-2.9063685 , -0.26884994,  2.818984  ],\n",
              "        [ 1.0348333 , -0.5515418 , -0.39828515],\n",
              "        [-3.200952  , -0.7496177 ,  3.446454  ],\n",
              "        [-3.312371  , -0.61412627,  3.450664  ],\n",
              "        [-3.0666502 ,  0.9091994 ,  1.9103307 ],\n",
              "        [ 2.8664277 ,  0.6050254 , -2.8283648 ],\n",
              "        [ 1.6867687 ,  0.8655116 , -2.091656  ],\n",
              "        [ 1.8308958 , -0.2724736 , -1.27435   ],\n",
              "        [ 3.5249345 ,  0.02083158, -2.9670548 ],\n",
              "        [ 1.4582003 ,  0.85241807, -1.7637832 ],\n",
              "        [ 0.14010563,  0.8518174 , -0.6383499 ],\n",
              "        [-3.4407241 , -0.255147  ,  3.2179902 ],\n",
              "        [ 1.4862422 ,  1.3140856 , -2.1932821 ],\n",
              "        [ 2.453335  ,  0.09932241, -2.077627  ]], dtype=float32),\n",
              " array([[-0.40812874,  0.05933985,  0.36355823],\n",
              "        [-1.1847383 ,  1.5934485 , -0.2552004 ],\n",
              "        [ 1.2280694 ,  1.1070945 , -1.870283  ],\n",
              "        [ 1.4717852 ,  0.9369582 , -1.9287643 ],\n",
              "        [ 1.0177573 ,  1.4258796 , -1.9263252 ],\n",
              "        [-3.3143246 , -0.343146  ,  3.2077172 ],\n",
              "        [ 0.257625  ,  0.37411818, -0.46783426],\n",
              "        [-3.1239717 ,  0.6728716 ,  2.1876101 ],\n",
              "        [ 3.4422166 , -0.86809033, -2.2537024 ],\n",
              "        [ 1.2558144 ,  1.4358832 , -2.1444178 ],\n",
              "        [ 2.5258143 ,  1.0480851 , -2.8417697 ],\n",
              "        [ 3.5151968 , -0.13831587, -2.8448324 ],\n",
              "        [ 3.0361078 ,  0.52896154, -2.9042788 ],\n",
              "        [-3.0756156 , -0.33529624,  3.0627427 ],\n",
              "        [-0.51573753, -0.26431113,  0.93266225],\n",
              "        [ 1.3100144 ,  0.4654446 , -1.4296497 ]], dtype=float32),\n",
              " array([[-3.161914  , -0.7654594 ,  3.4492302 ],\n",
              "        [ 1.4298235 ,  0.33632994, -1.3465993 ],\n",
              "        [ 2.4301212 ,  0.70680785, -2.53872   ],\n",
              "        [ 1.2806524 ,  1.3381442 , -2.031933  ],\n",
              "        [-3.3545504 ,  0.30504587,  2.7233663 ],\n",
              "        [-1.9631152 ,  1.240696  ,  0.73896325],\n",
              "        [ 3.2101488 ,  0.4439592 , -3.0532517 ],\n",
              "        [ 2.8009026 ,  0.88039917, -2.9647882 ],\n",
              "        [-3.4037256 , -0.460184  ,  3.3469691 ],\n",
              "        [ 1.6215935 ,  1.2178084 , -2.316454  ],\n",
              "        [-1.9877659 ,  0.7018883 ,  1.1288306 ],\n",
              "        [-3.3641496 , -0.55910033,  3.3997152 ],\n",
              "        [ 3.6902266 , -0.48378733, -2.6968856 ],\n",
              "        [-3.4362547 ,  0.23898146,  2.8309336 ],\n",
              "        [-3.2251503 ,  0.5788171 ,  2.3384495 ],\n",
              "        [ 0.24555406,  1.560306  , -1.3146045 ]], dtype=float32),\n",
              " array([[ 1.4830067 ,  1.5241328 , -2.534029  ],\n",
              "        [ 2.9099941 ,  0.5975569 , -2.8863542 ],\n",
              "        [ 2.7044742 ,  0.64091015, -2.7459397 ],\n",
              "        [ 1.0611273 ,  1.8301219 , -2.3633523 ],\n",
              "        [-3.3625987 , -0.5012099 ,  3.366993  ],\n",
              "        [ 2.746111  ,  0.89611   , -2.9382148 ],\n",
              "        [ 3.499734  , -0.9978112 , -2.2109296 ],\n",
              "        [-3.4944937 , -0.07000997,  3.1030352 ],\n",
              "        [ 0.94348496,  1.7859942 , -2.264761  ],\n",
              "        [-3.2222753 , -0.63037467,  3.357181  ],\n",
              "        [-3.3437693 , -0.25471753,  3.1431274 ],\n",
              "        [ 0.24272378,  1.6976005 , -1.5129888 ],\n",
              "        [ 2.8155048 ,  0.61000234, -2.8236623 ],\n",
              "        [ 3.4422166 , -0.86809033, -2.2537024 ],\n",
              "        [-1.257564  ,  1.661524  , -0.0591207 ],\n",
              "        [ 2.729574  ,  0.91588306, -2.9713593 ]], dtype=float32),\n",
              " array([[-1.2771031 ,  0.54540324,  0.8357998 ],\n",
              "        [-2.4820025 ,  1.3723291 ,  0.95666575],\n",
              "        [ 3.3461947 , -0.01135954, -2.7631114 ],\n",
              "        [ 2.8955302 ,  0.43179724, -2.7647748 ],\n",
              "        [ 1.8286768 ,  1.3325657 , -2.5318916 ],\n",
              "        [-1.8017653 ,  1.4338859 ,  0.42392257],\n",
              "        [-1.157406  ,  1.2330583 ,  0.101153  ],\n",
              "        [ 2.679791  ,  0.528017  , -2.54742   ],\n",
              "        [-2.456879  , -1.0731839 ,  3.0722742 ],\n",
              "        [ 2.4086583 ,  0.3622946 , -2.232238  ],\n",
              "        [-0.8126729 ,  1.726044  , -0.66097677],\n",
              "        [-0.20264846,  0.5646938 , -0.1685561 ],\n",
              "        [ 0.04682076,  1.8434097 , -1.6621344 ],\n",
              "        [ 0.19745338,  1.1072849 , -0.9623373 ],\n",
              "        [-3.3290384 , -0.46228823,  3.295873  ],\n",
              "        [-3.0271995 , -0.65471405,  3.2469506 ]], dtype=float32),\n",
              " array([[-3.2875698 ,  0.3541352 ,  2.6575906 ],\n",
              "        [ 3.0227087 , -0.13892905, -2.2740312 ],\n",
              "        [-2.920079  , -0.55541927,  3.1100385 ],\n",
              "        [-2.0722413 , -0.53091645,  2.1244643 ],\n",
              "        [ 0.64900285,  1.8025173 , -2.0711613 ],\n",
              "        [ 0.13265297,  1.3605272 , -1.1081787 ],\n",
              "        [ 0.1768479 ,  1.2213088 , -1.0270911 ],\n",
              "        [-3.1219206 , -0.37232277,  3.036045  ],\n",
              "        [-0.6189899 ,  1.7382041 , -0.99300545],\n",
              "        [ 3.382076  ,  0.35702562, -3.1324477 ],\n",
              "        [-3.1214974 ,  0.16700695,  2.704972  ],\n",
              "        [-3.2294762 , -0.12321088,  2.935995  ],\n",
              "        [ 0.6056449 ,  1.6103799 , -1.8425789 ],\n",
              "        [ 1.3098272 ,  1.374601  , -2.153748  ],\n",
              "        [ 1.5725693 ,  1.1219842 , -2.0723312 ],\n",
              "        [ 0.20193085,  0.8123568 , -0.73417574]], dtype=float32),\n",
              " array([[-1.574374  ,  1.7847184 ,  0.05535552],\n",
              "        [-0.8017633 ,  1.6382178 , -0.77063185],\n",
              "        [ 1.5033475 ,  1.3557502 , -2.3285553 ],\n",
              "        [ 2.8414006 , -0.06227291, -2.3184743 ],\n",
              "        [-0.19649142,  1.2340018 , -0.7187003 ],\n",
              "        [-3.3032882 , -0.4025859 ,  3.2507415 ],\n",
              "        [ 3.6172006 , -0.7164212 , -2.4136617 ],\n",
              "        [ 2.62787   ,  1.0872265 , -3.004909  ],\n",
              "        [ 2.4021766 , -0.26896426, -1.7316705 ],\n",
              "        [ 1.1475601 ,  0.7239579 , -1.477226  ],\n",
              "        [ 3.312084  ,  0.09269085, -2.8302581 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [-2.9499772 ,  1.0194465 ,  1.7412866 ],\n",
              "        [ 0.05347245,  1.5387448 , -1.2056444 ],\n",
              "        [ 0.9379203 ,  0.3317497 , -0.8331496 ],\n",
              "        [ 1.182424  ,  1.204409  , -1.9150684 ]], dtype=float32),\n",
              " array([[ 1.502206  ,  1.4491234 , -2.3476975 ],\n",
              "        [ 2.2205856 ,  1.0744171 , -2.7256403 ],\n",
              "        [ 2.8516314 ,  0.74420136, -2.8259187 ],\n",
              "        [ 0.8795404 ,  1.6017244 , -1.924556  ],\n",
              "        [ 1.1641765 ,  1.4813403 , -2.164943  ],\n",
              "        [-1.2110761 , -0.79883176,  1.9171329 ],\n",
              "        [-3.2060986 , -0.77115726,  3.4796743 ],\n",
              "        [ 2.4895175 ,  0.22056243, -2.204025  ],\n",
              "        [-1.9584931 ,  1.8962518 ,  0.08692741],\n",
              "        [ 1.8538576 ,  1.2684636 , -2.5420294 ],\n",
              "        [ 2.321982  ,  1.3033377 , -2.8865347 ],\n",
              "        [ 1.5842005 ,  1.617041  , -2.6488953 ],\n",
              "        [ 1.806477  ,  1.3077135 , -2.5516458 ],\n",
              "        [-3.1931908 , -0.53758276,  3.2850475 ],\n",
              "        [ 0.40541232,  1.6646384 , -1.6322095 ],\n",
              "        [-0.2544289 ,  1.6146418 , -0.9451654 ]], dtype=float32),\n",
              " array([[-3.4539058 , -0.37684885,  3.3500352 ],\n",
              "        [-1.248984  ,  1.5000259 , -0.09701971],\n",
              "        [-3.367605  , -0.48066816,  3.3234813 ],\n",
              "        [ 1.3230633 ,  1.6653818 , -2.4094682 ],\n",
              "        [ 2.486523  ,  1.1102272 , -2.875471  ],\n",
              "        [-1.4434456 ,  1.6341249 ,  0.08136567],\n",
              "        [ 2.849958  ,  0.4447081 , -2.6239836 ],\n",
              "        [-3.343446  , -0.19063243,  3.0855908 ],\n",
              "        [-3.2582734 , -0.43269077,  3.2727857 ],\n",
              "        [-0.9239084 , -0.57928073,  1.5441968 ],\n",
              "        [-3.140807  , -0.8115875 ,  3.4711654 ],\n",
              "        [ 2.1669924 ,  1.2021579 , -2.7202969 ],\n",
              "        [-0.31788597,  0.5241129 ,  0.01322969],\n",
              "        [-1.7230514 ,  1.4796476 ,  0.18024158],\n",
              "        [ 0.26054877,  1.6891462 , -1.4979889 ],\n",
              "        [ 2.4492939 ,  0.28150016, -2.3383298 ]], dtype=float32),\n",
              " array([[ 0.05654664,  0.43538904, -0.2724476 ],\n",
              "        [-0.8798284 ,  1.4397961 , -0.5260082 ],\n",
              "        [-0.07750164,  0.79646665, -0.4754398 ],\n",
              "        [ 1.8667558 ,  1.0604737 , -2.4072015 ],\n",
              "        [-2.5021777 ,  1.3150903 ,  1.1818167 ],\n",
              "        [-3.475814  ,  0.19522321,  2.8204195 ],\n",
              "        [ 2.1938798 ,  0.8833796 , -2.5048587 ],\n",
              "        [ 1.7212936 ,  1.5287126 , -2.7256374 ],\n",
              "        [-3.1558652 ,  0.0123037 ,  2.8970127 ],\n",
              "        [ 3.1991024 , -1.0151654 , -1.9190304 ],\n",
              "        [-3.4048245 , -0.44141147,  3.391066  ],\n",
              "        [ 2.3348925 ,  0.93080986, -2.6186466 ],\n",
              "        [-2.8987668 ,  1.320537  ,  1.4851885 ],\n",
              "        [ 0.27229097,  0.89739406, -0.7664845 ],\n",
              "        [-3.2728164 , -0.6500685 ,  3.4488122 ],\n",
              "        [-3.2154653 , -0.7212339 ,  3.4638834 ]], dtype=float32),\n",
              " array([[-3.320386  , -0.6394893 ,  3.4526658 ],\n",
              "        [-1.4729989 ,  1.0810939 ,  0.40388379],\n",
              "        [-2.8911574 , -0.15677734,  2.7080758 ],\n",
              "        [ 0.46326295,  0.8778658 , -1.1195052 ],\n",
              "        [ 1.0339102 ,  1.4574339 , -2.0262394 ],\n",
              "        [-3.2893322 ,  0.78125703,  2.2490458 ],\n",
              "        [-3.3303223 , -0.54047275,  3.4112492 ],\n",
              "        [-1.6739441 ,  1.5961221 ,  0.2666765 ],\n",
              "        [ 1.5679005 ,  1.257789  , -2.272083  ],\n",
              "        [-3.1624422 , -0.6876504 ,  3.396572  ],\n",
              "        [ 1.2978505 ,  1.8059981 , -2.572673  ],\n",
              "        [ 1.1831162 , -0.07277927, -0.8870708 ],\n",
              "        [-1.2141839 ,  1.3751085 ,  0.01232074],\n",
              "        [ 0.27785695, -1.7922616 ,  1.2074472 ],\n",
              "        [-2.731644  , -0.46717456,  2.8353846 ],\n",
              "        [-0.08854773,  1.9925455 , -1.5773392 ]], dtype=float32),\n",
              " array([[ 2.4429579 ,  1.0364885 , -2.8541808 ],\n",
              "        [-2.0565188 ,  1.9165989 ,  0.17594588],\n",
              "        [-1.2484379 , -1.1185457 ,  2.2923503 ],\n",
              "        [ 1.8323551 ,  1.1084477 , -2.4786503 ],\n",
              "        [-3.217489  , -0.652096  ,  3.3862832 ],\n",
              "        [ 3.3752067 ,  0.20987971, -2.9484396 ],\n",
              "        [ 3.2239473 ,  0.48131582, -3.0401354 ],\n",
              "        [ 0.57097656,  0.6961198 , -0.93229324],\n",
              "        [-0.13222456,  1.7331973 , -1.3145258 ],\n",
              "        [ 1.4324062 ,  1.4439594 , -2.3017604 ],\n",
              "        [-2.731593  , -0.8177173 ,  3.0800977 ],\n",
              "        [ 1.9692774 ,  1.1589333 , -2.4893165 ],\n",
              "        [-2.581834  ,  1.2377197 ,  1.4792242 ],\n",
              "        [ 0.9469543 ,  1.08895   , -1.5628814 ],\n",
              "        [-0.29192665,  1.6034795 , -0.8872552 ],\n",
              "        [ 2.0469263 ,  1.0686412 , -2.561922  ]], dtype=float32),\n",
              " array([[-1.111019  , -0.21557625,  1.2515407 ],\n",
              "        [ 1.4377958 ,  1.1594677 , -2.0740254 ],\n",
              "        [ 0.6955856 ,  0.8870075 , -1.1680804 ],\n",
              "        [-3.1639307 , -0.8374576 ,  3.4834216 ],\n",
              "        [-2.5308936 , -0.68876505,  2.8599453 ],\n",
              "        [-1.8482453 ,  0.64760685,  1.256008  ],\n",
              "        [ 3.1739035 , -0.34429786, -2.3006558 ],\n",
              "        [ 3.0336277 ,  0.5700881 , -2.906506  ],\n",
              "        [ 0.8654536 ,  1.4497935 , -1.796207  ],\n",
              "        [ 3.1774144 , -0.02541445, -2.5553493 ],\n",
              "        [ 1.0969652 ,  1.1798586 , -1.7286711 ],\n",
              "        [-0.19609356,  1.4103571 , -0.89941084],\n",
              "        [ 1.1890692 ,  1.3849325 , -2.1666594 ],\n",
              "        [ 2.055008  ,  1.035804  , -2.5441165 ],\n",
              "        [-1.7177335 ,  0.94687855,  0.80963284],\n",
              "        [ 1.3413388 ,  1.5158025 , -2.340714  ]], dtype=float32),\n",
              " array([[-2.680242  ,  0.6138677 ,  1.8693124 ],\n",
              "        [-3.2010262 , -0.73303246,  3.467025  ],\n",
              "        [-3.1750052 , -0.34964058,  3.1123106 ],\n",
              "        [ 3.21322   ,  0.559482  , -3.1225677 ],\n",
              "        [-3.3245351 , -0.58186305,  3.4183602 ],\n",
              "        [-0.7874915 ,  0.7478892 ,  0.12900501],\n",
              "        [ 3.000494  ,  0.4915285 , -2.8492556 ],\n",
              "        [-3.2589521 , -0.6340929 ,  3.438449  ],\n",
              "        [-3.2124488 ,  0.64036477,  2.3217115 ],\n",
              "        [ 1.3294218 ,  1.5295223 , -2.3602092 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 0.4011579 ,  1.1378912 , -1.0540614 ],\n",
              "        [-2.5899088 ,  1.2131933 ,  1.2127131 ],\n",
              "        [-3.3057013 , -0.6551424 ,  3.452095  ],\n",
              "        [ 0.93793267,  1.4482735 , -1.7641376 ],\n",
              "        [-2.0809286 ,  0.9999994 ,  1.047581  ]], dtype=float32),\n",
              " array([[-1.3784432 ,  1.6857187 , -0.28774515],\n",
              "        [ 3.6611843 , -0.2778369 , -2.8313456 ],\n",
              "        [-1.7468963 ,  0.97709376,  0.65303344],\n",
              "        [-3.2297347 , -0.6790328 ,  3.4255722 ],\n",
              "        [-2.4684308 ,  1.5650173 ,  0.76487625],\n",
              "        [ 1.7764066 ,  0.73600304, -2.1118255 ],\n",
              "        [ 2.8726325 ,  0.507368  , -2.7210555 ],\n",
              "        [ 0.06248899,  1.0326874 , -0.7644739 ],\n",
              "        [-3.2114458 , -0.20092824,  3.017407  ],\n",
              "        [-1.2436254 ,  1.6896468 , -0.3534404 ],\n",
              "        [-3.3181112 ,  0.38116786,  2.6764665 ],\n",
              "        [ 1.8014008 ,  0.13449748, -1.4512813 ],\n",
              "        [ 3.5842416 , -0.00478331, -2.9594212 ],\n",
              "        [-2.39765   ,  1.1373767 ,  1.1654466 ],\n",
              "        [-2.5003002 , -0.900459  ,  2.9935343 ],\n",
              "        [-0.80746156,  0.05064267,  0.66805327]], dtype=float32),\n",
              " array([[-2.137776  ,  1.6702574 ,  0.4482227 ],\n",
              "        [-0.67881256, -0.9100295 ,  1.4163989 ],\n",
              "        [-3.3297417 , -0.6189064 ,  3.4445777 ],\n",
              "        [-3.0829875 ,  0.686398  ,  2.1302176 ],\n",
              "        [ 3.0573869 ,  0.21601748, -2.7029314 ],\n",
              "        [-2.3713918 ,  1.4739417 ,  0.8234651 ],\n",
              "        [-3.1758616 , -0.7955327 ,  3.4589653 ],\n",
              "        [ 2.385055  ,  0.7016343 , -2.3769436 ],\n",
              "        [ 3.2930772 ,  0.30789125, -2.9870834 ],\n",
              "        [-0.15733132,  1.7634218 , -1.2528918 ],\n",
              "        [-3.2697353 , -0.5844352 ,  3.42376   ],\n",
              "        [ 0.05971717, -0.4130416 ,  0.38746512],\n",
              "        [ 2.9394977 ,  0.14140536, -2.5142953 ],\n",
              "        [-3.501129  ,  0.21234268,  2.844957  ],\n",
              "        [-3.2193496 , -0.7063555 ,  3.437263  ],\n",
              "        [-3.2864788 , -0.7191246 ,  3.4696312 ]], dtype=float32),\n",
              " array([[-3.3751204 ,  0.0621048 ,  2.8996243 ],\n",
              "        [-2.2442067 ,  1.5563203 ,  0.6552862 ],\n",
              "        [ 0.55845505,  1.7209996 , -1.9026842 ],\n",
              "        [ 2.334028  ,  0.8475852 , -2.6299262 ],\n",
              "        [ 1.5913554 ,  1.0361927 , -1.9821318 ],\n",
              "        [ 1.6745442 ,  1.1292696 , -2.1981897 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [-3.1578438 , -0.57125217,  3.292184  ],\n",
              "        [-0.3353816 ,  0.21664625,  0.37761325],\n",
              "        [ 2.928324  ,  0.692906  , -3.035471  ],\n",
              "        [ 0.33065936,  0.65747714, -0.71392417],\n",
              "        [ 3.280875  , -0.34965226, -2.3364964 ],\n",
              "        [-2.8162348 , -0.7844764 ,  3.180571  ],\n",
              "        [-3.3380125 , -0.21938726,  3.1557434 ],\n",
              "        [-0.69111615,  1.4178623 , -0.36048925],\n",
              "        [ 1.5206703 ,  1.2395706 , -2.17662   ]], dtype=float32),\n",
              " array([[ 3.0712864 ,  0.45718256, -2.8434863 ],\n",
              "        [-1.1003057 ,  1.4160029 , -0.27517715],\n",
              "        [-3.1462686 ,  1.1088766 ,  1.797538  ],\n",
              "        [ 0.62542224,  1.7931854 , -2.0483537 ],\n",
              "        [ 2.0730834 ,  0.7348311 , -2.207186  ],\n",
              "        [-2.5072815 ,  0.36378232,  1.9702252 ],\n",
              "        [ 0.22692364,  1.5960332 , -1.4526105 ],\n",
              "        [ 2.9386613 ,  0.7621035 , -3.0865397 ],\n",
              "        [ 1.0826341 ,  1.2263249 , -1.7757679 ],\n",
              "        [ 2.8921504 ,  0.68134403, -2.888234  ],\n",
              "        [ 0.2854156 ,  1.7309369 , -1.5568748 ],\n",
              "        [ 2.319991  ,  0.9490069 , -2.608664  ],\n",
              "        [ 1.7050015 ,  1.3132491 , -2.4157488 ],\n",
              "        [ 3.0899158 ,  0.2518991 , -2.7083342 ],\n",
              "        [-0.45392218,  1.4757693 , -0.6387923 ],\n",
              "        [ 2.1390092 ,  1.1691422 , -2.7146306 ]], dtype=float32),\n",
              " array([[-1.9832507 , -0.87010646,  2.6097205 ],\n",
              "        [-1.0541632 ,  1.3649256 , -0.22734782],\n",
              "        [ 0.695658  ,  0.26107517, -0.70581067],\n",
              "        [ 2.8713229 ,  0.61811495, -2.8416448 ],\n",
              "        [-2.8463724 ,  0.33188316,  2.218708  ],\n",
              "        [-2.3953724 , -0.7111454 ,  2.7173262 ],\n",
              "        [-2.9049623 ,  1.1478838 ,  1.64211   ],\n",
              "        [ 1.1929003 , -0.8452362 , -0.2264066 ],\n",
              "        [-3.1503456 , -0.58826524,  3.2642555 ],\n",
              "        [-3.4017284 , -0.33463454,  3.271984  ],\n",
              "        [ 3.5216348 ,  0.11573685, -2.9920356 ],\n",
              "        [ 0.8042303 ,  1.5337706 , -1.7754189 ],\n",
              "        [ 2.591369  ,  1.0080123 , -2.8319101 ],\n",
              "        [ 0.8999312 ,  1.3154117 , -1.7567222 ],\n",
              "        [-3.05035   , -0.36294022,  2.9685235 ],\n",
              "        [-2.4898958 , -0.29999176,  2.5676692 ]], dtype=float32),\n",
              " array([[ 2.5001924 , -0.6473736 , -1.4758692 ],\n",
              "        [-0.21579069,  1.1445004 , -0.6535752 ],\n",
              "        [ 0.20572907, -0.06074721, -0.08006136],\n",
              "        [-0.19736284,  1.8417002 , -1.2939    ],\n",
              "        [ 0.22253649,  1.1739479 , -1.0689234 ],\n",
              "        [-2.5297499 , -0.24065647,  2.4010184 ],\n",
              "        [-3.2667937 , -0.5689877 ,  3.3708599 ],\n",
              "        [ 1.9955503 ,  0.9768975 , -2.3683321 ],\n",
              "        [-2.8348155 , -1.0171148 ,  3.424317  ],\n",
              "        [-0.28896567,  1.1036514 , -0.5466967 ],\n",
              "        [-1.5535511 ,  1.8333683 , -0.20149378],\n",
              "        [-3.1775339 , -0.18705003,  3.1361682 ],\n",
              "        [ 1.4714242 ,  1.5113558 , -2.3683457 ],\n",
              "        [-1.9913819 ,  1.1110224 ,  0.7795557 ],\n",
              "        [-3.12493   , -0.09911481,  2.86988   ],\n",
              "        [-3.303224  , -0.5908284 ,  3.3978949 ]], dtype=float32),\n",
              " array([[ 0.5966221 ,  0.8769852 , -1.1493778 ],\n",
              "        [ 3.614921  , -0.09875526, -2.988869  ],\n",
              "        [-3.3262408 ,  0.25264362,  2.6807675 ],\n",
              "        [-2.0134442 ,  0.65521216,  1.2909594 ],\n",
              "        [-3.3971376 ,  0.22861603,  2.8115025 ],\n",
              "        [ 1.5658443 ,  0.7309489 , -1.837027  ],\n",
              "        [ 1.6886623 ,  1.025108  , -2.1612864 ],\n",
              "        [ 1.214246  ,  0.6598164 , -1.4355264 ],\n",
              "        [-2.3321512 ,  0.8548001 ,  1.3941408 ],\n",
              "        [-3.3278883 , -0.6021642 ,  3.4212809 ],\n",
              "        [-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 3.2644577 ,  0.4033346 , -3.0542538 ],\n",
              "        [ 2.437085  ,  0.65411896, -2.4963357 ],\n",
              "        [-3.0633688 , -0.39672753,  3.0724506 ],\n",
              "        [-0.29524884,  0.4625542 ,  0.05590812],\n",
              "        [ 1.1706439 ,  1.3066189 , -1.8402824 ]], dtype=float32),\n",
              " array([[ 3.4687471 , -0.6164383 , -2.307067  ],\n",
              "        [ 3.4411483 ,  0.16031836, -2.9854257 ],\n",
              "        [ 2.220947  ,  1.2638116 , -2.829023  ],\n",
              "        [-2.820021  ,  1.4315015 ,  1.3670492 ],\n",
              "        [-2.9805188 ,  1.0762823 ,  1.6333063 ],\n",
              "        [ 1.9763461 ,  0.8056221 , -2.197771  ],\n",
              "        [-0.2580939 ,  1.9274926 , -1.4501281 ],\n",
              "        [ 0.14933872,  1.0097314 , -0.74070203],\n",
              "        [-3.3139083 ,  0.18937752,  2.776649  ],\n",
              "        [ 2.9667711 ,  0.49238816, -2.84805   ],\n",
              "        [-3.0836306 , -0.74010384,  3.365517  ],\n",
              "        [ 1.8492398 ,  0.3105026 , -1.7577213 ],\n",
              "        [-1.5608896 , -0.7562054 ,  2.18167   ],\n",
              "        [ 1.2294061 ,  0.65766346, -1.5250393 ],\n",
              "        [ 0.55663353,  1.7610646 , -1.8551351 ],\n",
              "        [-3.3447638 , -0.45768717,  3.3447006 ]], dtype=float32),\n",
              " array([[-3.2747157e+00, -6.3158047e-01,  3.4386425e+00],\n",
              "        [ 5.2902180e-01,  1.6753207e+00, -1.6306801e+00],\n",
              "        [-1.2063113e+00,  2.1366377e+00, -7.7044404e-01],\n",
              "        [-3.4974921e+00,  3.5228226e-01,  2.7682734e+00],\n",
              "        [ 5.3788938e-02, -7.0643163e-01,  6.0795897e-01],\n",
              "        [-1.4057060e+00,  4.4151139e-01,  8.1963831e-01],\n",
              "        [ 1.4669715e+00,  1.3507317e+00, -2.1909463e+00],\n",
              "        [-2.0487244e+00, -6.2741876e-01,  2.3596115e+00],\n",
              "        [ 4.9268416e-01,  9.9355984e-01, -1.0883987e+00],\n",
              "        [ 2.6859858e+00,  4.3436873e-01, -2.4773650e+00],\n",
              "        [-3.2209084e+00, -5.4689693e-01,  3.2807245e+00],\n",
              "        [-9.3974680e-01,  1.7720941e+00, -7.0309520e-01],\n",
              "        [-3.3002646e+00,  6.0232812e-01,  2.4341092e+00],\n",
              "        [-3.2355754e+00, -7.1922874e-01,  3.4920409e+00],\n",
              "        [ 3.5258895e-01,  2.0364151e+00, -2.0103152e+00],\n",
              "        [ 7.2179234e-04,  1.4276609e+00, -1.0534990e+00]], dtype=float32),\n",
              " array([[ 1.2277826 ,  1.3276247 , -1.9665968 ],\n",
              "        [ 2.2380097 ,  0.76754844, -2.393127  ],\n",
              "        [-3.3967035 , -0.25634828,  3.1856441 ],\n",
              "        [ 2.249263  ,  1.1095874 , -2.7892923 ],\n",
              "        [ 2.2632523 ,  0.32466027, -2.0276399 ],\n",
              "        [-3.3929584 , -0.44104603,  3.3620834 ],\n",
              "        [-3.0365167 , -0.49906254,  3.082879  ],\n",
              "        [-1.5841953 ,  1.1168011 ,  0.4274282 ],\n",
              "        [ 2.0537999 ,  0.64377415, -2.1676707 ],\n",
              "        [ 1.7463051 ,  0.5383452 , -1.7749348 ],\n",
              "        [ 0.7271994 , -0.05480084, -0.5452115 ],\n",
              "        [-3.0356243 , -0.57870245,  3.2254708 ],\n",
              "        [ 1.1483971 ,  0.04322145, -1.0990481 ],\n",
              "        [-3.3842242 , -0.10600897,  3.0982642 ],\n",
              "        [-3.4210048 , -0.17188257,  3.1895313 ],\n",
              "        [ 2.46049   ,  0.8142024 , -2.6038916 ]], dtype=float32),\n",
              " array([[ 0.9422864 ,  0.5780195 , -1.1504123 ],\n",
              "        [-3.4348578 , -0.38454142,  3.3152695 ],\n",
              "        [-3.246948  , -0.58678067,  3.394277  ],\n",
              "        [-0.49731758,  1.211264  , -0.47685477],\n",
              "        [ 0.82832634,  1.4747267 , -1.8109628 ],\n",
              "        [-1.8912185 ,  1.533499  ,  0.46824312],\n",
              "        [-1.8337622 ,  1.275354  ,  0.56975466],\n",
              "        [ 1.4313022 ,  1.6190884 , -2.5242236 ],\n",
              "        [ 2.5205634 ,  0.645484  , -2.5288696 ],\n",
              "        [ 0.26566598,  1.2858711 , -1.2558439 ],\n",
              "        [-3.2638566 , -0.71856856,  3.449236  ],\n",
              "        [-1.207938  , -1.4752502 ,  2.4749775 ],\n",
              "        [ 1.0280688 ,  1.4420618 , -1.9480929 ],\n",
              "        [-1.7930061 , -1.0136691 ,  2.5488586 ],\n",
              "        [ 3.2139864 ,  0.0281691 , -2.653329  ],\n",
              "        [ 2.1211567 ,  0.07856228, -1.6833754 ]], dtype=float32),\n",
              " array([[-3.3678062 , -0.31734252,  3.245852  ],\n",
              "        [-0.9177988 ,  2.0953207 , -0.90475243],\n",
              "        [-0.48275194,  1.2278674 , -0.60543644],\n",
              "        [-3.0862164 , -0.9048953 ,  3.5007782 ],\n",
              "        [-3.48716   , -0.2587174 ,  3.3085563 ],\n",
              "        [-0.20617893, -0.6340795 ,  0.6479939 ],\n",
              "        [ 2.038724  ,  0.8574718 , -2.1715744 ],\n",
              "        [-1.9044238 ,  1.8937956 ,  0.00560533],\n",
              "        [-2.2069957 ,  1.8902596 ,  0.30993563],\n",
              "        [ 0.35467866,  1.7589619 , -1.6516618 ],\n",
              "        [ 0.770163  ,  1.3642491 , -1.6536341 ],\n",
              "        [ 0.51927453,  0.89584196, -1.0781639 ],\n",
              "        [-3.0806255 , -0.48413867,  3.1911187 ],\n",
              "        [ 3.0863106 ,  0.38167563, -2.8457372 ],\n",
              "        [-2.0091798 ,  0.62304944,  1.2024143 ],\n",
              "        [ 1.0974675 ,  1.2618948 , -1.7810081 ]], dtype=float32),\n",
              " array([[-2.1893103 ,  1.5679328 ,  0.559999  ],\n",
              "        [ 2.443926  , -0.791592  , -1.3662924 ],\n",
              "        [-0.35127595,  0.49617675, -0.11291682],\n",
              "        [ 2.2639663 ,  0.24557935, -2.0998785 ],\n",
              "        [-0.06468005,  0.31887057, -0.1154236 ],\n",
              "        [ 3.0778153 ,  0.41417077, -2.836658  ],\n",
              "        [-3.4497864 , -0.17364946,  3.1994221 ],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [-2.863016  ,  1.311237  ,  1.3167831 ],\n",
              "        [-2.075151  ,  1.8994155 ,  0.1843969 ],\n",
              "        [ 3.4422166 , -0.86809033, -2.2537024 ],\n",
              "        [-2.0838568 , -0.923928  ,  2.758451  ],\n",
              "        [ 2.479149  ,  0.80627847, -2.6291542 ],\n",
              "        [ 1.7329208 ,  1.4300438 , -2.5942292 ],\n",
              "        [-0.95461553,  1.8028587 , -0.5596634 ],\n",
              "        [-3.3259807 , -0.5587988 ,  3.379868  ]], dtype=float32),\n",
              " array([[ 0.91823864,  1.3566657 , -1.6532645 ],\n",
              "        [-3.3075614 , -0.44793662,  3.302915  ],\n",
              "        [-2.2968884 ,  1.6149317 ,  0.690613  ],\n",
              "        [-0.4287806 ,  1.8133236 , -1.1158049 ],\n",
              "        [-3.231451  ,  0.6573587 ,  2.3636389 ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-3.2720397 , -0.6512728 ,  3.4589825 ],\n",
              "        [ 2.4947052 ,  1.0600051 , -2.916726  ],\n",
              "        [-3.355979  , -0.42468488,  3.3210216 ],\n",
              "        [-0.2865006 , -0.48670635,  0.8041958 ],\n",
              "        [-3.2554924 , -0.6288912 ,  3.4175622 ],\n",
              "        [-3.374562  , -0.11912903,  3.0786958 ],\n",
              "        [ 3.5143116 , -0.48630083, -2.512585  ],\n",
              "        [-2.1831007 ,  0.27919528,  1.7924588 ],\n",
              "        [-2.9380915 ,  0.3645436 ,  2.214932  ],\n",
              "        [ 2.4964488 ,  0.69502306, -2.535557  ]], dtype=float32),\n",
              " array([[ 0.8385528 ,  1.1990092 , -1.551467  ],\n",
              "        [ 0.732385  ,  0.22784352, -0.80315423],\n",
              "        [ 0.16852035,  1.8223864 , -1.6496899 ],\n",
              "        [-1.8860515 ,  1.7166599 ,  0.19463128],\n",
              "        [ 2.109826  ,  1.0381883 , -2.5805197 ],\n",
              "        [ 1.6489786 ,  1.407713  , -2.3528545 ],\n",
              "        [ 1.2287229 ,  0.12132217, -1.1459812 ],\n",
              "        [-3.4201086 , -0.32677677,  3.2820973 ],\n",
              "        [ 1.0620579 ,  0.6844703 , -1.4696716 ],\n",
              "        [ 1.7773954 ,  1.2369788 , -2.4570177 ],\n",
              "        [-0.9017478 ,  1.4431221 , -0.39721966],\n",
              "        [ 3.4198146 , -0.24107748, -2.6634088 ],\n",
              "        [-3.1206477 ,  0.17172843,  2.6377397 ],\n",
              "        [-3.2038233 , -0.29677114,  3.0729256 ],\n",
              "        [ 3.3503778 , -0.52827126, -2.31611   ],\n",
              "        [ 3.4563167 , -1.0398115 , -2.1132476 ]], dtype=float32),\n",
              " array([[-3.334318  , -0.58125216,  3.4010196 ],\n",
              "        [ 0.7130002 , -0.17760895, -0.52067393],\n",
              "        [ 1.7002059 , -0.02691481, -1.2735522 ],\n",
              "        [-2.954741  ,  0.05292353,  2.6275363 ],\n",
              "        [-2.2916877 ,  1.5001094 ,  0.62247235],\n",
              "        [-0.09955802,  1.1109904 , -0.6488094 ],\n",
              "        [ 3.0639465 , -0.3678041 , -2.1805482 ],\n",
              "        [-1.7908282 ,  1.837668  ,  0.06496589],\n",
              "        [-2.5428233 , -0.54153466,  2.6699796 ],\n",
              "        [-1.505402  ,  1.2581395 ,  0.36575586],\n",
              "        [ 2.3134692 ,  0.80459636, -2.573482  ],\n",
              "        [ 0.96497536,  1.1111727 , -1.649923  ],\n",
              "        [ 2.288288  ,  0.8277518 , -2.4003506 ],\n",
              "        [ 2.5974877 , -0.19374171, -1.9485731 ],\n",
              "        [-3.3754861 , -0.5369524 ,  3.416206  ],\n",
              "        [ 1.067429  ,  1.0052339 , -1.7065489 ]], dtype=float32),\n",
              " array([[ 2.0137713 ,  1.3593606 , -2.7756522 ],\n",
              "        [ 0.84458345,  1.2001811 , -1.5128036 ],\n",
              "        [-2.8063772 ,  0.95566523,  1.8519838 ],\n",
              "        [ 1.9944702 ,  0.5702071 , -2.017119  ],\n",
              "        [-2.8754191 ,  0.8030952 ,  1.8281407 ],\n",
              "        [ 0.8021087 ,  1.9176648 , -2.2232242 ],\n",
              "        [ 1.9324131 ,  0.62081456, -2.0069706 ],\n",
              "        [ 3.4828134 , -0.6957421 , -2.3238277 ],\n",
              "        [-3.293755  , -0.6291375 ,  3.4525926 ],\n",
              "        [-3.1257079 , -0.79205173,  3.4305847 ],\n",
              "        [-0.45854807,  1.3159832 , -0.5735486 ],\n",
              "        [-0.08980385,  1.0070809 , -0.622087  ],\n",
              "        [-0.83187646,  0.8494473 ,  0.09490915],\n",
              "        [ 0.53357226,  1.8995152 , -2.0169468 ],\n",
              "        [ 1.8009504 ,  1.4427766 , -2.6247768 ],\n",
              "        [-3.2488596 , -0.63819325,  3.3796067 ]], dtype=float32),\n",
              " array([[ 0.47319397,  1.6234738 , -1.6104287 ],\n",
              "        [-3.3373826 , -0.54531616,  3.4015198 ],\n",
              "        [-1.9731632 , -0.35519034,  2.151711  ],\n",
              "        [ 3.3993895 , -0.10326168, -2.8233542 ],\n",
              "        [ 3.122924  ,  0.11116505, -2.6118371 ],\n",
              "        [ 0.3106666 ,  1.8030745 , -1.7097099 ],\n",
              "        [-3.1895554 , -0.76931685,  3.473052  ],\n",
              "        [-2.2591033 ,  1.621084  ,  0.62074506],\n",
              "        [-3.1031094 ,  0.33272442,  2.4453106 ],\n",
              "        [-3.0942328 ,  0.1680142 ,  2.5130134 ],\n",
              "        [ 0.21706575,  0.9115292 , -0.91296744],\n",
              "        [-2.2881463 ,  1.2150956 ,  1.033009  ],\n",
              "        [-2.5537584 ,  1.3465089 ,  1.0363666 ],\n",
              "        [ 2.9718988 , -0.5402876 , -1.956495  ],\n",
              "        [ 1.3190455 ,  0.2719192 , -1.1922368 ],\n",
              "        [-0.8460104 ,  2.281362  , -1.1688781 ]], dtype=float32),\n",
              " array([[ 1.7915431 ,  1.3429841 , -2.592946  ],\n",
              "        [ 2.7265403 ,  0.606107  , -2.6736736 ],\n",
              "        [ 3.045254  ,  0.4136195 , -2.791667  ],\n",
              "        [-2.3771055 ,  0.81891155,  1.4776834 ],\n",
              "        [ 0.0866292 ,  2.0262747 , -1.6932116 ],\n",
              "        [ 1.9360467 ,  1.2359409 , -2.5233734 ],\n",
              "        [ 0.48809472,  1.3423575 , -1.4153159 ],\n",
              "        [ 1.6818167 ,  1.1819762 , -2.3456192 ],\n",
              "        [ 0.56639653,  1.8914957 , -1.9956853 ],\n",
              "        [-0.49530718,  2.199222  , -1.4437865 ],\n",
              "        [-0.96802133, -0.26930547,  1.4000506 ],\n",
              "        [ 0.70310813,  1.289983  , -1.5298026 ],\n",
              "        [ 3.1659248 ,  0.14560178, -2.69916   ],\n",
              "        [-0.5767842 ,  0.40891802,  0.4101991 ],\n",
              "        [-0.42974064,  1.2369498 , -0.620306  ],\n",
              "        [-0.04973644, -0.7104408 ,  0.6043557 ]], dtype=float32),\n",
              " array([[-0.2656436 , -1.1922537 ,  1.1399047 ],\n",
              "        [ 0.6776844 ,  0.4761853 , -0.85669076],\n",
              "        [-2.8998616 ,  0.759511  ,  2.047285  ],\n",
              "        [-3.3494914 , -0.5837765 ,  3.425333  ],\n",
              "        [ 0.29510668,  1.9651445 , -1.9130195 ],\n",
              "        [ 1.1324517 , -0.22066046, -0.70358896],\n",
              "        [ 0.6949206 ,  1.3616378 , -1.4855742 ],\n",
              "        [-3.140807  , -0.8115875 ,  3.4711654 ],\n",
              "        [ 2.2297888 ,  1.3134518 , -2.9676695 ],\n",
              "        [-3.1763303 ,  0.17440042,  2.5922155 ],\n",
              "        [ 1.7043707 ,  1.1534064 , -2.2787335 ],\n",
              "        [-3.0552285 ,  1.1142989 ,  1.6789384 ],\n",
              "        [-2.1236537 ,  1.7936097 ,  0.24716167],\n",
              "        [-0.4560295 ,  0.504024  , -0.06806415],\n",
              "        [-2.1127558 ,  1.6866347 ,  0.2425503 ],\n",
              "        [ 0.6662324 , -1.236271  ,  0.5282703 ]], dtype=float32),\n",
              " array([[-2.8991773 , -0.5918589 ,  3.1160426 ],\n",
              "        [-3.287073  , -0.46852288,  3.2888918 ],\n",
              "        [ 0.6165946 ,  1.6394511 , -1.7683316 ],\n",
              "        [ 0.02340992,  1.9598978 , -1.6448183 ],\n",
              "        [-3.3451607 ,  0.0309606 ,  2.868873  ],\n",
              "        [ 0.8492617 ,  0.8684342 , -1.2610356 ],\n",
              "        [-3.244266  , -0.57588124,  3.3864498 ],\n",
              "        [-3.4414747 , -0.3590901 ,  3.305184  ],\n",
              "        [ 2.3858001 ,  0.9343701 , -2.6842494 ],\n",
              "        [-3.3346794 , -0.6113473 ,  3.431459  ],\n",
              "        [-1.896366  ,  1.8191354 ,  0.03516861],\n",
              "        [-3.3603945 , -0.05848557,  2.9845393 ],\n",
              "        [-0.09149916,  1.1722127 , -0.77558315],\n",
              "        [-2.9426334 ,  0.6347259 ,  1.9831558 ],\n",
              "        [-1.6921407 ,  1.8747631 , -0.18847188],\n",
              "        [ 2.0447705 ,  1.2672845 , -2.6825922 ]], dtype=float32),\n",
              " array([[-3.238539  , -0.6642375 ,  3.4166145 ],\n",
              "        [-3.1550438 , -0.7175173 ,  3.3723216 ],\n",
              "        [-1.0150737 ,  1.5959593 , -0.47519982],\n",
              "        [ 3.3647916 , -0.1845322 , -2.5001178 ],\n",
              "        [-2.9644678 ,  0.84825265,  1.8332385 ],\n",
              "        [ 1.6409382 ,  1.0593375 , -2.180697  ],\n",
              "        [ 0.28837904,  0.9618547 , -1.0227358 ],\n",
              "        [-1.0509635 ,  1.7380799 , -0.39167032],\n",
              "        [ 1.5630734 ,  1.3095326 , -2.3476083 ],\n",
              "        [ 0.77086025,  1.4270033 , -1.7235974 ],\n",
              "        [ 0.5168799 ,  1.7104198 , -1.7368586 ],\n",
              "        [ 2.835734  ,  0.5264658 , -2.6539202 ],\n",
              "        [ 1.621846  ,  1.0155944 , -1.9932551 ],\n",
              "        [ 2.323293  ,  0.9865095 , -2.6889114 ],\n",
              "        [ 2.3694692 ,  0.8831768 , -2.5922563 ],\n",
              "        [-3.4482055 ,  0.19234698,  2.8580813 ]], dtype=float32),\n",
              " array([[-2.301813  ,  0.48508766,  1.6088779 ],\n",
              "        [ 1.8703418 ,  0.8200384 , -2.1605134 ],\n",
              "        [ 3.2280145 ,  0.12305124, -2.667568  ],\n",
              "        [-2.4225543 ,  1.6442902 ,  0.66792864],\n",
              "        [ 3.188031  , -0.98534536, -1.9357919 ],\n",
              "        [-3.1269948 , -0.80089116,  3.48508   ],\n",
              "        [-1.271893  , -0.64020526,  1.8576527 ],\n",
              "        [-2.33828   , -0.5069946 ,  2.5672307 ],\n",
              "        [ 1.7376034 ,  0.93154943, -2.0102684 ],\n",
              "        [-2.0369248 ,  1.8538777 ,  0.14998356],\n",
              "        [ 0.90480566,  1.1724634 , -1.6774964 ],\n",
              "        [ 2.751447  ,  0.24841246, -2.4731228 ],\n",
              "        [ 3.6348813 , -0.73536736, -2.45119   ],\n",
              "        [-1.4060875 ,  1.7413765 , -0.35166046],\n",
              "        [ 2.1619518 ,  1.2183338 , -2.6727798 ],\n",
              "        [-0.60524625, -1.0386034 ,  1.5618746 ]], dtype=float32),\n",
              " array([[ 2.3844244 ,  0.78118825, -2.5911043 ],\n",
              "        [-3.294005  , -0.29500517,  3.152057  ],\n",
              "        [ 3.3264272 , -0.09937569, -2.7054195 ],\n",
              "        [-3.2183273 , -0.76196456,  3.4746332 ],\n",
              "        [ 3.4103897 , -0.04868701, -2.8126912 ],\n",
              "        [ 1.776281  ,  1.2847751 , -2.5419827 ],\n",
              "        [ 1.4870857 ,  1.1000763 , -1.9817168 ],\n",
              "        [ 1.4242921 ,  1.3899053 , -2.2520006 ],\n",
              "        [-2.917985  , -0.40137663,  2.9814246 ],\n",
              "        [-0.8485506 ,  1.386721  , -0.4471384 ],\n",
              "        [-2.1193225 ,  1.563334  ,  0.40222743],\n",
              "        [-2.1927354 ,  1.0625962 ,  1.11031   ],\n",
              "        [ 1.1836449 ,  1.1728181 , -1.8625538 ],\n",
              "        [-0.12780327, -0.48141694,  0.63735974],\n",
              "        [-3.2624738 , -0.6629354 ,  3.4562526 ],\n",
              "        [ 1.4598382 ,  1.5478008 , -2.463929  ]], dtype=float32),\n",
              " array([[-2.2676978 ,  0.7555884 ,  1.3066816 ],\n",
              "        [ 3.6135764 , -0.43245408, -2.7495162 ],\n",
              "        [ 1.2633245 ,  1.4977342 , -2.2090364 ],\n",
              "        [-3.3010085 , -0.50123084,  3.34096   ],\n",
              "        [-3.0958626 , -0.5276417 ,  3.138842  ],\n",
              "        [-3.298846  , -0.3973234 ,  3.2786207 ],\n",
              "        [ 0.30169308,  1.3938243 , -1.3001378 ],\n",
              "        [ 2.601999  ,  0.47576138, -2.3836057 ],\n",
              "        [-3.3634748 , -0.3948333 ,  3.2775836 ],\n",
              "        [ 0.4997952 ,  1.5574001 , -1.6217911 ],\n",
              "        [ 2.504131  ,  1.0788902 , -2.9277372 ],\n",
              "        [-0.21795732,  1.4981414 , -0.9186107 ],\n",
              "        [-3.0875542 ,  0.07583492,  2.6312256 ],\n",
              "        [ 2.8051448 ,  0.02556693, -2.3564978 ],\n",
              "        [-0.4983822 ,  1.0591186 , -0.34514666],\n",
              "        [-3.3306    ,  0.23171161,  2.7425456 ]], dtype=float32),\n",
              " array([[ 2.9323323 ,  0.38089842, -2.6057262 ],\n",
              "        [ 2.3411534 ,  1.0643533 , -2.7540283 ],\n",
              "        [-1.5025023 ,  1.5660104 , -0.16952547],\n",
              "        [-2.5538664 ,  0.6267657 ,  1.7708294 ],\n",
              "        [ 1.0714222 ,  1.3571614 , -1.9118726 ],\n",
              "        [-0.2451908 ,  0.04280789,  0.37954998],\n",
              "        [ 0.2475645 ,  1.8812313 , -1.7198043 ],\n",
              "        [ 1.3622539 ,  1.1763898 , -2.0843906 ],\n",
              "        [ 1.8057863 ,  1.1235336 , -2.3200395 ],\n",
              "        [ 0.9302115 ,  0.57186943, -1.1799262 ],\n",
              "        [ 2.156138  ,  1.2371675 , -2.6636128 ],\n",
              "        [-2.1541612 , -0.20914331,  2.1580176 ],\n",
              "        [ 1.7057921 ,  1.2641028 , -2.357005  ],\n",
              "        [-3.1863663 ,  0.34725234,  2.460922  ],\n",
              "        [ 3.588366  , -0.11183507, -2.8314056 ],\n",
              "        [-3.0923083 ,  0.8480302 ,  1.9596    ]], dtype=float32),\n",
              " array([[ 2.9830134 , -0.06172153, -2.394555  ],\n",
              "        [ 3.0176938 ,  0.21208826, -2.621214  ],\n",
              "        [ 2.6752574 ,  0.721575  , -2.7915406 ],\n",
              "        [-0.18936408,  1.4932488 , -0.89017755],\n",
              "        [ 1.2699012 ,  1.491625  , -2.1842966 ],\n",
              "        [ 1.7459244 ,  1.2772108 , -2.420494  ],\n",
              "        [-3.1425378 , -0.82758826,  3.486445  ],\n",
              "        [ 2.1192749 ,  0.37410912, -2.0700307 ],\n",
              "        [-3.480882  ,  0.4260073 ,  2.710267  ],\n",
              "        [ 2.0233881 ,  0.7169809 , -2.1990223 ],\n",
              "        [ 1.1170183 ,  1.4653232 , -2.051187  ],\n",
              "        [ 2.7897837 ,  0.9385528 , -3.0114179 ],\n",
              "        [-1.0834438 ,  0.74456   ,  0.20437175],\n",
              "        [ 3.5342846 , -0.5189818 , -2.5703192 ],\n",
              "        [ 0.8425593 , -0.15277824, -0.56416976],\n",
              "        [ 3.6320617 , -0.24804142, -2.8205292 ]], dtype=float32),\n",
              " array([[-1.2953277 ,  1.9735049 , -0.51479596],\n",
              "        [-2.2071729 ,  1.396145  ,  0.6540462 ],\n",
              "        [-3.1683042 , -0.23585743,  3.0731952 ],\n",
              "        [ 1.8664855 ,  1.1245433 , -2.3520107 ],\n",
              "        [ 1.8341118 ,  1.1971012 , -2.5535917 ],\n",
              "        [-2.9137805 ,  0.494684  ,  2.1925268 ],\n",
              "        [-2.9255679 ,  1.1067599 ,  1.7063124 ],\n",
              "        [-1.2701638 ,  1.378036  , -0.06364385],\n",
              "        [-3.3020933 , -0.64740276,  3.421334  ],\n",
              "        [-2.0217164 ,  0.8908587 ,  1.0686615 ],\n",
              "        [-2.56264   ,  1.4601619 ,  0.9782393 ],\n",
              "        [ 0.98110145,  1.2482797 , -1.7382437 ],\n",
              "        [ 1.6576957 ,  1.338131  , -2.3271928 ],\n",
              "        [-3.0473    ,  1.0728812 ,  1.7268939 ],\n",
              "        [-1.9888061 ,  1.6145757 ,  0.4047892 ],\n",
              "        [ 1.5836948 ,  1.6015192 , -2.7257817 ]], dtype=float32),\n",
              " array([[-3.4238145 ,  0.7415221 ,  2.3392153 ],\n",
              "        [ 1.1818783 ,  0.86236346, -1.3090606 ],\n",
              "        [-1.1094002 ,  2.1209314 , -0.84916466],\n",
              "        [-2.9722822 , -0.53207296,  3.0232253 ],\n",
              "        [-2.6269746 ,  0.11531664,  2.185837  ],\n",
              "        [ 0.26247737,  1.7981404 , -1.5390251 ],\n",
              "        [-2.1311305 ,  0.304487  ,  1.5890276 ],\n",
              "        [ 1.7747885 ,  1.4025751 , -2.566514  ],\n",
              "        [-2.9788318 ,  0.17647634,  2.5057    ],\n",
              "        [-3.1988957 , -0.11765482,  2.937401  ],\n",
              "        [ 1.2178813 ,  0.70245254, -1.4810562 ],\n",
              "        [-2.406583  ,  0.9463522 ,  1.419467  ],\n",
              "        [-3.429273  , -0.47925264,  3.3737202 ],\n",
              "        [ 2.703868  ,  0.7588093 , -2.8142676 ],\n",
              "        [-0.4920322 ,  2.1190808 , -1.342618  ],\n",
              "        [-2.4201605 ,  1.5894994 ,  0.7048912 ]], dtype=float32),\n",
              " array([[-3.1786084 , -0.6271792 ,  3.3557947 ],\n",
              "        [-3.0078232 ,  0.9087441 ,  1.9093815 ],\n",
              "        [ 1.1936008 , -0.07339292, -0.9287224 ],\n",
              "        [ 2.027059  ,  0.81454575, -2.3234363 ],\n",
              "        [-3.3784432 , -0.3157672 ,  3.2221944 ],\n",
              "        [ 2.3195977 ,  0.5174339 , -2.3276772 ],\n",
              "        [-3.2925956 , -0.45532903,  3.3400333 ],\n",
              "        [-3.1481843 , -0.7158464 ,  3.3674607 ],\n",
              "        [ 3.4415948 ,  0.08414665, -3.0335288 ],\n",
              "        [-3.2939835 , -0.6505448 ,  3.4487486 ],\n",
              "        [ 2.3864663 ,  1.0283669 , -2.7442036 ],\n",
              "        [ 3.2237487 , -0.2752284 , -2.4893851 ],\n",
              "        [-3.118003  , -0.8636073 ,  3.4807107 ],\n",
              "        [ 3.387976  ,  0.259616  , -3.0163019 ],\n",
              "        [-0.04262261,  2.1021485 , -1.6834159 ],\n",
              "        [-2.498902  , -0.87420446,  3.00988   ]], dtype=float32),\n",
              " array([[-3.1251855 , -0.8444408 ,  3.471067  ],\n",
              "        [ 2.681777  , -0.05084072, -2.1006012 ],\n",
              "        [-2.271982  ,  1.3162076 ,  0.7913476 ],\n",
              "        [ 2.3519385 ,  1.1581819 , -2.8161101 ],\n",
              "        [-3.106067  ,  0.10374939,  2.5747628 ],\n",
              "        [-3.3120263 , -0.5018564 ,  3.3915844 ],\n",
              "        [ 2.4612815 ,  1.0176739 , -2.810412  ],\n",
              "        [ 1.5287677 ,  0.88526404, -1.9388065 ],\n",
              "        [ 1.4056093 ,  1.309414  , -2.2325861 ],\n",
              "        [ 2.6489356 ,  0.77568775, -2.7582653 ],\n",
              "        [-3.3406138 , -0.3423492 ,  3.2693913 ],\n",
              "        [-3.1109836 , -0.6730552 ,  3.3309922 ],\n",
              "        [-2.243797  , -0.35367516,  2.3666162 ],\n",
              "        [-3.232031  ,  0.6050908 ,  2.2935421 ],\n",
              "        [-3.289841  , -0.66857487,  3.463522  ],\n",
              "        [ 1.4150465 ,  1.1078223 , -1.9231681 ]], dtype=float32),\n",
              " array([[ 0.00476902,  1.6092724 , -1.3806567 ],\n",
              "        [-1.4350951 ,  0.45913112,  0.8569322 ],\n",
              "        [ 1.5307103 ,  0.90964305, -1.8751619 ],\n",
              "        [ 3.4317415 , -0.26919296, -2.638135  ],\n",
              "        [-0.95789605,  0.23950064,  0.5868449 ],\n",
              "        [ 3.0878425 ,  0.4152216 , -2.8186321 ],\n",
              "        [-1.5968382 ,  1.5155209 ,  0.11805103],\n",
              "        [ 0.6272341 ,  1.4812119 , -1.7288461 ],\n",
              "        [ 1.938949  ,  1.2648991 , -2.673642  ],\n",
              "        [-3.3649607 ,  0.12523326,  2.8600135 ],\n",
              "        [-3.3142107 , -0.6295824 ,  3.4396038 ],\n",
              "        [-0.2342329 , -0.07236331,  0.48399425],\n",
              "        [-3.25012   ,  0.13083169,  2.7587066 ],\n",
              "        [ 0.17502895,  1.1788061 , -1.0996524 ],\n",
              "        [-2.9348261 ,  0.38035804,  2.2707005 ],\n",
              "        [ 1.6578218 ,  0.07847446, -1.2699864 ]], dtype=float32),\n",
              " array([[ 1.900887  ,  0.00538216, -1.5878707 ],\n",
              "        [ 2.5522645 ,  1.0540681 , -2.9803607 ]], dtype=float32)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hCjZqiDf-e-F"
      },
      "source": [
        "from sklearn.metrics import matthews_corrcoef, balanced_accuracy_score\n",
        "import numpy as np\n",
        "\n",
        "balanced_acc_set = []\n",
        "global_prediction_multi = []\n",
        "\n",
        "# Evaluate each test batch using Matthew's correlation coefficient\n",
        "print('Estimating Balanced_accuracy_score for each batch...')\n",
        "\n",
        "# For each input batch...\n",
        "for i in range(len(true_labels_multi)):\n",
        "  \n",
        "  # The predictions for this batch are a 5-column ndarray (from \"0\" (1 Star) \n",
        "  # to \"4\" (5 Stars)). Pick the label with the highest value and turn this\n",
        "  # in to a list.\n",
        "  pred_labels_i = np.argmax(predictions_multi[i], axis=1).flatten()\n",
        "  global_prediction_multi.append(pred_labels_i)\n",
        "  \n",
        "  # Calculate and store the coef for this batch.  \n",
        "  balanced_acc = balanced_accuracy_score(true_labels_multi[i], pred_labels_i)                \n",
        "  balanced_acc_set.append(balanced_acc)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l72DfeGV-e-K"
      },
      "source": [
        "flat_list_multi = [item for sublist in global_prediction_multi for item in sublist]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "5T8NIgQ3-e-L",
        "outputId": "b02034ee-d7a0-4b03-9dd1-1cef8ae1ac3b"
      },
      "source": [
        "# Distribution of Predictions\n",
        "plt.hist(flat_list_multi)\n",
        "plt.title('Prediction Labels')\n",
        "plt.ylabel('Predictions')\n",
        "plt.xlabel('Labels')\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UJX4iYZW-e-L",
        "outputId": "c8fd3e29-1f37-48a9-898b-f2702eb402f9"
      },
      "source": [
        "# Combine the results across all batches. \n",
        "flat_predictions = np.concatenate(predictions_multi, axis=0)\n",
        "\n",
        "# For each sample, pick the label (0 to 4) with the higher score.\n",
        "flat_predictions = np.argmax(flat_predictions, axis=1).flatten()\n",
        "\n",
        "# Combine the correct labels for each batch into a single list.\n",
        "flat_true_labels_multi = np.concatenate(true_labels_multi, axis=0)\n",
        "\n",
        "# Calculate the MCC\n",
        "acc = balanced_accuracy_score(flat_true_labels_multi, flat_predictions)\n",
        "\n",
        "print('Total balanced_acc_set: %.3f' % acc)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total balanced_acc_set: 0.475\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "fpiz0KUtaQdF",
        "outputId": "20fd86a2-8f54-4fa7-d99b-e5d72ad86b95"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "cm = confusion_matrix(flat_predictions, flat_true_labels_multi)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='RdBu', cbar=True, fmt='d')\n",
        "plt.xlabel('true label')\n",
        "plt.ylabel('predicted label')\n",
        "\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
        "print('Accuracy score: ', accuracy_score(flat_predictions, flat_true_labels_multi))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy score:  0.6788306847164999\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mlP5dPd0aQdL",
        "outputId": "afeb757c-bf63-4654-9efa-fb0e9b8bd631"
      },
      "source": [
        "columns = [\"1\", \"2\", \"3\",\"4\",\"5\"]\n",
        "rows = [\"1\", \"2\", \"3\",\"4\",\"5\"]\n",
        "cm_multi_5 = pd.DataFrame(data=cm, index=rows, columns=columns)\n",
        "print(cm_multi_5)\n",
        "cm_multi_5.to_csv('confusion_matrix_multi_5.csv')\n",
        "!cp confusion_matrix_multi_5.csv \"drive/My Drive/Colab_Machine_Learning/Gespeicherte Modelle/Confusion_Matrices/\""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      1    2    3    4     5\n",
            "1  3122  679  445  135   182\n",
            "2    50   36   43    4     2\n",
            "3   216  211  376  207    82\n",
            "4    38   34  147  224   171\n",
            "5   130   49  115  334  3162\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9vHwTXsKaQdM"
      },
      "source": [
        "## Saving Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7PYyAaPwaQdM",
        "outputId": "1e405f65-779c-40b7-f8f0-b1d6913dcc69"
      },
      "source": [
        "import os\n",
        "\n",
        "# Saving best-practices: if you use defaults names for the model, you can reload it using from_pretrained()\n",
        "\n",
        "output_dir = './model_save_multilingual_5/'\n",
        "\n",
        "# Create output directory if needed\n",
        "if not os.path.exists(output_dir):\n",
        "    os.makedirs(output_dir)\n",
        "\n",
        "print(\"Saving model to %s\" % output_dir)\n",
        "\n",
        "# Save a trained model, configuration and tokenizer using `save_pretrained()`.\n",
        "# They can then be reloaded using `from_pretrained()`\n",
        "model_to_save = model_mono.module if hasattr(model_mono, 'module') else model_mono  # Take care of distributed/parallel training\n",
        "model_to_save.save_pretrained(output_dir)\n",
        "tokenizer_mono.save_pretrained(output_dir)\n",
        "\n",
        "# Good practice: save your training arguments together with the trained model\n",
        "# torch.save(args, os.path.join(output_dir, 'training_args.bin'))\n",
        "\n",
        "!cp -r ./model_save_multilingual_5/ \"drive/MyDrive/Colab_Machine_Learning/Gespeicherte Modelle/multilingual_5\""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Saving model to ./model_save_multilingual_5/\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M7_Jmx2Lpx4H"
      },
      "source": [
        "# C2. Model 1: Monolingual"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2mKmCR2vp9-_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bec6e80b-2dcc-42aa-dfa8-6b8b0aeaee53"
      },
      "source": [
        "from torch.utils.data import TensorDataset, random_split\n",
        "from torch.utils.data import DataLoader, RandomSampler, SequentialSampler\n",
        "\n",
        "#Loading Multilingual Tokenizer\n",
        "tokenizer_mono = BertTokenizer.from_pretrained('bert-base-german-cased', do_lower_case=True, strip_accents = False)\n",
        "\n",
        "input_ids_mono = []\n",
        "attention_masks_mono = []\n",
        "\n",
        "# For every sentence...\n",
        "for sent in reviews:\n",
        "    # `encode_plus` will:\n",
        "    #   (1) Tokenize the sentence.\n",
        "    #   (2) Prepend the `[CLS]` token to the start.\n",
        "    #   (3) Append the `[SEP]` token to the end.\n",
        "    #   (4) Map tokens to their IDs.\n",
        "    #   (5) Pad or truncate the sentence to `max_length`\n",
        "    #   (6) Create attention masks for [PAD] tokens.\n",
        "    encoded_dict_mono = tokenizer_mono.encode_plus(\n",
        "                        sent,                      # Sentence to encode.\n",
        "                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n",
        "                        max_length = 256,           # Pad & truncate all sentences.\n",
        "                        pad_to_max_length = True,\n",
        "                        return_tensors = 'pt', \n",
        "                        return_attention_mask=True,\n",
        "                        truncation=True    # Return pytorch tensors.\n",
        "                   )\n",
        "\n",
        "    input_ids_mono.append(encoded_dict_mono['input_ids'])\n",
        "    attention_masks_mono.append(encoded_dict_mono['attention_mask'])\n",
        "\n",
        "# Convert the lists into tensors and combining them into one single Tensordataset\n",
        "input_ids_mono = torch.cat(input_ids_mono, dim=0)\n",
        "attention_masks_mono = torch.cat(attention_masks_mono, dim=0)\n",
        "labels = torch.tensor(stars_adjusted.values)\n",
        "dataset_mono = TensorDataset(input_ids_mono, attention_masks_mono, labels)\n",
        "\n",
        "# Splitting dataset into test_dataset and train_dataset\n",
        "train_size = int(0.8 * len(dataset_mono))\n",
        "test_size = len(dataset_mono) - train_size\n",
        "train_dataset_mono, test_dataset_mono = random_split(dataset_mono, [train_size, test_size])\n",
        "\n",
        "# Splitting test into test and train Set\n",
        "train_size = int(0.9 * len(train_dataset_mono))\n",
        "val_size = len(train_dataset_mono) - train_size\n",
        "train_dataset_mono, val_dataset_mono = random_split(train_dataset_mono, [train_size, val_size])\n",
        "\n",
        "print('{:>5,} test samples'.format(test_size))\n",
        "print('{:>5,} training samples'.format(train_size))\n",
        "print('{:>5,} validation samples'.format(val_size))\n",
        "\n",
        "#Sending Test, Validation and Train Tensordatasets to Dataloader\n",
        "batch_size = 16\n",
        "train_dataloader_mono = DataLoader(\n",
        "            train_dataset_mono,  \n",
        "            sampler = RandomSampler(train_dataset_mono), \n",
        "            batch_size = batch_size \n",
        "        )\n",
        "validation_dataloader_mono = DataLoader(\n",
        "            val_dataset_mono, \n",
        "            sampler = SequentialSampler(val_dataset_mono),\n",
        "            batch_size = batch_size \n",
        "        )\n",
        "test_dataloader_mono = DataLoader(\n",
        "            test_dataset_mono,\n",
        "            sampler = SequentialSampler(test_dataset_mono), \n",
        "            batch_size = batch_size\n",
        ")\n",
        "\n",
        "print('')\n",
        "print('Done')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/transformers/tokenization_utils_base.py:2079: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).\n",
            "  FutureWarning,\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "10,194 test samples\n",
            "36,694 training samples\n",
            "4,078 validation samples\n",
            "\n",
            "Done\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S44f4jpGpx4M"
      },
      "source": [
        "### Define Monolingual Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jhOUTRkDpx4N",
        "outputId": "3ed27788-01ca-4d42-fec6-5f145cacaa62"
      },
      "source": [
        "from transformers import BertForSequenceClassification, AdamW, BertConfig\n",
        "\n",
        "# Load BertForSequenceClassification, the pretrained BERT model with a single \n",
        "# linear classification layer on top. \n",
        "model_mono = BertForSequenceClassification.from_pretrained(\n",
        "    \"bert-base-german-cased\", # Use the 12-layer BERT model, with an uncased vocab.\n",
        "    num_labels = 3, # The number of output labels--2 for binary classification.\n",
        "                    # You can increase this for multi-class tasks.   \n",
        "    output_attentions = False, # Whether the model returns attentions weights.\n",
        "    output_hidden_states = False, # Whether the model returns all hidden-states.\n",
        ")\n",
        "\n",
        "print('')\n",
        "\n",
        "model_mono.cuda()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Some weights of the model checkpoint at bert-base-german-cased were not used when initializing BertForSequenceClassification: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.seq_relationship.weight', 'cls.seq_relationship.bias']\n",
            "- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n",
            "- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n",
            "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-german-cased and are newly initialized: ['classifier.weight', 'classifier.bias']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "BertForSequenceClassification(\n",
              "  (bert): BertModel(\n",
              "    (embeddings): BertEmbeddings(\n",
              "      (word_embeddings): Embedding(30000, 768, padding_idx=0)\n",
              "      (position_embeddings): Embedding(512, 768)\n",
              "      (token_type_embeddings): Embedding(2, 768)\n",
              "      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "      (dropout): Dropout(p=0.1, inplace=False)\n",
              "    )\n",
              "    (encoder): BertEncoder(\n",
              "      (layer): ModuleList(\n",
              "        (0): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (1): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (2): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (3): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (4): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (5): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (6): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (7): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (8): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (9): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (10): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (11): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "    (pooler): BertPooler(\n",
              "      (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "      (activation): Tanh()\n",
              "    )\n",
              "  )\n",
              "  (dropout): Dropout(p=0.1, inplace=False)\n",
              "  (classifier): Linear(in_features=768, out_features=3, bias=True)\n",
              ")"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6lrsxgpQpx4P"
      },
      "source": [
        "from transformers import get_linear_schedule_with_warmup\n",
        "\n",
        "# Number of training epochs. The BERT authors recommend between 2 and 4. \n",
        "# We chose to run for 4, but we'll see later that this may be over-fitting the\n",
        "# training data.\n",
        "epochs = 2\n",
        "\n",
        "# Total number of training steps is [number of batches] x [number of epochs]. \n",
        "# (Note that this is not the same as the number of training samples).\n",
        "total_steps = len(train_dataloader_mono) * epochs\n",
        "\n",
        "optimizer = AdamW(model_mono.parameters(),\n",
        "                  lr = 2e-5, # args.learning_rate - default is 5e-5, our notebook had 2e-5\n",
        "                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.\n",
        "                )\n",
        "\n",
        "# Create the learning rate scheduler.\n",
        "scheduler = get_linear_schedule_with_warmup(optimizer, \n",
        "                                            num_warmup_steps = 0, # Default value in run_glue.py\n",
        "                                            num_training_steps = total_steps)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EgPcF5v_px4Q"
      },
      "source": [
        "##Training"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IT7sVeg6px4Q"
      },
      "source": [
        "# Function to calculate the accuracy of our predictions vs labels\n",
        "def flat_accuracy(preds, labels):\n",
        "    pred_flat = np.argmax(preds, axis=1).flatten()\n",
        "    labels_flat = labels.flatten()\n",
        "    return np.sum(pred_flat == labels_flat) / len(labels_flat)\n",
        "\n",
        "# Helper function for formatting elapsed times as hh:mm:ss\n",
        "\n",
        "import time\n",
        "import datetime\n",
        "\n",
        "def format_time(elapsed):\n",
        "    '''\n",
        "    Takes a time in seconds and returns a string hh:mm:ss\n",
        "    '''\n",
        "    # Round to the nearest second.\n",
        "    elapsed_rounded = int(round((elapsed)))\n",
        "    \n",
        "    # Format as hh:mm:ss\n",
        "    return str(datetime.timedelta(seconds=elapsed_rounded))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vLwL5oGUpx4R",
        "outputId": "b253a00b-b97f-4ba5-94e7-79c9e4a3e12a"
      },
      "source": [
        "import random\n",
        "import numpy as np\n",
        "\n",
        "# This training code is based on the `run_glue.py` script here:\n",
        "# https://github.com/huggingface/transformers/blob/5bfcd0485ece086ebcbed2d008813037968a9e58/examples/run_glue.py#L128\n",
        "\n",
        "# Set the seed value all over the place to make this reproducible.\n",
        "seed_val = 42\n",
        "\n",
        "random.seed(seed_val)\n",
        "np.random.seed(seed_val)\n",
        "torch.manual_seed(seed_val)\n",
        "torch.cuda.manual_seed_all(seed_val)\n",
        "\n",
        "# We'll store a number of quantities such as training and validation loss, \n",
        "# validation accuracy, and timings.\n",
        "training_stats_mono = []\n",
        "\n",
        "# Measure the total training time for the whole run.\n",
        "total_t0 = time.time()\n",
        "\n",
        "# For each epoch...\n",
        "for epoch_i in range(0, epochs):\n",
        "    \n",
        "    # ========================================\n",
        "    #               Training\n",
        "    # ========================================\n",
        "    \n",
        "    # Perform one full pass over the training set.\n",
        "\n",
        "    print(\"\")\n",
        "    print('======== Epoch {:} / {:} ========'.format(epoch_i + 1, epochs))\n",
        "    print('Training...')\n",
        "\n",
        "    # Measure how long the training epoch takes.\n",
        "    t0 = time.time()\n",
        "\n",
        "    # Reset the total loss for this epoch.\n",
        "    total_train_loss = 0\n",
        "\n",
        "    # Put the model into training mode. Don't be mislead--the call to \n",
        "    # `train` just changes the *mode*, it doesn't *perform* the training.\n",
        "    # `dropout` and `batchnorm` layers behave differently during training\n",
        "    # vs. test (source: https://stackoverflow.com/questions/51433378/what-does-model-train-do-in-pytorch)\n",
        "    model_mono.train()\n",
        "\n",
        "    # For each batch of training data...\n",
        "    for step, batch in enumerate(train_dataloader_mono):\n",
        "\n",
        "        # Progress update every 40 batches.\n",
        "        if step % 40 == 0 and not step == 0:\n",
        "            # Calculate elapsed time in minutes.\n",
        "            elapsed = format_time(time.time() - t0)\n",
        "            \n",
        "            # Report progress.\n",
        "            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader_mono), elapsed))\n",
        "\n",
        "        # Unpack this training batch from our dataloader. \n",
        "        #\n",
        "        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n",
        "        # `to` method.\n",
        "        #\n",
        "        # `batch` contains three pytorch tensors:\n",
        "        #   [0]: input ids \n",
        "        #   [1]: attention masks\n",
        "        #   [2]: labels \n",
        "        b_input_ids = batch[0].to(device)\n",
        "        b_input_mask = batch[1].to(device)\n",
        "        b_labels = batch[2].to(device)\n",
        "\n",
        "        # Always clear any previously calculated gradients before performing a\n",
        "        # backward pass. PyTorch doesn't do this automatically because \n",
        "        # accumulating the gradients is \"convenient while training RNNs\". \n",
        "        # (source: https://stackoverflow.com/questions/48001598/why-do-we-need-to-call-zero-grad-in-pytorch)\n",
        "        model_mono.zero_grad()        \n",
        "\n",
        "        # Perform a forward pass (evaluate the model on this training batch).\n",
        "        # In PyTorch, calling `model` will in turn call the model's `forward` \n",
        "        # function and pass down the arguments. The `forward` function is \n",
        "        # documented here: \n",
        "        # https://huggingface.co/transformers/model_doc/bert.html#bertforsequenceclassification\n",
        "        # The results are returned in a results object, documented here:\n",
        "        # https://huggingface.co/transformers/main_classes/output.html#transformers.modeling_outputs.SequenceClassifierOutput\n",
        "        # Specifically, we'll get the loss (because we provided labels) and the\n",
        "        # \"logits\"--the model outputs prior to activation.\n",
        "        result = model_mono(b_input_ids, \n",
        "                       token_type_ids=None, \n",
        "                       attention_mask=b_input_mask, \n",
        "                       labels=b_labels,\n",
        "                       return_dict=True)\n",
        "\n",
        "        loss = result.loss\n",
        "        logits = result.logits\n",
        "\n",
        "        # Accumulate the training loss over all of the batches so that we can\n",
        "        # calculate the average loss at the end. `loss` is a Tensor containing a\n",
        "        # single value; the `.item()` function just returns the Python value \n",
        "        # from the tensor.\n",
        "        total_train_loss += loss.item()\n",
        "\n",
        "        # Perform a backward pass to calculate the gradients.\n",
        "        loss.backward()\n",
        "\n",
        "        # Clip the norm of the gradients to 1.0.\n",
        "        # This is to help prevent the \"exploding gradients\" problem.\n",
        "        torch.nn.utils.clip_grad_norm_(model_mono.parameters(), 1.0)\n",
        "\n",
        "        # Update parameters and take a step using the computed gradient.\n",
        "        # The optimizer dictates the \"update rule\"--how the parameters are\n",
        "        # modified based on their gradients, the learning rate, etc.\n",
        "        optimizer.step()\n",
        "\n",
        "        # Update the learning rate.\n",
        "        scheduler.step()\n",
        "\n",
        "    # Calculate the average loss over all of the batches.\n",
        "    avg_train_loss = total_train_loss / len(train_dataloader_mono)            \n",
        "    \n",
        "    # Measure how long this epoch took.\n",
        "    training_time = format_time(time.time() - t0)\n",
        "\n",
        "    print(\"\")\n",
        "    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n",
        "    print(\"  Training epcoh took: {:}\".format(training_time))\n",
        "        \n",
        "    # ========================================\n",
        "    #               Validation\n",
        "    # ========================================\n",
        "    # After the completion of each training epoch, measure our performance on\n",
        "    # our validation set.\n",
        "\n",
        "    print(\"\")\n",
        "    print(\"Running Validation...\")\n",
        "\n",
        "    t0 = time.time()\n",
        "\n",
        "    # Put the model in evaluation mode--the dropout layers behave differently\n",
        "    # during evaluation.\n",
        "    model_mono.eval()\n",
        "\n",
        "    # Tracking variables \n",
        "    total_eval_accuracy = 0\n",
        "    total_eval_loss = 0\n",
        "    nb_eval_steps = 0\n",
        "\n",
        "    # Evaluate data for one epoch\n",
        "    for batch in validation_dataloader_mono:\n",
        "        \n",
        "        # Unpack this training batch from our dataloader. \n",
        "        #\n",
        "        # As we unpack the batch, we'll also copy each tensor to the GPU using \n",
        "        # the `to` method.\n",
        "        #\n",
        "        # `batch` contains three pytorch tensors:\n",
        "        #   [0]: input ids \n",
        "        #   [1]: attention masks\n",
        "        #   [2]: labels \n",
        "        b_input_ids = batch[0].to(device)\n",
        "        b_input_mask = batch[1].to(device)\n",
        "        b_labels = batch[2].to(device)\n",
        "        \n",
        "        # Tell pytorch not to bother with constructing the compute graph during\n",
        "        # the forward pass, since this is only needed for backprop (training).\n",
        "        with torch.no_grad():        \n",
        "\n",
        "            # Forward pass, calculate logit predictions.\n",
        "            # token_type_ids is the same as the \"segment ids\", which \n",
        "            # differentiates sentence 1 and 2 in 2-sentence tasks.\n",
        "            result = model_mono(b_input_ids, \n",
        "                           token_type_ids=None, \n",
        "                           attention_mask=b_input_mask,\n",
        "                           labels=b_labels,\n",
        "                           return_dict=True)\n",
        "\n",
        "        # Get the loss and \"logits\" output by the model. The \"logits\" are the \n",
        "        # output values prior to applying an activation function like the \n",
        "        # softmax.\n",
        "        loss = result.loss\n",
        "        logits = result.logits\n",
        "            \n",
        "        # Accumulate the validation loss.\n",
        "        total_eval_loss += loss.item()\n",
        "\n",
        "        # Move logits and labels to CPU\n",
        "        logits = logits.detach().cpu().numpy()\n",
        "        label_ids = b_labels.to('cpu').numpy()\n",
        "\n",
        "        # Calculate the accuracy for this batch of test sentences, and\n",
        "        # accumulate it over all batches.\n",
        "        total_eval_accuracy += flat_accuracy(logits, label_ids)\n",
        "        \n",
        "\n",
        "    # Report the final accuracy for this validation run.\n",
        "    avg_val_accuracy = total_eval_accuracy / len(validation_dataloader_mono)\n",
        "    print(\"  Accuracy: {0:.2f}\".format(avg_val_accuracy))\n",
        "\n",
        "    # Calculate the average loss over all of the batches.\n",
        "    avg_val_loss = total_eval_loss / len(validation_dataloader_mono)\n",
        "    \n",
        "    # Measure how long the validation run took.\n",
        "    validation_time = format_time(time.time() - t0)\n",
        "    \n",
        "    print(\"  Validation Loss: {0:.2f}\".format(avg_val_loss))\n",
        "    print(\"  Validation took: {:}\".format(validation_time))\n",
        "\n",
        "    # Record all statistics from this epoch.\n",
        "    training_stats_mono.append(\n",
        "        {\n",
        "            'epoch': epoch_i + 1,\n",
        "            'Training Loss': avg_train_loss,\n",
        "            'Valid. Loss': avg_val_loss,\n",
        "            'Valid. Accur.': avg_val_accuracy,\n",
        "            'Training Time': training_time,\n",
        "            'Validation Time': validation_time\n",
        "        }\n",
        "    )\n",
        "\n",
        "print(\"\")\n",
        "print(\"Training complete!\")\n",
        "\n",
        "print(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "======== Epoch 1 / 2 ========\n",
            "Training...\n",
            "  Batch    40  of  2,294.    Elapsed: 0:00:20.\n",
            "  Batch    80  of  2,294.    Elapsed: 0:00:40.\n",
            "  Batch   120  of  2,294.    Elapsed: 0:01:00.\n",
            "  Batch   160  of  2,294.    Elapsed: 0:01:21.\n",
            "  Batch   200  of  2,294.    Elapsed: 0:01:41.\n",
            "  Batch   240  of  2,294.    Elapsed: 0:02:01.\n",
            "  Batch   280  of  2,294.    Elapsed: 0:02:21.\n",
            "  Batch   320  of  2,294.    Elapsed: 0:02:41.\n",
            "  Batch   360  of  2,294.    Elapsed: 0:03:01.\n",
            "  Batch   400  of  2,294.    Elapsed: 0:03:21.\n",
            "  Batch   440  of  2,294.    Elapsed: 0:03:41.\n",
            "  Batch   480  of  2,294.    Elapsed: 0:04:01.\n",
            "  Batch   520  of  2,294.    Elapsed: 0:04:21.\n",
            "  Batch   560  of  2,294.    Elapsed: 0:04:42.\n",
            "  Batch   600  of  2,294.    Elapsed: 0:05:02.\n",
            "  Batch   640  of  2,294.    Elapsed: 0:05:22.\n",
            "  Batch   680  of  2,294.    Elapsed: 0:05:42.\n",
            "  Batch   720  of  2,294.    Elapsed: 0:06:02.\n",
            "  Batch   760  of  2,294.    Elapsed: 0:06:22.\n",
            "  Batch   800  of  2,294.    Elapsed: 0:06:42.\n",
            "  Batch   840  of  2,294.    Elapsed: 0:07:02.\n",
            "  Batch   880  of  2,294.    Elapsed: 0:07:22.\n",
            "  Batch   920  of  2,294.    Elapsed: 0:07:42.\n",
            "  Batch   960  of  2,294.    Elapsed: 0:08:02.\n",
            "  Batch 1,000  of  2,294.    Elapsed: 0:08:22.\n",
            "  Batch 1,040  of  2,294.    Elapsed: 0:08:43.\n",
            "  Batch 1,080  of  2,294.    Elapsed: 0:09:03.\n",
            "  Batch 1,120  of  2,294.    Elapsed: 0:09:23.\n",
            "  Batch 1,160  of  2,294.    Elapsed: 0:09:43.\n",
            "  Batch 1,200  of  2,294.    Elapsed: 0:10:03.\n",
            "  Batch 1,240  of  2,294.    Elapsed: 0:10:23.\n",
            "  Batch 1,280  of  2,294.    Elapsed: 0:10:43.\n",
            "  Batch 1,320  of  2,294.    Elapsed: 0:11:03.\n",
            "  Batch 1,360  of  2,294.    Elapsed: 0:11:23.\n",
            "  Batch 1,400  of  2,294.    Elapsed: 0:11:43.\n",
            "  Batch 1,440  of  2,294.    Elapsed: 0:12:03.\n",
            "  Batch 1,480  of  2,294.    Elapsed: 0:12:23.\n",
            "  Batch 1,520  of  2,294.    Elapsed: 0:12:43.\n",
            "  Batch 1,560  of  2,294.    Elapsed: 0:13:03.\n",
            "  Batch 1,600  of  2,294.    Elapsed: 0:13:23.\n",
            "  Batch 1,640  of  2,294.    Elapsed: 0:13:43.\n",
            "  Batch 1,680  of  2,294.    Elapsed: 0:14:03.\n",
            "  Batch 1,720  of  2,294.    Elapsed: 0:14:23.\n",
            "  Batch 1,760  of  2,294.    Elapsed: 0:14:43.\n",
            "  Batch 1,800  of  2,294.    Elapsed: 0:15:03.\n",
            "  Batch 1,840  of  2,294.    Elapsed: 0:15:23.\n",
            "  Batch 1,880  of  2,294.    Elapsed: 0:15:43.\n",
            "  Batch 1,920  of  2,294.    Elapsed: 0:16:04.\n",
            "  Batch 1,960  of  2,294.    Elapsed: 0:16:24.\n",
            "  Batch 2,000  of  2,294.    Elapsed: 0:16:44.\n",
            "  Batch 2,040  of  2,294.    Elapsed: 0:17:04.\n",
            "  Batch 2,080  of  2,294.    Elapsed: 0:17:24.\n",
            "  Batch 2,120  of  2,294.    Elapsed: 0:17:44.\n",
            "  Batch 2,160  of  2,294.    Elapsed: 0:18:04.\n",
            "  Batch 2,200  of  2,294.    Elapsed: 0:18:24.\n",
            "  Batch 2,240  of  2,294.    Elapsed: 0:18:44.\n",
            "  Batch 2,280  of  2,294.    Elapsed: 0:19:04.\n",
            "\n",
            "  Average training loss: 0.64\n",
            "  Training epcoh took: 0:19:11\n",
            "\n",
            "Running Validation...\n",
            "  Accuracy: 0.75\n",
            "  Validation Loss: 0.57\n",
            "  Validation took: 0:00:38\n",
            "\n",
            "======== Epoch 2 / 2 ========\n",
            "Training...\n",
            "  Batch    40  of  2,294.    Elapsed: 0:00:20.\n",
            "  Batch    80  of  2,294.    Elapsed: 0:00:40.\n",
            "  Batch   120  of  2,294.    Elapsed: 0:01:00.\n",
            "  Batch   160  of  2,294.    Elapsed: 0:01:20.\n",
            "  Batch   200  of  2,294.    Elapsed: 0:01:41.\n",
            "  Batch   240  of  2,294.    Elapsed: 0:02:01.\n",
            "  Batch   280  of  2,294.    Elapsed: 0:02:21.\n",
            "  Batch   320  of  2,294.    Elapsed: 0:02:41.\n",
            "  Batch   360  of  2,294.    Elapsed: 0:03:01.\n",
            "  Batch   400  of  2,294.    Elapsed: 0:03:21.\n",
            "  Batch   440  of  2,294.    Elapsed: 0:03:41.\n",
            "  Batch   480  of  2,294.    Elapsed: 0:04:01.\n",
            "  Batch   520  of  2,294.    Elapsed: 0:04:21.\n",
            "  Batch   560  of  2,294.    Elapsed: 0:04:42.\n",
            "  Batch   600  of  2,294.    Elapsed: 0:05:02.\n",
            "  Batch   640  of  2,294.    Elapsed: 0:05:22.\n",
            "  Batch   680  of  2,294.    Elapsed: 0:05:42.\n",
            "  Batch   720  of  2,294.    Elapsed: 0:06:02.\n",
            "  Batch   760  of  2,294.    Elapsed: 0:06:22.\n",
            "  Batch   800  of  2,294.    Elapsed: 0:06:42.\n",
            "  Batch   840  of  2,294.    Elapsed: 0:07:02.\n",
            "  Batch   880  of  2,294.    Elapsed: 0:07:22.\n",
            "  Batch   920  of  2,294.    Elapsed: 0:07:42.\n",
            "  Batch   960  of  2,294.    Elapsed: 0:08:02.\n",
            "  Batch 1,000  of  2,294.    Elapsed: 0:08:22.\n",
            "  Batch 1,040  of  2,294.    Elapsed: 0:08:43.\n",
            "  Batch 1,080  of  2,294.    Elapsed: 0:09:03.\n",
            "  Batch 1,120  of  2,294.    Elapsed: 0:09:23.\n",
            "  Batch 1,160  of  2,294.    Elapsed: 0:09:43.\n",
            "  Batch 1,200  of  2,294.    Elapsed: 0:10:03.\n",
            "  Batch 1,240  of  2,294.    Elapsed: 0:10:23.\n",
            "  Batch 1,280  of  2,294.    Elapsed: 0:10:43.\n",
            "  Batch 1,320  of  2,294.    Elapsed: 0:11:03.\n",
            "  Batch 1,360  of  2,294.    Elapsed: 0:11:23.\n",
            "  Batch 1,400  of  2,294.    Elapsed: 0:11:43.\n",
            "  Batch 1,440  of  2,294.    Elapsed: 0:12:03.\n",
            "  Batch 1,480  of  2,294.    Elapsed: 0:12:24.\n",
            "  Batch 1,520  of  2,294.    Elapsed: 0:12:44.\n",
            "  Batch 1,560  of  2,294.    Elapsed: 0:13:04.\n",
            "  Batch 1,600  of  2,294.    Elapsed: 0:13:24.\n",
            "  Batch 1,640  of  2,294.    Elapsed: 0:13:44.\n",
            "  Batch 1,680  of  2,294.    Elapsed: 0:14:04.\n",
            "  Batch 1,720  of  2,294.    Elapsed: 0:14:24.\n",
            "  Batch 1,760  of  2,294.    Elapsed: 0:14:44.\n",
            "  Batch 1,800  of  2,294.    Elapsed: 0:15:04.\n",
            "  Batch 1,840  of  2,294.    Elapsed: 0:15:24.\n",
            "  Batch 1,880  of  2,294.    Elapsed: 0:15:44.\n",
            "  Batch 1,920  of  2,294.    Elapsed: 0:16:04.\n",
            "  Batch 1,960  of  2,294.    Elapsed: 0:16:25.\n",
            "  Batch 2,000  of  2,294.    Elapsed: 0:16:45.\n",
            "  Batch 2,040  of  2,294.    Elapsed: 0:17:05.\n",
            "  Batch 2,080  of  2,294.    Elapsed: 0:17:25.\n",
            "  Batch 2,120  of  2,294.    Elapsed: 0:17:45.\n",
            "  Batch 2,160  of  2,294.    Elapsed: 0:18:05.\n",
            "  Batch 2,200  of  2,294.    Elapsed: 0:18:25.\n",
            "  Batch 2,240  of  2,294.    Elapsed: 0:18:45.\n",
            "  Batch 2,280  of  2,294.    Elapsed: 0:19:05.\n",
            "\n",
            "  Average training loss: 0.47\n",
            "  Training epcoh took: 0:19:12\n",
            "\n",
            "Running Validation...\n",
            "  Accuracy: 0.76\n",
            "  Validation Loss: 0.58\n",
            "  Validation took: 0:00:38\n",
            "\n",
            "Training complete!\n",
            "Total training took 0:39:39 (h:mm:ss)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gAzsGa3mpx4S"
      },
      "source": [
        "## Visualizing and Analysing Results"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 137
        },
        "id": "B1GqD3SZpx4S",
        "outputId": "ed214812-56aa-4357-909c-78234dbb38f0"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Display floats with two decimal places.\n",
        "pd.set_option('precision', 2)\n",
        "\n",
        "# Create a DataFrame from our training statistics.\n",
        "df_stats_mono = pd.DataFrame(data=training_stats_mono)\n",
        "\n",
        "# Use the 'epoch' as the row index.\n",
        "df_stats_mono = df_stats_mono.set_index('epoch')\n",
        "\n",
        "# A hack to force the column headers to wrap.\n",
        "#df = df.style.set_table_styles([dict(selector=\"th\",props=[('max-width', '70px')])])\n",
        "\n",
        "# Display the table.\n",
        "df_stats_mono"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Training Loss</th>\n",
              "      <th>Valid. Loss</th>\n",
              "      <th>Valid. Accur.</th>\n",
              "      <th>Training Time</th>\n",
              "      <th>Validation Time</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>epoch</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.64</td>\n",
              "      <td>0.57</td>\n",
              "      <td>0.75</td>\n",
              "      <td>0:19:11</td>\n",
              "      <td>0:00:38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.47</td>\n",
              "      <td>0.58</td>\n",
              "      <td>0.76</td>\n",
              "      <td>0:19:12</td>\n",
              "      <td>0:00:38</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Training Loss  Valid. Loss  Valid. Accur. Training Time Validation Time\n",
              "epoch                                                                         \n",
              "1               0.64         0.57           0.75       0:19:11         0:00:38\n",
              "2               0.47         0.58           0.76       0:19:12         0:00:38"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "UvmfJyropx4U",
        "outputId": "026901cf-6c54-484b-ba5e-cd672d55b708"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "% matplotlib inline\n",
        "\n",
        "import seaborn as sns\n",
        "\n",
        "# Use plot styling from seaborn.\n",
        "sns.set(style='darkgrid')\n",
        "\n",
        "# Increase the plot size and font size.\n",
        "sns.set(font_scale=1.5)\n",
        "plt.rcParams[\"figure.figsize\"] = (12,6)\n",
        "\n",
        "# Plot the learning curve.\n",
        "plt.plot(df_stats_mono['Training Loss'], 'b-o', label=\"Training\")\n",
        "plt.plot(df_stats_mono['Valid. Loss'], 'g-o', label=\"Validation\")\n",
        "\n",
        "# Label the plot.\n",
        "plt.title(\"Training & Validation Loss\")\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.xticks([1, 2])\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OofazmY6px4U"
      },
      "source": [
        "## Testing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LWfZcAQupx4V"
      },
      "source": [
        "test_dataset_mono\n",
        "prediction_sampler_mono = SequentialSampler(test_dataset_mono)\n",
        "prediction_dataloader_mono = DataLoader(test_dataset_mono, sampler=prediction_sampler_mono, batch_size=batch_size)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6BVlJJ_tpx4V",
        "outputId": "6e0b529a-1078-4290-ec78-9b743df0e9dc"
      },
      "source": [
        "# Prediction on test set\n",
        "\n",
        "print('Predicting labels for {:,} test sentences...'.format(len(test_dataset_mono)))\n",
        "\n",
        "# Put model in evaluation mode\n",
        "model_mono.eval()\n",
        "\n",
        "# Tracking variables \n",
        "predictions_mono , true_labels_mono = [], []\n",
        "\n",
        "# Predict \n",
        "for batch in test_dataloader_mono:\n",
        "  # Add batch to GPU\n",
        "  batch = tuple(t.to(device) for t in batch)\n",
        "  \n",
        "  # Unpack the inputs from our dataloader\n",
        "  b_input_ids, b_input_mask, b_labels = batch\n",
        "  \n",
        "  # Telling the model not to compute or store gradients, saving memory and \n",
        "  # speeding up prediction\n",
        "  with torch.no_grad():\n",
        "      # Forward pass, calculate logit predictions\n",
        "      outputs = model_mono(b_input_ids, token_type_ids=None, \n",
        "                      attention_mask=b_input_mask)\n",
        "\n",
        "  logits = outputs[0]\n",
        "\n",
        "  # Move logits and labels to CPU\n",
        "  logits = logits.detach().cpu().numpy()\n",
        "  label_ids = b_labels.to('cpu').numpy()\n",
        "  \n",
        "  # Store predictions and true labels\n",
        "  predictions_mono.append(logits)\n",
        "  true_labels_mono.append(label_ids)\n",
        "\n",
        "print('    DONE.')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Predicting labels for 10,194 test sentences...\n",
            "    DONE.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MFSFkKZEpx4V",
        "outputId": "5cf7f605-9251-4d80-e3d8-f21561293b3b"
      },
      "source": [
        "print(true_labels_mono[0])\n",
        "print(predictions_mono[0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0 2 2 2 2 1 2 1 0 0 2 0 1 0 0 2]\n",
            "[[ 0.5295091   0.9551276  -1.7829438 ]\n",
            " [-1.1450198   1.8538522  -0.74000794]\n",
            " [-3.1299593  -0.98649496  4.0418653 ]\n",
            " [-4.0419545  -0.3186942   3.8304107 ]\n",
            " [-4.030346   -0.35810584  3.7749465 ]\n",
            " [-1.0718678   1.4327687  -0.6821063 ]\n",
            " [-2.9186246  -1.3718303   3.827007  ]\n",
            " [-0.5903717   2.1752634  -1.7820636 ]\n",
            " [ 3.445234   -0.11945145 -3.5117455 ]\n",
            " [ 0.47997072  0.48470914 -1.4239533 ]\n",
            " [-3.5361285  -0.19063066  3.4771693 ]\n",
            " [-0.264274    1.0995404  -1.4807884 ]\n",
            " [-0.89826596  2.1827078  -1.0069427 ]\n",
            " [ 1.6787602   0.57562387 -2.4792857 ]\n",
            " [-1.7667701   1.8071076  -0.23981124]\n",
            " [-3.539416   -0.34019503  3.7209287 ]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QMo_v0XTpx4W",
        "outputId": "98b68475-b7ef-4fd2-c371-e7702a260fcd"
      },
      "source": [
        "from sklearn.metrics import matthews_corrcoef, balanced_accuracy_score\n",
        "import numpy as np\n",
        "\n",
        "balanced_acc_set_mono = []\n",
        "global_prediction_mono = []\n",
        "\n",
        "# Evaluate each test batch using Matthew's correlation coefficient\n",
        "print('Estimating Balanced_accuracy_score for each batch...')\n",
        "\n",
        "# For each input batch...\n",
        "for i in range(len(true_labels_mono)):\n",
        "  \n",
        "  # The predictions for this batch are a 5-column ndarray (from \"0\" (1 Star) \n",
        "  # to \"4\" (5 Stars)). Pick the label with the highest value and turn this\n",
        "  # in to a list.\n",
        "  pred_labels_i = np.argmax(predictions_mono[i], axis=1).flatten()\n",
        "  global_prediction_mono.append(pred_labels_i)\n",
        "  \n",
        "  # Calculate and store the coef for this batch.  \n",
        "  balanced_acc = balanced_accuracy_score(true_labels_mono[i], pred_labels_i)                \n",
        "  balanced_acc_set_mono.append(balanced_acc)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Estimating Balanced_accuracy_score for each batch...\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1859: UserWarning: y_pred contains classes not in y_true\n",
            "  warnings.warn('y_pred contains classes not in y_true')\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xl6D077qpx4W"
      },
      "source": [
        "flat_list = [item for sublist in global_prediction_mono for item in sublist]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "ttt9-kaEpx4W",
        "outputId": "4d753a54-cf5e-4505-9a0a-c3fb2784f015"
      },
      "source": [
        "# Distribution of Predictions\n",
        "plt.hist(flat_list)\n",
        "plt.title('Prediction Labels')\n",
        "plt.ylabel('Predictions')\n",
        "plt.xlabel('Labels')\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z7xwUmQwpx4X",
        "outputId": "d7d382d0-1ecf-4939-ee0f-a068a903d632"
      },
      "source": [
        "# Combine the results across all batches. \n",
        "flat_predictions = np.concatenate(predictions_mono, axis=0)\n",
        "\n",
        "# For each sample, pick the label (0 to 4) with the higher score.\n",
        "flat_predictions = np.argmax(flat_predictions, axis=1).flatten()\n",
        "\n",
        "# Combine the correct labels for each batch into a single list.\n",
        "flat_true_labels_mono = np.concatenate(true_labels_mono, axis=0)\n",
        "\n",
        "# Calculate the MCC\n",
        "acc = balanced_accuracy_score(flat_true_labels_mono, flat_predictions)\n",
        "\n",
        "print('Total balanced_acc_set: %.3f' % acc)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total balanced_acc_set: 0.751\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "z6MXK9Zmpx4Y",
        "outputId": "dc03d11a-0437-4c07-b363-c5b09903ace9"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "cm = confusion_matrix(flat_predictions, flat_true_labels_mono)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='RdBu', cbar=True, fmt='d')\n",
        "plt.xlabel('true label')\n",
        "plt.ylabel('predicted label')\n",
        "\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
        "print('Accuracy score: ', accuracy_score(flat_predictions, flat_true_labels_mono))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy score:  0.757504414361389\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qyvZhD-xUmrh",
        "outputId": "4a84e9da-2187-4dfc-d3e9-7895dcfc3b44"
      },
      "source": [
        "columns = [\"1\", \"2\", \"3\"]\n",
        "rows = [\"1\", \"2\", \"3\"]\n",
        "cm_mono_3 = pd.DataFrame(data=cm, index=rows, columns=columns)\n",
        "print(cm_mono_3)\n",
        "cm_mono_3.to_csv('confusion_matrix_mono_3.csv')\n",
        "!cp confusion_matrix_mono_3.csv \"drive/My Drive/Colab_Machine_Learning/Gespeicherte Modelle/Confusion_Matrices/\""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      1     2     3\n",
            "1  2759   721   114\n",
            "2   743  1876   332\n",
            "3   127   435  3087\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3fzL6rPkJhQf"
      },
      "source": [
        "## Saving Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W3JLg_JXJhQ0",
        "outputId": "95631eb6-03c6-42ff-a802-845d2a5de575"
      },
      "source": [
        "import os\n",
        "\n",
        "# Saving best-practices: if you use defaults names for the model, you can reload it using from_pretrained()\n",
        "\n",
        "output_dir = './model_save_monolingual_3/'\n",
        "\n",
        "# Create output directory if needed\n",
        "if not os.path.exists(output_dir):\n",
        "    os.makedirs(output_dir)\n",
        "\n",
        "print(\"Saving model to %s\" % output_dir)\n",
        "\n",
        "# Save a trained model, configuration and tokenizer using `save_pretrained()`.\n",
        "# They can then be reloaded using `from_pretrained()`\n",
        "model_to_save = model_mono.module if hasattr(model_mono, 'module') else model_mono  # Take care of distributed/parallel training\n",
        "model_to_save.save_pretrained(output_dir)\n",
        "tokenizer_mono.save_pretrained(output_dir)\n",
        "\n",
        "# Good practice: save your training arguments together with the trained model\n",
        "# torch.save(args, os.path.join(output_dir, 'training_args.bin'))\n",
        "\n",
        "!cp -r ./model_save_monolingual_3/ \"drive/MyDrive/Colab_Machine_Learning/Gespeicherte Modelle/monolingual_3\""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Saving model to ./model_save_monolingual_3/\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a9lepBP5wmkW"
      },
      "source": [
        "#D2. Model 2: Multilingual"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jg24TXXjxPbh",
        "outputId": "5c77ab02-eecd-445d-8dba-60e2c3a6d71b"
      },
      "source": [
        "from torch.utils.data import TensorDataset, random_split\n",
        "from torch.utils.data import DataLoader, RandomSampler, SequentialSampler\n",
        "\n",
        "#Loading Multilingual Tokenizer\n",
        "tokenizer_multi = BertTokenizer.from_pretrained('bert-base-multilingual-cased', do_lower_case=True, strip_accents = False)\n",
        "\n",
        "input_ids_multi = []\n",
        "attention_masks_multi = []\n",
        "\n",
        "# For every sentence...\n",
        "for sent in reviews:\n",
        "    # `encode_plus` will:\n",
        "    #   (1) Tokenize the sentence.\n",
        "    #   (2) Prepend the `[CLS]` token to the start.\n",
        "    #   (3) Append the `[SEP]` token to the end.\n",
        "    #   (4) Map tokens to their IDs.\n",
        "    #   (5) Pad or truncate the sentence to `max_length`\n",
        "    #   (6) Create attention masks for [PAD] tokens.\n",
        "    encoded_dict_multi = tokenizer_multi.encode_plus(\n",
        "                        sent,                      # Sentence to encode.\n",
        "                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n",
        "                        max_length = 256,           # Pad & truncate all sentences.\n",
        "                        pad_to_max_length = True,\n",
        "                        return_tensors = 'pt', \n",
        "                        return_attention_mask=True,\n",
        "                        truncation=True    # Return pytorch tensors.\n",
        "                   )\n",
        "\n",
        "    input_ids_multi.append(encoded_dict_multi['input_ids'])\n",
        "    attention_masks_multi.append(encoded_dict_multi['attention_mask'])\n",
        "\n",
        "# Convert the lists into tensors and combining them into one single Tensordataset\n",
        "input_ids_multi = torch.cat(input_ids_multi, dim=0)\n",
        "attention_masks_multi = torch.cat(attention_masks_multi, dim=0)\n",
        "labels = torch.tensor(stars_adjusted.values)\n",
        "dataset_multi = TensorDataset(input_ids_multi, attention_masks_multi, labels)\n",
        "\n",
        "# Splitting dataset into test_dataset and train_dataset\n",
        "train_size = int(0.8 * len(dataset_multi))\n",
        "test_size = len(dataset_multi) - train_size\n",
        "train_dataset_multi, test_dataset_multi = random_split(dataset_multi, [train_size, test_size])\n",
        "\n",
        "# Splitting test into test and train Set\n",
        "train_size = int(0.9 * len(train_dataset_multi))\n",
        "val_size = len(train_dataset_multi) - train_size\n",
        "train_dataset_multi, val_dataset_multi = random_split(train_dataset_multi, [train_size, val_size])\n",
        "\n",
        "print('{:>5,} test samples'.format(test_size))\n",
        "print('{:>5,} training samples'.format(train_size))\n",
        "print('{:>5,} validation samples'.format(val_size))\n",
        "\n",
        "#Sending Test, Validation and Train Tensordatasets to Dataloader\n",
        "batch_size = 16\n",
        "train_dataloader_multi = DataLoader(\n",
        "            train_dataset_multi,  \n",
        "            sampler = RandomSampler(train_dataset_multi), \n",
        "            batch_size = batch_size \n",
        "        )\n",
        "validation_dataloader_multi = DataLoader(\n",
        "            val_dataset_multi, \n",
        "            sampler = SequentialSampler(val_dataset_multi),\n",
        "            batch_size = batch_size \n",
        "        )\n",
        "test_dataloader_multi = DataLoader(\n",
        "            test_dataset_multi,\n",
        "            sampler = SequentialSampler(test_dataset_multi), \n",
        "            batch_size = batch_size\n",
        ")\n",
        "\n",
        "print('')\n",
        "print('Done')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/transformers/tokenization_utils_base.py:2079: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).\n",
            "  FutureWarning,\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "10,194 test samples\n",
            "36,694 training samples\n",
            "4,078 validation samples\n",
            "\n",
            "Done\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pfnu9BrzwmkX"
      },
      "source": [
        "### Define Multilingual Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5hrkC_M4wmkX",
        "outputId": "c51f6402-d7b6-4145-dca3-928b854c2a2f"
      },
      "source": [
        "from transformers import BertForSequenceClassification, AdamW, BertConfig\n",
        "\n",
        "# Load BertForSequenceClassification, the pretrained BERT model with a single \n",
        "# linear classification layer on top. \n",
        "model_multi = BertForSequenceClassification.from_pretrained(\n",
        "    \"bert-base-multilingual-cased\", # Use the 12-layer BERT model, with an uncased vocab.\n",
        "    num_labels = 3, # The number of output labels--2 for binary classification.\n",
        "                    # You can increase this for multi-class tasks.   \n",
        "    output_attentions = False, # Whether the model returns attentions weights.\n",
        "    output_hidden_states = False, # Whether the model returns all hidden-states.\n",
        ")\n",
        "\n",
        "print('')\n",
        "\n",
        "model_multi.cuda()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Some weights of the model checkpoint at bert-base-multilingual-cased were not used when initializing BertForSequenceClassification: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.decoder.weight', 'cls.seq_relationship.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias']\n",
            "- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n",
            "- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n",
            "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-multilingual-cased and are newly initialized: ['classifier.weight', 'classifier.bias']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "BertForSequenceClassification(\n",
              "  (bert): BertModel(\n",
              "    (embeddings): BertEmbeddings(\n",
              "      (word_embeddings): Embedding(119547, 768, padding_idx=0)\n",
              "      (position_embeddings): Embedding(512, 768)\n",
              "      (token_type_embeddings): Embedding(2, 768)\n",
              "      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "      (dropout): Dropout(p=0.1, inplace=False)\n",
              "    )\n",
              "    (encoder): BertEncoder(\n",
              "      (layer): ModuleList(\n",
              "        (0): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (1): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (2): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (3): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (4): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (5): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (6): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (7): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (8): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (9): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (10): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "        (11): BertLayer(\n",
              "          (attention): BertAttention(\n",
              "            (self): BertSelfAttention(\n",
              "              (query): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (key): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (value): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "            (output): BertSelfOutput(\n",
              "              (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "              (dropout): Dropout(p=0.1, inplace=False)\n",
              "            )\n",
              "          )\n",
              "          (intermediate): BertIntermediate(\n",
              "            (dense): Linear(in_features=768, out_features=3072, bias=True)\n",
              "          )\n",
              "          (output): BertOutput(\n",
              "            (dense): Linear(in_features=3072, out_features=768, bias=True)\n",
              "            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
              "            (dropout): Dropout(p=0.1, inplace=False)\n",
              "          )\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "    (pooler): BertPooler(\n",
              "      (dense): Linear(in_features=768, out_features=768, bias=True)\n",
              "      (activation): Tanh()\n",
              "    )\n",
              "  )\n",
              "  (dropout): Dropout(p=0.1, inplace=False)\n",
              "  (classifier): Linear(in_features=768, out_features=3, bias=True)\n",
              ")"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_9HAY89dwmkY"
      },
      "source": [
        "from transformers import get_linear_schedule_with_warmup\n",
        "\n",
        "# Number of training epochs. The BERT authors recommend between 2 and 4. \n",
        "# We chose to run for 4, but we'll see later that this may be over-fitting the\n",
        "# training data.\n",
        "epochs = 2\n",
        "\n",
        "# Total number of training steps is [number of batches] x [number of epochs]. \n",
        "# (Note that this is not the same as the number of training samples).\n",
        "total_steps = len(train_dataloader_multi) * epochs\n",
        "\n",
        "optimizer = AdamW(model_multi.parameters(),\n",
        "                  lr = 2e-5, # args.learning_rate - default is 5e-5, our notebook had 2e-5\n",
        "                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.\n",
        "                )\n",
        "\n",
        "# Create the learning rate scheduler.\n",
        "scheduler = get_linear_schedule_with_warmup(optimizer, \n",
        "                                            num_warmup_steps = 0, # Default value in run_glue.py\n",
        "                                            num_training_steps = total_steps)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9wOUHyJmwmkY"
      },
      "source": [
        "##Training"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0inIC0A7wmkZ",
        "outputId": "1e29553c-c18e-4844-8cb2-26790044c910"
      },
      "source": [
        "import random\n",
        "import numpy as np\n",
        "\n",
        "# This training code is based on the `run_glue.py` script here:\n",
        "# https://github.com/huggingface/transformers/blob/5bfcd0485ece086ebcbed2d008813037968a9e58/examples/run_glue.py#L128\n",
        "\n",
        "# Set the seed value all over the place to make this reproducible.\n",
        "seed_val = 42\n",
        "\n",
        "random.seed(seed_val)\n",
        "np.random.seed(seed_val)\n",
        "torch.manual_seed(seed_val)\n",
        "torch.cuda.manual_seed_all(seed_val)\n",
        "\n",
        "# We'll store a number of quantities such as training and validation loss, \n",
        "# validation accuracy, and timings.\n",
        "training_stats_multi = []\n",
        "\n",
        "# Measure the total training time for the whole run.\n",
        "total_t0 = time.time()\n",
        "\n",
        "# For each epoch...\n",
        "for epoch_i in range(0, epochs):\n",
        "    \n",
        "    # ========================================\n",
        "    #               Training\n",
        "    # ========================================\n",
        "    \n",
        "    # Perform one full pass over the training set.\n",
        "\n",
        "    print(\"\")\n",
        "    print('======== Epoch {:} / {:} ========'.format(epoch_i + 1, epochs))\n",
        "    print('Training...')\n",
        "\n",
        "    # Measure how long the training epoch takes.\n",
        "    t0 = time.time()\n",
        "\n",
        "    # Reset the total loss for this epoch.\n",
        "    total_train_loss = 0\n",
        "\n",
        "    # Put the model into training mode. Don't be mislead--the call to \n",
        "    # `train` just changes the *mode*, it doesn't *perform* the training.\n",
        "    # `dropout` and `batchnorm` layers behave differently during training\n",
        "    # vs. test (source: https://stackoverflow.com/questions/51433378/what-does-model-train-do-in-pytorch)\n",
        "    model_multi.train()\n",
        "\n",
        "    # For each batch of training data...\n",
        "    for step, batch in enumerate(train_dataloader_multi):\n",
        "\n",
        "        # Progress update every 40 batches.\n",
        "        if step % 40 == 0 and not step == 0:\n",
        "            # Calculate elapsed time in minutes.\n",
        "            elapsed = format_time(time.time() - t0)\n",
        "            \n",
        "            # Report progress.\n",
        "            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader_multi), elapsed))\n",
        "\n",
        "        # Unpack this training batch from our dataloader. \n",
        "        #\n",
        "        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n",
        "        # `to` method.\n",
        "        #\n",
        "        # `batch` contains three pytorch tensors:\n",
        "        #   [0]: input ids \n",
        "        #   [1]: attention masks\n",
        "        #   [2]: labels \n",
        "        b_input_ids = batch[0].to(device)\n",
        "        b_input_mask = batch[1].to(device)\n",
        "        b_labels = batch[2].to(device)\n",
        "\n",
        "        # Always clear any previously calculated gradients before performing a\n",
        "        # backward pass. PyTorch doesn't do this automatically because \n",
        "        # accumulating the gradients is \"convenient while training RNNs\". \n",
        "        # (source: https://stackoverflow.com/questions/48001598/why-do-we-need-to-call-zero-grad-in-pytorch)\n",
        "        model_multi.zero_grad()        \n",
        "\n",
        "        # Perform a forward pass (evaluate the model on this training batch).\n",
        "        # In PyTorch, calling `model` will in turn call the model's `forward` \n",
        "        # function and pass down the arguments. The `forward` function is \n",
        "        # documented here: \n",
        "        # https://huggingface.co/transformers/model_doc/bert.html#bertforsequenceclassification\n",
        "        # The results are returned in a results object, documented here:\n",
        "        # https://huggingface.co/transformers/main_classes/output.html#transformers.modeling_outputs.SequenceClassifierOutput\n",
        "        # Specifically, we'll get the loss (because we provided labels) and the\n",
        "        # \"logits\"--the model outputs prior to activation.\n",
        "        result = model_multi(b_input_ids, \n",
        "                       token_type_ids=None, \n",
        "                       attention_mask=b_input_mask, \n",
        "                       labels=b_labels,\n",
        "                       return_dict=True)\n",
        "\n",
        "        loss = result.loss\n",
        "        logits = result.logits\n",
        "\n",
        "        # Accumulate the training loss over all of the batches so that we can\n",
        "        # calculate the average loss at the end. `loss` is a Tensor containing a\n",
        "        # single value; the `.item()` function just returns the Python value \n",
        "        # from the tensor.\n",
        "        total_train_loss += loss.item()\n",
        "\n",
        "        # Perform a backward pass to calculate the gradients.\n",
        "        loss.backward()\n",
        "\n",
        "        # Clip the norm of the gradients to 1.0.\n",
        "        # This is to help prevent the \"exploding gradients\" problem.\n",
        "        torch.nn.utils.clip_grad_norm_(model_multi.parameters(), 1.0)\n",
        "\n",
        "        # Update parameters and take a step using the computed gradient.\n",
        "        # The optimizer dictates the \"update rule\"--how the parameters are\n",
        "        # modified based on their gradients, the learning rate, etc.\n",
        "        optimizer.step()\n",
        "\n",
        "        # Update the learning rate.\n",
        "        scheduler.step()\n",
        "\n",
        "    # Calculate the average loss over all of the batches.\n",
        "    avg_train_loss = total_train_loss / len(train_dataloader_multi)            \n",
        "    \n",
        "    # Measure how long this epoch took.\n",
        "    training_time = format_time(time.time() - t0)\n",
        "\n",
        "    print(\"\")\n",
        "    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n",
        "    print(\"  Training epcoh took: {:}\".format(training_time))\n",
        "        \n",
        "    # ========================================\n",
        "    #               Validation\n",
        "    # ========================================\n",
        "    # After the completion of each training epoch, measure our performance on\n",
        "    # our validation set.\n",
        "\n",
        "    print(\"\")\n",
        "    print(\"Running Validation...\")\n",
        "\n",
        "    t0 = time.time()\n",
        "\n",
        "    # Put the model in evaluation mode--the dropout layers behave differently\n",
        "    # during evaluation.\n",
        "    model_multi.eval()\n",
        "\n",
        "    # Tracking variables \n",
        "    total_eval_accuracy = 0\n",
        "    total_eval_loss = 0\n",
        "    nb_eval_steps = 0\n",
        "\n",
        "    # Evaluate data for one epoch\n",
        "    for batch in validation_dataloader_multi:\n",
        "        \n",
        "        # Unpack this training batch from our dataloader. \n",
        "        #\n",
        "        # As we unpack the batch, we'll also copy each tensor to the GPU using \n",
        "        # the `to` method.\n",
        "        #\n",
        "        # `batch` contains three pytorch tensors:\n",
        "        #   [0]: input ids \n",
        "        #   [1]: attention masks\n",
        "        #   [2]: labels \n",
        "        b_input_ids = batch[0].to(device)\n",
        "        b_input_mask = batch[1].to(device)\n",
        "        b_labels = batch[2].to(device)\n",
        "        \n",
        "        # Tell pytorch not to bother with constructing the compute graph during\n",
        "        # the forward pass, since this is only needed for backprop (training).\n",
        "        with torch.no_grad():        \n",
        "\n",
        "            # Forward pass, calculate logit predictions.\n",
        "            # token_type_ids is the same as the \"segment ids\", which \n",
        "            # differentiates sentence 1 and 2 in 2-sentence tasks.\n",
        "            result = model_multi(b_input_ids, \n",
        "                           token_type_ids=None, \n",
        "                           attention_mask=b_input_mask,\n",
        "                           labels=b_labels,\n",
        "                           return_dict=True)\n",
        "\n",
        "        # Get the loss and \"logits\" output by the model. The \"logits\" are the \n",
        "        # output values prior to applying an activation function like the \n",
        "        # softmax.\n",
        "        loss = result.loss\n",
        "        logits = result.logits\n",
        "            \n",
        "        # Accumulate the validation loss.\n",
        "        total_eval_loss += loss.item()\n",
        "\n",
        "        # Move logits and labels to CPU\n",
        "        logits = logits.detach().cpu().numpy()\n",
        "        label_ids = b_labels.to('cpu').numpy()\n",
        "\n",
        "        # Calculate the accuracy for this batch of test sentences, and\n",
        "        # accumulate it over all batches.\n",
        "        total_eval_accuracy += flat_accuracy(logits, label_ids)\n",
        "        \n",
        "\n",
        "    # Report the final accuracy for this validation run.\n",
        "    avg_val_accuracy = total_eval_accuracy / len(validation_dataloader_multi)\n",
        "    print(\"  Accuracy: {0:.2f}\".format(avg_val_accuracy))\n",
        "\n",
        "    # Calculate the average loss over all of the batches.\n",
        "    avg_val_loss = total_eval_loss / len(validation_dataloader_multi)\n",
        "    \n",
        "    # Measure how long the validation run took.\n",
        "    validation_time = format_time(time.time() - t0)\n",
        "    \n",
        "    print(\"  Validation Loss: {0:.2f}\".format(avg_val_loss))\n",
        "    print(\"  Validation took: {:}\".format(validation_time))\n",
        "\n",
        "    # Record all statistics from this epoch.\n",
        "    training_stats_multi.append(\n",
        "        {\n",
        "            'epoch': epoch_i + 1,\n",
        "            'Training Loss': avg_train_loss,\n",
        "            'Valid. Loss': avg_val_loss,\n",
        "            'Valid. Accur.': avg_val_accuracy,\n",
        "            'Training Time': training_time,\n",
        "            'Validation Time': validation_time\n",
        "        }\n",
        "    )\n",
        "\n",
        "print(\"\")\n",
        "print(\"Training complete!\")\n",
        "\n",
        "print(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "======== Epoch 1 / 2 ========\n",
            "Training...\n",
            "  Batch    40  of  2,294.    Elapsed: 0:00:21.\n",
            "  Batch    80  of  2,294.    Elapsed: 0:00:41.\n",
            "  Batch   120  of  2,294.    Elapsed: 0:01:02.\n",
            "  Batch   160  of  2,294.    Elapsed: 0:01:23.\n",
            "  Batch   200  of  2,294.    Elapsed: 0:01:43.\n",
            "  Batch   240  of  2,294.    Elapsed: 0:02:04.\n",
            "  Batch   280  of  2,294.    Elapsed: 0:02:24.\n",
            "  Batch   320  of  2,294.    Elapsed: 0:02:45.\n",
            "  Batch   360  of  2,294.    Elapsed: 0:03:06.\n",
            "  Batch   400  of  2,294.    Elapsed: 0:03:26.\n",
            "  Batch   440  of  2,294.    Elapsed: 0:03:47.\n",
            "  Batch   480  of  2,294.    Elapsed: 0:04:07.\n",
            "  Batch   520  of  2,294.    Elapsed: 0:04:28.\n",
            "  Batch   560  of  2,294.    Elapsed: 0:04:49.\n",
            "  Batch   600  of  2,294.    Elapsed: 0:05:09.\n",
            "  Batch   640  of  2,294.    Elapsed: 0:05:30.\n",
            "  Batch   680  of  2,294.    Elapsed: 0:05:51.\n",
            "  Batch   720  of  2,294.    Elapsed: 0:06:11.\n",
            "  Batch   760  of  2,294.    Elapsed: 0:06:32.\n",
            "  Batch   800  of  2,294.    Elapsed: 0:06:52.\n",
            "  Batch   840  of  2,294.    Elapsed: 0:07:13.\n",
            "  Batch   880  of  2,294.    Elapsed: 0:07:34.\n",
            "  Batch   920  of  2,294.    Elapsed: 0:07:54.\n",
            "  Batch   960  of  2,294.    Elapsed: 0:08:15.\n",
            "  Batch 1,000  of  2,294.    Elapsed: 0:08:36.\n",
            "  Batch 1,040  of  2,294.    Elapsed: 0:08:56.\n",
            "  Batch 1,080  of  2,294.    Elapsed: 0:09:17.\n",
            "  Batch 1,120  of  2,294.    Elapsed: 0:09:37.\n",
            "  Batch 1,160  of  2,294.    Elapsed: 0:09:58.\n",
            "  Batch 1,200  of  2,294.    Elapsed: 0:10:19.\n",
            "  Batch 1,240  of  2,294.    Elapsed: 0:10:39.\n",
            "  Batch 1,280  of  2,294.    Elapsed: 0:11:00.\n",
            "  Batch 1,320  of  2,294.    Elapsed: 0:11:20.\n",
            "  Batch 1,360  of  2,294.    Elapsed: 0:11:41.\n",
            "  Batch 1,400  of  2,294.    Elapsed: 0:12:02.\n",
            "  Batch 1,440  of  2,294.    Elapsed: 0:12:22.\n",
            "  Batch 1,480  of  2,294.    Elapsed: 0:12:43.\n",
            "  Batch 1,520  of  2,294.    Elapsed: 0:13:03.\n",
            "  Batch 1,560  of  2,294.    Elapsed: 0:13:24.\n",
            "  Batch 1,600  of  2,294.    Elapsed: 0:13:45.\n",
            "  Batch 1,640  of  2,294.    Elapsed: 0:14:05.\n",
            "  Batch 1,680  of  2,294.    Elapsed: 0:14:26.\n",
            "  Batch 1,720  of  2,294.    Elapsed: 0:14:46.\n",
            "  Batch 1,760  of  2,294.    Elapsed: 0:15:07.\n",
            "  Batch 1,800  of  2,294.    Elapsed: 0:15:27.\n",
            "  Batch 1,840  of  2,294.    Elapsed: 0:15:48.\n",
            "  Batch 1,880  of  2,294.    Elapsed: 0:16:08.\n",
            "  Batch 1,920  of  2,294.    Elapsed: 0:16:29.\n",
            "  Batch 1,960  of  2,294.    Elapsed: 0:16:50.\n",
            "  Batch 2,000  of  2,294.    Elapsed: 0:17:10.\n",
            "  Batch 2,040  of  2,294.    Elapsed: 0:17:31.\n",
            "  Batch 2,080  of  2,294.    Elapsed: 0:17:51.\n",
            "  Batch 2,120  of  2,294.    Elapsed: 0:18:12.\n",
            "  Batch 2,160  of  2,294.    Elapsed: 0:18:32.\n",
            "  Batch 2,200  of  2,294.    Elapsed: 0:18:53.\n",
            "  Batch 2,240  of  2,294.    Elapsed: 0:19:14.\n",
            "  Batch 2,280  of  2,294.    Elapsed: 0:19:34.\n",
            "\n",
            "  Average training loss: 0.68\n",
            "  Training epcoh took: 0:19:41\n",
            "\n",
            "Running Validation...\n",
            "  Accuracy: 0.75\n",
            "  Validation Loss: 0.59\n",
            "  Validation took: 0:00:38\n",
            "\n",
            "======== Epoch 2 / 2 ========\n",
            "Training...\n",
            "  Batch    40  of  2,294.    Elapsed: 0:00:21.\n",
            "  Batch    80  of  2,294.    Elapsed: 0:00:41.\n",
            "  Batch   120  of  2,294.    Elapsed: 0:01:02.\n",
            "  Batch   160  of  2,294.    Elapsed: 0:01:22.\n",
            "  Batch   200  of  2,294.    Elapsed: 0:01:43.\n",
            "  Batch   240  of  2,294.    Elapsed: 0:02:04.\n",
            "  Batch   280  of  2,294.    Elapsed: 0:02:24.\n",
            "  Batch   320  of  2,294.    Elapsed: 0:02:45.\n",
            "  Batch   360  of  2,294.    Elapsed: 0:03:05.\n",
            "  Batch   400  of  2,294.    Elapsed: 0:03:26.\n",
            "  Batch   440  of  2,294.    Elapsed: 0:03:47.\n",
            "  Batch   480  of  2,294.    Elapsed: 0:04:07.\n",
            "  Batch   520  of  2,294.    Elapsed: 0:04:28.\n",
            "  Batch   560  of  2,294.    Elapsed: 0:04:49.\n",
            "  Batch   600  of  2,294.    Elapsed: 0:05:09.\n",
            "  Batch   640  of  2,294.    Elapsed: 0:05:30.\n",
            "  Batch   680  of  2,294.    Elapsed: 0:05:50.\n",
            "  Batch   720  of  2,294.    Elapsed: 0:06:11.\n",
            "  Batch   760  of  2,294.    Elapsed: 0:06:32.\n",
            "  Batch   800  of  2,294.    Elapsed: 0:06:52.\n",
            "  Batch   840  of  2,294.    Elapsed: 0:07:13.\n",
            "  Batch   880  of  2,294.    Elapsed: 0:07:33.\n",
            "  Batch   920  of  2,294.    Elapsed: 0:07:54.\n",
            "  Batch   960  of  2,294.    Elapsed: 0:08:15.\n",
            "  Batch 1,000  of  2,294.    Elapsed: 0:08:35.\n",
            "  Batch 1,040  of  2,294.    Elapsed: 0:08:56.\n",
            "  Batch 1,080  of  2,294.    Elapsed: 0:09:16.\n",
            "  Batch 1,120  of  2,294.    Elapsed: 0:09:37.\n",
            "  Batch 1,160  of  2,294.    Elapsed: 0:09:57.\n",
            "  Batch 1,200  of  2,294.    Elapsed: 0:10:18.\n",
            "  Batch 1,240  of  2,294.    Elapsed: 0:10:39.\n",
            "  Batch 1,280  of  2,294.    Elapsed: 0:10:59.\n",
            "  Batch 1,320  of  2,294.    Elapsed: 0:11:20.\n",
            "  Batch 1,360  of  2,294.    Elapsed: 0:11:40.\n",
            "  Batch 1,400  of  2,294.    Elapsed: 0:12:01.\n",
            "  Batch 1,440  of  2,294.    Elapsed: 0:12:22.\n",
            "  Batch 1,480  of  2,294.    Elapsed: 0:12:42.\n",
            "  Batch 1,520  of  2,294.    Elapsed: 0:13:03.\n",
            "  Batch 1,560  of  2,294.    Elapsed: 0:13:23.\n",
            "  Batch 1,600  of  2,294.    Elapsed: 0:13:44.\n",
            "  Batch 1,640  of  2,294.    Elapsed: 0:14:04.\n",
            "  Batch 1,680  of  2,294.    Elapsed: 0:14:25.\n",
            "  Batch 1,720  of  2,294.    Elapsed: 0:14:45.\n",
            "  Batch 1,760  of  2,294.    Elapsed: 0:15:06.\n",
            "  Batch 1,800  of  2,294.    Elapsed: 0:15:27.\n",
            "  Batch 1,840  of  2,294.    Elapsed: 0:15:47.\n",
            "  Batch 1,880  of  2,294.    Elapsed: 0:16:08.\n",
            "  Batch 1,920  of  2,294.    Elapsed: 0:16:28.\n",
            "  Batch 1,960  of  2,294.    Elapsed: 0:16:49.\n",
            "  Batch 2,000  of  2,294.    Elapsed: 0:17:10.\n",
            "  Batch 2,040  of  2,294.    Elapsed: 0:17:30.\n",
            "  Batch 2,080  of  2,294.    Elapsed: 0:17:51.\n",
            "  Batch 2,120  of  2,294.    Elapsed: 0:18:11.\n",
            "  Batch 2,160  of  2,294.    Elapsed: 0:18:32.\n",
            "  Batch 2,200  of  2,294.    Elapsed: 0:18:53.\n",
            "  Batch 2,240  of  2,294.    Elapsed: 0:19:13.\n",
            "  Batch 2,280  of  2,294.    Elapsed: 0:19:34.\n",
            "\n",
            "  Average training loss: 0.52\n",
            "  Training epcoh took: 0:19:41\n",
            "\n",
            "Running Validation...\n",
            "  Accuracy: 0.76\n",
            "  Validation Loss: 0.58\n",
            "  Validation took: 0:00:38\n",
            "\n",
            "Training complete!\n",
            "Total training took 0:40:38 (h:mm:ss)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I1ePSJI5wmkZ"
      },
      "source": [
        "## Visualizing and Analysing Results"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 137
        },
        "id": "m6pdA6tZwmkZ",
        "outputId": "f7b8ce6f-929a-4305-85cd-a6de408e597e"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Display floats with two decimal places.\n",
        "pd.set_option('precision', 2)\n",
        "\n",
        "# Create a DataFrame from our training statistics.\n",
        "df_stats_multi = pd.DataFrame(data=training_stats_multi)\n",
        "\n",
        "# Use the 'epoch' as the row index.\n",
        "df_stats_multi = df_stats_multi.set_index('epoch')\n",
        "\n",
        "# A hack to force the column headers to wrap.\n",
        "#df = df.style.set_table_styles([dict(selector=\"th\",props=[('max-width', '70px')])])\n",
        "\n",
        "# Display the table.\n",
        "df_stats_multi"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Training Loss</th>\n",
              "      <th>Valid. Loss</th>\n",
              "      <th>Valid. Accur.</th>\n",
              "      <th>Training Time</th>\n",
              "      <th>Validation Time</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>epoch</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.68</td>\n",
              "      <td>0.59</td>\n",
              "      <td>0.75</td>\n",
              "      <td>0:19:41</td>\n",
              "      <td>0:00:38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.52</td>\n",
              "      <td>0.58</td>\n",
              "      <td>0.76</td>\n",
              "      <td>0:19:41</td>\n",
              "      <td>0:00:38</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Training Loss  Valid. Loss  Valid. Accur. Training Time Validation Time\n",
              "epoch                                                                         \n",
              "1               0.68         0.59           0.75       0:19:41         0:00:38\n",
              "2               0.52         0.58           0.76       0:19:41         0:00:38"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RMPodX_pwmka"
      },
      "source": [
        "## Testing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NHSmgnknwmka",
        "outputId": "5ead6a1f-c726-47a7-f0cb-ad26e22ce3a3"
      },
      "source": [
        "# Prediction on test set\n",
        "\n",
        "print('Predicting labels for {:,} test sentences...'.format(len(test_dataset_multi)))\n",
        "\n",
        "# Put model in evaluation mode\n",
        "model_multi.eval()\n",
        "\n",
        "# Tracking variables \n",
        "predictions_multi , true_labels_multi = [], []\n",
        "\n",
        "# Predict \n",
        "for batch in test_dataloader_multi:\n",
        "  # Add batch to GPU\n",
        "  batch = tuple(t.to(device) for t in batch)\n",
        "  \n",
        "  # Unpack the inputs from our dataloader\n",
        "  b_input_ids, b_input_mask, b_labels = batch\n",
        "  \n",
        "  # Telling the model not to compute or store gradients, saving memory and \n",
        "  # speeding up prediction\n",
        "  with torch.no_grad():\n",
        "      # Forward pass, calculate logit predictions\n",
        "      outputs = model_multi(b_input_ids, token_type_ids=None, \n",
        "                      attention_mask=b_input_mask)\n",
        "\n",
        "  logits = outputs[0]\n",
        "\n",
        "  # Move logits and labels to CPU\n",
        "  logits = logits.detach().cpu().numpy()\n",
        "  label_ids = b_labels.to('cpu').numpy()\n",
        "  \n",
        "  # Store predictions and true labels\n",
        "  predictions_multi.append(logits)\n",
        "  true_labels_multi.append(label_ids)\n",
        "\n",
        "print('    DONE.')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Predicting labels for 10,194 test sentences...\n",
            "    DONE.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wkgSJf9dwmkb",
        "outputId": "24d327a7-3b11-411b-9204-ef6bdae6c5a6"
      },
      "source": [
        "from sklearn.metrics import matthews_corrcoef, balanced_accuracy_score\n",
        "import numpy as np\n",
        "\n",
        "balanced_acc_set = []\n",
        "global_prediction_multi = []\n",
        "\n",
        "# Evaluate each test batch using Matthew's correlation coefficient\n",
        "print('Estimating Balanced_accuracy_score for each batch...')\n",
        "\n",
        "# For each input batch...\n",
        "for i in range(len(true_labels_multi)):\n",
        "  \n",
        "  # The predictions for this batch are a 5-column ndarray (from \"0\" (1 Star) \n",
        "  # to \"4\" (5 Stars)). Pick the label with the highest value and turn this\n",
        "  # in to a list.\n",
        "  pred_labels_i = np.argmax(predictions_multi[i], axis=1).flatten()\n",
        "  global_prediction_multi.append(pred_labels_i)\n",
        "  \n",
        "  # Calculate and store the coef for this batch.  \n",
        "  balanced_acc = balanced_accuracy_score(true_labels_multi[i], pred_labels_i)                \n",
        "  balanced_acc_set.append(balanced_acc)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Estimating Balanced_accuracy_score for each batch...\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1859: UserWarning: y_pred contains classes not in y_true\n",
            "  warnings.warn('y_pred contains classes not in y_true')\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mBASx1fjwmkb"
      },
      "source": [
        "flat_list_multi = [item for sublist in global_prediction_multi for item in sublist]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "5YRXPCoCwmkb",
        "outputId": "9b30f7ed-caed-427b-b885-d83128f8c935"
      },
      "source": [
        "# Distribution of Predictions\n",
        "plt.hist(flat_list_multi)\n",
        "plt.title('Prediction Labels')\n",
        "plt.ylabel('Predictions')\n",
        "plt.xlabel('Labels')\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AyziyPkGwmkb",
        "outputId": "6d4ca4fa-068c-4025-e263-ed8fb86abf53"
      },
      "source": [
        "# Combine the results across all batches. \n",
        "flat_predictions = np.concatenate(predictions_multi, axis=0)\n",
        "\n",
        "# For each sample, pick the label (0 to 4) with the higher score.\n",
        "flat_predictions = np.argmax(flat_predictions, axis=1).flatten()\n",
        "\n",
        "# Combine the correct labels for each batch into a single list.\n",
        "flat_true_labels_multi = np.concatenate(true_labels_multi, axis=0)\n",
        "\n",
        "# Calculate the MCC\n",
        "acc = balanced_accuracy_score(flat_true_labels_multi, flat_predictions)\n",
        "\n",
        "print('Total balanced_acc_set: %.3f' % acc)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total balanced_acc_set: 0.752\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "eU0BpwMfwmkc",
        "outputId": "c23e9261-1776-453a-f91d-e5ad80d4e2d4"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "cm = confusion_matrix(flat_predictions, flat_true_labels_multi)\n",
        "sns.heatmap(cm, square=True, annot=True, cmap='RdBu', cbar=True, fmt='d')\n",
        "plt.xlabel('true label')\n",
        "plt.ylabel('predicted label')\n",
        "\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
        "print('Accuracy score: ', accuracy_score(flat_predictions, flat_true_labels_multi))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy score:  0.7585834804787129\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2B1XqwzZwmkc",
        "outputId": "62d5a1f0-46f3-4bc3-9e02-e81b9486be3e"
      },
      "source": [
        "columns = [\"1\", \"2\", \"3\"]\n",
        "rows = [\"1\", \"2\", \"3\"]\n",
        "cm_multi_3 = pd.DataFrame(data=cm, index=rows, columns=columns)\n",
        "print(cm_multi_3)\n",
        "cm_multi_3.to_csv('confusion_matrix_multi_3.csv')\n",
        "!cp confusion_matrix_multi_3.csv \"drive/My Drive/Colab_Machine_Learning/Gespeicherte Modelle/Confusion_Matrices/\""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      1     2     3\n",
            "1  2790   711   119\n",
            "2   719  1881   386\n",
            "3   120   406  3062\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6iqICWIGwmkd"
      },
      "source": [
        "## Saving Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ARPp02PLwmkd",
        "outputId": "1a69612c-0310-49d4-c1a3-257d60e60f93"
      },
      "source": [
        "import os\n",
        "\n",
        "# Saving best-practices: if you use defaults names for the model, you can reload it using from_pretrained()\n",
        "\n",
        "output_dir = './model_save_multilingual_3/'\n",
        "\n",
        "# Create output directory if needed\n",
        "if not os.path.exists(output_dir):\n",
        "    os.makedirs(output_dir)\n",
        "\n",
        "print(\"Saving model to %s\" % output_dir)\n",
        "\n",
        "# Save a trained model, configuration and tokenizer using `save_pretrained()`.\n",
        "# They can then be reloaded using `from_pretrained()`\n",
        "model_to_save = model_mono.module if hasattr(model_mono, 'module') else model_mono  # Take care of distributed/parallel training\n",
        "model_to_save.save_pretrained(output_dir)\n",
        "tokenizer_mono.save_pretrained(output_dir)\n",
        "\n",
        "# Good practice: save your training arguments together with the trained model\n",
        "# torch.save(args, os.path.join(output_dir, 'training_args.bin'))\n",
        "\n",
        "!cp -r ./model_save_multilingual_3/ \"drive/MyDrive/Colab_Machine_Learning/Gespeicherte Modelle/multilingual_3\""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Saving model to ./model_save_multilingual_3/\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "10B4uO5geOiw"
      },
      "source": [
        "# Backup"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5rdvkudlbUTj"
      },
      "source": [
        "## Saving Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LWXG-QxpbUTj",
        "outputId": "02ee31d8-375e-4747-a6f2-91d1217ca098"
      },
      "source": [
        "import os\n",
        "\n",
        "# Saving best-practices: if you use defaults names for the model, you can reload it using from_pretrained()\n",
        "\n",
        "output_dir = './model_save_multilingual/'\n",
        "\n",
        "# Create output directory if needed\n",
        "if not os.path.exists(output_dir):\n",
        "    os.makedirs(output_dir)\n",
        "\n",
        "print(\"Saving model to %s\" % output_dir)\n",
        "\n",
        "# Save a trained model, configuration and tokenizer using `save_pretrained()`.\n",
        "# They can then be reloaded using `from_pretrained()`\n",
        "model_to_save = model.module if hasattr(model, 'module') else model  # Take care of distributed/parallel training\n",
        "model_to_save.save_pretrained(output_dir)\n",
        "tokenizer.save_pretrained(output_dir)\n",
        "\n",
        "# Good practice: save your training arguments together with the trained model\n",
        "# torch.save(args, os.path.join(output_dir, 'training_args.bin'))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Saving model to ./model_save_monolingual/\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('./model_save_monolingual/tokenizer_config.json',\n",
              " './model_save_monolingual/special_tokens_map.json',\n",
              " './model_save_monolingual/vocab.txt',\n",
              " './model_save_monolingual/added_tokens.json')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C_fRwYlEbUTj",
        "outputId": "392fdcb0-8dfb-4c47-fda9-43fc31c6ded1"
      },
      "source": [
        "!ls"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "drive  model_save  model_save_monolingual  sample_data\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "awOk61BMbUTj"
      },
      "source": [
        "!cp -r ./model_save_monolingual/ \"drive/MyDrive/Colab_Machine_Learning/Gespeicherte Modelle\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uk2TJHnhJYcZ"
      },
      "source": [
        "import seaborn as sns\n",
        "import matplotlib as plt\n",
        "sns.distplot(token_lens)\n",
        "plt.xlim([0, 512]);\n",
        "plt.xlabel('Token count');"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ku8APon4JYcZ"
      },
      "source": [
        "train_df, test_df = train_test_split(df_Corona, test_size=0.10)\n",
        " \n",
        "print('train shape: ',train_df.shape)\n",
        "print('test shape: ',test_df.shape)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qz4b0GM-eWuI"
      },
      "source": [
        "## Scraping Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "27oSRRZpJYcS"
      },
      "source": [
        "result = reviews_all(\n",
        "    'de.rki.coronawarnapp',\n",
        "    sleep_milliseconds=0, # defaults to 0\n",
        "    country='de', # defaults to 'us'\n",
        "    lang='de', # defaults to 'en'\n",
        "    sort=Sort.NEWEST, # defaults to Sort.MOST_RELEVANT\n",
        "    filter_score_with=None # defaults to None(means all score)\n",
        "\n",
        ")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ueiZrpr_JYcS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 876
        },
        "outputId": "65cd13e2-f001-4f2d-85f3-1e910ecba96d"
      },
      "source": [
        "df_Corona.sort_values(by=['date'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>reviewId</th>\n",
              "      <th>userName</th>\n",
              "      <th>userImage</th>\n",
              "      <th>content</th>\n",
              "      <th>score</th>\n",
              "      <th>thumbsUpCount</th>\n",
              "      <th>reviewCreatedVersion</th>\n",
              "      <th>at</th>\n",
              "      <th>replyContent</th>\n",
              "      <th>repliedAt</th>\n",
              "      <th>adjusted</th>\n",
              "      <th>date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>47658</th>\n",
              "      <td>47658</td>\n",
              "      <td>gp:AOqpTOGMkuoJdrPmJKK20bihNNMC30_wKkZFTrjKCwY...</td>\n",
              "      <td>Johannes BÃ¼chs</td>\n",
              "      <td>https://play-lh.googleusercontent.com/a-/AOh14...</td>\n",
              "      <td>Gut gelungen!</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0.0</td>\n",
              "      <td>2020-06-16 12:46:37</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>2020-06-16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49233</th>\n",
              "      <td>49233</td>\n",
              "      <td>gp:AOqpTOHwC_rELzkzbW9_5gFh0GHampVJrkYlHfBvZxR...</td>\n",
              "      <td>Amanda Seidel</td>\n",
              "      <td>https://play-lh.googleusercontent.com/-UToMBZd...</td>\n",
              "      <td>Bewertungen,App-infos,Datenschutz durch gelese...</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2020-06-16 09:36:19</td>\n",
              "      <td>Die App ist auch auf Englisch verfÃ¼gbar. Kamer...</td>\n",
              "      <td>2020-06-17 19:43:04</td>\n",
              "      <td>1</td>\n",
              "      <td>2020-06-16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47806</th>\n",
              "      <td>47806</td>\n",
              "      <td>gp:AOqpTOGMDff8sZueVheRSd3ldMU0AHr8xpoRRdxFaIL...</td>\n",
              "      <td>Markus TeÃŸmer</td>\n",
              "      <td>https://play-lh.googleusercontent.com/-kCUGHEI...</td>\n",
              "      <td>Gesundheit geht vor, klasse Projekt! Auch wied...</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0.0</td>\n",
              "      <td>2020-06-16 12:23:47</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>2020-06-16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49179</th>\n",
              "      <td>49179</td>\n",
              "      <td>gp:AOqpTOFmsYXTnSlAaW5h5z8liWKy3LTBu_X2GM7Wxae...</td>\n",
              "      <td>Hannes Keller</td>\n",
              "      <td>https://play-lh.googleusercontent.com/-aQWJqpD...</td>\n",
              "      <td>Must have!</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0.0</td>\n",
              "      <td>2020-06-16 09:42:39</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>2020-06-16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48357</th>\n",
              "      <td>48357</td>\n",
              "      <td>gp:AOqpTOFAE2nGhQiHV7ucx3YEVDY8kAEJ5RDdk-mA-A2...</td>\n",
              "      <td>Elmar Grimm</td>\n",
              "      <td>https://play-lh.googleusercontent.com/-9q2HOBE...</td>\n",
              "      <td>Super gemacht danke an die Regierung ich helfe...</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0.0</td>\n",
              "      <td>2020-06-16 11:29:45</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>2020-06-16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>36</td>\n",
              "      <td>gp:AOqpTOEPdRHqcYNlwC8O1Qh_MTAQ17y4j7-5oIJ_YFF...</td>\n",
              "      <td>Sven Heinze</td>\n",
              "      <td>https://play-lh.googleusercontent.com/-CdGTKKz...</td>\n",
              "      <td>FÃ¼r mich leider absolut unbrauchbar solange ic...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.12.0</td>\n",
              "      <td>2021-03-05 07:17:04</td>\n",
              "      <td>Danke fÃ¼r Ihr Feedback. Ort und Uhrzeit werden...</td>\n",
              "      <td>2021-03-05 08:33:43</td>\n",
              "      <td>1</td>\n",
              "      <td>2021-03-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>46</td>\n",
              "      <td>gp:AOqpTOGxCGnqW09GMKvBJiYpgpHmG_2zxlwoveXbUyf...</td>\n",
              "      <td>Mika C.</td>\n",
              "      <td>https://play-lh.googleusercontent.com/-Sg8w3zN...</td>\n",
              "      <td>Ich finde ein wichtiges feature fehlt, die Ris...</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>1.0.0</td>\n",
              "      <td>2021-03-05 02:16:04</td>\n",
              "      <td>Vielen Dank fÃ¼r Ihren Verbesserungsvorschlag. ...</td>\n",
              "      <td>2021-03-05 10:15:56</td>\n",
              "      <td>2</td>\n",
              "      <td>2021-03-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>gp:AOqpTOHaeFd-CgUQlF0fjLqIJKrV_fEnUFR_MIo2p_e...</td>\n",
              "      <td>Patryk Pastyranak</td>\n",
              "      <td>https://play-lh.googleusercontent.com/-GdziX_8...</td>\n",
              "      <td>Seit gestern wissen wir die Testergebnisse sch...</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1.12.0</td>\n",
              "      <td>2021-03-05 13:35:44</td>\n",
              "      <td>Danke fÃ¼r Ihr Feedback. Um die Labore lÃ¼ckenlo...</td>\n",
              "      <td>2021-03-05 13:54:20</td>\n",
              "      <td>2</td>\n",
              "      <td>2021-03-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>43</td>\n",
              "      <td>gp:AOqpTOF41e-ZM45xbQNLvcDOqmUS7xNdAlB34YZ5VnH...</td>\n",
              "      <td>Flinkie</td>\n",
              "      <td>https://play-lh.googleusercontent.com/-BLgAb_G...</td>\n",
              "      <td>Totale Ãœberwachung wird in DE eingefÃ¼hrt. Dazu...</td>\n",
              "      <td>1</td>\n",
              "      <td>83</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-03-05 06:01:35</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2021-03-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>33</td>\n",
              "      <td>gp:AOqpTOHjBOWFvoBDxi1HPQoUCQq3WpEukTx4kDz0FPC...</td>\n",
              "      <td>Stefan Frey</td>\n",
              "      <td>https://play-lh.googleusercontent.com/a-/AOh14...</td>\n",
              "      <td>Unterirdisch, Geld unnÃ¶tig vergraben. Hier spi...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-03-05 08:00:03</td>\n",
              "      <td>Dieser Kanal steht Ihnen jederzeit fÃ¼r Ihre Fr...</td>\n",
              "      <td>2021-03-05 08:54:53</td>\n",
              "      <td>1</td>\n",
              "      <td>2021-03-05</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>50966 rows Ã— 13 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       Unnamed: 0  ...        date\n",
              "47658       47658  ...  2020-06-16\n",
              "49233       49233  ...  2020-06-16\n",
              "47806       47806  ...  2020-06-16\n",
              "49179       49179  ...  2020-06-16\n",
              "48357       48357  ...  2020-06-16\n",
              "...           ...  ...         ...\n",
              "36             36  ...  2021-03-05\n",
              "46             46  ...  2021-03-05\n",
              "4               4  ...  2021-03-05\n",
              "43             43  ...  2021-03-05\n",
              "33             33  ...  2021-03-05\n",
              "\n",
              "[50966 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SixJYr94GiQ7"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}